
MCU_Board_BGA_BLDC_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014a70  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  08014d40  08014d40  00024d40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080152f8  080152f8  000252f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015300  08015300  00025300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015304  08015304  00025304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d8  24000000  08015308  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000d74  240001d8  080154e0  000301d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000f4c  080154e0  00030f4c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00030206  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002814c  00000000  00000000  00030249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004208  00000000  00000000  00058395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000020e8  00000000  00000000  0005c5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000019a7  00000000  00000000  0005e688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003c406  00000000  00000000  0006002f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00029bef  00000000  00000000  0009c435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018bef2  00000000  00000000  000c6024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000a4b8  00000000  00000000  00251f18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000009f  00000000  00000000  0025c3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001d8 	.word	0x240001d8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08014d28 	.word	0x08014d28

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001dc 	.word	0x240001dc
 800030c:	08014d28 	.word	0x08014d28

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	; 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a8 	b.w	8000aa0 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9e08      	ldr	r6, [sp, #32]
 80007de:	460d      	mov	r5, r1
 80007e0:	4604      	mov	r4, r0
 80007e2:	460f      	mov	r7, r1
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d14a      	bne.n	800087e <__udivmoddi4+0xa6>
 80007e8:	428a      	cmp	r2, r1
 80007ea:	4694      	mov	ip, r2
 80007ec:	d965      	bls.n	80008ba <__udivmoddi4+0xe2>
 80007ee:	fab2 f382 	clz	r3, r2
 80007f2:	b143      	cbz	r3, 8000806 <__udivmoddi4+0x2e>
 80007f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007f8:	f1c3 0220 	rsb	r2, r3, #32
 80007fc:	409f      	lsls	r7, r3
 80007fe:	fa20 f202 	lsr.w	r2, r0, r2
 8000802:	4317      	orrs	r7, r2
 8000804:	409c      	lsls	r4, r3
 8000806:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800080a:	fa1f f58c 	uxth.w	r5, ip
 800080e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000812:	0c22      	lsrs	r2, r4, #16
 8000814:	fb0e 7711 	mls	r7, lr, r1, r7
 8000818:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800081c:	fb01 f005 	mul.w	r0, r1, r5
 8000820:	4290      	cmp	r0, r2
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x62>
 8000824:	eb1c 0202 	adds.w	r2, ip, r2
 8000828:	f101 37ff 	add.w	r7, r1, #4294967295
 800082c:	f080 811c 	bcs.w	8000a68 <__udivmoddi4+0x290>
 8000830:	4290      	cmp	r0, r2
 8000832:	f240 8119 	bls.w	8000a68 <__udivmoddi4+0x290>
 8000836:	3902      	subs	r1, #2
 8000838:	4462      	add	r2, ip
 800083a:	1a12      	subs	r2, r2, r0
 800083c:	b2a4      	uxth	r4, r4
 800083e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000842:	fb0e 2210 	mls	r2, lr, r0, r2
 8000846:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800084a:	fb00 f505 	mul.w	r5, r0, r5
 800084e:	42a5      	cmp	r5, r4
 8000850:	d90a      	bls.n	8000868 <__udivmoddi4+0x90>
 8000852:	eb1c 0404 	adds.w	r4, ip, r4
 8000856:	f100 32ff 	add.w	r2, r0, #4294967295
 800085a:	f080 8107 	bcs.w	8000a6c <__udivmoddi4+0x294>
 800085e:	42a5      	cmp	r5, r4
 8000860:	f240 8104 	bls.w	8000a6c <__udivmoddi4+0x294>
 8000864:	4464      	add	r4, ip
 8000866:	3802      	subs	r0, #2
 8000868:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800086c:	1b64      	subs	r4, r4, r5
 800086e:	2100      	movs	r1, #0
 8000870:	b11e      	cbz	r6, 800087a <__udivmoddi4+0xa2>
 8000872:	40dc      	lsrs	r4, r3
 8000874:	2300      	movs	r3, #0
 8000876:	e9c6 4300 	strd	r4, r3, [r6]
 800087a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800087e:	428b      	cmp	r3, r1
 8000880:	d908      	bls.n	8000894 <__udivmoddi4+0xbc>
 8000882:	2e00      	cmp	r6, #0
 8000884:	f000 80ed 	beq.w	8000a62 <__udivmoddi4+0x28a>
 8000888:	2100      	movs	r1, #0
 800088a:	e9c6 0500 	strd	r0, r5, [r6]
 800088e:	4608      	mov	r0, r1
 8000890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000894:	fab3 f183 	clz	r1, r3
 8000898:	2900      	cmp	r1, #0
 800089a:	d149      	bne.n	8000930 <__udivmoddi4+0x158>
 800089c:	42ab      	cmp	r3, r5
 800089e:	d302      	bcc.n	80008a6 <__udivmoddi4+0xce>
 80008a0:	4282      	cmp	r2, r0
 80008a2:	f200 80f8 	bhi.w	8000a96 <__udivmoddi4+0x2be>
 80008a6:	1a84      	subs	r4, r0, r2
 80008a8:	eb65 0203 	sbc.w	r2, r5, r3
 80008ac:	2001      	movs	r0, #1
 80008ae:	4617      	mov	r7, r2
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d0e2      	beq.n	800087a <__udivmoddi4+0xa2>
 80008b4:	e9c6 4700 	strd	r4, r7, [r6]
 80008b8:	e7df      	b.n	800087a <__udivmoddi4+0xa2>
 80008ba:	b902      	cbnz	r2, 80008be <__udivmoddi4+0xe6>
 80008bc:	deff      	udf	#255	; 0xff
 80008be:	fab2 f382 	clz	r3, r2
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	f040 8090 	bne.w	80009e8 <__udivmoddi4+0x210>
 80008c8:	1a8a      	subs	r2, r1, r2
 80008ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ce:	fa1f fe8c 	uxth.w	lr, ip
 80008d2:	2101      	movs	r1, #1
 80008d4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008d8:	fb07 2015 	mls	r0, r7, r5, r2
 80008dc:	0c22      	lsrs	r2, r4, #16
 80008de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008e2:	fb0e f005 	mul.w	r0, lr, r5
 80008e6:	4290      	cmp	r0, r2
 80008e8:	d908      	bls.n	80008fc <__udivmoddi4+0x124>
 80008ea:	eb1c 0202 	adds.w	r2, ip, r2
 80008ee:	f105 38ff 	add.w	r8, r5, #4294967295
 80008f2:	d202      	bcs.n	80008fa <__udivmoddi4+0x122>
 80008f4:	4290      	cmp	r0, r2
 80008f6:	f200 80cb 	bhi.w	8000a90 <__udivmoddi4+0x2b8>
 80008fa:	4645      	mov	r5, r8
 80008fc:	1a12      	subs	r2, r2, r0
 80008fe:	b2a4      	uxth	r4, r4
 8000900:	fbb2 f0f7 	udiv	r0, r2, r7
 8000904:	fb07 2210 	mls	r2, r7, r0, r2
 8000908:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800090c:	fb0e fe00 	mul.w	lr, lr, r0
 8000910:	45a6      	cmp	lr, r4
 8000912:	d908      	bls.n	8000926 <__udivmoddi4+0x14e>
 8000914:	eb1c 0404 	adds.w	r4, ip, r4
 8000918:	f100 32ff 	add.w	r2, r0, #4294967295
 800091c:	d202      	bcs.n	8000924 <__udivmoddi4+0x14c>
 800091e:	45a6      	cmp	lr, r4
 8000920:	f200 80bb 	bhi.w	8000a9a <__udivmoddi4+0x2c2>
 8000924:	4610      	mov	r0, r2
 8000926:	eba4 040e 	sub.w	r4, r4, lr
 800092a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800092e:	e79f      	b.n	8000870 <__udivmoddi4+0x98>
 8000930:	f1c1 0720 	rsb	r7, r1, #32
 8000934:	408b      	lsls	r3, r1
 8000936:	fa22 fc07 	lsr.w	ip, r2, r7
 800093a:	ea4c 0c03 	orr.w	ip, ip, r3
 800093e:	fa05 f401 	lsl.w	r4, r5, r1
 8000942:	fa20 f307 	lsr.w	r3, r0, r7
 8000946:	40fd      	lsrs	r5, r7
 8000948:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800094c:	4323      	orrs	r3, r4
 800094e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000952:	fa1f fe8c 	uxth.w	lr, ip
 8000956:	fb09 5518 	mls	r5, r9, r8, r5
 800095a:	0c1c      	lsrs	r4, r3, #16
 800095c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000960:	fb08 f50e 	mul.w	r5, r8, lr
 8000964:	42a5      	cmp	r5, r4
 8000966:	fa02 f201 	lsl.w	r2, r2, r1
 800096a:	fa00 f001 	lsl.w	r0, r0, r1
 800096e:	d90b      	bls.n	8000988 <__udivmoddi4+0x1b0>
 8000970:	eb1c 0404 	adds.w	r4, ip, r4
 8000974:	f108 3aff 	add.w	sl, r8, #4294967295
 8000978:	f080 8088 	bcs.w	8000a8c <__udivmoddi4+0x2b4>
 800097c:	42a5      	cmp	r5, r4
 800097e:	f240 8085 	bls.w	8000a8c <__udivmoddi4+0x2b4>
 8000982:	f1a8 0802 	sub.w	r8, r8, #2
 8000986:	4464      	add	r4, ip
 8000988:	1b64      	subs	r4, r4, r5
 800098a:	b29d      	uxth	r5, r3
 800098c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000990:	fb09 4413 	mls	r4, r9, r3, r4
 8000994:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000998:	fb03 fe0e 	mul.w	lr, r3, lr
 800099c:	45a6      	cmp	lr, r4
 800099e:	d908      	bls.n	80009b2 <__udivmoddi4+0x1da>
 80009a0:	eb1c 0404 	adds.w	r4, ip, r4
 80009a4:	f103 35ff 	add.w	r5, r3, #4294967295
 80009a8:	d26c      	bcs.n	8000a84 <__udivmoddi4+0x2ac>
 80009aa:	45a6      	cmp	lr, r4
 80009ac:	d96a      	bls.n	8000a84 <__udivmoddi4+0x2ac>
 80009ae:	3b02      	subs	r3, #2
 80009b0:	4464      	add	r4, ip
 80009b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009b6:	fba3 9502 	umull	r9, r5, r3, r2
 80009ba:	eba4 040e 	sub.w	r4, r4, lr
 80009be:	42ac      	cmp	r4, r5
 80009c0:	46c8      	mov	r8, r9
 80009c2:	46ae      	mov	lr, r5
 80009c4:	d356      	bcc.n	8000a74 <__udivmoddi4+0x29c>
 80009c6:	d053      	beq.n	8000a70 <__udivmoddi4+0x298>
 80009c8:	b156      	cbz	r6, 80009e0 <__udivmoddi4+0x208>
 80009ca:	ebb0 0208 	subs.w	r2, r0, r8
 80009ce:	eb64 040e 	sbc.w	r4, r4, lr
 80009d2:	fa04 f707 	lsl.w	r7, r4, r7
 80009d6:	40ca      	lsrs	r2, r1
 80009d8:	40cc      	lsrs	r4, r1
 80009da:	4317      	orrs	r7, r2
 80009dc:	e9c6 7400 	strd	r7, r4, [r6]
 80009e0:	4618      	mov	r0, r3
 80009e2:	2100      	movs	r1, #0
 80009e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e8:	f1c3 0120 	rsb	r1, r3, #32
 80009ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80009f0:	fa20 f201 	lsr.w	r2, r0, r1
 80009f4:	fa25 f101 	lsr.w	r1, r5, r1
 80009f8:	409d      	lsls	r5, r3
 80009fa:	432a      	orrs	r2, r5
 80009fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a00:	fa1f fe8c 	uxth.w	lr, ip
 8000a04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a08:	fb07 1510 	mls	r5, r7, r0, r1
 8000a0c:	0c11      	lsrs	r1, r2, #16
 8000a0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a12:	fb00 f50e 	mul.w	r5, r0, lr
 8000a16:	428d      	cmp	r5, r1
 8000a18:	fa04 f403 	lsl.w	r4, r4, r3
 8000a1c:	d908      	bls.n	8000a30 <__udivmoddi4+0x258>
 8000a1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a26:	d22f      	bcs.n	8000a88 <__udivmoddi4+0x2b0>
 8000a28:	428d      	cmp	r5, r1
 8000a2a:	d92d      	bls.n	8000a88 <__udivmoddi4+0x2b0>
 8000a2c:	3802      	subs	r0, #2
 8000a2e:	4461      	add	r1, ip
 8000a30:	1b49      	subs	r1, r1, r5
 8000a32:	b292      	uxth	r2, r2
 8000a34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a38:	fb07 1115 	mls	r1, r7, r5, r1
 8000a3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a40:	fb05 f10e 	mul.w	r1, r5, lr
 8000a44:	4291      	cmp	r1, r2
 8000a46:	d908      	bls.n	8000a5a <__udivmoddi4+0x282>
 8000a48:	eb1c 0202 	adds.w	r2, ip, r2
 8000a4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a50:	d216      	bcs.n	8000a80 <__udivmoddi4+0x2a8>
 8000a52:	4291      	cmp	r1, r2
 8000a54:	d914      	bls.n	8000a80 <__udivmoddi4+0x2a8>
 8000a56:	3d02      	subs	r5, #2
 8000a58:	4462      	add	r2, ip
 8000a5a:	1a52      	subs	r2, r2, r1
 8000a5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a60:	e738      	b.n	80008d4 <__udivmoddi4+0xfc>
 8000a62:	4631      	mov	r1, r6
 8000a64:	4630      	mov	r0, r6
 8000a66:	e708      	b.n	800087a <__udivmoddi4+0xa2>
 8000a68:	4639      	mov	r1, r7
 8000a6a:	e6e6      	b.n	800083a <__udivmoddi4+0x62>
 8000a6c:	4610      	mov	r0, r2
 8000a6e:	e6fb      	b.n	8000868 <__udivmoddi4+0x90>
 8000a70:	4548      	cmp	r0, r9
 8000a72:	d2a9      	bcs.n	80009c8 <__udivmoddi4+0x1f0>
 8000a74:	ebb9 0802 	subs.w	r8, r9, r2
 8000a78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	e7a3      	b.n	80009c8 <__udivmoddi4+0x1f0>
 8000a80:	4645      	mov	r5, r8
 8000a82:	e7ea      	b.n	8000a5a <__udivmoddi4+0x282>
 8000a84:	462b      	mov	r3, r5
 8000a86:	e794      	b.n	80009b2 <__udivmoddi4+0x1da>
 8000a88:	4640      	mov	r0, r8
 8000a8a:	e7d1      	b.n	8000a30 <__udivmoddi4+0x258>
 8000a8c:	46d0      	mov	r8, sl
 8000a8e:	e77b      	b.n	8000988 <__udivmoddi4+0x1b0>
 8000a90:	3d02      	subs	r5, #2
 8000a92:	4462      	add	r2, ip
 8000a94:	e732      	b.n	80008fc <__udivmoddi4+0x124>
 8000a96:	4608      	mov	r0, r1
 8000a98:	e70a      	b.n	80008b0 <__udivmoddi4+0xd8>
 8000a9a:	4464      	add	r4, ip
 8000a9c:	3802      	subs	r0, #2
 8000a9e:	e742      	b.n	8000926 <__udivmoddi4+0x14e>

08000aa0 <__aeabi_idiv0>:
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aaa:	f002 faef 	bl	800308c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aae:	f000 f9d7 	bl	8000e60 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ab2:	f000 fa43 	bl	8000f3c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab6:	f001 f89b 	bl	8001bf0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000aba:	f001 f859 	bl	8001b70 <MX_DMA_Init>
  MX_CORDIC_Init();
 8000abe:	f000 fc51 	bl	8001364 <MX_CORDIC_Init>
  MX_DAC1_Init();
 8000ac2:	f000 fc69 	bl	8001398 <MX_DAC1_Init>
  MX_FDCAN1_Init();
 8000ac6:	f000 fcc3 	bl	8001450 <MX_FDCAN1_Init>
  MX_LPUART1_UART_Init();
 8000aca:	f000 fd25 	bl	8001518 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 8000ace:	f000 fd71 	bl	80015b4 <MX_UART4_Init>
  MX_SPI2_Init();
 8000ad2:	f000 fdbd 	bl	8001650 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000ad6:	f000 fe13 	bl	8001700 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000ada:	f000 fe69 	bl	80017b0 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000ade:	f000 ff47 	bl	8001970 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000ae2:	f000 ffbf 	bl	8001a64 <MX_TIM8_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000ae6:	f001 f811 	bl	8001b0c <MX_USB_OTG_HS_PCD_Init>
  MX_ADC1_Init();
 8000aea:	f000 fa57 	bl	8000f9c <MX_ADC1_Init>
  MX_ADC3_Init();
 8000aee:	f000 fb79 	bl	80011e4 <MX_ADC3_Init>
  MX_COMP1_Init();
 8000af2:	f000 fc09 	bl	8001308 <MX_COMP1_Init>
  MX_ADC2_Init();
 8000af6:	f000 faed 	bl	80010d4 <MX_ADC2_Init>
  MX_DTS_Init();
 8000afa:	f000 fc7f 	bl	80013fc <MX_DTS_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //Start USER LED
 8000afe:	2100      	movs	r1, #0
 8000b00:	48b9      	ldr	r0, [pc, #740]	; (8000de8 <main+0x344>)
 8000b02:	f00c fd0d 	bl	800d520 <HAL_TIM_PWM_Start>

  Driver_set_up();
 8000b06:	f001 f9d9 	bl	8001ebc <Driver_set_up>

  // calibrate the ADCs for better accuracy and start it w/ interrupt
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000b0a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000b0e:	2100      	movs	r1, #0
 8000b10:	48b6      	ldr	r0, [pc, #728]	; (8000dec <main+0x348>)
 8000b12:	f004 f963 	bl	8004ddc <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000b16:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	48b4      	ldr	r0, [pc, #720]	; (8000df0 <main+0x34c>)
 8000b1e:	f004 f95d 	bl	8004ddc <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000b22:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000b26:	2100      	movs	r1, #0
 8000b28:	48b2      	ldr	r0, [pc, #712]	; (8000df4 <main+0x350>)
 8000b2a:	f004 f957 	bl	8004ddc <HAL_ADCEx_Calibration_Start>
  //__HAL_ADC_ENABLE_IT(&hadc1, ADC_IT_EOS); // EOC (End of Conversion) Interrupt aktivieren

  //HAL_ADC_Start_IT(&hadc1);
  //HAL_ADC_Start_IT(&hadc2);

  HAL_ADC_Start_DMA(&hadc1, ADC1_result, 3);
 8000b2e:	2203      	movs	r2, #3
 8000b30:	49b1      	ldr	r1, [pc, #708]	; (8000df8 <main+0x354>)
 8000b32:	48ae      	ldr	r0, [pc, #696]	; (8000dec <main+0x348>)
 8000b34:	f003 f870 	bl	8003c18 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, ADC2_result, 3);
 8000b38:	2203      	movs	r2, #3
 8000b3a:	49b0      	ldr	r1, [pc, #704]	; (8000dfc <main+0x358>)
 8000b3c:	48ac      	ldr	r0, [pc, #688]	; (8000df0 <main+0x34c>)
 8000b3e:	f003 f86b 	bl	8003c18 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, ADC3_result, 3);
 8000b42:	2203      	movs	r2, #3
 8000b44:	49ae      	ldr	r1, [pc, #696]	; (8000e00 <main+0x35c>)
 8000b46:	48ab      	ldr	r0, [pc, #684]	; (8000df4 <main+0x350>)
 8000b48:	f003 f866 	bl	8003c18 <HAL_ADC_Start_DMA>

  //Starten der Motor PWM erzeugung
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //U-Positiv
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	48ad      	ldr	r0, [pc, #692]	; (8000e04 <main+0x360>)
 8000b50:	f00c fce6 	bl	800d520 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); //U-Negativ
 8000b54:	2100      	movs	r1, #0
 8000b56:	48ab      	ldr	r0, [pc, #684]	; (8000e04 <main+0x360>)
 8000b58:	f00d fd9c 	bl	800e694 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); //V-Positiv
 8000b5c:	2104      	movs	r1, #4
 8000b5e:	48a9      	ldr	r0, [pc, #676]	; (8000e04 <main+0x360>)
 8000b60:	f00c fcde 	bl	800d520 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2); //V-Negativ
 8000b64:	2104      	movs	r1, #4
 8000b66:	48a7      	ldr	r0, [pc, #668]	; (8000e04 <main+0x360>)
 8000b68:	f00d fd94 	bl	800e694 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); //W-Positiv
 8000b6c:	2108      	movs	r1, #8
 8000b6e:	48a5      	ldr	r0, [pc, #660]	; (8000e04 <main+0x360>)
 8000b70:	f00c fcd6 	bl	800d520 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); //W-Negativ
 8000b74:	2108      	movs	r1, #8
 8000b76:	48a3      	ldr	r0, [pc, #652]	; (8000e04 <main+0x360>)
 8000b78:	f00d fd8c 	bl	800e694 <HAL_TIMEx_PWMN_Start>

  //CCR Max value = 3999
  TIM1->CCR1 = 2000;
 8000b7c:	4ba2      	ldr	r3, [pc, #648]	; (8000e08 <main+0x364>)
 8000b7e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000b82:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 2000;
 8000b84:	4ba0      	ldr	r3, [pc, #640]	; (8000e08 <main+0x364>)
 8000b86:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000b8a:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 2000;
 8000b8c:	4b9e      	ldr	r3, [pc, #632]	; (8000e08 <main+0x364>)
 8000b8e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000b92:	63da      	str	r2, [r3, #60]	; 0x3c

  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_BREAK);
 8000b94:	4b9b      	ldr	r3, [pc, #620]	; (8000e04 <main+0x360>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	68da      	ldr	r2, [r3, #12]
 8000b9a:	4b9a      	ldr	r3, [pc, #616]	; (8000e04 <main+0x360>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ba2:	60da      	str	r2, [r3, #12]


  //Starten des digitalen Temperatursensors
  HAL_DTS_Start(&hdts);
 8000ba4:	4899      	ldr	r0, [pc, #612]	; (8000e0c <main+0x368>)
 8000ba6:	f007 f9ad 	bl	8007f04 <HAL_DTS_Start>

  static int32_t Temperature;

  HAL_Delay(1);
 8000baa:	2001      	movs	r0, #1
 8000bac:	f002 fb00 	bl	80031b0 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Gets the die Temperature and sends it over UART
	  HAL_DTS_GetTemperature(&hdts, &Temperature);
 8000bb0:	4997      	ldr	r1, [pc, #604]	; (8000e10 <main+0x36c>)
 8000bb2:	4896      	ldr	r0, [pc, #600]	; (8000e0c <main+0x368>)
 8000bb4:	f007 f9f3 	bl	8007f9e <HAL_DTS_GetTemperature>

	  debug_uart4_write_text("Der STM32H7 hat folgende Temperatur: ");
 8000bb8:	4896      	ldr	r0, [pc, #600]	; (8000e14 <main+0x370>)
 8000bba:	f001 f905 	bl	8001dc8 <debug_uart4_write_text>
	  debug_uart4_write_float((float)Temperature);
 8000bbe:	4b94      	ldr	r3, [pc, #592]	; (8000e10 <main+0x36c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	ee07 3a90 	vmov	s15, r3
 8000bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bca:	eeb0 0a67 	vmov.f32	s0, s15
 8000bce:	f001 f917 	bl	8001e00 <debug_uart4_write_float>
	  debug_uart4_write_text("°\n");
 8000bd2:	4891      	ldr	r0, [pc, #580]	; (8000e18 <main+0x374>)
 8000bd4:	f001 f8f8 	bl	8001dc8 <debug_uart4_write_text>

	  debug_uart4_write_text("Strom in Phase U: ");
 8000bd8:	4890      	ldr	r0, [pc, #576]	; (8000e1c <main+0x378>)
 8000bda:	f001 f8f5 	bl	8001dc8 <debug_uart4_write_text>
	  debug_uart4_write_float(ShuntVolts_to_Amps((float)ADC1_result[1] * Bit16_to_Volt));
 8000bde:	4b86      	ldr	r3, [pc, #536]	; (8000df8 <main+0x354>)
 8000be0:	885b      	ldrh	r3, [r3, #2]
 8000be2:	ee07 3a90 	vmov	s15, r3
 8000be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bea:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8000e20 <main+0x37c>
 8000bee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8000bf6:	f001 fa29 	bl	800204c <ShuntVolts_to_Amps>
 8000bfa:	eef0 7a40 	vmov.f32	s15, s0
 8000bfe:	eeb0 0a67 	vmov.f32	s0, s15
 8000c02:	f001 f8fd 	bl	8001e00 <debug_uart4_write_float>
	  debug_uart4_write_text("A; Phase V: ");
 8000c06:	4887      	ldr	r0, [pc, #540]	; (8000e24 <main+0x380>)
 8000c08:	f001 f8de 	bl	8001dc8 <debug_uart4_write_text>
	  debug_uart4_write_float(ShuntVolts_to_Amps((float)ADC1_result[0] * Bit16_to_Volt));
 8000c0c:	4b7a      	ldr	r3, [pc, #488]	; (8000df8 <main+0x354>)
 8000c0e:	881b      	ldrh	r3, [r3, #0]
 8000c10:	ee07 3a90 	vmov	s15, r3
 8000c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c18:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8000e20 <main+0x37c>
 8000c1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c20:	eeb0 0a67 	vmov.f32	s0, s15
 8000c24:	f001 fa12 	bl	800204c <ShuntVolts_to_Amps>
 8000c28:	eef0 7a40 	vmov.f32	s15, s0
 8000c2c:	eeb0 0a67 	vmov.f32	s0, s15
 8000c30:	f001 f8e6 	bl	8001e00 <debug_uart4_write_float>
	  debug_uart4_write_text("A; Phase W: ");
 8000c34:	487c      	ldr	r0, [pc, #496]	; (8000e28 <main+0x384>)
 8000c36:	f001 f8c7 	bl	8001dc8 <debug_uart4_write_text>
	  debug_uart4_write_float(ShuntVolts_to_Amps((float)ADC2_result[0] * Bit16_to_Volt));
 8000c3a:	4b70      	ldr	r3, [pc, #448]	; (8000dfc <main+0x358>)
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	ee07 3a90 	vmov	s15, r3
 8000c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c46:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8000e20 <main+0x37c>
 8000c4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8000c52:	f001 f9fb 	bl	800204c <ShuntVolts_to_Amps>
 8000c56:	eef0 7a40 	vmov.f32	s15, s0
 8000c5a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c5e:	f001 f8cf 	bl	8001e00 <debug_uart4_write_float>
	  debug_uart4_write_text("A; NTC Spannung: ");
 8000c62:	4872      	ldr	r0, [pc, #456]	; (8000e2c <main+0x388>)
 8000c64:	f001 f8b0 	bl	8001dc8 <debug_uart4_write_text>
	  debug_uart4_write_float((float)ADC3_result[1] * Bit12_to_Volt);
 8000c68:	4b65      	ldr	r3, [pc, #404]	; (8000e00 <main+0x35c>)
 8000c6a:	885b      	ldrh	r3, [r3, #2]
 8000c6c:	ee07 3a90 	vmov	s15, r3
 8000c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c74:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8000e30 <main+0x38c>
 8000c78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c7c:	eeb0 0a67 	vmov.f32	s0, s15
 8000c80:	f001 f8be 	bl	8001e00 <debug_uart4_write_float>
	  debug_uart4_write_text("V \n");
 8000c84:	486b      	ldr	r0, [pc, #428]	; (8000e34 <main+0x390>)
 8000c86:	f001 f89f 	bl	8001dc8 <debug_uart4_write_text>

	  debug_uart4_write_text("Spannung: Phase U: ");
 8000c8a:	486b      	ldr	r0, [pc, #428]	; (8000e38 <main+0x394>)
 8000c8c:	f001 f89c 	bl	8001dc8 <debug_uart4_write_text>
	  debug_uart4_write_float(Volts_to_HalfbridgeVolts((float)ADC2_result[1] * Bit16_to_Volt));
 8000c90:	4b5a      	ldr	r3, [pc, #360]	; (8000dfc <main+0x358>)
 8000c92:	885b      	ldrh	r3, [r3, #2]
 8000c94:	ee07 3a90 	vmov	s15, r3
 8000c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c9c:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8000e20 <main+0x37c>
 8000ca0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ca4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ca8:	f001 f9fe 	bl	80020a8 <Volts_to_HalfbridgeVolts>
 8000cac:	eef0 7a40 	vmov.f32	s15, s0
 8000cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8000cb4:	f001 f8a4 	bl	8001e00 <debug_uart4_write_float>
	  debug_uart4_write_text("V; Phase V: ");
 8000cb8:	4860      	ldr	r0, [pc, #384]	; (8000e3c <main+0x398>)
 8000cba:	f001 f885 	bl	8001dc8 <debug_uart4_write_text>
	  debug_uart4_write_float(Volts_to_HalfbridgeVolts((float)ADC1_result[2] * Bit16_to_Volt));
 8000cbe:	4b4e      	ldr	r3, [pc, #312]	; (8000df8 <main+0x354>)
 8000cc0:	889b      	ldrh	r3, [r3, #4]
 8000cc2:	ee07 3a90 	vmov	s15, r3
 8000cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cca:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8000e20 <main+0x37c>
 8000cce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cd2:	eeb0 0a67 	vmov.f32	s0, s15
 8000cd6:	f001 f9e7 	bl	80020a8 <Volts_to_HalfbridgeVolts>
 8000cda:	eef0 7a40 	vmov.f32	s15, s0
 8000cde:	eeb0 0a67 	vmov.f32	s0, s15
 8000ce2:	f001 f88d 	bl	8001e00 <debug_uart4_write_float>
	  debug_uart4_write_text("V; Phase W: ");
 8000ce6:	4856      	ldr	r0, [pc, #344]	; (8000e40 <main+0x39c>)
 8000ce8:	f001 f86e 	bl	8001dc8 <debug_uart4_write_text>
	  debug_uart4_write_float(Volts_to_HalfbridgeVolts((float)ADC2_result[2] * Bit16_to_Volt));
 8000cec:	4b43      	ldr	r3, [pc, #268]	; (8000dfc <main+0x358>)
 8000cee:	889b      	ldrh	r3, [r3, #4]
 8000cf0:	ee07 3a90 	vmov	s15, r3
 8000cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cf8:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8000e20 <main+0x37c>
 8000cfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d00:	eeb0 0a67 	vmov.f32	s0, s15
 8000d04:	f001 f9d0 	bl	80020a8 <Volts_to_HalfbridgeVolts>
 8000d08:	eef0 7a40 	vmov.f32	s15, s0
 8000d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8000d10:	f001 f876 	bl	8001e00 <debug_uart4_write_float>
	  debug_uart4_write_text("V; Versorgungsspannung: ");
 8000d14:	484b      	ldr	r0, [pc, #300]	; (8000e44 <main+0x3a0>)
 8000d16:	f001 f857 	bl	8001dc8 <debug_uart4_write_text>
	  debug_uart4_write_float(Volts_to_HalfbridgeVolts((float)ADC3_result[0] * Bit12_to_Volt));
 8000d1a:	4b39      	ldr	r3, [pc, #228]	; (8000e00 <main+0x35c>)
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	ee07 3a90 	vmov	s15, r3
 8000d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d26:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8000e30 <main+0x38c>
 8000d2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d32:	f001 f9b9 	bl	80020a8 <Volts_to_HalfbridgeVolts>
 8000d36:	eef0 7a40 	vmov.f32	s15, s0
 8000d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d3e:	f001 f85f 	bl	8001e00 <debug_uart4_write_float>
	  debug_uart4_write_text("V \n");
 8000d42:	483c      	ldr	r0, [pc, #240]	; (8000e34 <main+0x390>)
 8000d44:	f001 f840 	bl	8001dc8 <debug_uart4_write_text>

	  debug_uart4_write_text("HALL Sensor Daten: ");
 8000d48:	483f      	ldr	r0, [pc, #252]	; (8000e48 <main+0x3a4>)
 8000d4a:	f001 f83d 	bl	8001dc8 <debug_uart4_write_text>
	  debug_uart4_write_float(Convert_HALL_Sensor_Data(SENSOR_HALL_DATA));
 8000d4e:	4b3f      	ldr	r3, [pc, #252]	; (8000e4c <main+0x3a8>)
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f001 f9c0 	bl	80020d8 <Convert_HALL_Sensor_Data>
 8000d58:	eef0 7a40 	vmov.f32	s15, s0
 8000d5c:	eeb0 0a67 	vmov.f32	s0, s15
 8000d60:	f001 f84e 	bl	8001e00 <debug_uart4_write_float>
	  debug_uart4_write_text("\n");
 8000d64:	483a      	ldr	r0, [pc, #232]	; (8000e50 <main+0x3ac>)
 8000d66:	f001 f82f 	bl	8001dc8 <debug_uart4_write_text>

		const uint16_t WRITE_BIT = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	81fb      	strh	r3, [r7, #14]
		const uint16_t READ_BIT = (1<<15);
 8000d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d72:	81bb      	strh	r3, [r7, #12]
		const uint16_t FAULT_STATUS1_REG = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	817b      	strh	r3, [r7, #10]
		const uint16_t FAULT_STATUS2_REG = 0x0800;
 8000d78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d7c:	813b      	strh	r3, [r7, #8]

		uint16_t RECEIVE_MSG = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	80fb      	strh	r3, [r7, #6]

		//Check whether the drive is connected
		Send_Command_Driver((READ_BIT | FAULT_STATUS1_REG), &RECEIVE_MSG, 1);
 8000d82:	89ba      	ldrh	r2, [r7, #12]
 8000d84:	897b      	ldrh	r3, [r7, #10]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	1db9      	adds	r1, r7, #6
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f001 f864 	bl	8001e5c <Send_Command_Driver>
		debug_uart4_write_text("Driver FAULT1: ");
 8000d94:	482f      	ldr	r0, [pc, #188]	; (8000e54 <main+0x3b0>)
 8000d96:	f001 f817 	bl	8001dc8 <debug_uart4_write_text>
		debug_uart4_write_float((float)RECEIVE_MSG);
 8000d9a:	88fb      	ldrh	r3, [r7, #6]
 8000d9c:	ee07 3a90 	vmov	s15, r3
 8000da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000da4:	eeb0 0a67 	vmov.f32	s0, s15
 8000da8:	f001 f82a 	bl	8001e00 <debug_uart4_write_float>
		Send_Command_Driver((READ_BIT | FAULT_STATUS2_REG), &RECEIVE_MSG, 1);
 8000dac:	89ba      	ldrh	r2, [r7, #12]
 8000dae:	893b      	ldrh	r3, [r7, #8]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	1db9      	adds	r1, r7, #6
 8000db6:	2201      	movs	r2, #1
 8000db8:	4618      	mov	r0, r3
 8000dba:	f001 f84f 	bl	8001e5c <Send_Command_Driver>
		debug_uart4_write_text(" FAULT2: ");
 8000dbe:	4826      	ldr	r0, [pc, #152]	; (8000e58 <main+0x3b4>)
 8000dc0:	f001 f802 	bl	8001dc8 <debug_uart4_write_text>
		debug_uart4_write_float((float)RECEIVE_MSG);
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	ee07 3a90 	vmov	s15, r3
 8000dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dce:	eeb0 0a67 	vmov.f32	s0, s15
 8000dd2:	f001 f815 	bl	8001e00 <debug_uart4_write_float>
		debug_uart4_write_text(" \n");
 8000dd6:	4821      	ldr	r0, [pc, #132]	; (8000e5c <main+0x3b8>)
 8000dd8:	f000 fff6 	bl	8001dc8 <debug_uart4_write_text>
	  uint16_t RECEIVE_MSG = 0;

	  Send_Command_Driver(&SEND_MSG, &RECEIVE_MSG, 1);
	  */

	  HAL_Delay(1000);
 8000ddc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000de0:	f002 f9e6 	bl	80031b0 <HAL_Delay>
  {
 8000de4:	e6e4      	b.n	8000bb0 <main+0x10c>
 8000de6:	bf00      	nop
 8000de8:	24000834 	.word	0x24000834
 8000dec:	240001f4 	.word	0x240001f4
 8000df0:	24000264 	.word	0x24000264
 8000df4:	240002d4 	.word	0x240002d4
 8000df8:	24000dd8 	.word	0x24000dd8
 8000dfc:	24000de0 	.word	0x24000de0
 8000e00:	24000de8 	.word	0x24000de8
 8000e04:	240007e8 	.word	0x240007e8
 8000e08:	40010000 	.word	0x40010000
 8000e0c:	240004ec 	.word	0x240004ec
 8000e10:	24000df0 	.word	0x24000df0
 8000e14:	08014d40 	.word	0x08014d40
 8000e18:	08014d68 	.word	0x08014d68
 8000e1c:	08014d6c 	.word	0x08014d6c
 8000e20:	38533406 	.word	0x38533406
 8000e24:	08014d80 	.word	0x08014d80
 8000e28:	08014d90 	.word	0x08014d90
 8000e2c:	08014da0 	.word	0x08014da0
 8000e30:	3a534067 	.word	0x3a534067
 8000e34:	08014db4 	.word	0x08014db4
 8000e38:	08014db8 	.word	0x08014db8
 8000e3c:	08014dcc 	.word	0x08014dcc
 8000e40:	08014ddc 	.word	0x08014ddc
 8000e44:	08014dec 	.word	0x08014dec
 8000e48:	08014e08 	.word	0x08014e08
 8000e4c:	24000dee 	.word	0x24000dee
 8000e50:	08014e1c 	.word	0x08014e1c
 8000e54:	08014e20 	.word	0x08014e20
 8000e58:	08014e30 	.word	0x08014e30
 8000e5c:	08014e3c 	.word	0x08014e3c

08000e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b09c      	sub	sp, #112	; 0x70
 8000e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6a:	224c      	movs	r2, #76	; 0x4c
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f010 fbeb 	bl	801164a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	2220      	movs	r2, #32
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f010 fbe5 	bl	801164a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e80:	2002      	movs	r0, #2
 8000e82:	f007 ff77 	bl	8008d74 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e86:	2300      	movs	r3, #0
 8000e88:	603b      	str	r3, [r7, #0]
 8000e8a:	4b2b      	ldr	r3, [pc, #172]	; (8000f38 <SystemClock_Config+0xd8>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	4a2a      	ldr	r2, [pc, #168]	; (8000f38 <SystemClock_Config+0xd8>)
 8000e90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e94:	6193      	str	r3, [r2, #24]
 8000e96:	4b28      	ldr	r3, [pc, #160]	; (8000f38 <SystemClock_Config+0xd8>)
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e9e:	603b      	str	r3, [r7, #0]
 8000ea0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ea2:	bf00      	nop
 8000ea4:	4b24      	ldr	r3, [pc, #144]	; (8000f38 <SystemClock_Config+0xd8>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000eac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000eb0:	d1f8      	bne.n	8000ea4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000ec8:	2332      	movs	r3, #50	; 0x32
 8000eca:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ed0:	2304      	movs	r3, #4
 8000ed2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ed8:	230c      	movs	r3, #12
 8000eda:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f007 ff8d 	bl	8008e08 <HAL_RCC_OscConfig>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ef4:	f001 f910 	bl	8002118 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef8:	233f      	movs	r3, #63	; 0x3f
 8000efa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000efc:	2303      	movs	r3, #3
 8000efe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000f04:	2308      	movs	r3, #8
 8000f06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f08:	2340      	movs	r3, #64	; 0x40
 8000f0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f0c:	2340      	movs	r3, #64	; 0x40
 8000f0e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f14:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f16:	2340      	movs	r3, #64	; 0x40
 8000f18:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	2102      	movs	r1, #2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f008 fb4c 	bl	80095bc <HAL_RCC_ClockConfig>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000f2a:	f001 f8f5 	bl	8002118 <Error_Handler>
  }
}
 8000f2e:	bf00      	nop
 8000f30:	3770      	adds	r7, #112	; 0x70
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	58024800 	.word	0x58024800

08000f3c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b0ae      	sub	sp, #184	; 0xb8
 8000f40:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f42:	463b      	mov	r3, r7
 8000f44:	22b8      	movs	r2, #184	; 0xb8
 8000f46:	2100      	movs	r1, #0
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f010 fb7e 	bl	801164a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f4e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f52:	f04f 0300 	mov.w	r3, #0
 8000f56:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 8000f5e:	2318      	movs	r3, #24
 8000f60:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000f62:	2302      	movs	r3, #2
 8000f64:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000f66:	2302      	movs	r3, #2
 8000f68:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000f6e:	23c0      	movs	r3, #192	; 0xc0
 8000f70:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f80:	463b      	mov	r3, r7
 8000f82:	4618      	mov	r0, r3
 8000f84:	f008 fea6 	bl	8009cd4 <HAL_RCCEx_PeriphCLKConfig>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000f8e:	f001 f8c3 	bl	8002118 <Error_Handler>
  }
}
 8000f92:	bf00      	nop
 8000f94:	37b8      	adds	r7, #184	; 0xb8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08c      	sub	sp, #48	; 0x30
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fae:	463b      	mov	r3, r7
 8000fb0:	2224      	movs	r2, #36	; 0x24
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f010 fb48 	bl	801164a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fba:	4b41      	ldr	r3, [pc, #260]	; (80010c0 <MX_ADC1_Init+0x124>)
 8000fbc:	4a41      	ldr	r2, [pc, #260]	; (80010c4 <MX_ADC1_Init+0x128>)
 8000fbe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fc0:	4b3f      	ldr	r3, [pc, #252]	; (80010c0 <MX_ADC1_Init+0x124>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000fc6:	4b3e      	ldr	r3, [pc, #248]	; (80010c0 <MX_ADC1_Init+0x124>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fcc:	4b3c      	ldr	r3, [pc, #240]	; (80010c0 <MX_ADC1_Init+0x124>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000fd2:	4b3b      	ldr	r3, [pc, #236]	; (80010c0 <MX_ADC1_Init+0x124>)
 8000fd4:	2208      	movs	r2, #8
 8000fd6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fd8:	4b39      	ldr	r3, [pc, #228]	; (80010c0 <MX_ADC1_Init+0x124>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fde:	4b38      	ldr	r3, [pc, #224]	; (80010c0 <MX_ADC1_Init+0x124>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000fe4:	4b36      	ldr	r3, [pc, #216]	; (80010c0 <MX_ADC1_Init+0x124>)
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fea:	4b35      	ldr	r3, [pc, #212]	; (80010c0 <MX_ADC1_Init+0x124>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000ff2:	4b33      	ldr	r3, [pc, #204]	; (80010c0 <MX_ADC1_Init+0x124>)
 8000ff4:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000ff8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ffa:	4b31      	ldr	r3, [pc, #196]	; (80010c0 <MX_ADC1_Init+0x124>)
 8000ffc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001000:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001002:	4b2f      	ldr	r3, [pc, #188]	; (80010c0 <MX_ADC1_Init+0x124>)
 8001004:	2203      	movs	r2, #3
 8001006:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001008:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <MX_ADC1_Init+0x124>)
 800100a:	2200      	movs	r2, #0
 800100c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800100e:	4b2c      	ldr	r3, [pc, #176]	; (80010c0 <MX_ADC1_Init+0x124>)
 8001010:	2200      	movs	r2, #0
 8001012:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001014:	4b2a      	ldr	r3, [pc, #168]	; (80010c0 <MX_ADC1_Init+0x124>)
 8001016:	2200      	movs	r2, #0
 8001018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800101c:	4828      	ldr	r0, [pc, #160]	; (80010c0 <MX_ADC1_Init+0x124>)
 800101e:	f002 fbf3 	bl	8003808 <HAL_ADC_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001028:	f001 f876 	bl	8002118 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800102c:	2300      	movs	r3, #0
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001034:	4619      	mov	r1, r3
 8001036:	4822      	ldr	r0, [pc, #136]	; (80010c0 <MX_ADC1_Init+0x124>)
 8001038:	f003 ff34 	bl	8004ea4 <HAL_ADCEx_MultiModeConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001042:	f001 f869 	bl	8002118 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001046:	4b20      	ldr	r3, [pc, #128]	; (80010c8 <MX_ADC1_Init+0x12c>)
 8001048:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800104a:	2306      	movs	r3, #6
 800104c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 800104e:	2302      	movs	r3, #2
 8001050:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001052:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001056:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001058:	2304      	movs	r3, #4
 800105a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001060:	2300      	movs	r3, #0
 8001062:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001066:	463b      	mov	r3, r7
 8001068:	4619      	mov	r1, r3
 800106a:	4815      	ldr	r0, [pc, #84]	; (80010c0 <MX_ADC1_Init+0x124>)
 800106c:	f002 fec4 	bl	8003df8 <HAL_ADC_ConfigChannel>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001076:	f001 f84f 	bl	8002118 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 800107a:	4b14      	ldr	r3, [pc, #80]	; (80010cc <MX_ADC1_Init+0x130>)
 800107c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800107e:	230c      	movs	r3, #12
 8001080:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001082:	463b      	mov	r3, r7
 8001084:	4619      	mov	r1, r3
 8001086:	480e      	ldr	r0, [pc, #56]	; (80010c0 <MX_ADC1_Init+0x124>)
 8001088:	f002 feb6 	bl	8003df8 <HAL_ADC_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001092:	f001 f841 	bl	8002118 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_ADC1_Init+0x134>)
 8001098:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800109a:	2312      	movs	r3, #18
 800109c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800109e:	2301      	movs	r3, #1
 80010a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a2:	463b      	mov	r3, r7
 80010a4:	4619      	mov	r1, r3
 80010a6:	4806      	ldr	r0, [pc, #24]	; (80010c0 <MX_ADC1_Init+0x124>)
 80010a8:	f002 fea6 	bl	8003df8 <HAL_ADC_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80010b2:	f001 f831 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	3730      	adds	r7, #48	; 0x30
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	240001f4 	.word	0x240001f4
 80010c4:	40022000 	.word	0x40022000
 80010c8:	43210000 	.word	0x43210000
 80010cc:	47520000 	.word	0x47520000
 80010d0:	3ef08000 	.word	0x3ef08000

080010d4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2224      	movs	r2, #36	; 0x24
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f010 fab2 	bl	801164a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80010e6:	4b3a      	ldr	r3, [pc, #232]	; (80011d0 <MX_ADC2_Init+0xfc>)
 80010e8:	4a3a      	ldr	r2, [pc, #232]	; (80011d4 <MX_ADC2_Init+0x100>)
 80010ea:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010ec:	4b38      	ldr	r3, [pc, #224]	; (80011d0 <MX_ADC2_Init+0xfc>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80010f2:	4b37      	ldr	r3, [pc, #220]	; (80011d0 <MX_ADC2_Init+0xfc>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010f8:	4b35      	ldr	r3, [pc, #212]	; (80011d0 <MX_ADC2_Init+0xfc>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80010fe:	4b34      	ldr	r3, [pc, #208]	; (80011d0 <MX_ADC2_Init+0xfc>)
 8001100:	2208      	movs	r2, #8
 8001102:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001104:	4b32      	ldr	r3, [pc, #200]	; (80011d0 <MX_ADC2_Init+0xfc>)
 8001106:	2200      	movs	r2, #0
 8001108:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800110a:	4b31      	ldr	r3, [pc, #196]	; (80011d0 <MX_ADC2_Init+0xfc>)
 800110c:	2200      	movs	r2, #0
 800110e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 3;
 8001110:	4b2f      	ldr	r3, [pc, #188]	; (80011d0 <MX_ADC2_Init+0xfc>)
 8001112:	2203      	movs	r2, #3
 8001114:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001116:	4b2e      	ldr	r3, [pc, #184]	; (80011d0 <MX_ADC2_Init+0xfc>)
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800111e:	4b2c      	ldr	r3, [pc, #176]	; (80011d0 <MX_ADC2_Init+0xfc>)
 8001120:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8001124:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001126:	4b2a      	ldr	r3, [pc, #168]	; (80011d0 <MX_ADC2_Init+0xfc>)
 8001128:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800112c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800112e:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <MX_ADC2_Init+0xfc>)
 8001130:	2203      	movs	r2, #3
 8001132:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001134:	4b26      	ldr	r3, [pc, #152]	; (80011d0 <MX_ADC2_Init+0xfc>)
 8001136:	2200      	movs	r2, #0
 8001138:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800113a:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <MX_ADC2_Init+0xfc>)
 800113c:	2200      	movs	r2, #0
 800113e:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8001140:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <MX_ADC2_Init+0xfc>)
 8001142:	2200      	movs	r2, #0
 8001144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001148:	4821      	ldr	r0, [pc, #132]	; (80011d0 <MX_ADC2_Init+0xfc>)
 800114a:	f002 fb5d 	bl	8003808 <HAL_ADC_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8001154:	f000 ffe0 	bl	8002118 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001158:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <MX_ADC2_Init+0x104>)
 800115a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800115c:	2306      	movs	r3, #6
 800115e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8001160:	2302      	movs	r3, #2
 8001162:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001164:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001168:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800116a:	2304      	movs	r3, #4
 800116c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	4619      	mov	r1, r3
 800117c:	4814      	ldr	r0, [pc, #80]	; (80011d0 <MX_ADC2_Init+0xfc>)
 800117e:	f002 fe3b 	bl	8003df8 <HAL_ADC_ConfigChannel>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8001188:	f000 ffc6 	bl	8002118 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800118c:	4b13      	ldr	r3, [pc, #76]	; (80011dc <MX_ADC2_Init+0x108>)
 800118e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001190:	230c      	movs	r3, #12
 8001192:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001194:	2301      	movs	r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	4619      	mov	r1, r3
 800119c:	480c      	ldr	r0, [pc, #48]	; (80011d0 <MX_ADC2_Init+0xfc>)
 800119e:	f002 fe2b 	bl	8003df8 <HAL_ADC_ConfigChannel>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_ADC2_Init+0xd8>
  {
    Error_Handler();
 80011a8:	f000 ffb6 	bl	8002118 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <MX_ADC2_Init+0x10c>)
 80011ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80011b0:	2312      	movs	r3, #18
 80011b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	4619      	mov	r1, r3
 80011b8:	4805      	ldr	r0, [pc, #20]	; (80011d0 <MX_ADC2_Init+0xfc>)
 80011ba:	f002 fe1d 	bl	8003df8 <HAL_ADC_ConfigChannel>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_ADC2_Init+0xf4>
  {
    Error_Handler();
 80011c4:	f000 ffa8 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011c8:	bf00      	nop
 80011ca:	3728      	adds	r7, #40	; 0x28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	24000264 	.word	0x24000264
 80011d4:	40022100 	.word	0x40022100
 80011d8:	25b00200 	.word	0x25b00200
 80011dc:	2e300800 	.word	0x2e300800
 80011e0:	3ac04000 	.word	0x3ac04000

080011e4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	; 0x28
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	2224      	movs	r2, #36	; 0x24
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f010 fa2a 	bl	801164a <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80011f6:	4b3f      	ldr	r3, [pc, #252]	; (80012f4 <MX_ADC3_Init+0x110>)
 80011f8:	4a3f      	ldr	r2, [pc, #252]	; (80012f8 <MX_ADC3_Init+0x114>)
 80011fa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011fc:	4b3d      	ldr	r3, [pc, #244]	; (80012f4 <MX_ADC3_Init+0x110>)
 80011fe:	2200      	movs	r2, #0
 8001200:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001202:	4b3c      	ldr	r3, [pc, #240]	; (80012f4 <MX_ADC3_Init+0x110>)
 8001204:	2208      	movs	r2, #8
 8001206:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001208:	4b3a      	ldr	r3, [pc, #232]	; (80012f4 <MX_ADC3_Init+0x110>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800120e:	4b39      	ldr	r3, [pc, #228]	; (80012f4 <MX_ADC3_Init+0x110>)
 8001210:	2201      	movs	r2, #1
 8001212:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001214:	4b37      	ldr	r3, [pc, #220]	; (80012f4 <MX_ADC3_Init+0x110>)
 8001216:	2208      	movs	r2, #8
 8001218:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800121a:	4b36      	ldr	r3, [pc, #216]	; (80012f4 <MX_ADC3_Init+0x110>)
 800121c:	2200      	movs	r2, #0
 800121e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001220:	4b34      	ldr	r3, [pc, #208]	; (80012f4 <MX_ADC3_Init+0x110>)
 8001222:	2200      	movs	r2, #0
 8001224:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 3;
 8001226:	4b33      	ldr	r3, [pc, #204]	; (80012f4 <MX_ADC3_Init+0x110>)
 8001228:	2203      	movs	r2, #3
 800122a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800122c:	4b31      	ldr	r3, [pc, #196]	; (80012f4 <MX_ADC3_Init+0x110>)
 800122e:	2200      	movs	r2, #0
 8001230:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8001234:	4b2f      	ldr	r3, [pc, #188]	; (80012f4 <MX_ADC3_Init+0x110>)
 8001236:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 800123a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800123c:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <MX_ADC3_Init+0x110>)
 800123e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001242:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001244:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <MX_ADC3_Init+0x110>)
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800124c:	4b29      	ldr	r3, [pc, #164]	; (80012f4 <MX_ADC3_Init+0x110>)
 800124e:	2200      	movs	r2, #0
 8001250:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001252:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <MX_ADC3_Init+0x110>)
 8001254:	2203      	movs	r2, #3
 8001256:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001258:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <MX_ADC3_Init+0x110>)
 800125a:	2200      	movs	r2, #0
 800125c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800125e:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <MX_ADC3_Init+0x110>)
 8001260:	2200      	movs	r2, #0
 8001262:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001264:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <MX_ADC3_Init+0x110>)
 8001266:	2200      	movs	r2, #0
 8001268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800126c:	4821      	ldr	r0, [pc, #132]	; (80012f4 <MX_ADC3_Init+0x110>)
 800126e:	f002 facb 	bl	8003808 <HAL_ADC_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_ADC3_Init+0x98>
  {
    Error_Handler();
 8001278:	f000 ff4e 	bl	8002118 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800127c:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <MX_ADC3_Init+0x118>)
 800127e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001280:	2306      	movs	r3, #6
 8001282:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_6CYCLES_5;
 8001284:	2301      	movs	r3, #1
 8001286:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001288:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800128c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800128e:	2304      	movs	r3, #4
 8001290:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001296:	2300      	movs	r3, #0
 8001298:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	4619      	mov	r1, r3
 800129e:	4815      	ldr	r0, [pc, #84]	; (80012f4 <MX_ADC3_Init+0x110>)
 80012a0:	f002 fdaa 	bl	8003df8 <HAL_ADC_ConfigChannel>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_ADC3_Init+0xca>
  {
    Error_Handler();
 80012aa:	f000 ff35 	bl	8002118 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012ae:	4b14      	ldr	r3, [pc, #80]	; (8001300 <MX_ADC3_Init+0x11c>)
 80012b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012b2:	230c      	movs	r3, #12
 80012b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	4619      	mov	r1, r3
 80012ba:	480e      	ldr	r0, [pc, #56]	; (80012f4 <MX_ADC3_Init+0x110>)
 80012bc:	f002 fd9c 	bl	8003df8 <HAL_ADC_ConfigChannel>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_ADC3_Init+0xe6>
  {
    Error_Handler();
 80012c6:	f000 ff27 	bl	8002118 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <MX_ADC3_Init+0x120>)
 80012cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012ce:	2312      	movs	r3, #18
 80012d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	4619      	mov	r1, r3
 80012da:	4806      	ldr	r0, [pc, #24]	; (80012f4 <MX_ADC3_Init+0x110>)
 80012dc:	f002 fd8c 	bl	8003df8 <HAL_ADC_ConfigChannel>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 80012e6:	f000 ff17 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	3728      	adds	r7, #40	; 0x28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	240002d4 	.word	0x240002d4
 80012f8:	58026000 	.word	0x58026000
 80012fc:	2a000400 	.word	0x2a000400
 8001300:	04300002 	.word	0x04300002
 8001304:	c7520000 	.word	0xc7520000

08001308 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 800130c:	4b13      	ldr	r3, [pc, #76]	; (800135c <MX_COMP1_Init+0x54>)
 800130e:	4a14      	ldr	r2, [pc, #80]	; (8001360 <MX_COMP1_Init+0x58>)
 8001310:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <MX_COMP1_Init+0x54>)
 8001314:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001318:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <MX_COMP1_Init+0x54>)
 800131c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001320:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <MX_COMP1_Init+0x54>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <MX_COMP1_Init+0x54>)
 800132a:	2200      	movs	r2, #0
 800132c:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <MX_COMP1_Init+0x54>)
 8001330:	2200      	movs	r2, #0
 8001332:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <MX_COMP1_Init+0x54>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <MX_COMP1_Init+0x54>)
 800133c:	2200      	movs	r2, #0
 800133e:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <MX_COMP1_Init+0x54>)
 8001342:	2200      	movs	r2, #0
 8001344:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8001346:	4805      	ldr	r0, [pc, #20]	; (800135c <MX_COMP1_Init+0x54>)
 8001348:	f003 fe8e 	bl	8005068 <HAL_COMP_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_COMP1_Init+0x4e>
  {
    Error_Handler();
 8001352:	f000 fee1 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	240004ac 	.word	0x240004ac
 8001360:	5800380c 	.word	0x5800380c

08001364 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CORDIC_Init 0 */

  /* USER CODE END CORDIC_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_CORDIC_CLK_ENABLE();
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <MX_CORDIC_Init+0x30>)
 800136c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001370:	4a08      	ldr	r2, [pc, #32]	; (8001394 <MX_CORDIC_Init+0x30>)
 8001372:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001376:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <MX_CORDIC_Init+0x30>)
 800137c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	58024400 	.word	0x58024400

08001398 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	; 0x28
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	2224      	movs	r2, #36	; 0x24
 80013a2:	2100      	movs	r1, #0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f010 f950 	bl	801164a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80013aa:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <MX_DAC1_Init+0x5c>)
 80013ac:	4a12      	ldr	r2, [pc, #72]	; (80013f8 <MX_DAC1_Init+0x60>)
 80013ae:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80013b0:	4810      	ldr	r0, [pc, #64]	; (80013f4 <MX_DAC1_Init+0x5c>)
 80013b2:	f004 f892 	bl	80054da <HAL_DAC_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80013bc:	f000 feac 	bl	8002118 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80013cc:	2301      	movs	r3, #1
 80013ce:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2200      	movs	r2, #0
 80013d8:	4619      	mov	r1, r3
 80013da:	4806      	ldr	r0, [pc, #24]	; (80013f4 <MX_DAC1_Init+0x5c>)
 80013dc:	f004 f8a0 	bl	8005520 <HAL_DAC_ConfigChannel>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80013e6:	f000 fe97 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	3728      	adds	r7, #40	; 0x28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	240004d8 	.word	0x240004d8
 80013f8:	40007400 	.word	0x40007400

080013fc <MX_DTS_Init>:
  * @brief DTS Initialization Function
  * @param None
  * @retval None
  */
static void MX_DTS_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END DTS_Init 0 */

  /* USER CODE BEGIN DTS_Init 1 */

  /* USER CODE END DTS_Init 1 */
  hdts.Instance = DTS;
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <MX_DTS_Init+0x4c>)
 8001402:	4a12      	ldr	r2, [pc, #72]	; (800144c <MX_DTS_Init+0x50>)
 8001404:	601a      	str	r2, [r3, #0]
  hdts.Init.QuickMeasure = DTS_QUICKMEAS_DISABLE;
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <MX_DTS_Init+0x4c>)
 8001408:	2200      	movs	r2, #0
 800140a:	605a      	str	r2, [r3, #4]
  hdts.Init.RefClock = DTS_REFCLKSEL_PCLK;
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <MX_DTS_Init+0x4c>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  hdts.Init.TriggerInput = DTS_TRIGGER_HW_NONE;
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <MX_DTS_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	60da      	str	r2, [r3, #12]
  hdts.Init.SamplingTime = DTS_SMP_TIME_15_CYCLE;
 8001418:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <MX_DTS_Init+0x4c>)
 800141a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 800141e:	611a      	str	r2, [r3, #16]
  hdts.Init.Divider = 0;
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <MX_DTS_Init+0x4c>)
 8001422:	2200      	movs	r2, #0
 8001424:	615a      	str	r2, [r3, #20]
  hdts.Init.HighThreshold = 0x0;
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <MX_DTS_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  hdts.Init.LowThreshold = 0x0;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_DTS_Init+0x4c>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
  if (HAL_DTS_Init(&hdts) != HAL_OK)
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_DTS_Init+0x4c>)
 8001434:	f006 fccc 	bl	8007dd0 <HAL_DTS_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_DTS_Init+0x46>
  {
    Error_Handler();
 800143e:	f000 fe6b 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN DTS_Init 2 */

  /* USER CODE END DTS_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	240004ec 	.word	0x240004ec
 800144c:	58006800 	.word	0x58006800

08001450 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001454:	4b2e      	ldr	r3, [pc, #184]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 8001456:	4a2f      	ldr	r2, [pc, #188]	; (8001514 <MX_FDCAN1_Init+0xc4>)
 8001458:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800145a:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001460:	4b2b      	ldr	r3, [pc, #172]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001466:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 8001468:	2200      	movs	r2, #0
 800146a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800146c:	4b28      	ldr	r3, [pc, #160]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 800146e:	2200      	movs	r2, #0
 8001470:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001472:	4b27      	ldr	r3, [pc, #156]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 8001474:	2200      	movs	r2, #0
 8001476:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001478:	4b25      	ldr	r3, [pc, #148]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 800147a:	2210      	movs	r2, #16
 800147c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800147e:	4b24      	ldr	r3, [pc, #144]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 8001480:	2201      	movs	r2, #1
 8001482:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001484:	4b22      	ldr	r3, [pc, #136]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 8001486:	2202      	movs	r2, #2
 8001488:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800148a:	4b21      	ldr	r3, [pc, #132]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 800148c:	2202      	movs	r2, #2
 800148e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001490:	4b1f      	ldr	r3, [pc, #124]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 8001492:	2201      	movs	r2, #1
 8001494:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001496:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 8001498:	2201      	movs	r2, #1
 800149a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800149c:	4b1c      	ldr	r3, [pc, #112]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 800149e:	2201      	movs	r2, #1
 80014a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80014a2:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80014a8:	4b19      	ldr	r3, [pc, #100]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80014ae:	4b18      	ldr	r3, [pc, #96]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80014b4:	4b16      	ldr	r3, [pc, #88]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 80014bc:	2200      	movs	r2, #0
 80014be:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80014c0:	4b13      	ldr	r3, [pc, #76]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 80014c2:	2204      	movs	r2, #4
 80014c4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80014cc:	4b10      	ldr	r3, [pc, #64]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 80014ce:	2204      	movs	r2, #4
 80014d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80014d2:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80014d8:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 80014da:	2204      	movs	r2, #4
 80014dc:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80014e4:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 80014f8:	2204      	movs	r2, #4
 80014fa:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80014fc:	4804      	ldr	r0, [pc, #16]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 80014fe:	f006 fdcb 	bl	8008098 <HAL_FDCAN_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001508:	f000 fe06 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	24000510 	.word	0x24000510
 8001514:	4000a000 	.word	0x4000a000

08001518 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800151c:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <MX_LPUART1_UART_Init+0x90>)
 800151e:	4a23      	ldr	r2, [pc, #140]	; (80015ac <MX_LPUART1_UART_Init+0x94>)
 8001520:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001522:	4b21      	ldr	r3, [pc, #132]	; (80015a8 <MX_LPUART1_UART_Init+0x90>)
 8001524:	4a22      	ldr	r2, [pc, #136]	; (80015b0 <MX_LPUART1_UART_Init+0x98>)
 8001526:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001528:	4b1f      	ldr	r3, [pc, #124]	; (80015a8 <MX_LPUART1_UART_Init+0x90>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800152e:	4b1e      	ldr	r3, [pc, #120]	; (80015a8 <MX_LPUART1_UART_Init+0x90>)
 8001530:	2200      	movs	r2, #0
 8001532:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001534:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <MX_LPUART1_UART_Init+0x90>)
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800153a:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <MX_LPUART1_UART_Init+0x90>)
 800153c:	220c      	movs	r2, #12
 800153e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001540:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <MX_LPUART1_UART_Init+0x90>)
 8001542:	2200      	movs	r2, #0
 8001544:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001546:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <MX_LPUART1_UART_Init+0x90>)
 8001548:	2200      	movs	r2, #0
 800154a:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800154c:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <MX_LPUART1_UART_Init+0x90>)
 800154e:	2200      	movs	r2, #0
 8001550:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <MX_LPUART1_UART_Init+0x90>)
 8001554:	2200      	movs	r2, #0
 8001556:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001558:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <MX_LPUART1_UART_Init+0x90>)
 800155a:	2200      	movs	r2, #0
 800155c:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800155e:	4812      	ldr	r0, [pc, #72]	; (80015a8 <MX_LPUART1_UART_Init+0x90>)
 8001560:	f00d fbad 	bl	800ecbe <HAL_UART_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 800156a:	f000 fdd5 	bl	8002118 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800156e:	2100      	movs	r1, #0
 8001570:	480d      	ldr	r0, [pc, #52]	; (80015a8 <MX_LPUART1_UART_Init+0x90>)
 8001572:	f00e fd42 	bl	800fffa <HAL_UARTEx_SetTxFifoThreshold>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 800157c:	f000 fdcc 	bl	8002118 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001580:	2100      	movs	r1, #0
 8001582:	4809      	ldr	r0, [pc, #36]	; (80015a8 <MX_LPUART1_UART_Init+0x90>)
 8001584:	f00e fd77 	bl	8010076 <HAL_UARTEx_SetRxFifoThreshold>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 800158e:	f000 fdc3 	bl	8002118 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001592:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_LPUART1_UART_Init+0x90>)
 8001594:	f00e fcf8 	bl	800ff88 <HAL_UARTEx_DisableFifoMode>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 800159e:	f000 fdbb 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	240005b0 	.word	0x240005b0
 80015ac:	58000c00 	.word	0x58000c00
 80015b0:	00033324 	.word	0x00033324

080015b4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80015b8:	4b22      	ldr	r3, [pc, #136]	; (8001644 <MX_UART4_Init+0x90>)
 80015ba:	4a23      	ldr	r2, [pc, #140]	; (8001648 <MX_UART4_Init+0x94>)
 80015bc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 500000;
 80015be:	4b21      	ldr	r3, [pc, #132]	; (8001644 <MX_UART4_Init+0x90>)
 80015c0:	4a22      	ldr	r2, [pc, #136]	; (800164c <MX_UART4_Init+0x98>)
 80015c2:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80015c4:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <MX_UART4_Init+0x90>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80015ca:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <MX_UART4_Init+0x90>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80015d0:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <MX_UART4_Init+0x90>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80015d6:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <MX_UART4_Init+0x90>)
 80015d8:	220c      	movs	r2, #12
 80015da:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015dc:	4b19      	ldr	r3, [pc, #100]	; (8001644 <MX_UART4_Init+0x90>)
 80015de:	2200      	movs	r2, #0
 80015e0:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e2:	4b18      	ldr	r3, [pc, #96]	; (8001644 <MX_UART4_Init+0x90>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015e8:	4b16      	ldr	r3, [pc, #88]	; (8001644 <MX_UART4_Init+0x90>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <MX_UART4_Init+0x90>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015f4:	4b13      	ldr	r3, [pc, #76]	; (8001644 <MX_UART4_Init+0x90>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80015fa:	4812      	ldr	r0, [pc, #72]	; (8001644 <MX_UART4_Init+0x90>)
 80015fc:	f00d fb5f 	bl	800ecbe <HAL_UART_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_UART4_Init+0x56>
  {
    Error_Handler();
 8001606:	f000 fd87 	bl	8002118 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800160a:	2100      	movs	r1, #0
 800160c:	480d      	ldr	r0, [pc, #52]	; (8001644 <MX_UART4_Init+0x90>)
 800160e:	f00e fcf4 	bl	800fffa <HAL_UARTEx_SetTxFifoThreshold>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_UART4_Init+0x68>
  {
    Error_Handler();
 8001618:	f000 fd7e 	bl	8002118 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800161c:	2100      	movs	r1, #0
 800161e:	4809      	ldr	r0, [pc, #36]	; (8001644 <MX_UART4_Init+0x90>)
 8001620:	f00e fd29 	bl	8010076 <HAL_UARTEx_SetRxFifoThreshold>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 800162a:	f000 fd75 	bl	8002118 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800162e:	4805      	ldr	r0, [pc, #20]	; (8001644 <MX_UART4_Init+0x90>)
 8001630:	f00e fcaa 	bl	800ff88 <HAL_UARTEx_DisableFifoMode>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 800163a:	f000 fd6d 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	24000644 	.word	0x24000644
 8001648:	40004c00 	.word	0x40004c00
 800164c:	0007a120 	.word	0x0007a120

08001650 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001654:	4b28      	ldr	r3, [pc, #160]	; (80016f8 <MX_SPI2_Init+0xa8>)
 8001656:	4a29      	ldr	r2, [pc, #164]	; (80016fc <MX_SPI2_Init+0xac>)
 8001658:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800165a:	4b27      	ldr	r3, [pc, #156]	; (80016f8 <MX_SPI2_Init+0xa8>)
 800165c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001660:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001662:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <MX_SPI2_Init+0xa8>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001668:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <MX_SPI2_Init+0xa8>)
 800166a:	220f      	movs	r2, #15
 800166c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800166e:	4b22      	ldr	r3, [pc, #136]	; (80016f8 <MX_SPI2_Init+0xa8>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001674:	4b20      	ldr	r3, [pc, #128]	; (80016f8 <MX_SPI2_Init+0xa8>)
 8001676:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800167a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800167c:	4b1e      	ldr	r3, [pc, #120]	; (80016f8 <MX_SPI2_Init+0xa8>)
 800167e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001682:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001684:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <MX_SPI2_Init+0xa8>)
 8001686:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800168a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800168c:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <MX_SPI2_Init+0xa8>)
 800168e:	2200      	movs	r2, #0
 8001690:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001692:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <MX_SPI2_Init+0xa8>)
 8001694:	2200      	movs	r2, #0
 8001696:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001698:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <MX_SPI2_Init+0xa8>)
 800169a:	2200      	movs	r2, #0
 800169c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <MX_SPI2_Init+0xa8>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016a4:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <MX_SPI2_Init+0xa8>)
 80016a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016aa:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <MX_SPI2_Init+0xa8>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <MX_SPI2_Init+0xa8>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <MX_SPI2_Init+0xa8>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <MX_SPI2_Init+0xa8>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <MX_SPI2_Init+0xa8>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80016ca:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <MX_SPI2_Init+0xa8>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016d0:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <MX_SPI2_Init+0xa8>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80016d6:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <MX_SPI2_Init+0xa8>)
 80016d8:	2200      	movs	r2, #0
 80016da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <MX_SPI2_Init+0xa8>)
 80016de:	2200      	movs	r2, #0
 80016e0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016e2:	4805      	ldr	r0, [pc, #20]	; (80016f8 <MX_SPI2_Init+0xa8>)
 80016e4:	f00a fedc 	bl	800c4a0 <HAL_SPI_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80016ee:	f000 fd13 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	240006d8 	.word	0x240006d8
 80016fc:	40003800 	.word	0x40003800

08001700 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001704:	4b28      	ldr	r3, [pc, #160]	; (80017a8 <MX_SPI3_Init+0xa8>)
 8001706:	4a29      	ldr	r2, [pc, #164]	; (80017ac <MX_SPI3_Init+0xac>)
 8001708:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800170a:	4b27      	ldr	r3, [pc, #156]	; (80017a8 <MX_SPI3_Init+0xa8>)
 800170c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001710:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001712:	4b25      	ldr	r3, [pc, #148]	; (80017a8 <MX_SPI3_Init+0xa8>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001718:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <MX_SPI3_Init+0xa8>)
 800171a:	220f      	movs	r2, #15
 800171c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800171e:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <MX_SPI3_Init+0xa8>)
 8001720:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001724:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001726:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <MX_SPI3_Init+0xa8>)
 8001728:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800172c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800172e:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <MX_SPI3_Init+0xa8>)
 8001730:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001734:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001736:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <MX_SPI3_Init+0xa8>)
 8001738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800173c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800173e:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <MX_SPI3_Init+0xa8>)
 8001740:	2200      	movs	r2, #0
 8001742:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001744:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <MX_SPI3_Init+0xa8>)
 8001746:	2200      	movs	r2, #0
 8001748:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800174a:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <MX_SPI3_Init+0xa8>)
 800174c:	2200      	movs	r2, #0
 800174e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001750:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <MX_SPI3_Init+0xa8>)
 8001752:	2200      	movs	r2, #0
 8001754:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001756:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <MX_SPI3_Init+0xa8>)
 8001758:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800175c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800175e:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <MX_SPI3_Init+0xa8>)
 8001760:	2200      	movs	r2, #0
 8001762:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001764:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <MX_SPI3_Init+0xa8>)
 8001766:	2200      	movs	r2, #0
 8001768:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800176a:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <MX_SPI3_Init+0xa8>)
 800176c:	2200      	movs	r2, #0
 800176e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001770:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <MX_SPI3_Init+0xa8>)
 8001772:	2200      	movs	r2, #0
 8001774:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001776:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <MX_SPI3_Init+0xa8>)
 8001778:	2200      	movs	r2, #0
 800177a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800177c:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <MX_SPI3_Init+0xa8>)
 800177e:	2200      	movs	r2, #0
 8001780:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <MX_SPI3_Init+0xa8>)
 8001784:	2200      	movs	r2, #0
 8001786:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001788:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <MX_SPI3_Init+0xa8>)
 800178a:	2200      	movs	r2, #0
 800178c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <MX_SPI3_Init+0xa8>)
 8001790:	2200      	movs	r2, #0
 8001792:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001794:	4804      	ldr	r0, [pc, #16]	; (80017a8 <MX_SPI3_Init+0xa8>)
 8001796:	f00a fe83 	bl	800c4a0 <HAL_SPI_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_SPI3_Init+0xa4>
  {
    Error_Handler();
 80017a0:	f000 fcba 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	24000760 	.word	0x24000760
 80017ac:	40003c00 	.word	0x40003c00

080017b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b09e      	sub	sp, #120	; 0x78
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80017d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
 80017ec:	615a      	str	r2, [r3, #20]
 80017ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017f0:	463b      	mov	r3, r7
 80017f2:	2234      	movs	r2, #52	; 0x34
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f00f ff27 	bl	801164a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017fc:	4b5a      	ldr	r3, [pc, #360]	; (8001968 <MX_TIM1_Init+0x1b8>)
 80017fe:	4a5b      	ldr	r2, [pc, #364]	; (800196c <MX_TIM1_Init+0x1bc>)
 8001800:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8001802:	4b59      	ldr	r3, [pc, #356]	; (8001968 <MX_TIM1_Init+0x1b8>)
 8001804:	2201      	movs	r2, #1
 8001806:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001808:	4b57      	ldr	r3, [pc, #348]	; (8001968 <MX_TIM1_Init+0x1b8>)
 800180a:	2220      	movs	r2, #32
 800180c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3999;
 800180e:	4b56      	ldr	r3, [pc, #344]	; (8001968 <MX_TIM1_Init+0x1b8>)
 8001810:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001814:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001816:	4b54      	ldr	r3, [pc, #336]	; (8001968 <MX_TIM1_Init+0x1b8>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800181c:	4b52      	ldr	r3, [pc, #328]	; (8001968 <MX_TIM1_Init+0x1b8>)
 800181e:	2200      	movs	r2, #0
 8001820:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001822:	4b51      	ldr	r3, [pc, #324]	; (8001968 <MX_TIM1_Init+0x1b8>)
 8001824:	2280      	movs	r2, #128	; 0x80
 8001826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001828:	484f      	ldr	r0, [pc, #316]	; (8001968 <MX_TIM1_Init+0x1b8>)
 800182a:	f00b fdc0 	bl	800d3ae <HAL_TIM_Base_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001834:	f000 fc70 	bl	8002118 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800183c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800183e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001842:	4619      	mov	r1, r3
 8001844:	4848      	ldr	r0, [pc, #288]	; (8001968 <MX_TIM1_Init+0x1b8>)
 8001846:	f00c f9bb 	bl	800dbc0 <HAL_TIM_ConfigClockSource>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001850:	f000 fc62 	bl	8002118 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001854:	4844      	ldr	r0, [pc, #272]	; (8001968 <MX_TIM1_Init+0x1b8>)
 8001856:	f00b fe01 	bl	800d45c <HAL_TIM_PWM_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8001860:	f000 fc5a 	bl	8002118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001864:	2320      	movs	r3, #32
 8001866:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001868:	2300      	movs	r3, #0
 800186a:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186c:	2300      	movs	r3, #0
 800186e:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001870:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001874:	4619      	mov	r1, r3
 8001876:	483c      	ldr	r0, [pc, #240]	; (8001968 <MX_TIM1_Init+0x1b8>)
 8001878:	f00c ffdc 	bl	800e834 <HAL_TIMEx_MasterConfigSynchronization>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001882:	f000 fc49 	bl	8002118 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8001886:	2301      	movs	r3, #1
 8001888:	653b      	str	r3, [r7, #80]	; 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 800188a:	2301      	movs	r3, #1
 800188c:	657b      	str	r3, [r7, #84]	; 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_LOW;
 800188e:	2301      	movs	r3, #1
 8001890:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001892:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001896:	461a      	mov	r2, r3
 8001898:	2101      	movs	r1, #1
 800189a:	4833      	ldr	r0, [pc, #204]	; (8001968 <MX_TIM1_Init+0x1b8>)
 800189c:	f00d f906 	bl	800eaac <HAL_TIMEx_ConfigBreakInput>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80018a6:	f000 fc37 	bl	8002118 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018aa:	2360      	movs	r3, #96	; 0x60
 80018ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 2000;
 80018ae:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80018b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018b4:	2300      	movs	r3, #0
 80018b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018b8:	2300      	movs	r3, #0
 80018ba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018c0:	2300      	movs	r3, #0
 80018c2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018c4:	2300      	movs	r3, #0
 80018c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018cc:	2200      	movs	r2, #0
 80018ce:	4619      	mov	r1, r3
 80018d0:	4825      	ldr	r0, [pc, #148]	; (8001968 <MX_TIM1_Init+0x1b8>)
 80018d2:	f00c f861 	bl	800d998 <HAL_TIM_PWM_ConfigChannel>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80018dc:	f000 fc1c 	bl	8002118 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018e4:	2204      	movs	r2, #4
 80018e6:	4619      	mov	r1, r3
 80018e8:	481f      	ldr	r0, [pc, #124]	; (8001968 <MX_TIM1_Init+0x1b8>)
 80018ea:	f00c f855 	bl	800d998 <HAL_TIM_PWM_ConfigChannel>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80018f4:	f000 fc10 	bl	8002118 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001900:	2208      	movs	r2, #8
 8001902:	4619      	mov	r1, r3
 8001904:	4818      	ldr	r0, [pc, #96]	; (8001968 <MX_TIM1_Init+0x1b8>)
 8001906:	f00c f847 	bl	800d998 <HAL_TIM_PWM_ConfigChannel>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8001910:	f000 fc02 	bl	8002118 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001914:	2300      	movs	r3, #0
 8001916:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001918:	2300      	movs	r3, #0
 800191a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800191c:	2300      	movs	r3, #0
 800191e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 10;
 8001920:	230a      	movs	r3, #10
 8001922:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001928:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800192a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800192e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001934:	2300      	movs	r3, #0
 8001936:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001938:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001942:	2300      	movs	r3, #0
 8001944:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001946:	463b      	mov	r3, r7
 8001948:	4619      	mov	r1, r3
 800194a:	4807      	ldr	r0, [pc, #28]	; (8001968 <MX_TIM1_Init+0x1b8>)
 800194c:	f00d f80e 	bl	800e96c <HAL_TIMEx_ConfigBreakDeadTime>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM1_Init+0x1aa>
  {
    Error_Handler();
 8001956:	f000 fbdf 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800195a:	4803      	ldr	r0, [pc, #12]	; (8001968 <MX_TIM1_Init+0x1b8>)
 800195c:	f001 f8e0 	bl	8002b20 <HAL_TIM_MspPostInit>

}
 8001960:	bf00      	nop
 8001962:	3778      	adds	r7, #120	; 0x78
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	240007e8 	.word	0x240007e8
 800196c:	40010000 	.word	0x40010000

08001970 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08e      	sub	sp, #56	; 0x38
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001976:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001984:	f107 031c 	add.w	r3, r7, #28
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001990:	463b      	mov	r3, r7
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	60da      	str	r2, [r3, #12]
 800199c:	611a      	str	r2, [r3, #16]
 800199e:	615a      	str	r2, [r3, #20]
 80019a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019a2:	4b2e      	ldr	r3, [pc, #184]	; (8001a5c <MX_TIM4_Init+0xec>)
 80019a4:	4a2e      	ldr	r2, [pc, #184]	; (8001a60 <MX_TIM4_Init+0xf0>)
 80019a6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9999;
 80019a8:	4b2c      	ldr	r3, [pc, #176]	; (8001a5c <MX_TIM4_Init+0xec>)
 80019aa:	f242 720f 	movw	r2, #9999	; 0x270f
 80019ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b0:	4b2a      	ldr	r3, [pc, #168]	; (8001a5c <MX_TIM4_Init+0xec>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80019b6:	4b29      	ldr	r3, [pc, #164]	; (8001a5c <MX_TIM4_Init+0xec>)
 80019b8:	f242 720f 	movw	r2, #9999	; 0x270f
 80019bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019be:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <MX_TIM4_Init+0xec>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c4:	4b25      	ldr	r3, [pc, #148]	; (8001a5c <MX_TIM4_Init+0xec>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80019ca:	4824      	ldr	r0, [pc, #144]	; (8001a5c <MX_TIM4_Init+0xec>)
 80019cc:	f00b fcef 	bl	800d3ae <HAL_TIM_Base_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 80019d6:	f000 fb9f 	bl	8002118 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80019e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019e4:	4619      	mov	r1, r3
 80019e6:	481d      	ldr	r0, [pc, #116]	; (8001a5c <MX_TIM4_Init+0xec>)
 80019e8:	f00c f8ea 	bl	800dbc0 <HAL_TIM_ConfigClockSource>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 80019f2:	f000 fb91 	bl	8002118 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80019f6:	4819      	ldr	r0, [pc, #100]	; (8001a5c <MX_TIM4_Init+0xec>)
 80019f8:	f00b fd30 	bl	800d45c <HAL_TIM_PWM_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001a02:	f000 fb89 	bl	8002118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	4619      	mov	r1, r3
 8001a14:	4811      	ldr	r0, [pc, #68]	; (8001a5c <MX_TIM4_Init+0xec>)
 8001a16:	f00c ff0d 	bl	800e834 <HAL_TIMEx_MasterConfigSynchronization>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001a20:	f000 fb7a 	bl	8002118 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a24:	2360      	movs	r3, #96	; 0x60
 8001a26:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5000;
 8001a28:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a2c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a36:	463b      	mov	r3, r7
 8001a38:	2200      	movs	r2, #0
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4807      	ldr	r0, [pc, #28]	; (8001a5c <MX_TIM4_Init+0xec>)
 8001a3e:	f00b ffab 	bl	800d998 <HAL_TIM_PWM_ConfigChannel>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8001a48:	f000 fb66 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001a4c:	4803      	ldr	r0, [pc, #12]	; (8001a5c <MX_TIM4_Init+0xec>)
 8001a4e:	f001 f867 	bl	8002b20 <HAL_TIM_MspPostInit>

}
 8001a52:	bf00      	nop
 8001a54:	3738      	adds	r7, #56	; 0x38
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	24000834 	.word	0x24000834
 8001a60:	40000800 	.word	0x40000800

08001a64 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6a:	f107 0310 	add.w	r3, r7, #16
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001a82:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <MX_TIM8_Init+0xa0>)
 8001a84:	4a20      	ldr	r2, [pc, #128]	; (8001b08 <MX_TIM8_Init+0xa4>)
 8001a86:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001a88:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <MX_TIM8_Init+0xa0>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a8e:	4b1d      	ldr	r3, [pc, #116]	; (8001b04 <MX_TIM8_Init+0xa0>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001a94:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <MX_TIM8_Init+0xa0>)
 8001a96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a9a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a9c:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <MX_TIM8_Init+0xa0>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001aa2:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <MX_TIM8_Init+0xa0>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa8:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <MX_TIM8_Init+0xa0>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001aae:	4815      	ldr	r0, [pc, #84]	; (8001b04 <MX_TIM8_Init+0xa0>)
 8001ab0:	f00b fc7d 	bl	800d3ae <HAL_TIM_Base_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001aba:	f000 fb2d 	bl	8002118 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	4619      	mov	r1, r3
 8001aca:	480e      	ldr	r0, [pc, #56]	; (8001b04 <MX_TIM8_Init+0xa0>)
 8001acc:	f00c f878 	bl	800dbc0 <HAL_TIM_ConfigClockSource>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001ad6:	f000 fb1f 	bl	8002118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ada:	2300      	movs	r3, #0
 8001adc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001ae6:	1d3b      	adds	r3, r7, #4
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4806      	ldr	r0, [pc, #24]	; (8001b04 <MX_TIM8_Init+0xa0>)
 8001aec:	f00c fea2 	bl	800e834 <HAL_TIMEx_MasterConfigSynchronization>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001af6:	f000 fb0f 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001afa:	bf00      	nop
 8001afc:	3720      	adds	r7, #32
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	24000880 	.word	0x24000880
 8001b08:	40010400 	.word	0x40010400

08001b0c <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001b10:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001b12:	4a16      	ldr	r2, [pc, #88]	; (8001b6c <MX_USB_OTG_HS_PCD_Init+0x60>)
 8001b14:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8001b16:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001b18:	2209      	movs	r2, #9
 8001b1a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001b1e:	2202      	movs	r2, #2
 8001b20:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001b22:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8001b28:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 8001b40:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8001b46:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8001b52:	4805      	ldr	r0, [pc, #20]	; (8001b68 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001b54:	f006 ffc5 	bl	8008ae2 <HAL_PCD_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8001b5e:	f000 fadb 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	240008cc 	.word	0x240008cc
 8001b6c:	40040000 	.word	0x40040000

08001b70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b76:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <MX_DMA_Init+0x7c>)
 8001b78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b7c:	4a1b      	ldr	r2, [pc, #108]	; (8001bec <MX_DMA_Init+0x7c>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b86:	4b19      	ldr	r3, [pc, #100]	; (8001bec <MX_DMA_Init+0x7c>)
 8001b88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	607b      	str	r3, [r7, #4]
 8001b92:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b94:	4b15      	ldr	r3, [pc, #84]	; (8001bec <MX_DMA_Init+0x7c>)
 8001b96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b9a:	4a14      	ldr	r2, [pc, #80]	; (8001bec <MX_DMA_Init+0x7c>)
 8001b9c:	f043 0302 	orr.w	r3, r3, #2
 8001ba0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ba4:	4b11      	ldr	r3, [pc, #68]	; (8001bec <MX_DMA_Init+0x7c>)
 8001ba6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	200b      	movs	r0, #11
 8001bb8:	f003 fc5b 	bl	8005472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001bbc:	200b      	movs	r0, #11
 8001bbe:	f003 fc72 	bl	80054a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	2038      	movs	r0, #56	; 0x38
 8001bc8:	f003 fc53 	bl	8005472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001bcc:	2038      	movs	r0, #56	; 0x38
 8001bce:	f003 fc6a 	bl	80054a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	2039      	movs	r0, #57	; 0x39
 8001bd8:	f003 fc4b 	bl	8005472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001bdc:	2039      	movs	r0, #57	; 0x39
 8001bde:	f003 fc62 	bl	80054a6 <HAL_NVIC_EnableIRQ>

}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	58024400 	.word	0x58024400

08001bf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08c      	sub	sp, #48	; 0x30
 8001bf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf6:	f107 031c 	add.w	r3, r7, #28
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	60da      	str	r2, [r3, #12]
 8001c04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c06:	4b5b      	ldr	r3, [pc, #364]	; (8001d74 <MX_GPIO_Init+0x184>)
 8001c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c0c:	4a59      	ldr	r2, [pc, #356]	; (8001d74 <MX_GPIO_Init+0x184>)
 8001c0e:	f043 0302 	orr.w	r3, r3, #2
 8001c12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c16:	4b57      	ldr	r3, [pc, #348]	; (8001d74 <MX_GPIO_Init+0x184>)
 8001c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	61bb      	str	r3, [r7, #24]
 8001c22:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c24:	4b53      	ldr	r3, [pc, #332]	; (8001d74 <MX_GPIO_Init+0x184>)
 8001c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c2a:	4a52      	ldr	r2, [pc, #328]	; (8001d74 <MX_GPIO_Init+0x184>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c34:	4b4f      	ldr	r3, [pc, #316]	; (8001d74 <MX_GPIO_Init+0x184>)
 8001c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c42:	4b4c      	ldr	r3, [pc, #304]	; (8001d74 <MX_GPIO_Init+0x184>)
 8001c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c48:	4a4a      	ldr	r2, [pc, #296]	; (8001d74 <MX_GPIO_Init+0x184>)
 8001c4a:	f043 0304 	orr.w	r3, r3, #4
 8001c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c52:	4b48      	ldr	r3, [pc, #288]	; (8001d74 <MX_GPIO_Init+0x184>)
 8001c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c60:	4b44      	ldr	r3, [pc, #272]	; (8001d74 <MX_GPIO_Init+0x184>)
 8001c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c66:	4a43      	ldr	r2, [pc, #268]	; (8001d74 <MX_GPIO_Init+0x184>)
 8001c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c70:	4b40      	ldr	r3, [pc, #256]	; (8001d74 <MX_GPIO_Init+0x184>)
 8001c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c7e:	4b3d      	ldr	r3, [pc, #244]	; (8001d74 <MX_GPIO_Init+0x184>)
 8001c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c84:	4a3b      	ldr	r2, [pc, #236]	; (8001d74 <MX_GPIO_Init+0x184>)
 8001c86:	f043 0310 	orr.w	r3, r3, #16
 8001c8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c8e:	4b39      	ldr	r3, [pc, #228]	; (8001d74 <MX_GPIO_Init+0x184>)
 8001c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c94:	f003 0310 	and.w	r3, r3, #16
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c9c:	4b35      	ldr	r3, [pc, #212]	; (8001d74 <MX_GPIO_Init+0x184>)
 8001c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca2:	4a34      	ldr	r2, [pc, #208]	; (8001d74 <MX_GPIO_Init+0x184>)
 8001ca4:	f043 0308 	orr.w	r3, r3, #8
 8001ca8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cac:	4b31      	ldr	r3, [pc, #196]	; (8001d74 <MX_GPIO_Init+0x184>)
 8001cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_SEN_CS_GPIO_Port, EXT_SEN_CS_Pin, GPIO_PIN_SET);
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cc0:	482d      	ldr	r0, [pc, #180]	; (8001d78 <MX_GPIO_Init+0x188>)
 8001cc2:	f006 fef5 	bl	8008ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SEN_CS_GPIO_Port, SPI2_SEN_CS_Pin, GPIO_PIN_SET);
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	2102      	movs	r1, #2
 8001cca:	482c      	ldr	r0, [pc, #176]	; (8001d7c <MX_GPIO_Init+0x18c>)
 8001ccc:	f006 fef0 	bl	8008ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_STB_GPIO_Port, CAN_STB_Pin, GPIO_PIN_RESET);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cd6:	4828      	ldr	r0, [pc, #160]	; (8001d78 <MX_GPIO_Init+0x188>)
 8001cd8:	f006 feea 	bl	8008ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Driver_Enable_GPIO_Port, Driver_Enable_Pin, GPIO_PIN_RESET);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ce2:	4827      	ldr	r0, [pc, #156]	; (8001d80 <MX_GPIO_Init+0x190>)
 8001ce4:	f006 fee4 	bl	8008ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Driver_CS_GPIO_Port, Driver_CS_Pin, GPIO_PIN_SET);
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cee:	4825      	ldr	r0, [pc, #148]	; (8001d84 <MX_GPIO_Init+0x194>)
 8001cf0:	f006 fede 	bl	8008ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EXT_SEN_CS_Pin CAN_STB_Pin */
  GPIO_InitStruct.Pin = EXT_SEN_CS_Pin|CAN_STB_Pin;
 8001cf4:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d02:	2300      	movs	r3, #0
 8001d04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d06:	f107 031c 	add.w	r3, r7, #28
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	481a      	ldr	r0, [pc, #104]	; (8001d78 <MX_GPIO_Init+0x188>)
 8001d0e:	f006 fd27 	bl	8008760 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SEN_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_SEN_CS_Pin;
 8001d12:	2302      	movs	r3, #2
 8001d14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d16:	2301      	movs	r3, #1
 8001d18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI2_SEN_CS_GPIO_Port, &GPIO_InitStruct);
 8001d22:	f107 031c 	add.w	r3, r7, #28
 8001d26:	4619      	mov	r1, r3
 8001d28:	4814      	ldr	r0, [pc, #80]	; (8001d7c <MX_GPIO_Init+0x18c>)
 8001d2a:	f006 fd19 	bl	8008760 <HAL_GPIO_Init>

  /*Configure GPIO pin : Driver_Enable_Pin */
  GPIO_InitStruct.Pin = Driver_Enable_Pin;
 8001d2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d34:	2301      	movs	r3, #1
 8001d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Driver_Enable_GPIO_Port, &GPIO_InitStruct);
 8001d40:	f107 031c 	add.w	r3, r7, #28
 8001d44:	4619      	mov	r1, r3
 8001d46:	480e      	ldr	r0, [pc, #56]	; (8001d80 <MX_GPIO_Init+0x190>)
 8001d48:	f006 fd0a 	bl	8008760 <HAL_GPIO_Init>

  /*Configure GPIO pin : Driver_CS_Pin */
  GPIO_InitStruct.Pin = Driver_CS_Pin;
 8001d4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d52:	2301      	movs	r3, #1
 8001d54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Driver_CS_GPIO_Port, &GPIO_InitStruct);
 8001d5e:	f107 031c 	add.w	r3, r7, #28
 8001d62:	4619      	mov	r1, r3
 8001d64:	4807      	ldr	r0, [pc, #28]	; (8001d84 <MX_GPIO_Init+0x194>)
 8001d66:	f006 fcfb 	bl	8008760 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d6a:	bf00      	nop
 8001d6c:	3730      	adds	r7, #48	; 0x30
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	58024400 	.word	0x58024400
 8001d78:	58020000 	.word	0x58020000
 8001d7c:	58021000 	.word	0x58021000
 8001d80:	58020800 	.word	0x58020800
 8001d84:	58020400 	.word	0x58020400

08001d88 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	if(&hadc1 == hadc)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a09      	ldr	r2, [pc, #36]	; (8001db8 <HAL_ADC_ConvCpltCallback+0x30>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d10a      	bne.n	8001dae <HAL_ADC_ConvCpltCallback+0x26>
	{
		HAL_GPIO_WritePin( EXT_SEN_CS_GPIO_Port, EXT_SEN_CS_Pin, GPIO_PIN_RESET );
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d9e:	4807      	ldr	r0, [pc, #28]	; (8001dbc <HAL_ADC_ConvCpltCallback+0x34>)
 8001da0:	f006 fe86 	bl	8008ab0 <HAL_GPIO_WritePin>
		HAL_SPI_Receive_IT(&hspi3, &SENSOR_HALL_DATA, 1);
 8001da4:	2201      	movs	r2, #1
 8001da6:	4906      	ldr	r1, [pc, #24]	; (8001dc0 <HAL_ADC_ConvCpltCallback+0x38>)
 8001da8:	4806      	ldr	r0, [pc, #24]	; (8001dc4 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001daa:	f00a feb9 	bl	800cb20 <HAL_SPI_Receive_IT>
	}
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	240001f4 	.word	0x240001f4
 8001dbc:	58020000 	.word	0x58020000
 8001dc0:	24000dee 	.word	0x24000dee
 8001dc4:	24000760 	.word	0x24000760

08001dc8 <debug_uart4_write_text>:


HAL_StatusTypeDef debug_uart4_write_text(uint8_t *pData)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
	//Sends a text message over UART
	if (HAL_UART_Transmit(&huart4, pData, strlen(pData), 10000) != HAL_OK)
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7fe faed 	bl	80003b0 <strlen>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	f242 7310 	movw	r3, #10000	; 0x2710
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	4806      	ldr	r0, [pc, #24]	; (8001dfc <debug_uart4_write_text+0x34>)
 8001de2:	f00c ffbc 	bl	800ed5e <HAL_UART_Transmit>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <debug_uart4_write_text+0x28>
	{
	  return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e000      	b.n	8001df2 <debug_uart4_write_text+0x2a>
	}
	return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	24000644 	.word	0x24000644

08001e00 <debug_uart4_write_float>:

HAL_StatusTypeDef debug_uart4_write_float(float number)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	ed87 0a01 	vstr	s0, [r7, #4]
	//Sends a number over UART
	char temp[15];
	memset(temp, 0, 15);
 8001e0a:	f107 0308 	add.w	r3, r7, #8
 8001e0e:	220f      	movs	r2, #15
 8001e10:	2100      	movs	r1, #0
 8001e12:	4618      	mov	r0, r3
 8001e14:	f00f fc19 	bl	801164a <memset>
	sprintf(temp, "%f", number );
 8001e18:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e1c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e20:	f107 0008 	add.w	r0, r7, #8
 8001e24:	ec53 2b17 	vmov	r2, r3, d7
 8001e28:	490a      	ldr	r1, [pc, #40]	; (8001e54 <debug_uart4_write_float+0x54>)
 8001e2a:	f00f fbab 	bl	8011584 <siprintf>
	if (HAL_UART_Transmit(&huart4, temp, 10, 10000) != HAL_OK)
 8001e2e:	f107 0108 	add.w	r1, r7, #8
 8001e32:	f242 7310 	movw	r3, #10000	; 0x2710
 8001e36:	220a      	movs	r2, #10
 8001e38:	4807      	ldr	r0, [pc, #28]	; (8001e58 <debug_uart4_write_float+0x58>)
 8001e3a:	f00c ff90 	bl	800ed5e <HAL_UART_Transmit>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <debug_uart4_write_float+0x48>
	  {
	    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e000      	b.n	8001e4a <debug_uart4_write_float+0x4a>
	  }
	return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	08014e40 	.word	0x08014e40
 8001e58:	24000644 	.word	0x24000644

08001e5c <Send_Command_Driver>:

HAL_StatusTypeDef Send_Command_Driver(uint16_t TX, uint16_t *RX, uint16_t length)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af02      	add	r7, sp, #8
 8001e62:	4603      	mov	r3, r0
 8001e64:	6039      	str	r1, [r7, #0]
 8001e66:	80fb      	strh	r3, [r7, #6]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	80bb      	strh	r3, [r7, #4]
	uint32_t Timeout = 1;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	60bb      	str	r3, [r7, #8]
	//Sends and Receives two bytes (one massage)
	HAL_StatusTypeDef return_Value = HAL_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin( Driver_CS_GPIO_Port, Driver_CS_Pin, GPIO_PIN_RESET );
 8001e74:	2200      	movs	r2, #0
 8001e76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e7a:	480e      	ldr	r0, [pc, #56]	; (8001eb4 <Send_Command_Driver+0x58>)
 8001e7c:	f006 fe18 	bl	8008ab0 <HAL_GPIO_WritePin>
	if(HAL_SPI_TransmitReceive(&hspi2, &TX, RX, length, Timeout) != HAL_OK)
 8001e80:	88ba      	ldrh	r2, [r7, #4]
 8001e82:	1db9      	adds	r1, r7, #6
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	480a      	ldr	r0, [pc, #40]	; (8001eb8 <Send_Command_Driver+0x5c>)
 8001e8e:	f00a fc2b 	bl	800c6e8 <HAL_SPI_TransmitReceive>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <Send_Command_Driver+0x40>
	{
		return_Value = HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	73fb      	strb	r3, [r7, #15]
	}
	HAL_GPIO_WritePin( Driver_CS_GPIO_Port, Driver_CS_Pin, GPIO_PIN_SET );
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ea2:	4804      	ldr	r0, [pc, #16]	; (8001eb4 <Send_Command_Driver+0x58>)
 8001ea4:	f006 fe04 	bl	8008ab0 <HAL_GPIO_WritePin>

	return return_Value;
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	58020400 	.word	0x58020400
 8001eb8:	240006d8 	.word	0x240006d8

08001ebc <Driver_set_up>:

HAL_StatusTypeDef Driver_set_up(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b088      	sub	sp, #32
 8001ec0:	af00      	add	r7, sp, #0
	//Function is setting up the MOSFet driver
	HAL_StatusTypeDef return_Value = HAL_OK;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(Driver_Enable_GPIO_Port, Driver_Enable_Pin, GPIO_PIN_SET);//Enable the Driver
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ecc:	485e      	ldr	r0, [pc, #376]	; (8002048 <Driver_set_up+0x18c>)
 8001ece:	f006 fdef 	bl	8008ab0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	f001 f96c 	bl	80031b0 <HAL_Delay>

	const uint16_t WRITE_BIT = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	83bb      	strh	r3, [r7, #28]
	const uint16_t READ_BIT = (1<<15);
 8001edc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ee0:	837b      	strh	r3, [r7, #26]
	const uint16_t FAULT_STATUS1_REG = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	833b      	strh	r3, [r7, #24]
	const uint16_t FAULT_STATUS2_REG = 0x0800;
 8001ee6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001eea:	82fb      	strh	r3, [r7, #22]
	const uint16_t DRIVER_CONTROL_REG = 0x1000;
 8001eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef0:	82bb      	strh	r3, [r7, #20]
	const uint16_t GATE_DRIVE_HS_REG = 0x1800;
 8001ef2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ef6:	827b      	strh	r3, [r7, #18]
	const uint16_t GATE_DRIVE_LS_REG = 0x2000;
 8001ef8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001efc:	823b      	strh	r3, [r7, #16]
	const uint16_t OCP_CONTROL_REG = 0x2800;
 8001efe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001f02:	81fb      	strh	r3, [r7, #14]
	const uint16_t CSA_CONTROL_REG = 0x3000;
 8001f04:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001f08:	81bb      	strh	r3, [r7, #12]
	const uint16_t DRIVER_CONFIG_REG = 0x3800;
 8001f0a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001f0e:	817b      	strh	r3, [r7, #10]
	const uint16_t Actual_data = 0x7FF;
 8001f10:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001f14:	813b      	strh	r3, [r7, #8]

	uint16_t RECEIVE_MSG = 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	80fb      	strh	r3, [r7, #6]

	//Check whether the drive is connected
	Send_Command_Driver((READ_BIT | CSA_CONTROL_REG), &RECEIVE_MSG, 1);
 8001f1a:	8b7a      	ldrh	r2, [r7, #26]
 8001f1c:	89bb      	ldrh	r3, [r7, #12]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	1db9      	adds	r1, r7, #6
 8001f24:	2201      	movs	r2, #1
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff ff98 	bl	8001e5c <Send_Command_Driver>
	if(RECEIVE_MSG != (0x283 & Actual_data))
 8001f2c:	893b      	ldrh	r3, [r7, #8]
 8001f2e:	f423 73be 	bic.w	r3, r3, #380	; 0x17c
 8001f32:	059b      	lsls	r3, r3, #22
 8001f34:	0d9b      	lsrs	r3, r3, #22
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d001      	beq.n	8001f42 <Driver_set_up+0x86>
	{
		return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e07d      	b.n	800203e <Driver_set_up+0x182>
	}

	Send_Command_Driver((WRITE_BIT | DRIVER_CONTROL_REG | (1<<10)), &RECEIVE_MSG, 1);//In case of a FAULT all H-bridges are turned of
 8001f42:	8bba      	ldrh	r2, [r7, #28]
 8001f44:	8abb      	ldrh	r3, [r7, #20]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	1db9      	adds	r1, r7, #6
 8001f52:	2201      	movs	r2, #1
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff ff81 	bl	8001e5c <Send_Command_Driver>

	Send_Command_Driver((READ_BIT | DRIVER_CONTROL_REG), &RECEIVE_MSG, 1);
 8001f5a:	8b7a      	ldrh	r2, [r7, #26]
 8001f5c:	8abb      	ldrh	r3, [r7, #20]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	1db9      	adds	r1, r7, #6
 8001f64:	2201      	movs	r2, #1
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff ff78 	bl	8001e5c <Send_Command_Driver>
	if(RECEIVE_MSG != ((1<<10) & Actual_data))
 8001f6c:	893b      	ldrh	r3, [r7, #8]
 8001f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	88fb      	ldrh	r3, [r7, #6]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d001      	beq.n	8001f7e <Driver_set_up+0xc2>
	{
		return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e05f      	b.n	800203e <Driver_set_up+0x182>
	//Send_Command_Driver(&(WRITE_BIT | GATE_DRIVE_HS_REG | 0b01110001000), &RECEIVE_MSG, 1);//Halfs the drive strength

	//Gate LS Drive
	//Send_Command_Driver(&(WRITE_BIT | GATE_DRIVE_HS_REG | 0b11010001000), &RECEIVE_MSG, 1);//Halfs the drive strength and reduces the peak gate current drive time

	Send_Command_Driver((WRITE_BIT | OCP_CONTROL_REG | 0b01001100110), &RECEIVE_MSG, 1);//Sets the dead time to 200ns and the VDS_LVL to 0.3V
 8001f7e:	8bba      	ldrh	r2, [r7, #28]
 8001f80:	89fb      	ldrh	r3, [r7, #14]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	f240 2366 	movw	r3, #614	; 0x266
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	1db9      	adds	r1, r7, #6
 8001f90:	2201      	movs	r2, #1
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff ff62 	bl	8001e5c <Send_Command_Driver>
	Send_Command_Driver((READ_BIT | OCP_CONTROL_REG), &RECEIVE_MSG, 1);
 8001f98:	8b7a      	ldrh	r2, [r7, #26]
 8001f9a:	89fb      	ldrh	r3, [r7, #14]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	1db9      	adds	r1, r7, #6
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff59 	bl	8001e5c <Send_Command_Driver>
	if(RECEIVE_MSG != (0b01001100110 & Actual_data))
 8001faa:	893b      	ldrh	r3, [r7, #8]
 8001fac:	f423 73cc 	bic.w	r3, r3, #408	; 0x198
 8001fb0:	f023 0301 	bic.w	r3, r3, #1
 8001fb4:	059b      	lsls	r3, r3, #22
 8001fb6:	0d9b      	lsrs	r3, r3, #22
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	88fb      	ldrh	r3, [r7, #6]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <Driver_set_up+0x108>
	{
		return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e03c      	b.n	800203e <Driver_set_up+0x182>
	}

	Send_Command_Driver((WRITE_BIT | CSA_CONTROL_REG | 0b01010000000), &RECEIVE_MSG, 1);//Sets SENSE OCP to 0,25V
 8001fc4:	8bba      	ldrh	r2, [r7, #28]
 8001fc6:	89bb      	ldrh	r3, [r7, #12]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	f443 7320 	orr.w	r3, r3, #640	; 0x280
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	1db9      	adds	r1, r7, #6
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff ff40 	bl	8001e5c <Send_Command_Driver>
	Send_Command_Driver((READ_BIT | CSA_CONTROL_REG), &RECEIVE_MSG, 1);
 8001fdc:	8b7a      	ldrh	r2, [r7, #26]
 8001fde:	89bb      	ldrh	r3, [r7, #12]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	1db9      	adds	r1, r7, #6
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff ff37 	bl	8001e5c <Send_Command_Driver>
	if(RECEIVE_MSG != (0b01010000000 & Actual_data))
 8001fee:	893b      	ldrh	r3, [r7, #8]
 8001ff0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	88fb      	ldrh	r3, [r7, #6]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d001      	beq.n	8002000 <Driver_set_up+0x144>
	{
		return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e01e      	b.n	800203e <Driver_set_up+0x182>
	}

	Send_Command_Driver((WRITE_BIT | DRIVER_CONFIG_REG | 0b1), &RECEIVE_MSG, 1);//activates the auto calibration routine
 8002000:	8bba      	ldrh	r2, [r7, #28]
 8002002:	897b      	ldrh	r3, [r7, #10]
 8002004:	4313      	orrs	r3, r2
 8002006:	b29b      	uxth	r3, r3
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	b29b      	uxth	r3, r3
 800200e:	1db9      	adds	r1, r7, #6
 8002010:	2201      	movs	r2, #1
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff ff22 	bl	8001e5c <Send_Command_Driver>
	Send_Command_Driver((READ_BIT | DRIVER_CONFIG_REG), &RECEIVE_MSG, 1);
 8002018:	8b7a      	ldrh	r2, [r7, #26]
 800201a:	897b      	ldrh	r3, [r7, #10]
 800201c:	4313      	orrs	r3, r2
 800201e:	b29b      	uxth	r3, r3
 8002020:	1db9      	adds	r1, r7, #6
 8002022:	2201      	movs	r2, #1
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff19 	bl	8001e5c <Send_Command_Driver>
	if(RECEIVE_MSG != (0b1 & Actual_data))
 800202a:	893b      	ldrh	r3, [r7, #8]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	b29a      	uxth	r2, r3
 8002032:	88fb      	ldrh	r3, [r7, #6]
 8002034:	429a      	cmp	r2, r3
 8002036:	d001      	beq.n	800203c <Driver_set_up+0x180>
	{
		return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e000      	b.n	800203e <Driver_set_up+0x182>
	}

	return return_Value;
 800203c:	7ffb      	ldrb	r3, [r7, #31]
}
 800203e:	4618      	mov	r0, r3
 8002040:	3720      	adds	r7, #32
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	58020800 	.word	0x58020800

0800204c <ShuntVolts_to_Amps>:

float ShuntVolts_to_Amps(float VMeas)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	ed87 0a01 	vstr	s0, [r7, #4]
	//Converts the shunt voltage to amps
	VMeas = VMeas - (3.3f/2.f);//Bias subtraction
 8002056:	edd7 7a01 	vldr	s15, [r7, #4]
 800205a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800209c <ShuntVolts_to_Amps+0x50>
 800205e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002062:	edc7 7a01 	vstr	s15, [r7, #4]
	VMeas = VMeas * (1.f/20.f);//Divide by the amplcation
 8002066:	edd7 7a01 	vldr	s15, [r7, #4]
 800206a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80020a0 <ShuntVolts_to_Amps+0x54>
 800206e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002072:	edc7 7a01 	vstr	s15, [r7, #4]
	VMeas = VMeas * (1.f/0.005f);//Divide by shunt resistance (U/R) = A
 8002076:	edd7 7a01 	vldr	s15, [r7, #4]
 800207a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80020a4 <ShuntVolts_to_Amps+0x58>
 800207e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002082:	edc7 7a01 	vstr	s15, [r7, #4]
	return VMeas;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	ee07 3a90 	vmov	s15, r3
}
 800208c:	eeb0 0a67 	vmov.f32	s0, s15
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	3fd33333 	.word	0x3fd33333
 80020a0:	3d4ccccd 	.word	0x3d4ccccd
 80020a4:	43480000 	.word	0x43480000

080020a8 <Volts_to_HalfbridgeVolts>:

float Volts_to_HalfbridgeVolts(float VMeas)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	ed87 0a01 	vstr	s0, [r7, #4]
	//Converts the Measured voltage to the actual voltage on Half bridges (also usable for the supply voltage)
	VMeas = VMeas * (85.f/5.f);//Divide by a Factor
 80020b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80020b6:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 80020ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020be:	edc7 7a01 	vstr	s15, [r7, #4]
	return VMeas;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	ee07 3a90 	vmov	s15, r3
}
 80020c8:	eeb0 0a67 	vmov.f32	s0, s15
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <Convert_HALL_Sensor_Data>:

	return return_Value;
}

float Convert_HALL_Sensor_Data(uint16_t Data)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	80fb      	strh	r3, [r7, #6]
	return (((float)Data*360.0f)/65536.0f);
 80020e2:	88fb      	ldrh	r3, [r7, #6]
 80020e4:	ee07 3a90 	vmov	s15, r3
 80020e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ec:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002110 <Convert_HALL_Sensor_Data+0x38>
 80020f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020f4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002114 <Convert_HALL_Sensor_Data+0x3c>
 80020f8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80020fc:	eef0 7a66 	vmov.f32	s15, s13
}
 8002100:	eeb0 0a67 	vmov.f32	s0, s15
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	43b40000 	.word	0x43b40000
 8002114:	47800000 	.word	0x47800000

08002118 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800211c:	b672      	cpsid	i
}
 800211e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002120:	e7fe      	b.n	8002120 <Error_Handler+0x8>
	...

08002124 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212a:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <HAL_MspInit+0x30>)
 800212c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002130:	4a08      	ldr	r2, [pc, #32]	; (8002154 <HAL_MspInit+0x30>)
 8002132:	f043 0302 	orr.w	r3, r3, #2
 8002136:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <HAL_MspInit+0x30>)
 800213c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	607b      	str	r3, [r7, #4]
 8002146:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	58024400 	.word	0x58024400

08002158 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b090      	sub	sp, #64	; 0x40
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a83      	ldr	r2, [pc, #524]	; (8002384 <HAL_ADC_MspInit+0x22c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d163      	bne.n	8002242 <HAL_ADC_MspInit+0xea>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800217a:	4b83      	ldr	r3, [pc, #524]	; (8002388 <HAL_ADC_MspInit+0x230>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	3301      	adds	r3, #1
 8002180:	4a81      	ldr	r2, [pc, #516]	; (8002388 <HAL_ADC_MspInit+0x230>)
 8002182:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002184:	4b80      	ldr	r3, [pc, #512]	; (8002388 <HAL_ADC_MspInit+0x230>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d10e      	bne.n	80021aa <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800218c:	4b7f      	ldr	r3, [pc, #508]	; (800238c <HAL_ADC_MspInit+0x234>)
 800218e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002192:	4a7e      	ldr	r2, [pc, #504]	; (800238c <HAL_ADC_MspInit+0x234>)
 8002194:	f043 0320 	orr.w	r3, r3, #32
 8002198:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800219c:	4b7b      	ldr	r3, [pc, #492]	; (800238c <HAL_ADC_MspInit+0x234>)
 800219e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80021a2:	f003 0320 	and.w	r3, r3, #32
 80021a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80021a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021aa:	4b78      	ldr	r3, [pc, #480]	; (800238c <HAL_ADC_MspInit+0x234>)
 80021ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b0:	4a76      	ldr	r2, [pc, #472]	; (800238c <HAL_ADC_MspInit+0x234>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021ba:	4b74      	ldr	r3, [pc, #464]	; (800238c <HAL_ADC_MspInit+0x234>)
 80021bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    PA1     ------> ADC1_INP17
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = I_Phase_V_Pin|I_Phase_U_Pin|U_Phase_V_Pin;
 80021c8:	230b      	movs	r3, #11
 80021ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021cc:	2303      	movs	r3, #3
 80021ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021d8:	4619      	mov	r1, r3
 80021da:	486d      	ldr	r0, [pc, #436]	; (8002390 <HAL_ADC_MspInit+0x238>)
 80021dc:	f006 fac0 	bl	8008760 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80021e0:	4b6c      	ldr	r3, [pc, #432]	; (8002394 <HAL_ADC_MspInit+0x23c>)
 80021e2:	4a6d      	ldr	r2, [pc, #436]	; (8002398 <HAL_ADC_MspInit+0x240>)
 80021e4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80021e6:	4b6b      	ldr	r3, [pc, #428]	; (8002394 <HAL_ADC_MspInit+0x23c>)
 80021e8:	2209      	movs	r2, #9
 80021ea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021ec:	4b69      	ldr	r3, [pc, #420]	; (8002394 <HAL_ADC_MspInit+0x23c>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021f2:	4b68      	ldr	r3, [pc, #416]	; (8002394 <HAL_ADC_MspInit+0x23c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80021f8:	4b66      	ldr	r3, [pc, #408]	; (8002394 <HAL_ADC_MspInit+0x23c>)
 80021fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021fe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002200:	4b64      	ldr	r3, [pc, #400]	; (8002394 <HAL_ADC_MspInit+0x23c>)
 8002202:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002206:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002208:	4b62      	ldr	r3, [pc, #392]	; (8002394 <HAL_ADC_MspInit+0x23c>)
 800220a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800220e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002210:	4b60      	ldr	r3, [pc, #384]	; (8002394 <HAL_ADC_MspInit+0x23c>)
 8002212:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002216:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002218:	4b5e      	ldr	r3, [pc, #376]	; (8002394 <HAL_ADC_MspInit+0x23c>)
 800221a:	2200      	movs	r2, #0
 800221c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800221e:	4b5d      	ldr	r3, [pc, #372]	; (8002394 <HAL_ADC_MspInit+0x23c>)
 8002220:	2200      	movs	r2, #0
 8002222:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002224:	485b      	ldr	r0, [pc, #364]	; (8002394 <HAL_ADC_MspInit+0x23c>)
 8002226:	f003 fab9 	bl	800579c <HAL_DMA_Init>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <HAL_ADC_MspInit+0xdc>
    {
      Error_Handler();
 8002230:	f7ff ff72 	bl	8002118 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a57      	ldr	r2, [pc, #348]	; (8002394 <HAL_ADC_MspInit+0x23c>)
 8002238:	659a      	str	r2, [r3, #88]	; 0x58
 800223a:	4a56      	ldr	r2, [pc, #344]	; (8002394 <HAL_ADC_MspInit+0x23c>)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002240:	e11b      	b.n	800247a <HAL_ADC_MspInit+0x322>
  else if(hadc->Instance==ADC2)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a55      	ldr	r2, [pc, #340]	; (800239c <HAL_ADC_MspInit+0x244>)
 8002248:	4293      	cmp	r3, r2
 800224a:	f040 80b1 	bne.w	80023b0 <HAL_ADC_MspInit+0x258>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800224e:	4b4e      	ldr	r3, [pc, #312]	; (8002388 <HAL_ADC_MspInit+0x230>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	3301      	adds	r3, #1
 8002254:	4a4c      	ldr	r2, [pc, #304]	; (8002388 <HAL_ADC_MspInit+0x230>)
 8002256:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002258:	4b4b      	ldr	r3, [pc, #300]	; (8002388 <HAL_ADC_MspInit+0x230>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d10e      	bne.n	800227e <HAL_ADC_MspInit+0x126>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002260:	4b4a      	ldr	r3, [pc, #296]	; (800238c <HAL_ADC_MspInit+0x234>)
 8002262:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002266:	4a49      	ldr	r2, [pc, #292]	; (800238c <HAL_ADC_MspInit+0x234>)
 8002268:	f043 0320 	orr.w	r3, r3, #32
 800226c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002270:	4b46      	ldr	r3, [pc, #280]	; (800238c <HAL_ADC_MspInit+0x234>)
 8002272:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002276:	f003 0320 	and.w	r3, r3, #32
 800227a:	623b      	str	r3, [r7, #32]
 800227c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800227e:	4b43      	ldr	r3, [pc, #268]	; (800238c <HAL_ADC_MspInit+0x234>)
 8002280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002284:	4a41      	ldr	r2, [pc, #260]	; (800238c <HAL_ADC_MspInit+0x234>)
 8002286:	f043 0304 	orr.w	r3, r3, #4
 800228a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800228e:	4b3f      	ldr	r3, [pc, #252]	; (800238c <HAL_ADC_MspInit+0x234>)
 8002290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	61fb      	str	r3, [r7, #28]
 800229a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800229c:	4b3b      	ldr	r3, [pc, #236]	; (800238c <HAL_ADC_MspInit+0x234>)
 800229e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022a2:	4a3a      	ldr	r2, [pc, #232]	; (800238c <HAL_ADC_MspInit+0x234>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022ac:	4b37      	ldr	r3, [pc, #220]	; (800238c <HAL_ADC_MspInit+0x234>)
 80022ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	61bb      	str	r3, [r7, #24]
 80022b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ba:	4b34      	ldr	r3, [pc, #208]	; (800238c <HAL_ADC_MspInit+0x234>)
 80022bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022c0:	4a32      	ldr	r2, [pc, #200]	; (800238c <HAL_ADC_MspInit+0x234>)
 80022c2:	f043 0302 	orr.w	r3, r3, #2
 80022c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022ca:	4b30      	ldr	r3, [pc, #192]	; (800238c <HAL_ADC_MspInit+0x234>)
 80022cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = U_Phase_U_Pin;
 80022d8:	2302      	movs	r3, #2
 80022da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022dc:	2303      	movs	r3, #3
 80022de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(U_Phase_U_GPIO_Port, &GPIO_InitStruct);
 80022e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022e8:	4619      	mov	r1, r3
 80022ea:	482d      	ldr	r0, [pc, #180]	; (80023a0 <HAL_ADC_MspInit+0x248>)
 80022ec:	f006 fa38 	bl	8008760 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = U_Phase_W_Pin;
 80022f0:	2304      	movs	r3, #4
 80022f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022f4:	2303      	movs	r3, #3
 80022f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(U_Phase_W_GPIO_Port, &GPIO_InitStruct);
 80022fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002300:	4619      	mov	r1, r3
 8002302:	4823      	ldr	r0, [pc, #140]	; (8002390 <HAL_ADC_MspInit+0x238>)
 8002304:	f006 fa2c 	bl	8008760 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I_Phase_W_Pin;
 8002308:	2301      	movs	r3, #1
 800230a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800230c:	2303      	movs	r3, #3
 800230e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I_Phase_W_GPIO_Port, &GPIO_InitStruct);
 8002314:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002318:	4619      	mov	r1, r3
 800231a:	4822      	ldr	r0, [pc, #136]	; (80023a4 <HAL_ADC_MspInit+0x24c>)
 800231c:	f006 fa20 	bl	8008760 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream0;
 8002320:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <HAL_ADC_MspInit+0x250>)
 8002322:	4a22      	ldr	r2, [pc, #136]	; (80023ac <HAL_ADC_MspInit+0x254>)
 8002324:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8002326:	4b20      	ldr	r3, [pc, #128]	; (80023a8 <HAL_ADC_MspInit+0x250>)
 8002328:	220a      	movs	r2, #10
 800232a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800232c:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <HAL_ADC_MspInit+0x250>)
 800232e:	2200      	movs	r2, #0
 8002330:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002332:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <HAL_ADC_MspInit+0x250>)
 8002334:	2200      	movs	r2, #0
 8002336:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <HAL_ADC_MspInit+0x250>)
 800233a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800233e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002340:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <HAL_ADC_MspInit+0x250>)
 8002342:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002346:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002348:	4b17      	ldr	r3, [pc, #92]	; (80023a8 <HAL_ADC_MspInit+0x250>)
 800234a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800234e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002350:	4b15      	ldr	r3, [pc, #84]	; (80023a8 <HAL_ADC_MspInit+0x250>)
 8002352:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002356:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002358:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <HAL_ADC_MspInit+0x250>)
 800235a:	2200      	movs	r2, #0
 800235c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800235e:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <HAL_ADC_MspInit+0x250>)
 8002360:	2200      	movs	r2, #0
 8002362:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002364:	4810      	ldr	r0, [pc, #64]	; (80023a8 <HAL_ADC_MspInit+0x250>)
 8002366:	f003 fa19 	bl	800579c <HAL_DMA_Init>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <HAL_ADC_MspInit+0x21c>
      Error_Handler();
 8002370:	f7ff fed2 	bl	8002118 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a0c      	ldr	r2, [pc, #48]	; (80023a8 <HAL_ADC_MspInit+0x250>)
 8002378:	659a      	str	r2, [r3, #88]	; 0x58
 800237a:	4a0b      	ldr	r2, [pc, #44]	; (80023a8 <HAL_ADC_MspInit+0x250>)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002380:	e07b      	b.n	800247a <HAL_ADC_MspInit+0x322>
 8002382:	bf00      	nop
 8002384:	40022000 	.word	0x40022000
 8002388:	24000df4 	.word	0x24000df4
 800238c:	58024400 	.word	0x58024400
 8002390:	58020000 	.word	0x58020000
 8002394:	24000344 	.word	0x24000344
 8002398:	40020010 	.word	0x40020010
 800239c:	40022100 	.word	0x40022100
 80023a0:	58020800 	.word	0x58020800
 80023a4:	58020400 	.word	0x58020400
 80023a8:	240003bc 	.word	0x240003bc
 80023ac:	40020410 	.word	0x40020410
  else if(hadc->Instance==ADC3)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a33      	ldr	r2, [pc, #204]	; (8002484 <HAL_ADC_MspInit+0x32c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d15f      	bne.n	800247a <HAL_ADC_MspInit+0x322>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80023ba:	4b33      	ldr	r3, [pc, #204]	; (8002488 <HAL_ADC_MspInit+0x330>)
 80023bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023c0:	4a31      	ldr	r2, [pc, #196]	; (8002488 <HAL_ADC_MspInit+0x330>)
 80023c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023ca:	4b2f      	ldr	r3, [pc, #188]	; (8002488 <HAL_ADC_MspInit+0x330>)
 80023cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023d4:	613b      	str	r3, [r7, #16]
 80023d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023d8:	4b2b      	ldr	r3, [pc, #172]	; (8002488 <HAL_ADC_MspInit+0x330>)
 80023da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023de:	4a2a      	ldr	r2, [pc, #168]	; (8002488 <HAL_ADC_MspInit+0x330>)
 80023e0:	f043 0304 	orr.w	r3, r3, #4
 80023e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023e8:	4b27      	ldr	r3, [pc, #156]	; (8002488 <HAL_ADC_MspInit+0x330>)
 80023ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_Supply_Pin;
 80023f6:	2301      	movs	r3, #1
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023fa:	2303      	movs	r3, #3
 80023fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(U_Supply_GPIO_Port, &GPIO_InitStruct);
 8002402:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002406:	4619      	mov	r1, r3
 8002408:	4820      	ldr	r0, [pc, #128]	; (800248c <HAL_ADC_MspInit+0x334>)
 800240a:	f006 f9a9 	bl	8008760 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800240e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002412:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002416:	f000 feef 	bl	80031f8 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream1;
 800241a:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <HAL_ADC_MspInit+0x338>)
 800241c:	4a1d      	ldr	r2, [pc, #116]	; (8002494 <HAL_ADC_MspInit+0x33c>)
 800241e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002420:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <HAL_ADC_MspInit+0x338>)
 8002422:	2273      	movs	r2, #115	; 0x73
 8002424:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002426:	4b1a      	ldr	r3, [pc, #104]	; (8002490 <HAL_ADC_MspInit+0x338>)
 8002428:	2200      	movs	r2, #0
 800242a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800242c:	4b18      	ldr	r3, [pc, #96]	; (8002490 <HAL_ADC_MspInit+0x338>)
 800242e:	2200      	movs	r2, #0
 8002430:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002432:	4b17      	ldr	r3, [pc, #92]	; (8002490 <HAL_ADC_MspInit+0x338>)
 8002434:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002438:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800243a:	4b15      	ldr	r3, [pc, #84]	; (8002490 <HAL_ADC_MspInit+0x338>)
 800243c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002440:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002442:	4b13      	ldr	r3, [pc, #76]	; (8002490 <HAL_ADC_MspInit+0x338>)
 8002444:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002448:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800244a:	4b11      	ldr	r3, [pc, #68]	; (8002490 <HAL_ADC_MspInit+0x338>)
 800244c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002450:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002452:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <HAL_ADC_MspInit+0x338>)
 8002454:	2200      	movs	r2, #0
 8002456:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002458:	4b0d      	ldr	r3, [pc, #52]	; (8002490 <HAL_ADC_MspInit+0x338>)
 800245a:	2200      	movs	r2, #0
 800245c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800245e:	480c      	ldr	r0, [pc, #48]	; (8002490 <HAL_ADC_MspInit+0x338>)
 8002460:	f003 f99c 	bl	800579c <HAL_DMA_Init>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_ADC_MspInit+0x316>
      Error_Handler();
 800246a:	f7ff fe55 	bl	8002118 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a07      	ldr	r2, [pc, #28]	; (8002490 <HAL_ADC_MspInit+0x338>)
 8002472:	659a      	str	r2, [r3, #88]	; 0x58
 8002474:	4a06      	ldr	r2, [pc, #24]	; (8002490 <HAL_ADC_MspInit+0x338>)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6393      	str	r3, [r2, #56]	; 0x38
}
 800247a:	bf00      	nop
 800247c:	3740      	adds	r7, #64	; 0x40
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	58026000 	.word	0x58026000
 8002488:	58024400 	.word	0x58024400
 800248c:	58020800 	.word	0x58020800
 8002490:	24000434 	.word	0x24000434
 8002494:	40020428 	.word	0x40020428

08002498 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08a      	sub	sp, #40	; 0x28
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a0:	f107 0314 	add.w	r3, r7, #20
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	60da      	str	r2, [r3, #12]
 80024ae:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a25      	ldr	r2, [pc, #148]	; (800254c <HAL_COMP_MspInit+0xb4>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d144      	bne.n	8002544 <HAL_COMP_MspInit+0xac>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 80024ba:	4b25      	ldr	r3, [pc, #148]	; (8002550 <HAL_COMP_MspInit+0xb8>)
 80024bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80024c0:	4a23      	ldr	r2, [pc, #140]	; (8002550 <HAL_COMP_MspInit+0xb8>)
 80024c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80024ca:	4b21      	ldr	r3, [pc, #132]	; (8002550 <HAL_COMP_MspInit+0xb8>)
 80024cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80024d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d8:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <HAL_COMP_MspInit+0xb8>)
 80024da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024de:	4a1c      	ldr	r2, [pc, #112]	; (8002550 <HAL_COMP_MspInit+0xb8>)
 80024e0:	f043 0304 	orr.w	r3, r3, #4
 80024e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024e8:	4b19      	ldr	r3, [pc, #100]	; (8002550 <HAL_COMP_MspInit+0xb8>)
 80024ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f6:	4b16      	ldr	r3, [pc, #88]	; (8002550 <HAL_COMP_MspInit+0xb8>)
 80024f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024fc:	4a14      	ldr	r2, [pc, #80]	; (8002550 <HAL_COMP_MspInit+0xb8>)
 80024fe:	f043 0302 	orr.w	r3, r3, #2
 8002502:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002506:	4b12      	ldr	r3, [pc, #72]	; (8002550 <HAL_COMP_MspInit+0xb8>)
 8002508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PC4     ------> COMP1_INM
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002514:	2310      	movs	r3, #16
 8002516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002518:	2303      	movs	r3, #3
 800251a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	4619      	mov	r1, r3
 8002526:	480b      	ldr	r0, [pc, #44]	; (8002554 <HAL_COMP_MspInit+0xbc>)
 8002528:	f006 f91a 	bl	8008760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800252c:	2304      	movs	r3, #4
 800252e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002530:	2303      	movs	r3, #3
 8002532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002538:	f107 0314 	add.w	r3, r7, #20
 800253c:	4619      	mov	r1, r3
 800253e:	4806      	ldr	r0, [pc, #24]	; (8002558 <HAL_COMP_MspInit+0xc0>)
 8002540:	f006 f90e 	bl	8008760 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8002544:	bf00      	nop
 8002546:	3728      	adds	r7, #40	; 0x28
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	5800380c 	.word	0x5800380c
 8002550:	58024400 	.word	0x58024400
 8002554:	58020800 	.word	0x58020800
 8002558:	58020400 	.word	0x58020400

0800255c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08a      	sub	sp, #40	; 0x28
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002564:	f107 0314 	add.w	r3, r7, #20
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	60da      	str	r2, [r3, #12]
 8002572:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a18      	ldr	r2, [pc, #96]	; (80025dc <HAL_DAC_MspInit+0x80>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d129      	bne.n	80025d2 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800257e:	4b18      	ldr	r3, [pc, #96]	; (80025e0 <HAL_DAC_MspInit+0x84>)
 8002580:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002584:	4a16      	ldr	r2, [pc, #88]	; (80025e0 <HAL_DAC_MspInit+0x84>)
 8002586:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800258a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800258e:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <HAL_DAC_MspInit+0x84>)
 8002590:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002594:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800259c:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <HAL_DAC_MspInit+0x84>)
 800259e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025a2:	4a0f      	ldr	r2, [pc, #60]	; (80025e0 <HAL_DAC_MspInit+0x84>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025ac:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <HAL_DAC_MspInit+0x84>)
 80025ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80025ba:	2310      	movs	r3, #16
 80025bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025be:	2303      	movs	r3, #3
 80025c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c2:	2300      	movs	r3, #0
 80025c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c6:	f107 0314 	add.w	r3, r7, #20
 80025ca:	4619      	mov	r1, r3
 80025cc:	4805      	ldr	r0, [pc, #20]	; (80025e4 <HAL_DAC_MspInit+0x88>)
 80025ce:	f006 f8c7 	bl	8008760 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80025d2:	bf00      	nop
 80025d4:	3728      	adds	r7, #40	; 0x28
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40007400 	.word	0x40007400
 80025e0:	58024400 	.word	0x58024400
 80025e4:	58020000 	.word	0x58020000

080025e8 <HAL_DTS_MspInit>:
* This function configures the hardware resources used in this example
* @param hdts: DTS handle pointer
* @retval None
*/
void HAL_DTS_MspInit(DTS_HandleTypeDef* hdts)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  if(hdts->Instance==DTS)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a0b      	ldr	r2, [pc, #44]	; (8002624 <HAL_DTS_MspInit+0x3c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d10e      	bne.n	8002618 <HAL_DTS_MspInit+0x30>
  {
  /* USER CODE BEGIN DTS_MspInit 0 */

  /* USER CODE END DTS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DTS_CLK_ENABLE();
 80025fa:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <HAL_DTS_MspInit+0x40>)
 80025fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002600:	4a09      	ldr	r2, [pc, #36]	; (8002628 <HAL_DTS_MspInit+0x40>)
 8002602:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002606:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800260a:	4b07      	ldr	r3, [pc, #28]	; (8002628 <HAL_DTS_MspInit+0x40>)
 800260c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002610:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DTS_MspInit 1 */

  /* USER CODE END DTS_MspInit 1 */
  }

}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	58006800 	.word	0x58006800
 8002628:	58024400 	.word	0x58024400

0800262c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b0b8      	sub	sp, #224	; 0xe0
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002644:	f107 0310 	add.w	r3, r7, #16
 8002648:	22b8      	movs	r2, #184	; 0xb8
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f00e fffc 	bl	801164a <memset>
  if(hfdcan->Instance==FDCAN1)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a27      	ldr	r2, [pc, #156]	; (80026f4 <HAL_FDCAN_MspInit+0xc8>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d146      	bne.n	80026ea <HAL_FDCAN_MspInit+0xbe>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800265c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002660:	f04f 0300 	mov.w	r3, #0
 8002664:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002668:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800266c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800266e:	f107 0310 	add.w	r3, r7, #16
 8002672:	4618      	mov	r0, r3
 8002674:	f007 fb2e 	bl	8009cd4 <HAL_RCCEx_PeriphCLKConfig>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 800267e:	f7ff fd4b 	bl	8002118 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002682:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <HAL_FDCAN_MspInit+0xcc>)
 8002684:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002688:	4a1b      	ldr	r2, [pc, #108]	; (80026f8 <HAL_FDCAN_MspInit+0xcc>)
 800268a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800268e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002692:	4b19      	ldr	r3, [pc, #100]	; (80026f8 <HAL_FDCAN_MspInit+0xcc>)
 8002694:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a0:	4b15      	ldr	r3, [pc, #84]	; (80026f8 <HAL_FDCAN_MspInit+0xcc>)
 80026a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026a6:	4a14      	ldr	r2, [pc, #80]	; (80026f8 <HAL_FDCAN_MspInit+0xcc>)
 80026a8:	f043 0302 	orr.w	r3, r3, #2
 80026ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026b0:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <HAL_FDCAN_MspInit+0xcc>)
 80026b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	60bb      	str	r3, [r7, #8]
 80026bc:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB9     ------> FDCAN1_TX
    PB8     ------> FDCAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 80026be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c6:	2302      	movs	r3, #2
 80026c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d2:	2300      	movs	r3, #0
 80026d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80026d8:	2309      	movs	r3, #9
 80026da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026de:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026e2:	4619      	mov	r1, r3
 80026e4:	4805      	ldr	r0, [pc, #20]	; (80026fc <HAL_FDCAN_MspInit+0xd0>)
 80026e6:	f006 f83b 	bl	8008760 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80026ea:	bf00      	nop
 80026ec:	37e0      	adds	r7, #224	; 0xe0
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	4000a000 	.word	0x4000a000
 80026f8:	58024400 	.word	0x58024400
 80026fc:	58020400 	.word	0x58020400

08002700 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b0ba      	sub	sp, #232	; 0xe8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002708:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002718:	f107 0318 	add.w	r3, r7, #24
 800271c:	22b8      	movs	r2, #184	; 0xb8
 800271e:	2100      	movs	r1, #0
 8002720:	4618      	mov	r0, r3
 8002722:	f00e ff92 	bl	801164a <memset>
  if(huart->Instance==LPUART1)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a4c      	ldr	r2, [pc, #304]	; (800285c <HAL_UART_MspInit+0x15c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d146      	bne.n	80027be <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002730:	f04f 0204 	mov.w	r2, #4
 8002734:	f04f 0300 	mov.w	r3, #0
 8002738:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 800273c:	2300      	movs	r3, #0
 800273e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002742:	f107 0318 	add.w	r3, r7, #24
 8002746:	4618      	mov	r0, r3
 8002748:	f007 fac4 	bl	8009cd4 <HAL_RCCEx_PeriphCLKConfig>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002752:	f7ff fce1 	bl	8002118 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002756:	4b42      	ldr	r3, [pc, #264]	; (8002860 <HAL_UART_MspInit+0x160>)
 8002758:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800275c:	4a40      	ldr	r2, [pc, #256]	; (8002860 <HAL_UART_MspInit+0x160>)
 800275e:	f043 0308 	orr.w	r3, r3, #8
 8002762:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002766:	4b3e      	ldr	r3, [pc, #248]	; (8002860 <HAL_UART_MspInit+0x160>)
 8002768:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002774:	4b3a      	ldr	r3, [pc, #232]	; (8002860 <HAL_UART_MspInit+0x160>)
 8002776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800277a:	4a39      	ldr	r2, [pc, #228]	; (8002860 <HAL_UART_MspInit+0x160>)
 800277c:	f043 0302 	orr.w	r3, r3, #2
 8002780:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002784:	4b36      	ldr	r3, [pc, #216]	; (8002860 <HAL_UART_MspInit+0x160>)
 8002786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	613b      	str	r3, [r7, #16]
 8002790:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB7     ------> LPUART1_RX
    PB6     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = External_uart_RX_Pin|External_uart_TX_Pin;
 8002792:	23c0      	movs	r3, #192	; 0xc0
 8002794:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002798:	2302      	movs	r3, #2
 800279a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a4:	2300      	movs	r3, #0
 80027a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART;
 80027aa:	2308      	movs	r3, #8
 80027ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80027b4:	4619      	mov	r1, r3
 80027b6:	482b      	ldr	r0, [pc, #172]	; (8002864 <HAL_UART_MspInit+0x164>)
 80027b8:	f005 ffd2 	bl	8008760 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80027bc:	e04a      	b.n	8002854 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==UART4)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a29      	ldr	r2, [pc, #164]	; (8002868 <HAL_UART_MspInit+0x168>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d145      	bne.n	8002854 <HAL_UART_MspInit+0x154>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80027c8:	f04f 0202 	mov.w	r2, #2
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80027d4:	2300      	movs	r3, #0
 80027d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027da:	f107 0318 	add.w	r3, r7, #24
 80027de:	4618      	mov	r0, r3
 80027e0:	f007 fa78 	bl	8009cd4 <HAL_RCCEx_PeriphCLKConfig>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_UART_MspInit+0xee>
      Error_Handler();
 80027ea:	f7ff fc95 	bl	8002118 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 80027ee:	4b1c      	ldr	r3, [pc, #112]	; (8002860 <HAL_UART_MspInit+0x160>)
 80027f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027f4:	4a1a      	ldr	r2, [pc, #104]	; (8002860 <HAL_UART_MspInit+0x160>)
 80027f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80027fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80027fe:	4b18      	ldr	r3, [pc, #96]	; (8002860 <HAL_UART_MspInit+0x160>)
 8002800:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002804:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800280c:	4b14      	ldr	r3, [pc, #80]	; (8002860 <HAL_UART_MspInit+0x160>)
 800280e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002812:	4a13      	ldr	r2, [pc, #76]	; (8002860 <HAL_UART_MspInit+0x160>)
 8002814:	f043 0308 	orr.w	r3, r3, #8
 8002818:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800281c:	4b10      	ldr	r3, [pc, #64]	; (8002860 <HAL_UART_MspInit+0x160>)
 800281e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	60bb      	str	r3, [r7, #8]
 8002828:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DEBUG_RX_Pin|DEBUG_TX_Pin;
 800282a:	2303      	movs	r3, #3
 800282c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002830:	2302      	movs	r3, #2
 8002832:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283c:	2300      	movs	r3, #0
 800283e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002842:	2308      	movs	r3, #8
 8002844:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002848:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800284c:	4619      	mov	r1, r3
 800284e:	4807      	ldr	r0, [pc, #28]	; (800286c <HAL_UART_MspInit+0x16c>)
 8002850:	f005 ff86 	bl	8008760 <HAL_GPIO_Init>
}
 8002854:	bf00      	nop
 8002856:	37e8      	adds	r7, #232	; 0xe8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	58000c00 	.word	0x58000c00
 8002860:	58024400 	.word	0x58024400
 8002864:	58020400 	.word	0x58020400
 8002868:	40004c00 	.word	0x40004c00
 800286c:	58020c00 	.word	0x58020c00

08002870 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b0ba      	sub	sp, #232	; 0xe8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002878:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002888:	f107 0318 	add.w	r3, r7, #24
 800288c:	22b8      	movs	r2, #184	; 0xb8
 800288e:	2100      	movs	r1, #0
 8002890:	4618      	mov	r0, r3
 8002892:	f00e feda 	bl	801164a <memset>
  if(hspi->Instance==SPI2)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a50      	ldr	r2, [pc, #320]	; (80029dc <HAL_SPI_MspInit+0x16c>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d146      	bne.n	800292e <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80028a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028a4:	f04f 0300 	mov.w	r3, #0
 80028a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028b0:	f107 0318 	add.w	r3, r7, #24
 80028b4:	4618      	mov	r0, r3
 80028b6:	f007 fa0d 	bl	8009cd4 <HAL_RCCEx_PeriphCLKConfig>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80028c0:	f7ff fc2a 	bl	8002118 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80028c4:	4b46      	ldr	r3, [pc, #280]	; (80029e0 <HAL_SPI_MspInit+0x170>)
 80028c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028ca:	4a45      	ldr	r2, [pc, #276]	; (80029e0 <HAL_SPI_MspInit+0x170>)
 80028cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80028d4:	4b42      	ldr	r3, [pc, #264]	; (80029e0 <HAL_SPI_MspInit+0x170>)
 80028d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e2:	4b3f      	ldr	r3, [pc, #252]	; (80029e0 <HAL_SPI_MspInit+0x170>)
 80028e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028e8:	4a3d      	ldr	r2, [pc, #244]	; (80029e0 <HAL_SPI_MspInit+0x170>)
 80028ea:	f043 0302 	orr.w	r3, r3, #2
 80028ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028f2:	4b3b      	ldr	r3, [pc, #236]	; (80029e0 <HAL_SPI_MspInit+0x170>)
 80028f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = Driver_Sen_MOSI_Pin|Driver_Sen_MISO_Pin|Driver_Sen_SCK_Pin;
 8002900:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002904:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002908:	2302      	movs	r3, #2
 800290a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290e:	2300      	movs	r3, #0
 8002910:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002914:	2300      	movs	r3, #0
 8002916:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800291a:	2305      	movs	r3, #5
 800291c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002920:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002924:	4619      	mov	r1, r3
 8002926:	482f      	ldr	r0, [pc, #188]	; (80029e4 <HAL_SPI_MspInit+0x174>)
 8002928:	f005 ff1a 	bl	8008760 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800292c:	e052      	b.n	80029d4 <HAL_SPI_MspInit+0x164>
  else if(hspi->Instance==SPI3)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a2d      	ldr	r2, [pc, #180]	; (80029e8 <HAL_SPI_MspInit+0x178>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d14d      	bne.n	80029d4 <HAL_SPI_MspInit+0x164>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002938:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002944:	2300      	movs	r3, #0
 8002946:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002948:	f107 0318 	add.w	r3, r7, #24
 800294c:	4618      	mov	r0, r3
 800294e:	f007 f9c1 	bl	8009cd4 <HAL_RCCEx_PeriphCLKConfig>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <HAL_SPI_MspInit+0xec>
      Error_Handler();
 8002958:	f7ff fbde 	bl	8002118 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800295c:	4b20      	ldr	r3, [pc, #128]	; (80029e0 <HAL_SPI_MspInit+0x170>)
 800295e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002962:	4a1f      	ldr	r2, [pc, #124]	; (80029e0 <HAL_SPI_MspInit+0x170>)
 8002964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002968:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800296c:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <HAL_SPI_MspInit+0x170>)
 800296e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002972:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800297a:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <HAL_SPI_MspInit+0x170>)
 800297c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002980:	4a17      	ldr	r2, [pc, #92]	; (80029e0 <HAL_SPI_MspInit+0x170>)
 8002982:	f043 0304 	orr.w	r3, r3, #4
 8002986:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800298a:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <HAL_SPI_MspInit+0x170>)
 800298c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	60bb      	str	r3, [r7, #8]
 8002996:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EXT_SEN_MISO_Pin|EXT_SEN_SCK_Pin|EXT_SEN_MOSI_Pin;
 8002998:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800299c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a0:	2302      	movs	r3, #2
 80029a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ac:	2300      	movs	r3, #0
 80029ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80029b2:	2306      	movs	r3, #6
 80029b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029bc:	4619      	mov	r1, r3
 80029be:	480b      	ldr	r0, [pc, #44]	; (80029ec <HAL_SPI_MspInit+0x17c>)
 80029c0:	f005 fece 	bl	8008760 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80029c4:	2200      	movs	r2, #0
 80029c6:	2100      	movs	r1, #0
 80029c8:	2033      	movs	r0, #51	; 0x33
 80029ca:	f002 fd52 	bl	8005472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80029ce:	2033      	movs	r0, #51	; 0x33
 80029d0:	f002 fd69 	bl	80054a6 <HAL_NVIC_EnableIRQ>
}
 80029d4:	bf00      	nop
 80029d6:	37e8      	adds	r7, #232	; 0xe8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40003800 	.word	0x40003800
 80029e0:	58024400 	.word	0x58024400
 80029e4:	58020400 	.word	0x58020400
 80029e8:	40003c00 	.word	0x40003c00
 80029ec:	58020800 	.word	0x58020800

080029f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08c      	sub	sp, #48	; 0x30
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f8:	f107 031c 	add.w	r3, r7, #28
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	605a      	str	r2, [r3, #4]
 8002a02:	609a      	str	r2, [r3, #8]
 8002a04:	60da      	str	r2, [r3, #12]
 8002a06:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a3f      	ldr	r2, [pc, #252]	; (8002b0c <HAL_TIM_Base_MspInit+0x11c>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d14f      	bne.n	8002ab2 <HAL_TIM_Base_MspInit+0xc2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a12:	4b3f      	ldr	r3, [pc, #252]	; (8002b10 <HAL_TIM_Base_MspInit+0x120>)
 8002a14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a18:	4a3d      	ldr	r2, [pc, #244]	; (8002b10 <HAL_TIM_Base_MspInit+0x120>)
 8002a1a:	f043 0301 	orr.w	r3, r3, #1
 8002a1e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002a22:	4b3b      	ldr	r3, [pc, #236]	; (8002b10 <HAL_TIM_Base_MspInit+0x120>)
 8002a24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	61bb      	str	r3, [r7, #24]
 8002a2e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a30:	4b37      	ldr	r3, [pc, #220]	; (8002b10 <HAL_TIM_Base_MspInit+0x120>)
 8002a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a36:	4a36      	ldr	r2, [pc, #216]	; (8002b10 <HAL_TIM_Base_MspInit+0x120>)
 8002a38:	f043 0310 	orr.w	r3, r3, #16
 8002a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a40:	4b33      	ldr	r3, [pc, #204]	; (8002b10 <HAL_TIM_Base_MspInit+0x120>)
 8002a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a46:	f003 0310 	and.w	r3, r3, #16
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = Driver_fault_Pin;
 8002a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a54:	2312      	movs	r3, #18
 8002a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a60:	2301      	movs	r3, #1
 8002a62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Driver_fault_GPIO_Port, &GPIO_InitStruct);
 8002a64:	f107 031c 	add.w	r3, r7, #28
 8002a68:	4619      	mov	r1, r3
 8002a6a:	482a      	ldr	r0, [pc, #168]	; (8002b14 <HAL_TIM_Base_MspInit+0x124>)
 8002a6c:	f005 fe78 	bl	8008760 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002a70:	2200      	movs	r2, #0
 8002a72:	2100      	movs	r1, #0
 8002a74:	2018      	movs	r0, #24
 8002a76:	f002 fcfc 	bl	8005472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002a7a:	2018      	movs	r0, #24
 8002a7c:	f002 fd13 	bl	80054a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002a80:	2200      	movs	r2, #0
 8002a82:	2100      	movs	r1, #0
 8002a84:	2019      	movs	r0, #25
 8002a86:	f002 fcf4 	bl	8005472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002a8a:	2019      	movs	r0, #25
 8002a8c:	f002 fd0b 	bl	80054a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8002a90:	2200      	movs	r2, #0
 8002a92:	2100      	movs	r1, #0
 8002a94:	201a      	movs	r0, #26
 8002a96:	f002 fcec 	bl	8005472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002a9a:	201a      	movs	r0, #26
 8002a9c:	f002 fd03 	bl	80054a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	201b      	movs	r0, #27
 8002aa6:	f002 fce4 	bl	8005472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002aaa:	201b      	movs	r0, #27
 8002aac:	f002 fcfb 	bl	80054a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002ab0:	e028      	b.n	8002b04 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM4)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a18      	ldr	r2, [pc, #96]	; (8002b18 <HAL_TIM_Base_MspInit+0x128>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d10f      	bne.n	8002adc <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002abc:	4b14      	ldr	r3, [pc, #80]	; (8002b10 <HAL_TIM_Base_MspInit+0x120>)
 8002abe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ac2:	4a13      	ldr	r2, [pc, #76]	; (8002b10 <HAL_TIM_Base_MspInit+0x120>)
 8002ac4:	f043 0304 	orr.w	r3, r3, #4
 8002ac8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002acc:	4b10      	ldr	r3, [pc, #64]	; (8002b10 <HAL_TIM_Base_MspInit+0x120>)
 8002ace:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	613b      	str	r3, [r7, #16]
 8002ad8:	693b      	ldr	r3, [r7, #16]
}
 8002ada:	e013      	b.n	8002b04 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM8)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a0e      	ldr	r2, [pc, #56]	; (8002b1c <HAL_TIM_Base_MspInit+0x12c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d10e      	bne.n	8002b04 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <HAL_TIM_Base_MspInit+0x120>)
 8002ae8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002aec:	4a08      	ldr	r2, [pc, #32]	; (8002b10 <HAL_TIM_Base_MspInit+0x120>)
 8002aee:	f043 0302 	orr.w	r3, r3, #2
 8002af2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002af6:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <HAL_TIM_Base_MspInit+0x120>)
 8002af8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	68fb      	ldr	r3, [r7, #12]
}
 8002b04:	bf00      	nop
 8002b06:	3730      	adds	r7, #48	; 0x30
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40010000 	.word	0x40010000
 8002b10:	58024400 	.word	0x58024400
 8002b14:	58021000 	.word	0x58021000
 8002b18:	40000800 	.word	0x40000800
 8002b1c:	40010400 	.word	0x40010400

08002b20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08a      	sub	sp, #40	; 0x28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b28:	f107 0314 	add.w	r3, r7, #20
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	60da      	str	r2, [r3, #12]
 8002b36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a26      	ldr	r2, [pc, #152]	; (8002bd8 <HAL_TIM_MspPostInit+0xb8>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d120      	bne.n	8002b84 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b42:	4b26      	ldr	r3, [pc, #152]	; (8002bdc <HAL_TIM_MspPostInit+0xbc>)
 8002b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b48:	4a24      	ldr	r2, [pc, #144]	; (8002bdc <HAL_TIM_MspPostInit+0xbc>)
 8002b4a:	f043 0310 	orr.w	r3, r3, #16
 8002b4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b52:	4b22      	ldr	r3, [pc, #136]	; (8002bdc <HAL_TIM_MspPostInit+0xbc>)
 8002b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b58:	f003 0310 	and.w	r3, r3, #16
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	693b      	ldr	r3, [r7, #16]
    PE8     ------> TIM1_CH1N
    PE12     ------> TIM1_CH3N
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM_V_L_Pin|PWM_V_H_Pin|PWM_U_L_Pin|PWM_W_L_Pin
 8002b60:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 8002b64:	617b      	str	r3, [r7, #20]
                          |PWM_U_H_Pin|PWM_W_H_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b66:	2302      	movs	r3, #2
 8002b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b72:	2301      	movs	r3, #1
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b76:	f107 0314 	add.w	r3, r7, #20
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4818      	ldr	r0, [pc, #96]	; (8002be0 <HAL_TIM_MspPostInit+0xc0>)
 8002b7e:	f005 fdef 	bl	8008760 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002b82:	e024      	b.n	8002bce <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM4)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a16      	ldr	r2, [pc, #88]	; (8002be4 <HAL_TIM_MspPostInit+0xc4>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d11f      	bne.n	8002bce <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b8e:	4b13      	ldr	r3, [pc, #76]	; (8002bdc <HAL_TIM_MspPostInit+0xbc>)
 8002b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b94:	4a11      	ldr	r2, [pc, #68]	; (8002bdc <HAL_TIM_MspPostInit+0xbc>)
 8002b96:	f043 0308 	orr.w	r3, r3, #8
 8002b9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b9e:	4b0f      	ldr	r3, [pc, #60]	; (8002bdc <HAL_TIM_MspPostInit+0xbc>)
 8002ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ba4:	f003 0308 	and.w	r3, r3, #8
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USER_LED_Pin;
 8002bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8002bc2:	f107 0314 	add.w	r3, r7, #20
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4807      	ldr	r0, [pc, #28]	; (8002be8 <HAL_TIM_MspPostInit+0xc8>)
 8002bca:	f005 fdc9 	bl	8008760 <HAL_GPIO_Init>
}
 8002bce:	bf00      	nop
 8002bd0:	3728      	adds	r7, #40	; 0x28
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40010000 	.word	0x40010000
 8002bdc:	58024400 	.word	0x58024400
 8002be0:	58021000 	.word	0x58021000
 8002be4:	40000800 	.word	0x40000800
 8002be8:	58020c00 	.word	0x58020c00

08002bec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b0b8      	sub	sp, #224	; 0xe0
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	609a      	str	r2, [r3, #8]
 8002c00:	60da      	str	r2, [r3, #12]
 8002c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c04:	f107 0310 	add.w	r3, r7, #16
 8002c08:	22b8      	movs	r2, #184	; 0xb8
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f00e fd1c 	bl	801164a <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a25      	ldr	r2, [pc, #148]	; (8002cac <HAL_PCD_MspInit+0xc0>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d143      	bne.n	8002ca4 <HAL_PCD_MspInit+0xb8>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002c1c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002c28:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c30:	f107 0310 	add.w	r3, r7, #16
 8002c34:	4618      	mov	r0, r3
 8002c36:	f007 f84d 	bl	8009cd4 <HAL_RCCEx_PeriphCLKConfig>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8002c40:	f7ff fa6a 	bl	8002118 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002c44:	f006 f8d0 	bl	8008de8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c48:	4b19      	ldr	r3, [pc, #100]	; (8002cb0 <HAL_PCD_MspInit+0xc4>)
 8002c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c4e:	4a18      	ldr	r2, [pc, #96]	; (8002cb0 <HAL_PCD_MspInit+0xc4>)
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c58:	4b15      	ldr	r3, [pc, #84]	; (8002cb0 <HAL_PCD_MspInit+0xc4>)
 8002c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c7a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c7e:	4619      	mov	r1, r3
 8002c80:	480c      	ldr	r0, [pc, #48]	; (8002cb4 <HAL_PCD_MspInit+0xc8>)
 8002c82:	f005 fd6d 	bl	8008760 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002c86:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <HAL_PCD_MspInit+0xc4>)
 8002c88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002c8c:	4a08      	ldr	r2, [pc, #32]	; (8002cb0 <HAL_PCD_MspInit+0xc4>)
 8002c8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c92:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002c96:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <HAL_PCD_MspInit+0xc4>)
 8002c98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8002ca4:	bf00      	nop
 8002ca6:	37e0      	adds	r7, #224	; 0xe0
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40040000 	.word	0x40040000
 8002cb0:	58024400 	.word	0x58024400
 8002cb4:	58020000 	.word	0x58020000

08002cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cbc:	e7fe      	b.n	8002cbc <NMI_Handler+0x4>

08002cbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cc2:	e7fe      	b.n	8002cc2 <HardFault_Handler+0x4>

08002cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cc8:	e7fe      	b.n	8002cc8 <MemManage_Handler+0x4>

08002cca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cce:	e7fe      	b.n	8002cce <BusFault_Handler+0x4>

08002cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cd4:	e7fe      	b.n	8002cd4 <UsageFault_Handler+0x4>

08002cd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cda:	bf00      	nop
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ce8:	bf00      	nop
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cf6:	bf00      	nop
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d04:	f000 fa34 	bl	8003170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d08:	bf00      	nop
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d10:	4802      	ldr	r0, [pc, #8]	; (8002d1c <DMA1_Stream0_IRQHandler+0x10>)
 8002d12:	f003 fd4b 	bl	80067ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002d16:	bf00      	nop
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	24000344 	.word	0x24000344

08002d20 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d24:	4802      	ldr	r0, [pc, #8]	; (8002d30 <TIM1_BRK_IRQHandler+0x10>)
 8002d26:	f00a fd17 	bl	800d758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002d2a:	bf00      	nop
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	240007e8 	.word	0x240007e8

08002d34 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d38:	4802      	ldr	r0, [pc, #8]	; (8002d44 <TIM1_UP_IRQHandler+0x10>)
 8002d3a:	f00a fd0d 	bl	800d758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	240007e8 	.word	0x240007e8

08002d48 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d4c:	4802      	ldr	r0, [pc, #8]	; (8002d58 <TIM1_TRG_COM_IRQHandler+0x10>)
 8002d4e:	f00a fd03 	bl	800d758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002d52:	bf00      	nop
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	240007e8 	.word	0x240007e8

08002d5c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d60:	4802      	ldr	r0, [pc, #8]	; (8002d6c <TIM1_CC_IRQHandler+0x10>)
 8002d62:	f00a fcf9 	bl	800d758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	240007e8 	.word	0x240007e8

08002d70 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

	HAL_GPIO_WritePin( EXT_SEN_CS_GPIO_Port, EXT_SEN_CS_Pin, GPIO_PIN_SET );
 8002d74:	2201      	movs	r2, #1
 8002d76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d7a:	4804      	ldr	r0, [pc, #16]	; (8002d8c <SPI3_IRQHandler+0x1c>)
 8002d7c:	f005 fe98 	bl	8008ab0 <HAL_GPIO_WritePin>

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002d80:	4803      	ldr	r0, [pc, #12]	; (8002d90 <SPI3_IRQHandler+0x20>)
 8002d82:	f009 ff85 	bl	800cc90 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	58020000 	.word	0x58020000
 8002d90:	24000760 	.word	0x24000760

08002d94 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002d98:	4802      	ldr	r0, [pc, #8]	; (8002da4 <DMA2_Stream0_IRQHandler+0x10>)
 8002d9a:	f003 fd07 	bl	80067ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	240003bc 	.word	0x240003bc

08002da8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002dac:	4802      	ldr	r0, [pc, #8]	; (8002db8 <DMA2_Stream1_IRQHandler+0x10>)
 8002dae:	f003 fcfd 	bl	80067ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002db2:	bf00      	nop
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	24000434 	.word	0x24000434

08002dbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  return 1;
 8002dc0:	2301      	movs	r3, #1
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <_kill>:

int _kill(int pid, int sig)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002dd6:	f00e fc8b 	bl	80116f0 <__errno>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2216      	movs	r2, #22
 8002dde:	601a      	str	r2, [r3, #0]
  return -1;
 8002de0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <_exit>:

void _exit (int status)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002df4:	f04f 31ff 	mov.w	r1, #4294967295
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f7ff ffe7 	bl	8002dcc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002dfe:	e7fe      	b.n	8002dfe <_exit+0x12>

08002e00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	617b      	str	r3, [r7, #20]
 8002e10:	e00a      	b.n	8002e28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e12:	f3af 8000 	nop.w
 8002e16:	4601      	mov	r1, r0
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	1c5a      	adds	r2, r3, #1
 8002e1c:	60ba      	str	r2, [r7, #8]
 8002e1e:	b2ca      	uxtb	r2, r1
 8002e20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	3301      	adds	r3, #1
 8002e26:	617b      	str	r3, [r7, #20]
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	dbf0      	blt.n	8002e12 <_read+0x12>
  }

  return len;
 8002e30:	687b      	ldr	r3, [r7, #4]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b086      	sub	sp, #24
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	60f8      	str	r0, [r7, #12]
 8002e42:	60b9      	str	r1, [r7, #8]
 8002e44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]
 8002e4a:	e009      	b.n	8002e60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	60ba      	str	r2, [r7, #8]
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	617b      	str	r3, [r7, #20]
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	dbf1      	blt.n	8002e4c <_write+0x12>
  }
  return len;
 8002e68:	687b      	ldr	r3, [r7, #4]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3718      	adds	r7, #24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <_close>:

int _close(int file)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
 8002e92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e9a:	605a      	str	r2, [r3, #4]
  return 0;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <_isatty>:

int _isatty(int file)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002eb2:	2301      	movs	r3, #1
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
	...

08002edc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ee4:	4a14      	ldr	r2, [pc, #80]	; (8002f38 <_sbrk+0x5c>)
 8002ee6:	4b15      	ldr	r3, [pc, #84]	; (8002f3c <_sbrk+0x60>)
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ef0:	4b13      	ldr	r3, [pc, #76]	; (8002f40 <_sbrk+0x64>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d102      	bne.n	8002efe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ef8:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <_sbrk+0x64>)
 8002efa:	4a12      	ldr	r2, [pc, #72]	; (8002f44 <_sbrk+0x68>)
 8002efc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002efe:	4b10      	ldr	r3, [pc, #64]	; (8002f40 <_sbrk+0x64>)
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4413      	add	r3, r2
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d207      	bcs.n	8002f1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f0c:	f00e fbf0 	bl	80116f0 <__errno>
 8002f10:	4603      	mov	r3, r0
 8002f12:	220c      	movs	r2, #12
 8002f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f16:	f04f 33ff 	mov.w	r3, #4294967295
 8002f1a:	e009      	b.n	8002f30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f1c:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <_sbrk+0x64>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f22:	4b07      	ldr	r3, [pc, #28]	; (8002f40 <_sbrk+0x64>)
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	4a05      	ldr	r2, [pc, #20]	; (8002f40 <_sbrk+0x64>)
 8002f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	24050000 	.word	0x24050000
 8002f3c:	00000400 	.word	0x00000400
 8002f40:	24000df8 	.word	0x24000df8
 8002f44:	24000f50 	.word	0x24000f50

08002f48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002f4c:	4b32      	ldr	r3, [pc, #200]	; (8003018 <SystemInit+0xd0>)
 8002f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f52:	4a31      	ldr	r2, [pc, #196]	; (8003018 <SystemInit+0xd0>)
 8002f54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f5c:	4b2f      	ldr	r3, [pc, #188]	; (800301c <SystemInit+0xd4>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 030f 	and.w	r3, r3, #15
 8002f64:	2b06      	cmp	r3, #6
 8002f66:	d807      	bhi.n	8002f78 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f68:	4b2c      	ldr	r3, [pc, #176]	; (800301c <SystemInit+0xd4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f023 030f 	bic.w	r3, r3, #15
 8002f70:	4a2a      	ldr	r2, [pc, #168]	; (800301c <SystemInit+0xd4>)
 8002f72:	f043 0307 	orr.w	r3, r3, #7
 8002f76:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002f78:	4b29      	ldr	r3, [pc, #164]	; (8003020 <SystemInit+0xd8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a28      	ldr	r2, [pc, #160]	; (8003020 <SystemInit+0xd8>)
 8002f7e:	f043 0301 	orr.w	r3, r3, #1
 8002f82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002f84:	4b26      	ldr	r3, [pc, #152]	; (8003020 <SystemInit+0xd8>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002f8a:	4b25      	ldr	r3, [pc, #148]	; (8003020 <SystemInit+0xd8>)
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	4924      	ldr	r1, [pc, #144]	; (8003020 <SystemInit+0xd8>)
 8002f90:	4b24      	ldr	r3, [pc, #144]	; (8003024 <SystemInit+0xdc>)
 8002f92:	4013      	ands	r3, r2
 8002f94:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f96:	4b21      	ldr	r3, [pc, #132]	; (800301c <SystemInit+0xd4>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d007      	beq.n	8002fb2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002fa2:	4b1e      	ldr	r3, [pc, #120]	; (800301c <SystemInit+0xd4>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f023 030f 	bic.w	r3, r3, #15
 8002faa:	4a1c      	ldr	r2, [pc, #112]	; (800301c <SystemInit+0xd4>)
 8002fac:	f043 0307 	orr.w	r3, r3, #7
 8002fb0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002fb2:	4b1b      	ldr	r3, [pc, #108]	; (8003020 <SystemInit+0xd8>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002fb8:	4b19      	ldr	r3, [pc, #100]	; (8003020 <SystemInit+0xd8>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002fbe:	4b18      	ldr	r3, [pc, #96]	; (8003020 <SystemInit+0xd8>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002fc4:	4b16      	ldr	r3, [pc, #88]	; (8003020 <SystemInit+0xd8>)
 8002fc6:	4a18      	ldr	r2, [pc, #96]	; (8003028 <SystemInit+0xe0>)
 8002fc8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002fca:	4b15      	ldr	r3, [pc, #84]	; (8003020 <SystemInit+0xd8>)
 8002fcc:	4a17      	ldr	r2, [pc, #92]	; (800302c <SystemInit+0xe4>)
 8002fce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002fd0:	4b13      	ldr	r3, [pc, #76]	; (8003020 <SystemInit+0xd8>)
 8002fd2:	4a17      	ldr	r2, [pc, #92]	; (8003030 <SystemInit+0xe8>)
 8002fd4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002fd6:	4b12      	ldr	r3, [pc, #72]	; (8003020 <SystemInit+0xd8>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002fdc:	4b10      	ldr	r3, [pc, #64]	; (8003020 <SystemInit+0xd8>)
 8002fde:	4a14      	ldr	r2, [pc, #80]	; (8003030 <SystemInit+0xe8>)
 8002fe0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002fe2:	4b0f      	ldr	r3, [pc, #60]	; (8003020 <SystemInit+0xd8>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002fe8:	4b0d      	ldr	r3, [pc, #52]	; (8003020 <SystemInit+0xd8>)
 8002fea:	4a11      	ldr	r2, [pc, #68]	; (8003030 <SystemInit+0xe8>)
 8002fec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002fee:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <SystemInit+0xd8>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ff4:	4b0a      	ldr	r3, [pc, #40]	; (8003020 <SystemInit+0xd8>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a09      	ldr	r2, [pc, #36]	; (8003020 <SystemInit+0xd8>)
 8002ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ffe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003000:	4b07      	ldr	r3, [pc, #28]	; (8003020 <SystemInit+0xd8>)
 8003002:	2200      	movs	r2, #0
 8003004:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003006:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <SystemInit+0xec>)
 8003008:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800300c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800300e:	bf00      	nop
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	e000ed00 	.word	0xe000ed00
 800301c:	52002000 	.word	0x52002000
 8003020:	58024400 	.word	0x58024400
 8003024:	eaf6ed7f 	.word	0xeaf6ed7f
 8003028:	02020200 	.word	0x02020200
 800302c:	01ff0000 	.word	0x01ff0000
 8003030:	01010280 	.word	0x01010280
 8003034:	52004000 	.word	0x52004000

08003038 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003038:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003070 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800303c:	f7ff ff84 	bl	8002f48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003040:	480c      	ldr	r0, [pc, #48]	; (8003074 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003042:	490d      	ldr	r1, [pc, #52]	; (8003078 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003044:	4a0d      	ldr	r2, [pc, #52]	; (800307c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003048:	e002      	b.n	8003050 <LoopCopyDataInit>

0800304a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800304a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800304c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800304e:	3304      	adds	r3, #4

08003050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003054:	d3f9      	bcc.n	800304a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003056:	4a0a      	ldr	r2, [pc, #40]	; (8003080 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003058:	4c0a      	ldr	r4, [pc, #40]	; (8003084 <LoopFillZerobss+0x22>)
  movs r3, #0
 800305a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800305c:	e001      	b.n	8003062 <LoopFillZerobss>

0800305e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800305e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003060:	3204      	adds	r2, #4

08003062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003064:	d3fb      	bcc.n	800305e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003066:	f00e fb49 	bl	80116fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800306a:	f7fd fd1b 	bl	8000aa4 <main>
  bx  lr
 800306e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003070:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003074:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003078:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 800307c:	08015308 	.word	0x08015308
  ldr r2, =_sbss
 8003080:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8003084:	24000f4c 	.word	0x24000f4c

08003088 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003088:	e7fe      	b.n	8003088 <ADC3_IRQHandler>
	...

0800308c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003092:	2003      	movs	r0, #3
 8003094:	f002 f9e2 	bl	800545c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003098:	f006 fc46 	bl	8009928 <HAL_RCC_GetSysClockFreq>
 800309c:	4602      	mov	r2, r0
 800309e:	4b15      	ldr	r3, [pc, #84]	; (80030f4 <HAL_Init+0x68>)
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	0a1b      	lsrs	r3, r3, #8
 80030a4:	f003 030f 	and.w	r3, r3, #15
 80030a8:	4913      	ldr	r1, [pc, #76]	; (80030f8 <HAL_Init+0x6c>)
 80030aa:	5ccb      	ldrb	r3, [r1, r3]
 80030ac:	f003 031f 	and.w	r3, r3, #31
 80030b0:	fa22 f303 	lsr.w	r3, r2, r3
 80030b4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030b6:	4b0f      	ldr	r3, [pc, #60]	; (80030f4 <HAL_Init+0x68>)
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	4a0e      	ldr	r2, [pc, #56]	; (80030f8 <HAL_Init+0x6c>)
 80030c0:	5cd3      	ldrb	r3, [r2, r3]
 80030c2:	f003 031f 	and.w	r3, r3, #31
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	fa22 f303 	lsr.w	r3, r2, r3
 80030cc:	4a0b      	ldr	r2, [pc, #44]	; (80030fc <HAL_Init+0x70>)
 80030ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030d0:	4a0b      	ldr	r2, [pc, #44]	; (8003100 <HAL_Init+0x74>)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030d6:	200f      	movs	r0, #15
 80030d8:	f000 f814 	bl	8003104 <HAL_InitTick>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e002      	b.n	80030ec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80030e6:	f7ff f81d 	bl	8002124 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	58024400 	.word	0x58024400
 80030f8:	08014e90 	.word	0x08014e90
 80030fc:	24000004 	.word	0x24000004
 8003100:	24000000 	.word	0x24000000

08003104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800310c:	4b15      	ldr	r3, [pc, #84]	; (8003164 <HAL_InitTick+0x60>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e021      	b.n	800315c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003118:	4b13      	ldr	r3, [pc, #76]	; (8003168 <HAL_InitTick+0x64>)
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	4b11      	ldr	r3, [pc, #68]	; (8003164 <HAL_InitTick+0x60>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	4619      	mov	r1, r3
 8003122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003126:	fbb3 f3f1 	udiv	r3, r3, r1
 800312a:	fbb2 f3f3 	udiv	r3, r2, r3
 800312e:	4618      	mov	r0, r3
 8003130:	f002 f9c7 	bl	80054c2 <HAL_SYSTICK_Config>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e00e      	b.n	800315c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b0f      	cmp	r3, #15
 8003142:	d80a      	bhi.n	800315a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003144:	2200      	movs	r2, #0
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	f04f 30ff 	mov.w	r0, #4294967295
 800314c:	f002 f991 	bl	8005472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003150:	4a06      	ldr	r2, [pc, #24]	; (800316c <HAL_InitTick+0x68>)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003156:	2300      	movs	r3, #0
 8003158:	e000      	b.n	800315c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
}
 800315c:	4618      	mov	r0, r3
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	2400000c 	.word	0x2400000c
 8003168:	24000000 	.word	0x24000000
 800316c:	24000008 	.word	0x24000008

08003170 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003174:	4b06      	ldr	r3, [pc, #24]	; (8003190 <HAL_IncTick+0x20>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	461a      	mov	r2, r3
 800317a:	4b06      	ldr	r3, [pc, #24]	; (8003194 <HAL_IncTick+0x24>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4413      	add	r3, r2
 8003180:	4a04      	ldr	r2, [pc, #16]	; (8003194 <HAL_IncTick+0x24>)
 8003182:	6013      	str	r3, [r2, #0]
}
 8003184:	bf00      	nop
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	2400000c 	.word	0x2400000c
 8003194:	24000dfc 	.word	0x24000dfc

08003198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  return uwTick;
 800319c:	4b03      	ldr	r3, [pc, #12]	; (80031ac <HAL_GetTick+0x14>)
 800319e:	681b      	ldr	r3, [r3, #0]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	24000dfc 	.word	0x24000dfc

080031b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031b8:	f7ff ffee 	bl	8003198 <HAL_GetTick>
 80031bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c8:	d005      	beq.n	80031d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031ca:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <HAL_Delay+0x44>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	461a      	mov	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4413      	add	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031d6:	bf00      	nop
 80031d8:	f7ff ffde 	bl	8003198 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d8f7      	bhi.n	80031d8 <HAL_Delay+0x28>
  {
  }
}
 80031e8:	bf00      	nop
 80031ea:	bf00      	nop
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	2400000c 	.word	0x2400000c

080031f8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003202:	4b07      	ldr	r3, [pc, #28]	; (8003220 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	43db      	mvns	r3, r3
 800320a:	401a      	ands	r2, r3
 800320c:	4904      	ldr	r1, [pc, #16]	; (8003220 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	4313      	orrs	r3, r2
 8003212:	604b      	str	r3, [r1, #4]
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	58000400 	.word	0x58000400

08003224 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	431a      	orrs	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	609a      	str	r2, [r3, #8]
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	609a      	str	r2, [r3, #8]
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003280:	4618      	mov	r0, r3
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800328c:	b480      	push	{r7}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
 8003298:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	3360      	adds	r3, #96	; 0x60
 800329e:	461a      	mov	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4a10      	ldr	r2, [pc, #64]	; (80032ec <LL_ADC_SetOffset+0x60>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d10b      	bne.n	80032c8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	4313      	orrs	r3, r2
 80032be:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80032c6:	e00b      	b.n	80032e0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	430b      	orrs	r3, r1
 80032da:	431a      	orrs	r2, r3
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	601a      	str	r2, [r3, #0]
}
 80032e0:	bf00      	nop
 80032e2:	371c      	adds	r7, #28
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	58026000 	.word	0x58026000

080032f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3360      	adds	r3, #96	; 0x60
 80032fe:	461a      	mov	r2, r3
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003310:	4618      	mov	r0, r3
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f003 031f 	and.w	r3, r3, #31
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	fa01 f303 	lsl.w	r3, r1, r3
 800333c:	431a      	orrs	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	611a      	str	r2, [r3, #16]
}
 8003342:	bf00      	nop
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
	...

08003350 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4a0c      	ldr	r2, [pc, #48]	; (8003390 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d00e      	beq.n	8003382 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	3360      	adds	r3, #96	; 0x60
 8003368:	461a      	mov	r2, r3
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	431a      	orrs	r2, r3
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	601a      	str	r2, [r3, #0]
  }
}
 8003382:	bf00      	nop
 8003384:	371c      	adds	r7, #28
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	58026000 	.word	0x58026000

08003394 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003394:	b480      	push	{r7}
 8003396:	b087      	sub	sp, #28
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4a0c      	ldr	r2, [pc, #48]	; (80033d4 <LL_ADC_SetOffsetSaturation+0x40>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d10e      	bne.n	80033c6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	3360      	adds	r3, #96	; 0x60
 80033ac:	461a      	mov	r2, r3
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	431a      	orrs	r2, r3
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80033c6:	bf00      	nop
 80033c8:	371c      	adds	r7, #28
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	58026000 	.word	0x58026000

080033d8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80033d8:	b480      	push	{r7}
 80033da:	b087      	sub	sp, #28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4a0c      	ldr	r2, [pc, #48]	; (8003418 <LL_ADC_SetOffsetSign+0x40>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d10e      	bne.n	800340a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	3360      	adds	r3, #96	; 0x60
 80033f0:	461a      	mov	r2, r3
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	431a      	orrs	r2, r3
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800340a:	bf00      	nop
 800340c:	371c      	adds	r7, #28
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	58026000 	.word	0x58026000

0800341c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	3360      	adds	r3, #96	; 0x60
 800342c:	461a      	mov	r2, r3
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4a0c      	ldr	r2, [pc, #48]	; (800346c <LL_ADC_SetOffsetState+0x50>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d108      	bne.n	8003450 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	431a      	orrs	r2, r3
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800344e:	e007      	b.n	8003460 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	431a      	orrs	r2, r3
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	601a      	str	r2, [r3, #0]
}
 8003460:	bf00      	nop
 8003462:	371c      	adds	r7, #28
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	58026000 	.word	0x58026000

08003470 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003484:	2301      	movs	r3, #1
 8003486:	e000      	b.n	800348a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003496:	b480      	push	{r7}
 8003498:	b087      	sub	sp, #28
 800349a:	af00      	add	r7, sp, #0
 800349c:	60f8      	str	r0, [r7, #12]
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	3330      	adds	r3, #48	; 0x30
 80034a6:	461a      	mov	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	0a1b      	lsrs	r3, r3, #8
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	f003 030c 	and.w	r3, r3, #12
 80034b2:	4413      	add	r3, r2
 80034b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	f003 031f 	and.w	r3, r3, #31
 80034c0:	211f      	movs	r1, #31
 80034c2:	fa01 f303 	lsl.w	r3, r1, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	401a      	ands	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	0e9b      	lsrs	r3, r3, #26
 80034ce:	f003 011f 	and.w	r1, r3, #31
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f003 031f 	and.w	r3, r3, #31
 80034d8:	fa01 f303 	lsl.w	r3, r1, r3
 80034dc:	431a      	orrs	r2, r3
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80034e2:	bf00      	nop
 80034e4:	371c      	adds	r7, #28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f023 0203 	bic.w	r2, r3, #3
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	60da      	str	r2, [r3, #12]
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f043 0201 	orr.w	r2, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	60da      	str	r2, [r3, #12]
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a08      	ldr	r2, [pc, #32]	; (8003564 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d107      	bne.n	8003556 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f023 0203 	bic.w	r2, r3, #3
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	431a      	orrs	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	60da      	str	r2, [r3, #12]
  }
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	58026000 	.word	0x58026000

08003568 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	3314      	adds	r3, #20
 8003578:	461a      	mov	r2, r3
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	0e5b      	lsrs	r3, r3, #25
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	4413      	add	r3, r2
 8003586:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	0d1b      	lsrs	r3, r3, #20
 8003590:	f003 031f 	and.w	r3, r3, #31
 8003594:	2107      	movs	r1, #7
 8003596:	fa01 f303 	lsl.w	r3, r1, r3
 800359a:	43db      	mvns	r3, r3
 800359c:	401a      	ands	r2, r3
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	0d1b      	lsrs	r3, r3, #20
 80035a2:	f003 031f 	and.w	r3, r3, #31
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	fa01 f303 	lsl.w	r3, r1, r3
 80035ac:	431a      	orrs	r2, r3
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80035b2:	bf00      	nop
 80035b4:	371c      	adds	r7, #28
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
	...

080035c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4a1a      	ldr	r2, [pc, #104]	; (8003638 <LL_ADC_SetChannelSingleDiff+0x78>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d115      	bne.n	8003600 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035e0:	43db      	mvns	r3, r3
 80035e2:	401a      	ands	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f003 0318 	and.w	r3, r3, #24
 80035ea:	4914      	ldr	r1, [pc, #80]	; (800363c <LL_ADC_SetChannelSingleDiff+0x7c>)
 80035ec:	40d9      	lsrs	r1, r3
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	400b      	ands	r3, r1
 80035f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035f6:	431a      	orrs	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80035fe:	e014      	b.n	800362a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800360c:	43db      	mvns	r3, r3
 800360e:	401a      	ands	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f003 0318 	and.w	r3, r3, #24
 8003616:	4909      	ldr	r1, [pc, #36]	; (800363c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003618:	40d9      	lsrs	r1, r3
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	400b      	ands	r3, r1
 800361e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003622:	431a      	orrs	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800362a:	bf00      	nop
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	58026000 	.word	0x58026000
 800363c:	000fffff 	.word	0x000fffff

08003640 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f003 031f 	and.w	r3, r3, #31
}
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	4b04      	ldr	r3, [pc, #16]	; (800367c <LL_ADC_DisableDeepPowerDown+0x20>)
 800366a:	4013      	ands	r3, r2
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6093      	str	r3, [r2, #8]
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	5fffffc0 	.word	0x5fffffc0

08003680 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003690:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003694:	d101      	bne.n	800369a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003696:	2301      	movs	r3, #1
 8003698:	e000      	b.n	800369c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	4b05      	ldr	r3, [pc, #20]	; (80036cc <LL_ADC_EnableInternalRegulator+0x24>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	6fffffc0 	.word	0x6fffffc0

080036d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036e4:	d101      	bne.n	80036ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	4b05      	ldr	r3, [pc, #20]	; (800371c <LL_ADC_Enable+0x24>)
 8003706:	4013      	ands	r3, r2
 8003708:	f043 0201 	orr.w	r2, r3, #1
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	7fffffc0 	.word	0x7fffffc0

08003720 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	4b05      	ldr	r3, [pc, #20]	; (8003744 <LL_ADC_Disable+0x24>)
 800372e:	4013      	ands	r3, r2
 8003730:	f043 0202 	orr.w	r2, r3, #2
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	7fffffc0 	.word	0x7fffffc0

08003748 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <LL_ADC_IsEnabled+0x18>
 800375c:	2301      	movs	r3, #1
 800375e:	e000      	b.n	8003762 <LL_ADC_IsEnabled+0x1a>
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800376e:	b480      	push	{r7}
 8003770:	b083      	sub	sp, #12
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b02      	cmp	r3, #2
 8003780:	d101      	bne.n	8003786 <LL_ADC_IsDisableOngoing+0x18>
 8003782:	2301      	movs	r3, #1
 8003784:	e000      	b.n	8003788 <LL_ADC_IsDisableOngoing+0x1a>
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <LL_ADC_REG_StartConversion+0x24>)
 80037a2:	4013      	ands	r3, r2
 80037a4:	f043 0204 	orr.w	r2, r3, #4
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	7fffffc0 	.word	0x7fffffc0

080037bc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d101      	bne.n	80037d4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80037d0:	2301      	movs	r3, #1
 80037d2:	e000      	b.n	80037d6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d101      	bne.n	80037fa <LL_ADC_INJ_IsConversionOngoing+0x18>
 80037f6:	2301      	movs	r3, #1
 80037f8:	e000      	b.n	80037fc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003808:	b590      	push	{r4, r7, lr}
 800380a:	b089      	sub	sp, #36	; 0x24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003810:	2300      	movs	r3, #0
 8003812:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003814:	2300      	movs	r3, #0
 8003816:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e1ee      	b.n	8003c00 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800382c:	2b00      	cmp	r3, #0
 800382e:	d109      	bne.n	8003844 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f7fe fc91 	bl	8002158 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff ff19 	bl	8003680 <LL_ADC_IsDeepPowerDownEnabled>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d004      	beq.n	800385e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff feff 	bl	800365c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff ff34 	bl	80036d0 <LL_ADC_IsInternalRegulatorEnabled>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d114      	bne.n	8003898 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f7ff ff18 	bl	80036a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003878:	4b8e      	ldr	r3, [pc, #568]	; (8003ab4 <HAL_ADC_Init+0x2ac>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	099b      	lsrs	r3, r3, #6
 800387e:	4a8e      	ldr	r2, [pc, #568]	; (8003ab8 <HAL_ADC_Init+0x2b0>)
 8003880:	fba2 2303 	umull	r2, r3, r2, r3
 8003884:	099b      	lsrs	r3, r3, #6
 8003886:	3301      	adds	r3, #1
 8003888:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800388a:	e002      	b.n	8003892 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	3b01      	subs	r3, #1
 8003890:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1f9      	bne.n	800388c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff ff17 	bl	80036d0 <LL_ADC_IsInternalRegulatorEnabled>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10d      	bne.n	80038c4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ac:	f043 0210 	orr.w	r2, r3, #16
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038b8:	f043 0201 	orr.w	r2, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff ff77 	bl	80037bc <LL_ADC_REG_IsConversionOngoing>
 80038ce:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d4:	f003 0310 	and.w	r3, r3, #16
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f040 8188 	bne.w	8003bee <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f040 8184 	bne.w	8003bee <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ea:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80038ee:	f043 0202 	orr.w	r2, r3, #2
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff ff24 	bl	8003748 <LL_ADC_IsEnabled>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d136      	bne.n	8003974 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a6c      	ldr	r2, [pc, #432]	; (8003abc <HAL_ADC_Init+0x2b4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d004      	beq.n	800391a <HAL_ADC_Init+0x112>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a6a      	ldr	r2, [pc, #424]	; (8003ac0 <HAL_ADC_Init+0x2b8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d10e      	bne.n	8003938 <HAL_ADC_Init+0x130>
 800391a:	4868      	ldr	r0, [pc, #416]	; (8003abc <HAL_ADC_Init+0x2b4>)
 800391c:	f7ff ff14 	bl	8003748 <LL_ADC_IsEnabled>
 8003920:	4604      	mov	r4, r0
 8003922:	4867      	ldr	r0, [pc, #412]	; (8003ac0 <HAL_ADC_Init+0x2b8>)
 8003924:	f7ff ff10 	bl	8003748 <LL_ADC_IsEnabled>
 8003928:	4603      	mov	r3, r0
 800392a:	4323      	orrs	r3, r4
 800392c:	2b00      	cmp	r3, #0
 800392e:	bf0c      	ite	eq
 8003930:	2301      	moveq	r3, #1
 8003932:	2300      	movne	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	e008      	b.n	800394a <HAL_ADC_Init+0x142>
 8003938:	4862      	ldr	r0, [pc, #392]	; (8003ac4 <HAL_ADC_Init+0x2bc>)
 800393a:	f7ff ff05 	bl	8003748 <LL_ADC_IsEnabled>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	bf0c      	ite	eq
 8003944:	2301      	moveq	r3, #1
 8003946:	2300      	movne	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d012      	beq.n	8003974 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a5a      	ldr	r2, [pc, #360]	; (8003abc <HAL_ADC_Init+0x2b4>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d004      	beq.n	8003962 <HAL_ADC_Init+0x15a>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a58      	ldr	r2, [pc, #352]	; (8003ac0 <HAL_ADC_Init+0x2b8>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d101      	bne.n	8003966 <HAL_ADC_Init+0x15e>
 8003962:	4a59      	ldr	r2, [pc, #356]	; (8003ac8 <HAL_ADC_Init+0x2c0>)
 8003964:	e000      	b.n	8003968 <HAL_ADC_Init+0x160>
 8003966:	4a59      	ldr	r2, [pc, #356]	; (8003acc <HAL_ADC_Init+0x2c4>)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	4619      	mov	r1, r3
 800396e:	4610      	mov	r0, r2
 8003970:	f7ff fc58 	bl	8003224 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a52      	ldr	r2, [pc, #328]	; (8003ac4 <HAL_ADC_Init+0x2bc>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d129      	bne.n	80039d2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	7e5b      	ldrb	r3, [r3, #25]
 8003982:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003988:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800398e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	2b08      	cmp	r3, #8
 8003996:	d013      	beq.n	80039c0 <HAL_ADC_Init+0x1b8>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	2b0c      	cmp	r3, #12
 800399e:	d00d      	beq.n	80039bc <HAL_ADC_Init+0x1b4>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	2b1c      	cmp	r3, #28
 80039a6:	d007      	beq.n	80039b8 <HAL_ADC_Init+0x1b0>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	2b18      	cmp	r3, #24
 80039ae:	d101      	bne.n	80039b4 <HAL_ADC_Init+0x1ac>
 80039b0:	2318      	movs	r3, #24
 80039b2:	e006      	b.n	80039c2 <HAL_ADC_Init+0x1ba>
 80039b4:	2300      	movs	r3, #0
 80039b6:	e004      	b.n	80039c2 <HAL_ADC_Init+0x1ba>
 80039b8:	2310      	movs	r3, #16
 80039ba:	e002      	b.n	80039c2 <HAL_ADC_Init+0x1ba>
 80039bc:	2308      	movs	r3, #8
 80039be:	e000      	b.n	80039c2 <HAL_ADC_Init+0x1ba>
 80039c0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80039c2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039ca:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80039cc:	4313      	orrs	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
 80039d0:	e00e      	b.n	80039f0 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	7e5b      	ldrb	r3, [r3, #25]
 80039d6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039dc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80039e2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039ea:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039ec:	4313      	orrs	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d106      	bne.n	8003a08 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	3b01      	subs	r3, #1
 8003a00:	045b      	lsls	r3, r3, #17
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d009      	beq.n	8003a24 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a14:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a26      	ldr	r2, [pc, #152]	; (8003ac4 <HAL_ADC_Init+0x2bc>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d115      	bne.n	8003a5a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	4b26      	ldr	r3, [pc, #152]	; (8003ad0 <HAL_ADC_Init+0x2c8>)
 8003a36:	4013      	ands	r3, r2
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6812      	ldr	r2, [r2, #0]
 8003a3c:	69b9      	ldr	r1, [r7, #24]
 8003a3e:	430b      	orrs	r3, r1
 8003a40:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	611a      	str	r2, [r3, #16]
 8003a58:	e009      	b.n	8003a6e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	4b1c      	ldr	r3, [pc, #112]	; (8003ad4 <HAL_ADC_Init+0x2cc>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6812      	ldr	r2, [r2, #0]
 8003a68:	69b9      	ldr	r1, [r7, #24]
 8003a6a:	430b      	orrs	r3, r1
 8003a6c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff fea2 	bl	80037bc <LL_ADC_REG_IsConversionOngoing>
 8003a78:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff feaf 	bl	80037e2 <LL_ADC_INJ_IsConversionOngoing>
 8003a84:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f040 808e 	bne.w	8003baa <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f040 808a 	bne.w	8003baa <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a0a      	ldr	r2, [pc, #40]	; (8003ac4 <HAL_ADC_Init+0x2bc>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d11b      	bne.n	8003ad8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	7e1b      	ldrb	r3, [r3, #24]
 8003aa4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003aac:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
 8003ab2:	e018      	b.n	8003ae6 <HAL_ADC_Init+0x2de>
 8003ab4:	24000000 	.word	0x24000000
 8003ab8:	053e2d63 	.word	0x053e2d63
 8003abc:	40022000 	.word	0x40022000
 8003ac0:	40022100 	.word	0x40022100
 8003ac4:	58026000 	.word	0x58026000
 8003ac8:	40022300 	.word	0x40022300
 8003acc:	58026300 	.word	0x58026300
 8003ad0:	fff04007 	.word	0xfff04007
 8003ad4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	7e1b      	ldrb	r3, [r3, #24]
 8003adc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	4b46      	ldr	r3, [pc, #280]	; (8003c08 <HAL_ADC_Init+0x400>)
 8003aee:	4013      	ands	r3, r2
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6812      	ldr	r2, [r2, #0]
 8003af4:	69b9      	ldr	r1, [r7, #24]
 8003af6:	430b      	orrs	r3, r1
 8003af8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d137      	bne.n	8003b74 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b08:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a3f      	ldr	r2, [pc, #252]	; (8003c0c <HAL_ADC_Init+0x404>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d116      	bne.n	8003b42 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	691a      	ldr	r2, [r3, #16]
 8003b1a:	4b3d      	ldr	r3, [pc, #244]	; (8003c10 <HAL_ADC_Init+0x408>)
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003b26:	4311      	orrs	r1, r2
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b2c:	4311      	orrs	r1, r2
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003b32:	430a      	orrs	r2, r1
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0201 	orr.w	r2, r2, #1
 8003b3e:	611a      	str	r2, [r3, #16]
 8003b40:	e020      	b.n	8003b84 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	4b32      	ldr	r3, [pc, #200]	; (8003c14 <HAL_ADC_Init+0x40c>)
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b50:	3a01      	subs	r2, #1
 8003b52:	0411      	lsls	r1, r2, #16
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003b58:	4311      	orrs	r1, r2
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b5e:	4311      	orrs	r1, r2
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003b64:	430a      	orrs	r2, r1
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f042 0201 	orr.w	r2, r2, #1
 8003b70:	611a      	str	r2, [r3, #16]
 8003b72:	e007      	b.n	8003b84 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691a      	ldr	r2, [r3, #16]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0201 	bic.w	r2, r2, #1
 8003b82:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a1b      	ldr	r2, [pc, #108]	; (8003c0c <HAL_ADC_Init+0x404>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d002      	beq.n	8003baa <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 ffd1 	bl	8004b4c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d10c      	bne.n	8003bcc <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb8:	f023 010f 	bic.w	r1, r3, #15
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	1e5a      	subs	r2, r3, #1
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	631a      	str	r2, [r3, #48]	; 0x30
 8003bca:	e007      	b.n	8003bdc <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 020f 	bic.w	r2, r2, #15
 8003bda:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003be0:	f023 0303 	bic.w	r3, r3, #3
 8003be4:	f043 0201 	orr.w	r2, r3, #1
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	661a      	str	r2, [r3, #96]	; 0x60
 8003bec:	e007      	b.n	8003bfe <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bf2:	f043 0210 	orr.w	r2, r3, #16
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003bfe:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3724      	adds	r7, #36	; 0x24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd90      	pop	{r4, r7, pc}
 8003c08:	ffffbffc 	.word	0xffffbffc
 8003c0c:	58026000 	.word	0x58026000
 8003c10:	fc00f81f 	.word	0xfc00f81f
 8003c14:	fc00f81e 	.word	0xfc00f81e

08003c18 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a60      	ldr	r2, [pc, #384]	; (8003dac <HAL_ADC_Start_DMA+0x194>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d004      	beq.n	8003c38 <HAL_ADC_Start_DMA+0x20>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a5f      	ldr	r2, [pc, #380]	; (8003db0 <HAL_ADC_Start_DMA+0x198>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d101      	bne.n	8003c3c <HAL_ADC_Start_DMA+0x24>
 8003c38:	4b5e      	ldr	r3, [pc, #376]	; (8003db4 <HAL_ADC_Start_DMA+0x19c>)
 8003c3a:	e000      	b.n	8003c3e <HAL_ADC_Start_DMA+0x26>
 8003c3c:	4b5e      	ldr	r3, [pc, #376]	; (8003db8 <HAL_ADC_Start_DMA+0x1a0>)
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff fcfe 	bl	8003640 <LL_ADC_GetMultimode>
 8003c44:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff fdb6 	bl	80037bc <LL_ADC_REG_IsConversionOngoing>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f040 80a2 	bne.w	8003d9c <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d101      	bne.n	8003c66 <HAL_ADC_Start_DMA+0x4e>
 8003c62:	2302      	movs	r3, #2
 8003c64:	e09d      	b.n	8003da2 <HAL_ADC_Start_DMA+0x18a>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d006      	beq.n	8003c82 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	2b05      	cmp	r3, #5
 8003c78:	d003      	beq.n	8003c82 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	2b09      	cmp	r3, #9
 8003c7e:	f040 8086 	bne.w	8003d8e <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 fde4 	bl	8004850 <ADC_Enable>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003c8c:	7dfb      	ldrb	r3, [r7, #23]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d178      	bne.n	8003d84 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c96:	4b49      	ldr	r3, [pc, #292]	; (8003dbc <HAL_ADC_Start_DMA+0x1a4>)
 8003c98:	4013      	ands	r3, r2
 8003c9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a42      	ldr	r2, [pc, #264]	; (8003db0 <HAL_ADC_Start_DMA+0x198>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d002      	beq.n	8003cb2 <HAL_ADC_Start_DMA+0x9a>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	e000      	b.n	8003cb4 <HAL_ADC_Start_DMA+0x9c>
 8003cb2:	4b3e      	ldr	r3, [pc, #248]	; (8003dac <HAL_ADC_Start_DMA+0x194>)
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	6812      	ldr	r2, [r2, #0]
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d002      	beq.n	8003cc2 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d105      	bne.n	8003cce <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cc6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d006      	beq.n	8003ce8 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cde:	f023 0206 	bic.w	r2, r3, #6
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	665a      	str	r2, [r3, #100]	; 0x64
 8003ce6:	e002      	b.n	8003cee <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	665a      	str	r2, [r3, #100]	; 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf2:	4a33      	ldr	r2, [pc, #204]	; (8003dc0 <HAL_ADC_Start_DMA+0x1a8>)
 8003cf4:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfa:	4a32      	ldr	r2, [pc, #200]	; (8003dc4 <HAL_ADC_Start_DMA+0x1ac>)
 8003cfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d02:	4a31      	ldr	r2, [pc, #196]	; (8003dc8 <HAL_ADC_Start_DMA+0x1b0>)
 8003d04:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	221c      	movs	r2, #28
 8003d0c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f042 0210 	orr.w	r2, r2, #16
 8003d24:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a28      	ldr	r2, [pc, #160]	; (8003dcc <HAL_ADC_Start_DMA+0x1b4>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d10f      	bne.n	8003d50 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4610      	mov	r0, r2
 8003d40:	f7ff fbf8 	bl	8003534 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff fbe3 	bl	8003514 <LL_ADC_EnableDMAReq>
 8003d4e:	e007      	b.n	8003d60 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4610      	mov	r0, r2
 8003d5c:	f7ff fbc7 	bl	80034ee <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	3340      	adds	r3, #64	; 0x40
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f002 f86c 	bl	8005e4c <HAL_DMA_Start_IT>
 8003d74:	4603      	mov	r3, r0
 8003d76:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7ff fd09 	bl	8003794 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003d82:	e00d      	b.n	8003da0 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (tmp_hal_status == HAL_OK)
 8003d8c:	e008      	b.n	8003da0 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8003d9a:	e001      	b.n	8003da0 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3718      	adds	r7, #24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	40022000 	.word	0x40022000
 8003db0:	40022100 	.word	0x40022100
 8003db4:	40022300 	.word	0x40022300
 8003db8:	58026300 	.word	0x58026300
 8003dbc:	fffff0fe 	.word	0xfffff0fe
 8003dc0:	08004a23 	.word	0x08004a23
 8003dc4:	08004afb 	.word	0x08004afb
 8003dc8:	08004b17 	.word	0x08004b17
 8003dcc:	58026000 	.word	0x58026000

08003dd0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003df8:	b590      	push	{r4, r7, lr}
 8003dfa:	b0b9      	sub	sp, #228	; 0xe4
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e12:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	4aa9      	ldr	r2, [pc, #676]	; (80040c0 <HAL_ADC_ConfigChannel+0x2c8>)
 8003e1a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d102      	bne.n	8003e2c <HAL_ADC_ConfigChannel+0x34>
 8003e26:	2302      	movs	r3, #2
 8003e28:	f000 bcfa 	b.w	8004820 <HAL_ADC_ConfigChannel+0xa28>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7ff fcbf 	bl	80037bc <LL_ADC_REG_IsConversionOngoing>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f040 84de 	bne.w	8004802 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a9e      	ldr	r2, [pc, #632]	; (80040c4 <HAL_ADC_ConfigChannel+0x2cc>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d033      	beq.n	8003eb8 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d108      	bne.n	8003e6e <HAL_ADC_ConfigChannel+0x76>
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	0e9b      	lsrs	r3, r3, #26
 8003e62:	f003 031f 	and.w	r3, r3, #31
 8003e66:	2201      	movs	r2, #1
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	e01d      	b.n	8003eaa <HAL_ADC_ConfigChannel+0xb2>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e7a:	fa93 f3a3 	rbit	r3, r3
 8003e7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003e8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8003e92:	2320      	movs	r3, #32
 8003e94:	e004      	b.n	8003ea0 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8003e96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e9a:	fab3 f383 	clz	r3, r3
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	f003 031f 	and.w	r3, r3, #31
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6812      	ldr	r2, [r2, #0]
 8003eae:	69d1      	ldr	r1, [r2, #28]
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6812      	ldr	r2, [r2, #0]
 8003eb4:	430b      	orrs	r3, r1
 8003eb6:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	6859      	ldr	r1, [r3, #4]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	f7ff fae6 	bl	8003496 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff fc74 	bl	80037bc <LL_ADC_REG_IsConversionOngoing>
 8003ed4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff fc80 	bl	80037e2 <LL_ADC_INJ_IsConversionOngoing>
 8003ee2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ee6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f040 8270 	bne.w	80043d0 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ef0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f040 826b 	bne.w	80043d0 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6818      	ldr	r0, [r3, #0]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	6819      	ldr	r1, [r3, #0]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	461a      	mov	r2, r3
 8003f08:	f7ff fb2e 	bl	8003568 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a6c      	ldr	r2, [pc, #432]	; (80040c4 <HAL_ADC_ConfigChannel+0x2cc>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d10d      	bne.n	8003f32 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	695a      	ldr	r2, [r3, #20]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	08db      	lsrs	r3, r3, #3
 8003f22:	f003 0303 	and.w	r3, r3, #3
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f30:	e032      	b.n	8003f98 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003f32:	4b65      	ldr	r3, [pc, #404]	; (80040c8 <HAL_ADC_ConfigChannel+0x2d0>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003f3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f3e:	d10b      	bne.n	8003f58 <HAL_ADC_ConfigChannel+0x160>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	695a      	ldr	r2, [r3, #20]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	089b      	lsrs	r3, r3, #2
 8003f4c:	f003 0307 	and.w	r3, r3, #7
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	e01d      	b.n	8003f94 <HAL_ADC_ConfigChannel+0x19c>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f003 0310 	and.w	r3, r3, #16
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10b      	bne.n	8003f7e <HAL_ADC_ConfigChannel+0x186>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	695a      	ldr	r2, [r3, #20]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	089b      	lsrs	r3, r3, #2
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	e00a      	b.n	8003f94 <HAL_ADC_ConfigChannel+0x19c>
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	695a      	ldr	r2, [r3, #20]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	089b      	lsrs	r3, r3, #2
 8003f8a:	f003 0304 	and.w	r3, r3, #4
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	2b04      	cmp	r3, #4
 8003f9e:	d048      	beq.n	8004032 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6818      	ldr	r0, [r3, #0]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	6919      	ldr	r1, [r3, #16]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fb0:	f7ff f96c 	bl	800328c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a42      	ldr	r2, [pc, #264]	; (80040c4 <HAL_ADC_ConfigChannel+0x2cc>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d119      	bne.n	8003ff2 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6818      	ldr	r0, [r3, #0]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	6919      	ldr	r1, [r3, #16]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f7ff fa04 	bl	80033d8 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6818      	ldr	r0, [r3, #0]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	6919      	ldr	r1, [r3, #16]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d102      	bne.n	8003fe8 <HAL_ADC_ConfigChannel+0x1f0>
 8003fe2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fe6:	e000      	b.n	8003fea <HAL_ADC_ConfigChannel+0x1f2>
 8003fe8:	2300      	movs	r3, #0
 8003fea:	461a      	mov	r2, r3
 8003fec:	f7ff f9d2 	bl	8003394 <LL_ADC_SetOffsetSaturation>
 8003ff0:	e1ee      	b.n	80043d0 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6818      	ldr	r0, [r3, #0]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	6919      	ldr	r1, [r3, #16]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004000:	2b01      	cmp	r3, #1
 8004002:	d102      	bne.n	800400a <HAL_ADC_ConfigChannel+0x212>
 8004004:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004008:	e000      	b.n	800400c <HAL_ADC_ConfigChannel+0x214>
 800400a:	2300      	movs	r3, #0
 800400c:	461a      	mov	r2, r3
 800400e:	f7ff f99f 	bl	8003350 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6818      	ldr	r0, [r3, #0]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	6919      	ldr	r1, [r3, #16]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	7e1b      	ldrb	r3, [r3, #24]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d102      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x230>
 8004022:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004026:	e000      	b.n	800402a <HAL_ADC_ConfigChannel+0x232>
 8004028:	2300      	movs	r3, #0
 800402a:	461a      	mov	r2, r3
 800402c:	f7ff f976 	bl	800331c <LL_ADC_SetDataRightShift>
 8004030:	e1ce      	b.n	80043d0 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a23      	ldr	r2, [pc, #140]	; (80040c4 <HAL_ADC_ConfigChannel+0x2cc>)
 8004038:	4293      	cmp	r3, r2
 800403a:	f040 8181 	bne.w	8004340 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2100      	movs	r1, #0
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff f953 	bl	80032f0 <LL_ADC_GetOffsetChannel>
 800404a:	4603      	mov	r3, r0
 800404c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10a      	bne.n	800406a <HAL_ADC_ConfigChannel+0x272>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2100      	movs	r1, #0
 800405a:	4618      	mov	r0, r3
 800405c:	f7ff f948 	bl	80032f0 <LL_ADC_GetOffsetChannel>
 8004060:	4603      	mov	r3, r0
 8004062:	0e9b      	lsrs	r3, r3, #26
 8004064:	f003 021f 	and.w	r2, r3, #31
 8004068:	e01e      	b.n	80040a8 <HAL_ADC_ConfigChannel+0x2b0>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2100      	movs	r1, #0
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff f93d 	bl	80032f0 <LL_ADC_GetOffsetChannel>
 8004076:	4603      	mov	r3, r0
 8004078:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004080:	fa93 f3a3 	rbit	r3, r3
 8004084:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004088:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800408c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004090:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004098:	2320      	movs	r3, #32
 800409a:	e004      	b.n	80040a6 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 800409c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80040a0:	fab3 f383 	clz	r3, r3
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	461a      	mov	r2, r3
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10b      	bne.n	80040cc <HAL_ADC_ConfigChannel+0x2d4>
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	0e9b      	lsrs	r3, r3, #26
 80040ba:	f003 031f 	and.w	r3, r3, #31
 80040be:	e01e      	b.n	80040fe <HAL_ADC_ConfigChannel+0x306>
 80040c0:	47ff0000 	.word	0x47ff0000
 80040c4:	58026000 	.word	0x58026000
 80040c8:	5c001000 	.word	0x5c001000
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040d8:	fa93 f3a3 	rbit	r3, r3
 80040dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80040e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80040e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80040e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80040f0:	2320      	movs	r3, #32
 80040f2:	e004      	b.n	80040fe <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 80040f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80040f8:	fab3 f383 	clz	r3, r3
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	429a      	cmp	r2, r3
 8004100:	d106      	bne.n	8004110 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2200      	movs	r2, #0
 8004108:	2100      	movs	r1, #0
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff f986 	bl	800341c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2101      	movs	r1, #1
 8004116:	4618      	mov	r0, r3
 8004118:	f7ff f8ea 	bl	80032f0 <LL_ADC_GetOffsetChannel>
 800411c:	4603      	mov	r3, r0
 800411e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10a      	bne.n	800413c <HAL_ADC_ConfigChannel+0x344>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2101      	movs	r1, #1
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff f8df 	bl	80032f0 <LL_ADC_GetOffsetChannel>
 8004132:	4603      	mov	r3, r0
 8004134:	0e9b      	lsrs	r3, r3, #26
 8004136:	f003 021f 	and.w	r2, r3, #31
 800413a:	e01e      	b.n	800417a <HAL_ADC_ConfigChannel+0x382>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2101      	movs	r1, #1
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff f8d4 	bl	80032f0 <LL_ADC_GetOffsetChannel>
 8004148:	4603      	mov	r3, r0
 800414a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004152:	fa93 f3a3 	rbit	r3, r3
 8004156:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800415a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800415e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004162:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800416a:	2320      	movs	r3, #32
 800416c:	e004      	b.n	8004178 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800416e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004172:	fab3 f383 	clz	r3, r3
 8004176:	b2db      	uxtb	r3, r3
 8004178:	461a      	mov	r2, r3
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004182:	2b00      	cmp	r3, #0
 8004184:	d105      	bne.n	8004192 <HAL_ADC_ConfigChannel+0x39a>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	0e9b      	lsrs	r3, r3, #26
 800418c:	f003 031f 	and.w	r3, r3, #31
 8004190:	e018      	b.n	80041c4 <HAL_ADC_ConfigChannel+0x3cc>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800419e:	fa93 f3a3 	rbit	r3, r3
 80041a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80041a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80041aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80041ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80041b6:	2320      	movs	r3, #32
 80041b8:	e004      	b.n	80041c4 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80041ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041be:	fab3 f383 	clz	r3, r3
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d106      	bne.n	80041d6 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2200      	movs	r2, #0
 80041ce:	2101      	movs	r1, #1
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7ff f923 	bl	800341c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2102      	movs	r1, #2
 80041dc:	4618      	mov	r0, r3
 80041de:	f7ff f887 	bl	80032f0 <LL_ADC_GetOffsetChannel>
 80041e2:	4603      	mov	r3, r0
 80041e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10a      	bne.n	8004202 <HAL_ADC_ConfigChannel+0x40a>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2102      	movs	r1, #2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff f87c 	bl	80032f0 <LL_ADC_GetOffsetChannel>
 80041f8:	4603      	mov	r3, r0
 80041fa:	0e9b      	lsrs	r3, r3, #26
 80041fc:	f003 021f 	and.w	r2, r3, #31
 8004200:	e01e      	b.n	8004240 <HAL_ADC_ConfigChannel+0x448>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2102      	movs	r1, #2
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff f871 	bl	80032f0 <LL_ADC_GetOffsetChannel>
 800420e:	4603      	mov	r3, r0
 8004210:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004214:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004218:	fa93 f3a3 	rbit	r3, r3
 800421c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004220:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004224:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004228:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004230:	2320      	movs	r3, #32
 8004232:	e004      	b.n	800423e <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004234:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004238:	fab3 f383 	clz	r3, r3
 800423c:	b2db      	uxtb	r3, r3
 800423e:	461a      	mov	r2, r3
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004248:	2b00      	cmp	r3, #0
 800424a:	d105      	bne.n	8004258 <HAL_ADC_ConfigChannel+0x460>
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	0e9b      	lsrs	r3, r3, #26
 8004252:	f003 031f 	and.w	r3, r3, #31
 8004256:	e014      	b.n	8004282 <HAL_ADC_ConfigChannel+0x48a>
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004260:	fa93 f3a3 	rbit	r3, r3
 8004264:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004266:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004268:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800426c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004274:	2320      	movs	r3, #32
 8004276:	e004      	b.n	8004282 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004278:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800427c:	fab3 f383 	clz	r3, r3
 8004280:	b2db      	uxtb	r3, r3
 8004282:	429a      	cmp	r2, r3
 8004284:	d106      	bne.n	8004294 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2200      	movs	r2, #0
 800428c:	2102      	movs	r1, #2
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff f8c4 	bl	800341c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2103      	movs	r1, #3
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff f828 	bl	80032f0 <LL_ADC_GetOffsetChannel>
 80042a0:	4603      	mov	r3, r0
 80042a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10a      	bne.n	80042c0 <HAL_ADC_ConfigChannel+0x4c8>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2103      	movs	r1, #3
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff f81d 	bl	80032f0 <LL_ADC_GetOffsetChannel>
 80042b6:	4603      	mov	r3, r0
 80042b8:	0e9b      	lsrs	r3, r3, #26
 80042ba:	f003 021f 	and.w	r2, r3, #31
 80042be:	e017      	b.n	80042f0 <HAL_ADC_ConfigChannel+0x4f8>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2103      	movs	r1, #3
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7ff f812 	bl	80032f0 <LL_ADC_GetOffsetChannel>
 80042cc:	4603      	mov	r3, r0
 80042ce:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042d2:	fa93 f3a3 	rbit	r3, r3
 80042d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80042d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042da:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80042dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80042e2:	2320      	movs	r3, #32
 80042e4:	e003      	b.n	80042ee <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80042e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042e8:	fab3 f383 	clz	r3, r3
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	461a      	mov	r2, r3
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d105      	bne.n	8004308 <HAL_ADC_ConfigChannel+0x510>
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	0e9b      	lsrs	r3, r3, #26
 8004302:	f003 031f 	and.w	r3, r3, #31
 8004306:	e011      	b.n	800432c <HAL_ADC_ConfigChannel+0x534>
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004310:	fa93 f3a3 	rbit	r3, r3
 8004314:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004316:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004318:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800431a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004320:	2320      	movs	r3, #32
 8004322:	e003      	b.n	800432c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004324:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004326:	fab3 f383 	clz	r3, r3
 800432a:	b2db      	uxtb	r3, r3
 800432c:	429a      	cmp	r2, r3
 800432e:	d14f      	bne.n	80043d0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2200      	movs	r2, #0
 8004336:	2103      	movs	r1, #3
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff f86f 	bl	800341c <LL_ADC_SetOffsetState>
 800433e:	e047      	b.n	80043d0 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004346:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	069b      	lsls	r3, r3, #26
 8004350:	429a      	cmp	r2, r3
 8004352:	d107      	bne.n	8004364 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004362:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800436a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	069b      	lsls	r3, r3, #26
 8004374:	429a      	cmp	r2, r3
 8004376:	d107      	bne.n	8004388 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004386:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800438e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	069b      	lsls	r3, r3, #26
 8004398:	429a      	cmp	r2, r3
 800439a:	d107      	bne.n	80043ac <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80043aa:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	069b      	lsls	r3, r3, #26
 80043bc:	429a      	cmp	r2, r3
 80043be:	d107      	bne.n	80043d0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80043ce:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7ff f9b7 	bl	8003748 <LL_ADC_IsEnabled>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f040 8219 	bne.w	8004814 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6818      	ldr	r0, [r3, #0]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	6819      	ldr	r1, [r3, #0]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	461a      	mov	r2, r3
 80043f0:	f7ff f8e6 	bl	80035c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	4aa1      	ldr	r2, [pc, #644]	; (8004680 <HAL_ADC_ConfigChannel+0x888>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	f040 812e 	bne.w	800465c <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10b      	bne.n	8004428 <HAL_ADC_ConfigChannel+0x630>
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	0e9b      	lsrs	r3, r3, #26
 8004416:	3301      	adds	r3, #1
 8004418:	f003 031f 	and.w	r3, r3, #31
 800441c:	2b09      	cmp	r3, #9
 800441e:	bf94      	ite	ls
 8004420:	2301      	movls	r3, #1
 8004422:	2300      	movhi	r3, #0
 8004424:	b2db      	uxtb	r3, r3
 8004426:	e019      	b.n	800445c <HAL_ADC_ConfigChannel+0x664>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004430:	fa93 f3a3 	rbit	r3, r3
 8004434:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004438:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800443a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004440:	2320      	movs	r3, #32
 8004442:	e003      	b.n	800444c <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004446:	fab3 f383 	clz	r3, r3
 800444a:	b2db      	uxtb	r3, r3
 800444c:	3301      	adds	r3, #1
 800444e:	f003 031f 	and.w	r3, r3, #31
 8004452:	2b09      	cmp	r3, #9
 8004454:	bf94      	ite	ls
 8004456:	2301      	movls	r3, #1
 8004458:	2300      	movhi	r3, #0
 800445a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800445c:	2b00      	cmp	r3, #0
 800445e:	d079      	beq.n	8004554 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004468:	2b00      	cmp	r3, #0
 800446a:	d107      	bne.n	800447c <HAL_ADC_ConfigChannel+0x684>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	0e9b      	lsrs	r3, r3, #26
 8004472:	3301      	adds	r3, #1
 8004474:	069b      	lsls	r3, r3, #26
 8004476:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800447a:	e015      	b.n	80044a8 <HAL_ADC_ConfigChannel+0x6b0>
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004484:	fa93 f3a3 	rbit	r3, r3
 8004488:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800448a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800448c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800448e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004494:	2320      	movs	r3, #32
 8004496:	e003      	b.n	80044a0 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004498:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800449a:	fab3 f383 	clz	r3, r3
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	3301      	adds	r3, #1
 80044a2:	069b      	lsls	r3, r3, #26
 80044a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d109      	bne.n	80044c8 <HAL_ADC_ConfigChannel+0x6d0>
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	0e9b      	lsrs	r3, r3, #26
 80044ba:	3301      	adds	r3, #1
 80044bc:	f003 031f 	and.w	r3, r3, #31
 80044c0:	2101      	movs	r1, #1
 80044c2:	fa01 f303 	lsl.w	r3, r1, r3
 80044c6:	e017      	b.n	80044f8 <HAL_ADC_ConfigChannel+0x700>
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044d0:	fa93 f3a3 	rbit	r3, r3
 80044d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80044d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044d8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80044da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80044e0:	2320      	movs	r3, #32
 80044e2:	e003      	b.n	80044ec <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 80044e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044e6:	fab3 f383 	clz	r3, r3
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	3301      	adds	r3, #1
 80044ee:	f003 031f 	and.w	r3, r3, #31
 80044f2:	2101      	movs	r1, #1
 80044f4:	fa01 f303 	lsl.w	r3, r1, r3
 80044f8:	ea42 0103 	orr.w	r1, r2, r3
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10a      	bne.n	800451e <HAL_ADC_ConfigChannel+0x726>
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	0e9b      	lsrs	r3, r3, #26
 800450e:	3301      	adds	r3, #1
 8004510:	f003 021f 	and.w	r2, r3, #31
 8004514:	4613      	mov	r3, r2
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	4413      	add	r3, r2
 800451a:	051b      	lsls	r3, r3, #20
 800451c:	e018      	b.n	8004550 <HAL_ADC_ConfigChannel+0x758>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004526:	fa93 f3a3 	rbit	r3, r3
 800452a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800452c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004536:	2320      	movs	r3, #32
 8004538:	e003      	b.n	8004542 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800453a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453c:	fab3 f383 	clz	r3, r3
 8004540:	b2db      	uxtb	r3, r3
 8004542:	3301      	adds	r3, #1
 8004544:	f003 021f 	and.w	r2, r3, #31
 8004548:	4613      	mov	r3, r2
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	4413      	add	r3, r2
 800454e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004550:	430b      	orrs	r3, r1
 8004552:	e07e      	b.n	8004652 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800455c:	2b00      	cmp	r3, #0
 800455e:	d107      	bne.n	8004570 <HAL_ADC_ConfigChannel+0x778>
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	0e9b      	lsrs	r3, r3, #26
 8004566:	3301      	adds	r3, #1
 8004568:	069b      	lsls	r3, r3, #26
 800456a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800456e:	e015      	b.n	800459c <HAL_ADC_ConfigChannel+0x7a4>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004578:	fa93 f3a3 	rbit	r3, r3
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004588:	2320      	movs	r3, #32
 800458a:	e003      	b.n	8004594 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 800458c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458e:	fab3 f383 	clz	r3, r3
 8004592:	b2db      	uxtb	r3, r3
 8004594:	3301      	adds	r3, #1
 8004596:	069b      	lsls	r3, r3, #26
 8004598:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d109      	bne.n	80045bc <HAL_ADC_ConfigChannel+0x7c4>
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	0e9b      	lsrs	r3, r3, #26
 80045ae:	3301      	adds	r3, #1
 80045b0:	f003 031f 	and.w	r3, r3, #31
 80045b4:	2101      	movs	r1, #1
 80045b6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ba:	e017      	b.n	80045ec <HAL_ADC_ConfigChannel+0x7f4>
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	fa93 f3a3 	rbit	r3, r3
 80045c8:	61bb      	str	r3, [r7, #24]
  return result;
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80045ce:	6a3b      	ldr	r3, [r7, #32]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80045d4:	2320      	movs	r3, #32
 80045d6:	e003      	b.n	80045e0 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	fab3 f383 	clz	r3, r3
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	3301      	adds	r3, #1
 80045e2:	f003 031f 	and.w	r3, r3, #31
 80045e6:	2101      	movs	r1, #1
 80045e8:	fa01 f303 	lsl.w	r3, r1, r3
 80045ec:	ea42 0103 	orr.w	r1, r2, r3
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10d      	bne.n	8004618 <HAL_ADC_ConfigChannel+0x820>
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	0e9b      	lsrs	r3, r3, #26
 8004602:	3301      	adds	r3, #1
 8004604:	f003 021f 	and.w	r2, r3, #31
 8004608:	4613      	mov	r3, r2
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	4413      	add	r3, r2
 800460e:	3b1e      	subs	r3, #30
 8004610:	051b      	lsls	r3, r3, #20
 8004612:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004616:	e01b      	b.n	8004650 <HAL_ADC_ConfigChannel+0x858>
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	fa93 f3a3 	rbit	r3, r3
 8004624:	60fb      	str	r3, [r7, #12]
  return result;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004630:	2320      	movs	r3, #32
 8004632:	e003      	b.n	800463c <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	fab3 f383 	clz	r3, r3
 800463a:	b2db      	uxtb	r3, r3
 800463c:	3301      	adds	r3, #1
 800463e:	f003 021f 	and.w	r2, r3, #31
 8004642:	4613      	mov	r3, r2
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	4413      	add	r3, r2
 8004648:	3b1e      	subs	r3, #30
 800464a:	051b      	lsls	r3, r3, #20
 800464c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004650:	430b      	orrs	r3, r1
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	6892      	ldr	r2, [r2, #8]
 8004656:	4619      	mov	r1, r3
 8004658:	f7fe ff86 	bl	8003568 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	f280 80d7 	bge.w	8004814 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a06      	ldr	r2, [pc, #24]	; (8004684 <HAL_ADC_ConfigChannel+0x88c>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d004      	beq.n	800467a <HAL_ADC_ConfigChannel+0x882>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a04      	ldr	r2, [pc, #16]	; (8004688 <HAL_ADC_ConfigChannel+0x890>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d10a      	bne.n	8004690 <HAL_ADC_ConfigChannel+0x898>
 800467a:	4b04      	ldr	r3, [pc, #16]	; (800468c <HAL_ADC_ConfigChannel+0x894>)
 800467c:	e009      	b.n	8004692 <HAL_ADC_ConfigChannel+0x89a>
 800467e:	bf00      	nop
 8004680:	47ff0000 	.word	0x47ff0000
 8004684:	40022000 	.word	0x40022000
 8004688:	40022100 	.word	0x40022100
 800468c:	40022300 	.word	0x40022300
 8004690:	4b65      	ldr	r3, [pc, #404]	; (8004828 <HAL_ADC_ConfigChannel+0xa30>)
 8004692:	4618      	mov	r0, r3
 8004694:	f7fe fdec 	bl	8003270 <LL_ADC_GetCommonPathInternalCh>
 8004698:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a62      	ldr	r2, [pc, #392]	; (800482c <HAL_ADC_ConfigChannel+0xa34>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d004      	beq.n	80046b0 <HAL_ADC_ConfigChannel+0x8b8>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a61      	ldr	r2, [pc, #388]	; (8004830 <HAL_ADC_ConfigChannel+0xa38>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d10e      	bne.n	80046ce <HAL_ADC_ConfigChannel+0x8d6>
 80046b0:	485e      	ldr	r0, [pc, #376]	; (800482c <HAL_ADC_ConfigChannel+0xa34>)
 80046b2:	f7ff f849 	bl	8003748 <LL_ADC_IsEnabled>
 80046b6:	4604      	mov	r4, r0
 80046b8:	485d      	ldr	r0, [pc, #372]	; (8004830 <HAL_ADC_ConfigChannel+0xa38>)
 80046ba:	f7ff f845 	bl	8003748 <LL_ADC_IsEnabled>
 80046be:	4603      	mov	r3, r0
 80046c0:	4323      	orrs	r3, r4
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	bf0c      	ite	eq
 80046c6:	2301      	moveq	r3, #1
 80046c8:	2300      	movne	r3, #0
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	e008      	b.n	80046e0 <HAL_ADC_ConfigChannel+0x8e8>
 80046ce:	4859      	ldr	r0, [pc, #356]	; (8004834 <HAL_ADC_ConfigChannel+0xa3c>)
 80046d0:	f7ff f83a 	bl	8003748 <LL_ADC_IsEnabled>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	bf0c      	ite	eq
 80046da:	2301      	moveq	r3, #1
 80046dc:	2300      	movne	r3, #0
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 8084 	beq.w	80047ee <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a53      	ldr	r2, [pc, #332]	; (8004838 <HAL_ADC_ConfigChannel+0xa40>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d132      	bne.n	8004756 <HAL_ADC_ConfigChannel+0x95e>
 80046f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d12c      	bne.n	8004756 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a4c      	ldr	r2, [pc, #304]	; (8004834 <HAL_ADC_ConfigChannel+0xa3c>)
 8004702:	4293      	cmp	r3, r2
 8004704:	f040 8086 	bne.w	8004814 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a47      	ldr	r2, [pc, #284]	; (800482c <HAL_ADC_ConfigChannel+0xa34>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d004      	beq.n	800471c <HAL_ADC_ConfigChannel+0x924>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a46      	ldr	r2, [pc, #280]	; (8004830 <HAL_ADC_ConfigChannel+0xa38>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d101      	bne.n	8004720 <HAL_ADC_ConfigChannel+0x928>
 800471c:	4a47      	ldr	r2, [pc, #284]	; (800483c <HAL_ADC_ConfigChannel+0xa44>)
 800471e:	e000      	b.n	8004722 <HAL_ADC_ConfigChannel+0x92a>
 8004720:	4a41      	ldr	r2, [pc, #260]	; (8004828 <HAL_ADC_ConfigChannel+0xa30>)
 8004722:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004726:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800472a:	4619      	mov	r1, r3
 800472c:	4610      	mov	r0, r2
 800472e:	f7fe fd8c 	bl	800324a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004732:	4b43      	ldr	r3, [pc, #268]	; (8004840 <HAL_ADC_ConfigChannel+0xa48>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	099b      	lsrs	r3, r3, #6
 8004738:	4a42      	ldr	r2, [pc, #264]	; (8004844 <HAL_ADC_ConfigChannel+0xa4c>)
 800473a:	fba2 2303 	umull	r2, r3, r2, r3
 800473e:	099b      	lsrs	r3, r3, #6
 8004740:	3301      	adds	r3, #1
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004746:	e002      	b.n	800474e <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	3b01      	subs	r3, #1
 800474c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1f9      	bne.n	8004748 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004754:	e05e      	b.n	8004814 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a3b      	ldr	r2, [pc, #236]	; (8004848 <HAL_ADC_ConfigChannel+0xa50>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d120      	bne.n	80047a2 <HAL_ADC_ConfigChannel+0x9aa>
 8004760:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004764:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d11a      	bne.n	80047a2 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a30      	ldr	r2, [pc, #192]	; (8004834 <HAL_ADC_ConfigChannel+0xa3c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d14e      	bne.n	8004814 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a2c      	ldr	r2, [pc, #176]	; (800482c <HAL_ADC_ConfigChannel+0xa34>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d004      	beq.n	800478a <HAL_ADC_ConfigChannel+0x992>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a2a      	ldr	r2, [pc, #168]	; (8004830 <HAL_ADC_ConfigChannel+0xa38>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d101      	bne.n	800478e <HAL_ADC_ConfigChannel+0x996>
 800478a:	4a2c      	ldr	r2, [pc, #176]	; (800483c <HAL_ADC_ConfigChannel+0xa44>)
 800478c:	e000      	b.n	8004790 <HAL_ADC_ConfigChannel+0x998>
 800478e:	4a26      	ldr	r2, [pc, #152]	; (8004828 <HAL_ADC_ConfigChannel+0xa30>)
 8004790:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004794:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004798:	4619      	mov	r1, r3
 800479a:	4610      	mov	r0, r2
 800479c:	f7fe fd55 	bl	800324a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80047a0:	e038      	b.n	8004814 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a29      	ldr	r2, [pc, #164]	; (800484c <HAL_ADC_ConfigChannel+0xa54>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d133      	bne.n	8004814 <HAL_ADC_ConfigChannel+0xa1c>
 80047ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d12d      	bne.n	8004814 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a1d      	ldr	r2, [pc, #116]	; (8004834 <HAL_ADC_ConfigChannel+0xa3c>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d128      	bne.n	8004814 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a19      	ldr	r2, [pc, #100]	; (800482c <HAL_ADC_ConfigChannel+0xa34>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d004      	beq.n	80047d6 <HAL_ADC_ConfigChannel+0x9de>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a17      	ldr	r2, [pc, #92]	; (8004830 <HAL_ADC_ConfigChannel+0xa38>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d101      	bne.n	80047da <HAL_ADC_ConfigChannel+0x9e2>
 80047d6:	4a19      	ldr	r2, [pc, #100]	; (800483c <HAL_ADC_ConfigChannel+0xa44>)
 80047d8:	e000      	b.n	80047dc <HAL_ADC_ConfigChannel+0x9e4>
 80047da:	4a13      	ldr	r2, [pc, #76]	; (8004828 <HAL_ADC_ConfigChannel+0xa30>)
 80047dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80047e4:	4619      	mov	r1, r3
 80047e6:	4610      	mov	r0, r2
 80047e8:	f7fe fd2f 	bl	800324a <LL_ADC_SetCommonPathInternalCh>
 80047ec:	e012      	b.n	8004814 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f2:	f043 0220 	orr.w	r2, r3, #32
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004800:	e008      	b.n	8004814 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004806:	f043 0220 	orr.w	r2, r3, #32
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800481c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004820:	4618      	mov	r0, r3
 8004822:	37e4      	adds	r7, #228	; 0xe4
 8004824:	46bd      	mov	sp, r7
 8004826:	bd90      	pop	{r4, r7, pc}
 8004828:	58026300 	.word	0x58026300
 800482c:	40022000 	.word	0x40022000
 8004830:	40022100 	.word	0x40022100
 8004834:	58026000 	.word	0x58026000
 8004838:	c7520000 	.word	0xc7520000
 800483c:	40022300 	.word	0x40022300
 8004840:	24000000 	.word	0x24000000
 8004844:	053e2d63 	.word	0x053e2d63
 8004848:	c3210000 	.word	0xc3210000
 800484c:	cb840000 	.word	0xcb840000

08004850 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4618      	mov	r0, r3
 800485e:	f7fe ff73 	bl	8003748 <LL_ADC_IsEnabled>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d16e      	bne.n	8004946 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689a      	ldr	r2, [r3, #8]
 800486e:	4b38      	ldr	r3, [pc, #224]	; (8004950 <ADC_Enable+0x100>)
 8004870:	4013      	ands	r3, r2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00d      	beq.n	8004892 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800487a:	f043 0210 	orr.w	r2, r3, #16
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004886:	f043 0201 	orr.w	r2, r3, #1
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e05a      	b.n	8004948 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4618      	mov	r0, r3
 8004898:	f7fe ff2e 	bl	80036f8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800489c:	f7fe fc7c 	bl	8003198 <HAL_GetTick>
 80048a0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a2b      	ldr	r2, [pc, #172]	; (8004954 <ADC_Enable+0x104>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d004      	beq.n	80048b6 <ADC_Enable+0x66>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a29      	ldr	r2, [pc, #164]	; (8004958 <ADC_Enable+0x108>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d101      	bne.n	80048ba <ADC_Enable+0x6a>
 80048b6:	4b29      	ldr	r3, [pc, #164]	; (800495c <ADC_Enable+0x10c>)
 80048b8:	e000      	b.n	80048bc <ADC_Enable+0x6c>
 80048ba:	4b29      	ldr	r3, [pc, #164]	; (8004960 <ADC_Enable+0x110>)
 80048bc:	4618      	mov	r0, r3
 80048be:	f7fe febf 	bl	8003640 <LL_ADC_GetMultimode>
 80048c2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a23      	ldr	r2, [pc, #140]	; (8004958 <ADC_Enable+0x108>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d002      	beq.n	80048d4 <ADC_Enable+0x84>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	e000      	b.n	80048d6 <ADC_Enable+0x86>
 80048d4:	4b1f      	ldr	r3, [pc, #124]	; (8004954 <ADC_Enable+0x104>)
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6812      	ldr	r2, [r2, #0]
 80048da:	4293      	cmp	r3, r2
 80048dc:	d02c      	beq.n	8004938 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d130      	bne.n	8004946 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048e4:	e028      	b.n	8004938 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fe ff2c 	bl	8003748 <LL_ADC_IsEnabled>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d104      	bne.n	8004900 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7fe fefc 	bl	80036f8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004900:	f7fe fc4a 	bl	8003198 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d914      	bls.n	8004938 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	2b01      	cmp	r3, #1
 800491a:	d00d      	beq.n	8004938 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004920:	f043 0210 	orr.w	r2, r3, #16
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800492c:	f043 0201 	orr.w	r2, r3, #1
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e007      	b.n	8004948 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b01      	cmp	r3, #1
 8004944:	d1cf      	bne.n	80048e6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	8000003f 	.word	0x8000003f
 8004954:	40022000 	.word	0x40022000
 8004958:	40022100 	.word	0x40022100
 800495c:	40022300 	.word	0x40022300
 8004960:	58026300 	.word	0x58026300

08004964 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4618      	mov	r0, r3
 8004972:	f7fe fefc 	bl	800376e <LL_ADC_IsDisableOngoing>
 8004976:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4618      	mov	r0, r3
 800497e:	f7fe fee3 	bl	8003748 <LL_ADC_IsEnabled>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d047      	beq.n	8004a18 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d144      	bne.n	8004a18 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f003 030d 	and.w	r3, r3, #13
 8004998:	2b01      	cmp	r3, #1
 800499a:	d10c      	bne.n	80049b6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7fe febd 	bl	8003720 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2203      	movs	r2, #3
 80049ac:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80049ae:	f7fe fbf3 	bl	8003198 <HAL_GetTick>
 80049b2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80049b4:	e029      	b.n	8004a0a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ba:	f043 0210 	orr.w	r2, r3, #16
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049c6:	f043 0201 	orr.w	r2, r3, #1
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e023      	b.n	8004a1a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80049d2:	f7fe fbe1 	bl	8003198 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d914      	bls.n	8004a0a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00d      	beq.n	8004a0a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f2:	f043 0210 	orr.w	r2, r3, #16
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049fe:	f043 0201 	orr.w	r2, r3, #1
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e007      	b.n	8004a1a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1dc      	bne.n	80049d2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b084      	sub	sp, #16
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d14b      	bne.n	8004ad4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a40:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	661a      	str	r2, [r3, #96]	; 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0308 	and.w	r3, r3, #8
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d021      	beq.n	8004a9a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7fe fd08 	bl	8003470 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d032      	beq.n	8004acc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d12b      	bne.n	8004acc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	661a      	str	r2, [r3, #96]	; 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d11f      	bne.n	8004acc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a90:	f043 0201 	orr.w	r2, r3, #1
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	661a      	str	r2, [r3, #96]	; 0x60
 8004a98:	e018      	b.n	8004acc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f003 0303 	and.w	r3, r3, #3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d111      	bne.n	8004acc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	661a      	str	r2, [r3, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ab8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d105      	bne.n	8004acc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ac4:	f043 0201 	orr.w	r2, r3, #1
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	661a      	str	r2, [r3, #96]	; 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f7fd f95b 	bl	8001d88 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004ad2:	e00e      	b.n	8004af2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ad8:	f003 0310 	and.w	r3, r3, #16
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f7ff f97f 	bl	8003de4 <HAL_ADC_ErrorCallback>
}
 8004ae6:	e004      	b.n	8004af2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	4798      	blx	r3
}
 8004af2:	bf00      	nop
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b084      	sub	sp, #16
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f7ff f961 	bl	8003dd0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b0e:	bf00      	nop
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b084      	sub	sp, #16
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b34:	f043 0204 	orr.w	r2, r3, #4
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f7ff f951 	bl	8003de4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b42:	bf00      	nop
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
	...

08004b4c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a6c      	ldr	r2, [pc, #432]	; (8004d0c <ADC_ConfigureBoostMode+0x1c0>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d004      	beq.n	8004b68 <ADC_ConfigureBoostMode+0x1c>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a6b      	ldr	r2, [pc, #428]	; (8004d10 <ADC_ConfigureBoostMode+0x1c4>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d109      	bne.n	8004b7c <ADC_ConfigureBoostMode+0x30>
 8004b68:	4b6a      	ldr	r3, [pc, #424]	; (8004d14 <ADC_ConfigureBoostMode+0x1c8>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	bf14      	ite	ne
 8004b74:	2301      	movne	r3, #1
 8004b76:	2300      	moveq	r3, #0
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	e008      	b.n	8004b8e <ADC_ConfigureBoostMode+0x42>
 8004b7c:	4b66      	ldr	r3, [pc, #408]	; (8004d18 <ADC_ConfigureBoostMode+0x1cc>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	bf14      	ite	ne
 8004b88:	2301      	movne	r3, #1
 8004b8a:	2300      	moveq	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d01c      	beq.n	8004bcc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004b92:	f005 f843 	bl	8009c1c <HAL_RCC_GetHCLKFreq>
 8004b96:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ba0:	d010      	beq.n	8004bc4 <ADC_ConfigureBoostMode+0x78>
 8004ba2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ba6:	d873      	bhi.n	8004c90 <ADC_ConfigureBoostMode+0x144>
 8004ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bac:	d002      	beq.n	8004bb4 <ADC_ConfigureBoostMode+0x68>
 8004bae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bb2:	d16d      	bne.n	8004c90 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	0c1b      	lsrs	r3, r3, #16
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc0:	60fb      	str	r3, [r7, #12]
        break;
 8004bc2:	e068      	b.n	8004c96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	089b      	lsrs	r3, r3, #2
 8004bc8:	60fb      	str	r3, [r7, #12]
        break;
 8004bca:	e064      	b.n	8004c96 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004bcc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004bd0:	f04f 0100 	mov.w	r1, #0
 8004bd4:	f006 fa1e 	bl	800b014 <HAL_RCCEx_GetPeriphCLKFreq>
 8004bd8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004be2:	d051      	beq.n	8004c88 <ADC_ConfigureBoostMode+0x13c>
 8004be4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004be8:	d854      	bhi.n	8004c94 <ADC_ConfigureBoostMode+0x148>
 8004bea:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004bee:	d047      	beq.n	8004c80 <ADC_ConfigureBoostMode+0x134>
 8004bf0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004bf4:	d84e      	bhi.n	8004c94 <ADC_ConfigureBoostMode+0x148>
 8004bf6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004bfa:	d03d      	beq.n	8004c78 <ADC_ConfigureBoostMode+0x12c>
 8004bfc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004c00:	d848      	bhi.n	8004c94 <ADC_ConfigureBoostMode+0x148>
 8004c02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c06:	d033      	beq.n	8004c70 <ADC_ConfigureBoostMode+0x124>
 8004c08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c0c:	d842      	bhi.n	8004c94 <ADC_ConfigureBoostMode+0x148>
 8004c0e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004c12:	d029      	beq.n	8004c68 <ADC_ConfigureBoostMode+0x11c>
 8004c14:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004c18:	d83c      	bhi.n	8004c94 <ADC_ConfigureBoostMode+0x148>
 8004c1a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004c1e:	d01a      	beq.n	8004c56 <ADC_ConfigureBoostMode+0x10a>
 8004c20:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004c24:	d836      	bhi.n	8004c94 <ADC_ConfigureBoostMode+0x148>
 8004c26:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004c2a:	d014      	beq.n	8004c56 <ADC_ConfigureBoostMode+0x10a>
 8004c2c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004c30:	d830      	bhi.n	8004c94 <ADC_ConfigureBoostMode+0x148>
 8004c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c36:	d00e      	beq.n	8004c56 <ADC_ConfigureBoostMode+0x10a>
 8004c38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c3c:	d82a      	bhi.n	8004c94 <ADC_ConfigureBoostMode+0x148>
 8004c3e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c42:	d008      	beq.n	8004c56 <ADC_ConfigureBoostMode+0x10a>
 8004c44:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c48:	d824      	bhi.n	8004c94 <ADC_ConfigureBoostMode+0x148>
 8004c4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c4e:	d002      	beq.n	8004c56 <ADC_ConfigureBoostMode+0x10a>
 8004c50:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c54:	d11e      	bne.n	8004c94 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	0c9b      	lsrs	r3, r3, #18
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c64:	60fb      	str	r3, [r7, #12]
        break;
 8004c66:	e016      	b.n	8004c96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	091b      	lsrs	r3, r3, #4
 8004c6c:	60fb      	str	r3, [r7, #12]
        break;
 8004c6e:	e012      	b.n	8004c96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	60fb      	str	r3, [r7, #12]
        break;
 8004c76:	e00e      	b.n	8004c96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	099b      	lsrs	r3, r3, #6
 8004c7c:	60fb      	str	r3, [r7, #12]
        break;
 8004c7e:	e00a      	b.n	8004c96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	09db      	lsrs	r3, r3, #7
 8004c84:	60fb      	str	r3, [r7, #12]
        break;
 8004c86:	e006      	b.n	8004c96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	0a1b      	lsrs	r3, r3, #8
 8004c8c:	60fb      	str	r3, [r7, #12]
        break;
 8004c8e:	e002      	b.n	8004c96 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004c90:	bf00      	nop
 8004c92:	e000      	b.n	8004c96 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004c94:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	085b      	lsrs	r3, r3, #1
 8004c9a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4a1f      	ldr	r2, [pc, #124]	; (8004d1c <ADC_ConfigureBoostMode+0x1d0>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d808      	bhi.n	8004cb6 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689a      	ldr	r2, [r3, #8]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004cb2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004cb4:	e025      	b.n	8004d02 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	4a19      	ldr	r2, [pc, #100]	; (8004d20 <ADC_ConfigureBoostMode+0x1d4>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d80a      	bhi.n	8004cd4 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cd0:	609a      	str	r2, [r3, #8]
}
 8004cd2:	e016      	b.n	8004d02 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	4a13      	ldr	r2, [pc, #76]	; (8004d24 <ADC_ConfigureBoostMode+0x1d8>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d80a      	bhi.n	8004cf2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cee:	609a      	str	r2, [r3, #8]
}
 8004cf0:	e007      	b.n	8004d02 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004d00:	609a      	str	r2, [r3, #8]
}
 8004d02:	bf00      	nop
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	40022000 	.word	0x40022000
 8004d10:	40022100 	.word	0x40022100
 8004d14:	40022300 	.word	0x40022300
 8004d18:	58026300 	.word	0x58026300
 8004d1c:	005f5e10 	.word	0x005f5e10
 8004d20:	00bebc20 	.word	0x00bebc20
 8004d24:	017d7840 	.word	0x017d7840

08004d28 <LL_ADC_IsEnabled>:
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <LL_ADC_IsEnabled+0x18>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e000      	b.n	8004d42 <LL_ADC_IsEnabled+0x1a>
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
	...

08004d50 <LL_ADC_StartCalibration>:
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	4b09      	ldr	r3, [pc, #36]	; (8004d88 <LL_ADC_StartCalibration+0x38>)
 8004d62:	4013      	ands	r3, r2
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004d70:	430a      	orrs	r2, r1
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	609a      	str	r2, [r3, #8]
}
 8004d7c:	bf00      	nop
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	3ffeffc0 	.word	0x3ffeffc0

08004d8c <LL_ADC_IsCalibrationOnGoing>:
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004da0:	d101      	bne.n	8004da6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004da2:	2301      	movs	r3, #1
 8004da4:	e000      	b.n	8004da8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <LL_ADC_REG_IsConversionOngoing>:
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b04      	cmp	r3, #4
 8004dc6:	d101      	bne.n	8004dcc <LL_ADC_REG_IsConversionOngoing+0x18>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e000      	b.n	8004dce <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
	...

08004ddc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004de8:	2300      	movs	r3, #0
 8004dea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d101      	bne.n	8004dfa <HAL_ADCEx_Calibration_Start+0x1e>
 8004df6:	2302      	movs	r3, #2
 8004df8:	e04c      	b.n	8004e94 <HAL_ADCEx_Calibration_Start+0xb8>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f7ff fdae 	bl	8004964 <ADC_Disable>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004e0c:	7dfb      	ldrb	r3, [r7, #23]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d135      	bne.n	8004e7e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004e16:	4b21      	ldr	r3, [pc, #132]	; (8004e9c <HAL_ADCEx_Calibration_Start+0xc0>)
 8004e18:	4013      	ands	r3, r2
 8004e1a:	f043 0202 	orr.w	r2, r3, #2
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	661a      	str	r2, [r3, #96]	; 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	68b9      	ldr	r1, [r7, #8]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7ff ff90 	bl	8004d50 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004e30:	e014      	b.n	8004e5c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	3301      	adds	r3, #1
 8004e36:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	4a19      	ldr	r2, [pc, #100]	; (8004ea0 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d30d      	bcc.n	8004e5c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e44:	f023 0312 	bic.w	r3, r3, #18
 8004e48:	f043 0210 	orr.w	r2, r3, #16
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e01b      	b.n	8004e94 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7ff ff93 	bl	8004d8c <LL_ADC_IsCalibrationOnGoing>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1e2      	bne.n	8004e32 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e70:	f023 0303 	bic.w	r3, r3, #3
 8004e74:	f043 0201 	orr.w	r2, r3, #1
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	661a      	str	r2, [r3, #96]	; 0x60
 8004e7c:	e005      	b.n	8004e8a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e82:	f043 0210 	orr.w	r2, r3, #16
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	661a      	str	r2, [r3, #96]	; 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3718      	adds	r7, #24
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	ffffeefd 	.word	0xffffeefd
 8004ea0:	25c3f800 	.word	0x25c3f800

08004ea4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004ea4:	b590      	push	{r4, r7, lr}
 8004ea6:	b0a3      	sub	sp, #140	; 0x8c
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d101      	bne.n	8004ec2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	e0c1      	b.n	8005046 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a5e      	ldr	r2, [pc, #376]	; (8005050 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d102      	bne.n	8004ee2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004edc:	4b5d      	ldr	r3, [pc, #372]	; (8005054 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ede:	60fb      	str	r3, [r7, #12]
 8004ee0:	e001      	b.n	8004ee6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10b      	bne.n	8004f04 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ef0:	f043 0220 	orr.w	r2, r3, #32
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e0a0      	b.n	8005046 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7ff ff54 	bl	8004db4 <LL_ADC_REG_IsConversionOngoing>
 8004f0c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7ff ff4d 	bl	8004db4 <LL_ADC_REG_IsConversionOngoing>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f040 8081 	bne.w	8005024 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004f22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d17c      	bne.n	8005024 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a48      	ldr	r2, [pc, #288]	; (8005050 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d004      	beq.n	8004f3e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a46      	ldr	r2, [pc, #280]	; (8005054 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d101      	bne.n	8004f42 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004f3e:	4b46      	ldr	r3, [pc, #280]	; (8005058 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004f40:	e000      	b.n	8004f44 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004f42:	4b46      	ldr	r3, [pc, #280]	; (800505c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004f44:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d039      	beq.n	8004fc2 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004f4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f5e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a3a      	ldr	r2, [pc, #232]	; (8005050 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d004      	beq.n	8004f74 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a39      	ldr	r2, [pc, #228]	; (8005054 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d10e      	bne.n	8004f92 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004f74:	4836      	ldr	r0, [pc, #216]	; (8005050 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f76:	f7ff fed7 	bl	8004d28 <LL_ADC_IsEnabled>
 8004f7a:	4604      	mov	r4, r0
 8004f7c:	4835      	ldr	r0, [pc, #212]	; (8005054 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004f7e:	f7ff fed3 	bl	8004d28 <LL_ADC_IsEnabled>
 8004f82:	4603      	mov	r3, r0
 8004f84:	4323      	orrs	r3, r4
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	bf0c      	ite	eq
 8004f8a:	2301      	moveq	r3, #1
 8004f8c:	2300      	movne	r3, #0
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	e008      	b.n	8004fa4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004f92:	4833      	ldr	r0, [pc, #204]	; (8005060 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004f94:	f7ff fec8 	bl	8004d28 <LL_ADC_IsEnabled>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	bf0c      	ite	eq
 8004f9e:	2301      	moveq	r3, #1
 8004fa0:	2300      	movne	r3, #0
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d047      	beq.n	8005038 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004fa8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004faa:	689a      	ldr	r2, [r3, #8]
 8004fac:	4b2d      	ldr	r3, [pc, #180]	; (8005064 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004fae:	4013      	ands	r3, r2
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	6811      	ldr	r1, [r2, #0]
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	6892      	ldr	r2, [r2, #8]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fbe:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004fc0:	e03a      	b.n	8005038 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004fc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004fca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fcc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a1f      	ldr	r2, [pc, #124]	; (8005050 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d004      	beq.n	8004fe2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a1d      	ldr	r2, [pc, #116]	; (8005054 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d10e      	bne.n	8005000 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004fe2:	481b      	ldr	r0, [pc, #108]	; (8005050 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004fe4:	f7ff fea0 	bl	8004d28 <LL_ADC_IsEnabled>
 8004fe8:	4604      	mov	r4, r0
 8004fea:	481a      	ldr	r0, [pc, #104]	; (8005054 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004fec:	f7ff fe9c 	bl	8004d28 <LL_ADC_IsEnabled>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	4323      	orrs	r3, r4
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	bf0c      	ite	eq
 8004ff8:	2301      	moveq	r3, #1
 8004ffa:	2300      	movne	r3, #0
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	e008      	b.n	8005012 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005000:	4817      	ldr	r0, [pc, #92]	; (8005060 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005002:	f7ff fe91 	bl	8004d28 <LL_ADC_IsEnabled>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	bf0c      	ite	eq
 800500c:	2301      	moveq	r3, #1
 800500e:	2300      	movne	r3, #0
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d010      	beq.n	8005038 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005016:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005018:	689a      	ldr	r2, [r3, #8]
 800501a:	4b12      	ldr	r3, [pc, #72]	; (8005064 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800501c:	4013      	ands	r3, r2
 800501e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005020:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005022:	e009      	b.n	8005038 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005028:	f043 0220 	orr.w	r2, r3, #32
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8005036:	e000      	b.n	800503a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005038:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005042:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8005046:	4618      	mov	r0, r3
 8005048:	378c      	adds	r7, #140	; 0x8c
 800504a:	46bd      	mov	sp, r7
 800504c:	bd90      	pop	{r4, r7, pc}
 800504e:	bf00      	nop
 8005050:	40022000 	.word	0x40022000
 8005054:	40022100 	.word	0x40022100
 8005058:	40022300 	.word	0x40022300
 800505c:	58026300 	.word	0x58026300
 8005060:	58026000 	.word	0x58026000
 8005064:	fffff0e0 	.word	0xfffff0e0

08005068 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b088      	sub	sp, #32
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8005070:	2300      	movs	r3, #0
 8005072:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 8005074:	2300      	movs	r3, #0
 8005076:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d102      	bne.n	8005084 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	77fb      	strb	r3, [r7, #31]
 8005082:	e10e      	b.n	80052a2 <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800508e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005092:	d102      	bne.n	800509a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	77fb      	strb	r3, [r7, #31]
 8005098:	e103      	b.n	80052a2 <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d109      	bne.n	80050ba <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f7fd f9ef 	bl	8002498 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0304 	and.w	r3, r3, #4
 80050c4:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 80050ce:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 80050d4:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 80050da:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 80050e0:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 80050e6:	4313      	orrs	r3, r2
 80050e8:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	4b6e      	ldr	r3, [pc, #440]	; (80052ac <HAL_COMP_Init+0x244>)
 80050f2:	4013      	ands	r3, r2
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	6812      	ldr	r2, [r2, #0]
 80050f8:	6979      	ldr	r1, [r7, #20]
 80050fa:	430b      	orrs	r3, r1
 80050fc:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	2b10      	cmp	r3, #16
 8005104:	d108      	bne.n	8005118 <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f042 0210 	orr.w	r2, r2, #16
 8005114:	601a      	str	r2, [r3, #0]
 8005116:	e007      	b.n	8005128 <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0210 	bic.w	r2, r2, #16
 8005126:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0304 	and.w	r3, r3, #4
 8005132:	2b00      	cmp	r3, #0
 8005134:	d016      	beq.n	8005164 <HAL_COMP_Init+0xfc>
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d013      	beq.n	8005164 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800513c:	4b5c      	ldr	r3, [pc, #368]	; (80052b0 <HAL_COMP_Init+0x248>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	099b      	lsrs	r3, r3, #6
 8005142:	4a5c      	ldr	r2, [pc, #368]	; (80052b4 <HAL_COMP_Init+0x24c>)
 8005144:	fba2 2303 	umull	r2, r3, r2, r3
 8005148:	099b      	lsrs	r3, r3, #6
 800514a:	1c5a      	adds	r2, r3, #1
 800514c:	4613      	mov	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 8005156:	e002      	b.n	800515e <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	3b01      	subs	r3, #1
 800515c:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1f9      	bne.n	8005158 <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a53      	ldr	r2, [pc, #332]	; (80052b8 <HAL_COMP_Init+0x250>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d102      	bne.n	8005174 <HAL_COMP_Init+0x10c>
 800516e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005172:	e001      	b.n	8005178 <HAL_COMP_Init+0x110>
 8005174:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005178:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d06d      	beq.n	8005262 <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	f003 0310 	and.w	r3, r3, #16
 800518e:	2b00      	cmp	r3, #0
 8005190:	d008      	beq.n	80051a4 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 8005192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	4313      	orrs	r3, r2
 80051a0:	600b      	str	r3, [r1, #0]
 80051a2:	e008      	b.n	80051b6 <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 80051a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	43db      	mvns	r3, r3
 80051ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051b2:	4013      	ands	r3, r2
 80051b4:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	f003 0320 	and.w	r3, r3, #32
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d008      	beq.n	80051d4 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 80051c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c6:	685a      	ldr	r2, [r3, #4]
 80051c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	604b      	str	r3, [r1, #4]
 80051d2:	e008      	b.n	80051e6 <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 80051d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	43db      	mvns	r3, r3
 80051de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051e2:	4013      	ands	r3, r2
 80051e4:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 80051e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00a      	beq.n	8005212 <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 80051fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005200:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005204:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	4313      	orrs	r3, r2
 800520c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 8005210:	e00a      	b.n	8005228 <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 8005212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005216:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	43db      	mvns	r3, r3
 800521e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005222:	4013      	ands	r3, r2
 8005224:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00a      	beq.n	800524a <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 8005234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005238:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800523c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	4313      	orrs	r3, r2
 8005244:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 8005248:	e021      	b.n	800528e <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 800524a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800524e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	43db      	mvns	r3, r3
 8005256:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800525a:	4013      	ands	r3, r2
 800525c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 8005260:	e015      	b.n	800528e <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 8005262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005266:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	43db      	mvns	r3, r3
 800526e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005272:	4013      	ands	r3, r2
 8005274:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 8005278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800527c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	43db      	mvns	r3, r3
 8005284:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005288:	4013      	ands	r3, r2
 800528a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d103      	bne.n	80052a2 <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
   
  }
  
  return status;
 80052a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3720      	adds	r7, #32
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	f0e8cce1 	.word	0xf0e8cce1
 80052b0:	24000000 	.word	0x24000000
 80052b4:	053e2d63 	.word	0x053e2d63
 80052b8:	5800380c 	.word	0x5800380c

080052bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f003 0307 	and.w	r3, r3, #7
 80052ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052cc:	4b0b      	ldr	r3, [pc, #44]	; (80052fc <__NVIC_SetPriorityGrouping+0x40>)
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80052d8:	4013      	ands	r3, r2
 80052da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80052e4:	4b06      	ldr	r3, [pc, #24]	; (8005300 <__NVIC_SetPriorityGrouping+0x44>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052ea:	4a04      	ldr	r2, [pc, #16]	; (80052fc <__NVIC_SetPriorityGrouping+0x40>)
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	60d3      	str	r3, [r2, #12]
}
 80052f0:	bf00      	nop
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	e000ed00 	.word	0xe000ed00
 8005300:	05fa0000 	.word	0x05fa0000

08005304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005304:	b480      	push	{r7}
 8005306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005308:	4b04      	ldr	r3, [pc, #16]	; (800531c <__NVIC_GetPriorityGrouping+0x18>)
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	0a1b      	lsrs	r3, r3, #8
 800530e:	f003 0307 	and.w	r3, r3, #7
}
 8005312:	4618      	mov	r0, r3
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr
 800531c:	e000ed00 	.word	0xe000ed00

08005320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	4603      	mov	r3, r0
 8005328:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800532a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800532e:	2b00      	cmp	r3, #0
 8005330:	db0b      	blt.n	800534a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005332:	88fb      	ldrh	r3, [r7, #6]
 8005334:	f003 021f 	and.w	r2, r3, #31
 8005338:	4907      	ldr	r1, [pc, #28]	; (8005358 <__NVIC_EnableIRQ+0x38>)
 800533a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800533e:	095b      	lsrs	r3, r3, #5
 8005340:	2001      	movs	r0, #1
 8005342:	fa00 f202 	lsl.w	r2, r0, r2
 8005346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	e000e100 	.word	0xe000e100

0800535c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	4603      	mov	r3, r0
 8005364:	6039      	str	r1, [r7, #0]
 8005366:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005368:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800536c:	2b00      	cmp	r3, #0
 800536e:	db0a      	blt.n	8005386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	b2da      	uxtb	r2, r3
 8005374:	490c      	ldr	r1, [pc, #48]	; (80053a8 <__NVIC_SetPriority+0x4c>)
 8005376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800537a:	0112      	lsls	r2, r2, #4
 800537c:	b2d2      	uxtb	r2, r2
 800537e:	440b      	add	r3, r1
 8005380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005384:	e00a      	b.n	800539c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	b2da      	uxtb	r2, r3
 800538a:	4908      	ldr	r1, [pc, #32]	; (80053ac <__NVIC_SetPriority+0x50>)
 800538c:	88fb      	ldrh	r3, [r7, #6]
 800538e:	f003 030f 	and.w	r3, r3, #15
 8005392:	3b04      	subs	r3, #4
 8005394:	0112      	lsls	r2, r2, #4
 8005396:	b2d2      	uxtb	r2, r2
 8005398:	440b      	add	r3, r1
 800539a:	761a      	strb	r2, [r3, #24]
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	e000e100 	.word	0xe000e100
 80053ac:	e000ed00 	.word	0xe000ed00

080053b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b089      	sub	sp, #36	; 0x24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f003 0307 	and.w	r3, r3, #7
 80053c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	f1c3 0307 	rsb	r3, r3, #7
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	bf28      	it	cs
 80053ce:	2304      	movcs	r3, #4
 80053d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	3304      	adds	r3, #4
 80053d6:	2b06      	cmp	r3, #6
 80053d8:	d902      	bls.n	80053e0 <NVIC_EncodePriority+0x30>
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	3b03      	subs	r3, #3
 80053de:	e000      	b.n	80053e2 <NVIC_EncodePriority+0x32>
 80053e0:	2300      	movs	r3, #0
 80053e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053e4:	f04f 32ff 	mov.w	r2, #4294967295
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	fa02 f303 	lsl.w	r3, r2, r3
 80053ee:	43da      	mvns	r2, r3
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	401a      	ands	r2, r3
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053f8:	f04f 31ff 	mov.w	r1, #4294967295
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005402:	43d9      	mvns	r1, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005408:	4313      	orrs	r3, r2
         );
}
 800540a:	4618      	mov	r0, r3
 800540c:	3724      	adds	r7, #36	; 0x24
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
	...

08005418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3b01      	subs	r3, #1
 8005424:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005428:	d301      	bcc.n	800542e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800542a:	2301      	movs	r3, #1
 800542c:	e00f      	b.n	800544e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800542e:	4a0a      	ldr	r2, [pc, #40]	; (8005458 <SysTick_Config+0x40>)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	3b01      	subs	r3, #1
 8005434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005436:	210f      	movs	r1, #15
 8005438:	f04f 30ff 	mov.w	r0, #4294967295
 800543c:	f7ff ff8e 	bl	800535c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005440:	4b05      	ldr	r3, [pc, #20]	; (8005458 <SysTick_Config+0x40>)
 8005442:	2200      	movs	r2, #0
 8005444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005446:	4b04      	ldr	r3, [pc, #16]	; (8005458 <SysTick_Config+0x40>)
 8005448:	2207      	movs	r2, #7
 800544a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	e000e010 	.word	0xe000e010

0800545c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f7ff ff29 	bl	80052bc <__NVIC_SetPriorityGrouping>
}
 800546a:	bf00      	nop
 800546c:	3708      	adds	r7, #8
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b086      	sub	sp, #24
 8005476:	af00      	add	r7, sp, #0
 8005478:	4603      	mov	r3, r0
 800547a:	60b9      	str	r1, [r7, #8]
 800547c:	607a      	str	r2, [r7, #4]
 800547e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005480:	f7ff ff40 	bl	8005304 <__NVIC_GetPriorityGrouping>
 8005484:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	68b9      	ldr	r1, [r7, #8]
 800548a:	6978      	ldr	r0, [r7, #20]
 800548c:	f7ff ff90 	bl	80053b0 <NVIC_EncodePriority>
 8005490:	4602      	mov	r2, r0
 8005492:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005496:	4611      	mov	r1, r2
 8005498:	4618      	mov	r0, r3
 800549a:	f7ff ff5f 	bl	800535c <__NVIC_SetPriority>
}
 800549e:	bf00      	nop
 80054a0:	3718      	adds	r7, #24
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b082      	sub	sp, #8
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	4603      	mov	r3, r0
 80054ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7ff ff33 	bl	8005320 <__NVIC_EnableIRQ>
}
 80054ba:	bf00      	nop
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b082      	sub	sp, #8
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7ff ffa4 	bl	8005418 <SysTick_Config>
 80054d0:	4603      	mov	r3, r0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b082      	sub	sp, #8
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e014      	b.n	8005516 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	791b      	ldrb	r3, [r3, #4]
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d105      	bne.n	8005502 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7fd f82d 	bl	800255c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2202      	movs	r2, #2
 8005506:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
	...

08005520 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b088      	sub	sp, #32
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	795b      	ldrb	r3, [r3, #5]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d101      	bne.n	8005538 <HAL_DAC_ConfigChannel+0x18>
 8005534:	2302      	movs	r3, #2
 8005536:	e12a      	b.n	800578e <HAL_DAC_ConfigChannel+0x26e>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2201      	movs	r2, #1
 800553c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2202      	movs	r2, #2
 8005542:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b04      	cmp	r3, #4
 800554a:	f040 8081 	bne.w	8005650 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800554e:	f7fd fe23 	bl	8003198 <HAL_GetTick>
 8005552:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d140      	bne.n	80055dc <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800555a:	e018      	b.n	800558e <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800555c:	f7fd fe1c 	bl	8003198 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b01      	cmp	r3, #1
 8005568:	d911      	bls.n	800558e <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005570:	4b89      	ldr	r3, [pc, #548]	; (8005798 <HAL_DAC_ConfigChannel+0x278>)
 8005572:	4013      	ands	r3, r2
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00a      	beq.n	800558e <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	f043 0208 	orr.w	r2, r3, #8
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2203      	movs	r2, #3
 8005588:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e0ff      	b.n	800578e <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005594:	4b80      	ldr	r3, [pc, #512]	; (8005798 <HAL_DAC_ConfigChannel+0x278>)
 8005596:	4013      	ands	r3, r2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1df      	bne.n	800555c <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 800559c:	2001      	movs	r0, #1
 800559e:	f7fd fe07 	bl	80031b0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	6992      	ldr	r2, [r2, #24]
 80055aa:	641a      	str	r2, [r3, #64]	; 0x40
 80055ac:	e023      	b.n	80055f6 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80055ae:	f7fd fdf3 	bl	8003198 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d90f      	bls.n	80055dc <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	da0a      	bge.n	80055dc <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	f043 0208 	orr.w	r2, r3, #8
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2203      	movs	r2, #3
 80055d6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e0d8      	b.n	800578e <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	dbe3      	blt.n	80055ae <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 80055e6:	2001      	movs	r0, #1
 80055e8:	f7fd fde2 	bl	80031b0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	6992      	ldr	r2, [r2, #24]
 80055f4:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f003 0310 	and.w	r3, r3, #16
 8005602:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005606:	fa01 f303 	lsl.w	r3, r1, r3
 800560a:	43db      	mvns	r3, r3
 800560c:	ea02 0103 	and.w	r1, r2, r3
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	69da      	ldr	r2, [r3, #28]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f003 0310 	and.w	r3, r3, #16
 800561a:	409a      	lsls	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f003 0310 	and.w	r3, r3, #16
 8005630:	21ff      	movs	r1, #255	; 0xff
 8005632:	fa01 f303 	lsl.w	r3, r1, r3
 8005636:	43db      	mvns	r3, r3
 8005638:	ea02 0103 	and.w	r1, r2, r3
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	6a1a      	ldr	r2, [r3, #32]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f003 0310 	and.w	r3, r3, #16
 8005646:	409a      	lsls	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	430a      	orrs	r2, r1
 800564e:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d11d      	bne.n	8005694 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565e:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f003 0310 	and.w	r3, r3, #16
 8005666:	221f      	movs	r2, #31
 8005668:	fa02 f303 	lsl.w	r3, r2, r3
 800566c:	43db      	mvns	r3, r3
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	4013      	ands	r3, r2
 8005672:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f003 0310 	and.w	r3, r3, #16
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	fa02 f303 	lsl.w	r3, r2, r3
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	4313      	orrs	r3, r2
 800568a:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f003 0310 	and.w	r3, r3, #16
 80056a2:	2207      	movs	r2, #7
 80056a4:	fa02 f303 	lsl.w	r3, r2, r3
 80056a8:	43db      	mvns	r3, r3
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	4013      	ands	r3, r2
 80056ae:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d102      	bne.n	80056be <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 80056b8:	2300      	movs	r3, #0
 80056ba:	61fb      	str	r3, [r7, #28]
 80056bc:	e00f      	b.n	80056de <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d102      	bne.n	80056cc <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80056c6:	2301      	movs	r3, #1
 80056c8:	61fb      	str	r3, [r7, #28]
 80056ca:	e008      	b.n	80056de <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d102      	bne.n	80056da <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80056d4:	2301      	movs	r3, #1
 80056d6:	61fb      	str	r3, [r7, #28]
 80056d8:	e001      	b.n	80056de <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80056da:	2300      	movs	r3, #0
 80056dc:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	69fa      	ldr	r2, [r7, #28]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f003 0310 	and.w	r3, r3, #16
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	fa02 f303 	lsl.w	r3, r2, r3
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6819      	ldr	r1, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f003 0310 	and.w	r3, r3, #16
 8005714:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005718:	fa02 f303 	lsl.w	r3, r2, r3
 800571c:	43da      	mvns	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	400a      	ands	r2, r1
 8005724:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f003 0310 	and.w	r3, r3, #16
 8005734:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005738:	fa02 f303 	lsl.w	r3, r2, r3
 800573c:	43db      	mvns	r3, r3
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	4013      	ands	r3, r2
 8005742:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f003 0310 	and.w	r3, r3, #16
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	fa02 f303 	lsl.w	r3, r2, r3
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	4313      	orrs	r3, r2
 800575a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6819      	ldr	r1, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f003 0310 	and.w	r3, r3, #16
 8005770:	22c0      	movs	r2, #192	; 0xc0
 8005772:	fa02 f303 	lsl.w	r3, r2, r3
 8005776:	43da      	mvns	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	400a      	ands	r2, r1
 800577e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2201      	movs	r2, #1
 8005784:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3720      	adds	r7, #32
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	20008000 	.word	0x20008000

0800579c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80057a4:	f7fd fcf8 	bl	8003198 <HAL_GetTick>
 80057a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d101      	bne.n	80057b4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e312      	b.n	8005dda <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a66      	ldr	r2, [pc, #408]	; (8005954 <HAL_DMA_Init+0x1b8>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d04a      	beq.n	8005854 <HAL_DMA_Init+0xb8>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a65      	ldr	r2, [pc, #404]	; (8005958 <HAL_DMA_Init+0x1bc>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d045      	beq.n	8005854 <HAL_DMA_Init+0xb8>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a63      	ldr	r2, [pc, #396]	; (800595c <HAL_DMA_Init+0x1c0>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d040      	beq.n	8005854 <HAL_DMA_Init+0xb8>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a62      	ldr	r2, [pc, #392]	; (8005960 <HAL_DMA_Init+0x1c4>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d03b      	beq.n	8005854 <HAL_DMA_Init+0xb8>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a60      	ldr	r2, [pc, #384]	; (8005964 <HAL_DMA_Init+0x1c8>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d036      	beq.n	8005854 <HAL_DMA_Init+0xb8>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a5f      	ldr	r2, [pc, #380]	; (8005968 <HAL_DMA_Init+0x1cc>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d031      	beq.n	8005854 <HAL_DMA_Init+0xb8>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a5d      	ldr	r2, [pc, #372]	; (800596c <HAL_DMA_Init+0x1d0>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d02c      	beq.n	8005854 <HAL_DMA_Init+0xb8>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a5c      	ldr	r2, [pc, #368]	; (8005970 <HAL_DMA_Init+0x1d4>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d027      	beq.n	8005854 <HAL_DMA_Init+0xb8>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a5a      	ldr	r2, [pc, #360]	; (8005974 <HAL_DMA_Init+0x1d8>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d022      	beq.n	8005854 <HAL_DMA_Init+0xb8>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a59      	ldr	r2, [pc, #356]	; (8005978 <HAL_DMA_Init+0x1dc>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d01d      	beq.n	8005854 <HAL_DMA_Init+0xb8>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a57      	ldr	r2, [pc, #348]	; (800597c <HAL_DMA_Init+0x1e0>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d018      	beq.n	8005854 <HAL_DMA_Init+0xb8>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a56      	ldr	r2, [pc, #344]	; (8005980 <HAL_DMA_Init+0x1e4>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d013      	beq.n	8005854 <HAL_DMA_Init+0xb8>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a54      	ldr	r2, [pc, #336]	; (8005984 <HAL_DMA_Init+0x1e8>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d00e      	beq.n	8005854 <HAL_DMA_Init+0xb8>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a53      	ldr	r2, [pc, #332]	; (8005988 <HAL_DMA_Init+0x1ec>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d009      	beq.n	8005854 <HAL_DMA_Init+0xb8>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a51      	ldr	r2, [pc, #324]	; (800598c <HAL_DMA_Init+0x1f0>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d004      	beq.n	8005854 <HAL_DMA_Init+0xb8>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a50      	ldr	r2, [pc, #320]	; (8005990 <HAL_DMA_Init+0x1f4>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d101      	bne.n	8005858 <HAL_DMA_Init+0xbc>
 8005854:	2301      	movs	r3, #1
 8005856:	e000      	b.n	800585a <HAL_DMA_Init+0xbe>
 8005858:	2300      	movs	r3, #0
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 813c 	beq.w	8005ad8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2202      	movs	r2, #2
 8005864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a37      	ldr	r2, [pc, #220]	; (8005954 <HAL_DMA_Init+0x1b8>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d04a      	beq.n	8005910 <HAL_DMA_Init+0x174>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a36      	ldr	r2, [pc, #216]	; (8005958 <HAL_DMA_Init+0x1bc>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d045      	beq.n	8005910 <HAL_DMA_Init+0x174>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a34      	ldr	r2, [pc, #208]	; (800595c <HAL_DMA_Init+0x1c0>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d040      	beq.n	8005910 <HAL_DMA_Init+0x174>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a33      	ldr	r2, [pc, #204]	; (8005960 <HAL_DMA_Init+0x1c4>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d03b      	beq.n	8005910 <HAL_DMA_Init+0x174>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a31      	ldr	r2, [pc, #196]	; (8005964 <HAL_DMA_Init+0x1c8>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d036      	beq.n	8005910 <HAL_DMA_Init+0x174>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a30      	ldr	r2, [pc, #192]	; (8005968 <HAL_DMA_Init+0x1cc>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d031      	beq.n	8005910 <HAL_DMA_Init+0x174>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a2e      	ldr	r2, [pc, #184]	; (800596c <HAL_DMA_Init+0x1d0>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d02c      	beq.n	8005910 <HAL_DMA_Init+0x174>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a2d      	ldr	r2, [pc, #180]	; (8005970 <HAL_DMA_Init+0x1d4>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d027      	beq.n	8005910 <HAL_DMA_Init+0x174>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a2b      	ldr	r2, [pc, #172]	; (8005974 <HAL_DMA_Init+0x1d8>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d022      	beq.n	8005910 <HAL_DMA_Init+0x174>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a2a      	ldr	r2, [pc, #168]	; (8005978 <HAL_DMA_Init+0x1dc>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d01d      	beq.n	8005910 <HAL_DMA_Init+0x174>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a28      	ldr	r2, [pc, #160]	; (800597c <HAL_DMA_Init+0x1e0>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d018      	beq.n	8005910 <HAL_DMA_Init+0x174>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a27      	ldr	r2, [pc, #156]	; (8005980 <HAL_DMA_Init+0x1e4>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d013      	beq.n	8005910 <HAL_DMA_Init+0x174>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a25      	ldr	r2, [pc, #148]	; (8005984 <HAL_DMA_Init+0x1e8>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d00e      	beq.n	8005910 <HAL_DMA_Init+0x174>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a24      	ldr	r2, [pc, #144]	; (8005988 <HAL_DMA_Init+0x1ec>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d009      	beq.n	8005910 <HAL_DMA_Init+0x174>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a22      	ldr	r2, [pc, #136]	; (800598c <HAL_DMA_Init+0x1f0>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d004      	beq.n	8005910 <HAL_DMA_Init+0x174>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a21      	ldr	r2, [pc, #132]	; (8005990 <HAL_DMA_Init+0x1f4>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d108      	bne.n	8005922 <HAL_DMA_Init+0x186>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 0201 	bic.w	r2, r2, #1
 800591e:	601a      	str	r2, [r3, #0]
 8005920:	e007      	b.n	8005932 <HAL_DMA_Init+0x196>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0201 	bic.w	r2, r2, #1
 8005930:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005932:	e02f      	b.n	8005994 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005934:	f7fd fc30 	bl	8003198 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b05      	cmp	r3, #5
 8005940:	d928      	bls.n	8005994 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2220      	movs	r2, #32
 8005946:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2203      	movs	r2, #3
 800594c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e242      	b.n	8005dda <HAL_DMA_Init+0x63e>
 8005954:	40020010 	.word	0x40020010
 8005958:	40020028 	.word	0x40020028
 800595c:	40020040 	.word	0x40020040
 8005960:	40020058 	.word	0x40020058
 8005964:	40020070 	.word	0x40020070
 8005968:	40020088 	.word	0x40020088
 800596c:	400200a0 	.word	0x400200a0
 8005970:	400200b8 	.word	0x400200b8
 8005974:	40020410 	.word	0x40020410
 8005978:	40020428 	.word	0x40020428
 800597c:	40020440 	.word	0x40020440
 8005980:	40020458 	.word	0x40020458
 8005984:	40020470 	.word	0x40020470
 8005988:	40020488 	.word	0x40020488
 800598c:	400204a0 	.word	0x400204a0
 8005990:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1c8      	bne.n	8005934 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	4b83      	ldr	r3, [pc, #524]	; (8005bbc <HAL_DMA_Init+0x420>)
 80059ae:	4013      	ands	r3, r2
 80059b0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80059ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059d2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a1b      	ldr	r3, [r3, #32]
 80059d8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	4313      	orrs	r3, r2
 80059de:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	2b04      	cmp	r3, #4
 80059e6:	d107      	bne.n	80059f8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f0:	4313      	orrs	r3, r2
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	2b28      	cmp	r3, #40	; 0x28
 80059fe:	d903      	bls.n	8005a08 <HAL_DMA_Init+0x26c>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	2b2e      	cmp	r3, #46	; 0x2e
 8005a06:	d91f      	bls.n	8005a48 <HAL_DMA_Init+0x2ac>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	2b3e      	cmp	r3, #62	; 0x3e
 8005a0e:	d903      	bls.n	8005a18 <HAL_DMA_Init+0x27c>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	2b42      	cmp	r3, #66	; 0x42
 8005a16:	d917      	bls.n	8005a48 <HAL_DMA_Init+0x2ac>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	2b46      	cmp	r3, #70	; 0x46
 8005a1e:	d903      	bls.n	8005a28 <HAL_DMA_Init+0x28c>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	2b48      	cmp	r3, #72	; 0x48
 8005a26:	d90f      	bls.n	8005a48 <HAL_DMA_Init+0x2ac>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	2b4e      	cmp	r3, #78	; 0x4e
 8005a2e:	d903      	bls.n	8005a38 <HAL_DMA_Init+0x29c>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	2b52      	cmp	r3, #82	; 0x52
 8005a36:	d907      	bls.n	8005a48 <HAL_DMA_Init+0x2ac>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	2b73      	cmp	r3, #115	; 0x73
 8005a3e:	d905      	bls.n	8005a4c <HAL_DMA_Init+0x2b0>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	2b77      	cmp	r3, #119	; 0x77
 8005a46:	d801      	bhi.n	8005a4c <HAL_DMA_Init+0x2b0>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e000      	b.n	8005a4e <HAL_DMA_Init+0x2b2>
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a58:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f023 0307 	bic.w	r3, r3, #7
 8005a70:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a80:	2b04      	cmp	r3, #4
 8005a82:	d117      	bne.n	8005ab4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00e      	beq.n	8005ab4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f002 f810 	bl	8007abc <DMA_CheckFifoParam>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d008      	beq.n	8005ab4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2240      	movs	r2, #64	; 0x40
 8005aa6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e192      	b.n	8005dda <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f001 ff4b 	bl	8007958 <DMA_CalcBaseAndBitshift>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aca:	f003 031f 	and.w	r3, r3, #31
 8005ace:	223f      	movs	r2, #63	; 0x3f
 8005ad0:	409a      	lsls	r2, r3
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	609a      	str	r2, [r3, #8]
 8005ad6:	e0c8      	b.n	8005c6a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a38      	ldr	r2, [pc, #224]	; (8005bc0 <HAL_DMA_Init+0x424>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d022      	beq.n	8005b28 <HAL_DMA_Init+0x38c>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a37      	ldr	r2, [pc, #220]	; (8005bc4 <HAL_DMA_Init+0x428>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d01d      	beq.n	8005b28 <HAL_DMA_Init+0x38c>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a35      	ldr	r2, [pc, #212]	; (8005bc8 <HAL_DMA_Init+0x42c>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d018      	beq.n	8005b28 <HAL_DMA_Init+0x38c>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a34      	ldr	r2, [pc, #208]	; (8005bcc <HAL_DMA_Init+0x430>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d013      	beq.n	8005b28 <HAL_DMA_Init+0x38c>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a32      	ldr	r2, [pc, #200]	; (8005bd0 <HAL_DMA_Init+0x434>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d00e      	beq.n	8005b28 <HAL_DMA_Init+0x38c>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a31      	ldr	r2, [pc, #196]	; (8005bd4 <HAL_DMA_Init+0x438>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d009      	beq.n	8005b28 <HAL_DMA_Init+0x38c>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a2f      	ldr	r2, [pc, #188]	; (8005bd8 <HAL_DMA_Init+0x43c>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d004      	beq.n	8005b28 <HAL_DMA_Init+0x38c>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a2e      	ldr	r2, [pc, #184]	; (8005bdc <HAL_DMA_Init+0x440>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d101      	bne.n	8005b2c <HAL_DMA_Init+0x390>
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e000      	b.n	8005b2e <HAL_DMA_Init+0x392>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f000 8092 	beq.w	8005c58 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a21      	ldr	r2, [pc, #132]	; (8005bc0 <HAL_DMA_Init+0x424>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d021      	beq.n	8005b82 <HAL_DMA_Init+0x3e6>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a20      	ldr	r2, [pc, #128]	; (8005bc4 <HAL_DMA_Init+0x428>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d01c      	beq.n	8005b82 <HAL_DMA_Init+0x3e6>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a1e      	ldr	r2, [pc, #120]	; (8005bc8 <HAL_DMA_Init+0x42c>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d017      	beq.n	8005b82 <HAL_DMA_Init+0x3e6>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a1d      	ldr	r2, [pc, #116]	; (8005bcc <HAL_DMA_Init+0x430>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d012      	beq.n	8005b82 <HAL_DMA_Init+0x3e6>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a1b      	ldr	r2, [pc, #108]	; (8005bd0 <HAL_DMA_Init+0x434>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d00d      	beq.n	8005b82 <HAL_DMA_Init+0x3e6>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a1a      	ldr	r2, [pc, #104]	; (8005bd4 <HAL_DMA_Init+0x438>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d008      	beq.n	8005b82 <HAL_DMA_Init+0x3e6>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a18      	ldr	r2, [pc, #96]	; (8005bd8 <HAL_DMA_Init+0x43c>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d003      	beq.n	8005b82 <HAL_DMA_Init+0x3e6>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a17      	ldr	r2, [pc, #92]	; (8005bdc <HAL_DMA_Init+0x440>)
 8005b80:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2202      	movs	r2, #2
 8005b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	4b10      	ldr	r3, [pc, #64]	; (8005be0 <HAL_DMA_Init+0x444>)
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	2b40      	cmp	r3, #64	; 0x40
 8005ba8:	d01c      	beq.n	8005be4 <HAL_DMA_Init+0x448>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	2b80      	cmp	r3, #128	; 0x80
 8005bb0:	d102      	bne.n	8005bb8 <HAL_DMA_Init+0x41c>
 8005bb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005bb6:	e016      	b.n	8005be6 <HAL_DMA_Init+0x44a>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	e014      	b.n	8005be6 <HAL_DMA_Init+0x44a>
 8005bbc:	fe10803f 	.word	0xfe10803f
 8005bc0:	58025408 	.word	0x58025408
 8005bc4:	5802541c 	.word	0x5802541c
 8005bc8:	58025430 	.word	0x58025430
 8005bcc:	58025444 	.word	0x58025444
 8005bd0:	58025458 	.word	0x58025458
 8005bd4:	5802546c 	.word	0x5802546c
 8005bd8:	58025480 	.word	0x58025480
 8005bdc:	58025494 	.word	0x58025494
 8005be0:	fffe000f 	.word	0xfffe000f
 8005be4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	68d2      	ldr	r2, [r2, #12]
 8005bea:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005bec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005bf4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005bfc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005c04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005c0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005c14:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	461a      	mov	r2, r3
 8005c2a:	4b6e      	ldr	r3, [pc, #440]	; (8005de4 <HAL_DMA_Init+0x648>)
 8005c2c:	4413      	add	r3, r2
 8005c2e:	4a6e      	ldr	r2, [pc, #440]	; (8005de8 <HAL_DMA_Init+0x64c>)
 8005c30:	fba2 2303 	umull	r2, r3, r2, r3
 8005c34:	091b      	lsrs	r3, r3, #4
 8005c36:	009a      	lsls	r2, r3, #2
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f001 fe8b 	bl	8007958 <DMA_CalcBaseAndBitshift>
 8005c42:	4603      	mov	r3, r0
 8005c44:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c4a:	f003 031f 	and.w	r3, r3, #31
 8005c4e:	2201      	movs	r2, #1
 8005c50:	409a      	lsls	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	605a      	str	r2, [r3, #4]
 8005c56:	e008      	b.n	8005c6a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2240      	movs	r2, #64	; 0x40
 8005c5c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2203      	movs	r2, #3
 8005c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e0b7      	b.n	8005dda <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a5f      	ldr	r2, [pc, #380]	; (8005dec <HAL_DMA_Init+0x650>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d072      	beq.n	8005d5a <HAL_DMA_Init+0x5be>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a5d      	ldr	r2, [pc, #372]	; (8005df0 <HAL_DMA_Init+0x654>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d06d      	beq.n	8005d5a <HAL_DMA_Init+0x5be>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a5c      	ldr	r2, [pc, #368]	; (8005df4 <HAL_DMA_Init+0x658>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d068      	beq.n	8005d5a <HAL_DMA_Init+0x5be>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a5a      	ldr	r2, [pc, #360]	; (8005df8 <HAL_DMA_Init+0x65c>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d063      	beq.n	8005d5a <HAL_DMA_Init+0x5be>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a59      	ldr	r2, [pc, #356]	; (8005dfc <HAL_DMA_Init+0x660>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d05e      	beq.n	8005d5a <HAL_DMA_Init+0x5be>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a57      	ldr	r2, [pc, #348]	; (8005e00 <HAL_DMA_Init+0x664>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d059      	beq.n	8005d5a <HAL_DMA_Init+0x5be>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a56      	ldr	r2, [pc, #344]	; (8005e04 <HAL_DMA_Init+0x668>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d054      	beq.n	8005d5a <HAL_DMA_Init+0x5be>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a54      	ldr	r2, [pc, #336]	; (8005e08 <HAL_DMA_Init+0x66c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d04f      	beq.n	8005d5a <HAL_DMA_Init+0x5be>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a53      	ldr	r2, [pc, #332]	; (8005e0c <HAL_DMA_Init+0x670>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d04a      	beq.n	8005d5a <HAL_DMA_Init+0x5be>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a51      	ldr	r2, [pc, #324]	; (8005e10 <HAL_DMA_Init+0x674>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d045      	beq.n	8005d5a <HAL_DMA_Init+0x5be>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a50      	ldr	r2, [pc, #320]	; (8005e14 <HAL_DMA_Init+0x678>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d040      	beq.n	8005d5a <HAL_DMA_Init+0x5be>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a4e      	ldr	r2, [pc, #312]	; (8005e18 <HAL_DMA_Init+0x67c>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d03b      	beq.n	8005d5a <HAL_DMA_Init+0x5be>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a4d      	ldr	r2, [pc, #308]	; (8005e1c <HAL_DMA_Init+0x680>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d036      	beq.n	8005d5a <HAL_DMA_Init+0x5be>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a4b      	ldr	r2, [pc, #300]	; (8005e20 <HAL_DMA_Init+0x684>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d031      	beq.n	8005d5a <HAL_DMA_Init+0x5be>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a4a      	ldr	r2, [pc, #296]	; (8005e24 <HAL_DMA_Init+0x688>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d02c      	beq.n	8005d5a <HAL_DMA_Init+0x5be>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a48      	ldr	r2, [pc, #288]	; (8005e28 <HAL_DMA_Init+0x68c>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d027      	beq.n	8005d5a <HAL_DMA_Init+0x5be>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a47      	ldr	r2, [pc, #284]	; (8005e2c <HAL_DMA_Init+0x690>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d022      	beq.n	8005d5a <HAL_DMA_Init+0x5be>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a45      	ldr	r2, [pc, #276]	; (8005e30 <HAL_DMA_Init+0x694>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d01d      	beq.n	8005d5a <HAL_DMA_Init+0x5be>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a44      	ldr	r2, [pc, #272]	; (8005e34 <HAL_DMA_Init+0x698>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d018      	beq.n	8005d5a <HAL_DMA_Init+0x5be>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a42      	ldr	r2, [pc, #264]	; (8005e38 <HAL_DMA_Init+0x69c>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d013      	beq.n	8005d5a <HAL_DMA_Init+0x5be>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a41      	ldr	r2, [pc, #260]	; (8005e3c <HAL_DMA_Init+0x6a0>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d00e      	beq.n	8005d5a <HAL_DMA_Init+0x5be>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a3f      	ldr	r2, [pc, #252]	; (8005e40 <HAL_DMA_Init+0x6a4>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d009      	beq.n	8005d5a <HAL_DMA_Init+0x5be>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a3e      	ldr	r2, [pc, #248]	; (8005e44 <HAL_DMA_Init+0x6a8>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d004      	beq.n	8005d5a <HAL_DMA_Init+0x5be>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a3c      	ldr	r2, [pc, #240]	; (8005e48 <HAL_DMA_Init+0x6ac>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d101      	bne.n	8005d5e <HAL_DMA_Init+0x5c2>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e000      	b.n	8005d60 <HAL_DMA_Init+0x5c4>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d032      	beq.n	8005dca <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f001 ff25 	bl	8007bb4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	2b80      	cmp	r3, #128	; 0x80
 8005d70:	d102      	bne.n	8005d78 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d80:	b2d2      	uxtb	r2, r2
 8005d82:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005d8c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d010      	beq.n	8005db8 <HAL_DMA_Init+0x61c>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	2b08      	cmp	r3, #8
 8005d9c:	d80c      	bhi.n	8005db8 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f001 ffa2 	bl	8007ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005da8:	2200      	movs	r2, #0
 8005daa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005db4:	605a      	str	r2, [r3, #4]
 8005db6:	e008      	b.n	8005dca <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3718      	adds	r7, #24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	a7fdabf8 	.word	0xa7fdabf8
 8005de8:	cccccccd 	.word	0xcccccccd
 8005dec:	40020010 	.word	0x40020010
 8005df0:	40020028 	.word	0x40020028
 8005df4:	40020040 	.word	0x40020040
 8005df8:	40020058 	.word	0x40020058
 8005dfc:	40020070 	.word	0x40020070
 8005e00:	40020088 	.word	0x40020088
 8005e04:	400200a0 	.word	0x400200a0
 8005e08:	400200b8 	.word	0x400200b8
 8005e0c:	40020410 	.word	0x40020410
 8005e10:	40020428 	.word	0x40020428
 8005e14:	40020440 	.word	0x40020440
 8005e18:	40020458 	.word	0x40020458
 8005e1c:	40020470 	.word	0x40020470
 8005e20:	40020488 	.word	0x40020488
 8005e24:	400204a0 	.word	0x400204a0
 8005e28:	400204b8 	.word	0x400204b8
 8005e2c:	58025408 	.word	0x58025408
 8005e30:	5802541c 	.word	0x5802541c
 8005e34:	58025430 	.word	0x58025430
 8005e38:	58025444 	.word	0x58025444
 8005e3c:	58025458 	.word	0x58025458
 8005e40:	5802546c 	.word	0x5802546c
 8005e44:	58025480 	.word	0x58025480
 8005e48:	58025494 	.word	0x58025494

08005e4c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
 8005e58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d101      	bne.n	8005e68 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e226      	b.n	80062b6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d101      	bne.n	8005e76 <HAL_DMA_Start_IT+0x2a>
 8005e72:	2302      	movs	r3, #2
 8005e74:	e21f      	b.n	80062b6 <HAL_DMA_Start_IT+0x46a>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	f040 820a 	bne.w	80062a0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a68      	ldr	r2, [pc, #416]	; (8006040 <HAL_DMA_Start_IT+0x1f4>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d04a      	beq.n	8005f3a <HAL_DMA_Start_IT+0xee>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a66      	ldr	r2, [pc, #408]	; (8006044 <HAL_DMA_Start_IT+0x1f8>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d045      	beq.n	8005f3a <HAL_DMA_Start_IT+0xee>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a65      	ldr	r2, [pc, #404]	; (8006048 <HAL_DMA_Start_IT+0x1fc>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d040      	beq.n	8005f3a <HAL_DMA_Start_IT+0xee>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a63      	ldr	r2, [pc, #396]	; (800604c <HAL_DMA_Start_IT+0x200>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d03b      	beq.n	8005f3a <HAL_DMA_Start_IT+0xee>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a62      	ldr	r2, [pc, #392]	; (8006050 <HAL_DMA_Start_IT+0x204>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d036      	beq.n	8005f3a <HAL_DMA_Start_IT+0xee>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a60      	ldr	r2, [pc, #384]	; (8006054 <HAL_DMA_Start_IT+0x208>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d031      	beq.n	8005f3a <HAL_DMA_Start_IT+0xee>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a5f      	ldr	r2, [pc, #380]	; (8006058 <HAL_DMA_Start_IT+0x20c>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d02c      	beq.n	8005f3a <HAL_DMA_Start_IT+0xee>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a5d      	ldr	r2, [pc, #372]	; (800605c <HAL_DMA_Start_IT+0x210>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d027      	beq.n	8005f3a <HAL_DMA_Start_IT+0xee>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a5c      	ldr	r2, [pc, #368]	; (8006060 <HAL_DMA_Start_IT+0x214>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d022      	beq.n	8005f3a <HAL_DMA_Start_IT+0xee>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a5a      	ldr	r2, [pc, #360]	; (8006064 <HAL_DMA_Start_IT+0x218>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d01d      	beq.n	8005f3a <HAL_DMA_Start_IT+0xee>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a59      	ldr	r2, [pc, #356]	; (8006068 <HAL_DMA_Start_IT+0x21c>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d018      	beq.n	8005f3a <HAL_DMA_Start_IT+0xee>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a57      	ldr	r2, [pc, #348]	; (800606c <HAL_DMA_Start_IT+0x220>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d013      	beq.n	8005f3a <HAL_DMA_Start_IT+0xee>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a56      	ldr	r2, [pc, #344]	; (8006070 <HAL_DMA_Start_IT+0x224>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d00e      	beq.n	8005f3a <HAL_DMA_Start_IT+0xee>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a54      	ldr	r2, [pc, #336]	; (8006074 <HAL_DMA_Start_IT+0x228>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d009      	beq.n	8005f3a <HAL_DMA_Start_IT+0xee>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a53      	ldr	r2, [pc, #332]	; (8006078 <HAL_DMA_Start_IT+0x22c>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d004      	beq.n	8005f3a <HAL_DMA_Start_IT+0xee>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a51      	ldr	r2, [pc, #324]	; (800607c <HAL_DMA_Start_IT+0x230>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d108      	bne.n	8005f4c <HAL_DMA_Start_IT+0x100>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f022 0201 	bic.w	r2, r2, #1
 8005f48:	601a      	str	r2, [r3, #0]
 8005f4a:	e007      	b.n	8005f5c <HAL_DMA_Start_IT+0x110>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f022 0201 	bic.w	r2, r2, #1
 8005f5a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	68b9      	ldr	r1, [r7, #8]
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f001 fb4c 	bl	8007600 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a34      	ldr	r2, [pc, #208]	; (8006040 <HAL_DMA_Start_IT+0x1f4>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d04a      	beq.n	8006008 <HAL_DMA_Start_IT+0x1bc>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a33      	ldr	r2, [pc, #204]	; (8006044 <HAL_DMA_Start_IT+0x1f8>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d045      	beq.n	8006008 <HAL_DMA_Start_IT+0x1bc>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a31      	ldr	r2, [pc, #196]	; (8006048 <HAL_DMA_Start_IT+0x1fc>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d040      	beq.n	8006008 <HAL_DMA_Start_IT+0x1bc>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a30      	ldr	r2, [pc, #192]	; (800604c <HAL_DMA_Start_IT+0x200>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d03b      	beq.n	8006008 <HAL_DMA_Start_IT+0x1bc>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a2e      	ldr	r2, [pc, #184]	; (8006050 <HAL_DMA_Start_IT+0x204>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d036      	beq.n	8006008 <HAL_DMA_Start_IT+0x1bc>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a2d      	ldr	r2, [pc, #180]	; (8006054 <HAL_DMA_Start_IT+0x208>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d031      	beq.n	8006008 <HAL_DMA_Start_IT+0x1bc>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a2b      	ldr	r2, [pc, #172]	; (8006058 <HAL_DMA_Start_IT+0x20c>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d02c      	beq.n	8006008 <HAL_DMA_Start_IT+0x1bc>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a2a      	ldr	r2, [pc, #168]	; (800605c <HAL_DMA_Start_IT+0x210>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d027      	beq.n	8006008 <HAL_DMA_Start_IT+0x1bc>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a28      	ldr	r2, [pc, #160]	; (8006060 <HAL_DMA_Start_IT+0x214>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d022      	beq.n	8006008 <HAL_DMA_Start_IT+0x1bc>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a27      	ldr	r2, [pc, #156]	; (8006064 <HAL_DMA_Start_IT+0x218>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d01d      	beq.n	8006008 <HAL_DMA_Start_IT+0x1bc>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a25      	ldr	r2, [pc, #148]	; (8006068 <HAL_DMA_Start_IT+0x21c>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d018      	beq.n	8006008 <HAL_DMA_Start_IT+0x1bc>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a24      	ldr	r2, [pc, #144]	; (800606c <HAL_DMA_Start_IT+0x220>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d013      	beq.n	8006008 <HAL_DMA_Start_IT+0x1bc>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a22      	ldr	r2, [pc, #136]	; (8006070 <HAL_DMA_Start_IT+0x224>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d00e      	beq.n	8006008 <HAL_DMA_Start_IT+0x1bc>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a21      	ldr	r2, [pc, #132]	; (8006074 <HAL_DMA_Start_IT+0x228>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d009      	beq.n	8006008 <HAL_DMA_Start_IT+0x1bc>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a1f      	ldr	r2, [pc, #124]	; (8006078 <HAL_DMA_Start_IT+0x22c>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d004      	beq.n	8006008 <HAL_DMA_Start_IT+0x1bc>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a1e      	ldr	r2, [pc, #120]	; (800607c <HAL_DMA_Start_IT+0x230>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d101      	bne.n	800600c <HAL_DMA_Start_IT+0x1c0>
 8006008:	2301      	movs	r3, #1
 800600a:	e000      	b.n	800600e <HAL_DMA_Start_IT+0x1c2>
 800600c:	2300      	movs	r3, #0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d036      	beq.n	8006080 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f023 021e 	bic.w	r2, r3, #30
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f042 0216 	orr.w	r2, r2, #22
 8006024:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602a:	2b00      	cmp	r3, #0
 800602c:	d03e      	beq.n	80060ac <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f042 0208 	orr.w	r2, r2, #8
 800603c:	601a      	str	r2, [r3, #0]
 800603e:	e035      	b.n	80060ac <HAL_DMA_Start_IT+0x260>
 8006040:	40020010 	.word	0x40020010
 8006044:	40020028 	.word	0x40020028
 8006048:	40020040 	.word	0x40020040
 800604c:	40020058 	.word	0x40020058
 8006050:	40020070 	.word	0x40020070
 8006054:	40020088 	.word	0x40020088
 8006058:	400200a0 	.word	0x400200a0
 800605c:	400200b8 	.word	0x400200b8
 8006060:	40020410 	.word	0x40020410
 8006064:	40020428 	.word	0x40020428
 8006068:	40020440 	.word	0x40020440
 800606c:	40020458 	.word	0x40020458
 8006070:	40020470 	.word	0x40020470
 8006074:	40020488 	.word	0x40020488
 8006078:	400204a0 	.word	0x400204a0
 800607c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f023 020e 	bic.w	r2, r3, #14
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f042 020a 	orr.w	r2, r2, #10
 8006092:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006098:	2b00      	cmp	r3, #0
 800609a:	d007      	beq.n	80060ac <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f042 0204 	orr.w	r2, r2, #4
 80060aa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a83      	ldr	r2, [pc, #524]	; (80062c0 <HAL_DMA_Start_IT+0x474>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d072      	beq.n	800619c <HAL_DMA_Start_IT+0x350>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a82      	ldr	r2, [pc, #520]	; (80062c4 <HAL_DMA_Start_IT+0x478>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d06d      	beq.n	800619c <HAL_DMA_Start_IT+0x350>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a80      	ldr	r2, [pc, #512]	; (80062c8 <HAL_DMA_Start_IT+0x47c>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d068      	beq.n	800619c <HAL_DMA_Start_IT+0x350>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a7f      	ldr	r2, [pc, #508]	; (80062cc <HAL_DMA_Start_IT+0x480>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d063      	beq.n	800619c <HAL_DMA_Start_IT+0x350>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a7d      	ldr	r2, [pc, #500]	; (80062d0 <HAL_DMA_Start_IT+0x484>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d05e      	beq.n	800619c <HAL_DMA_Start_IT+0x350>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a7c      	ldr	r2, [pc, #496]	; (80062d4 <HAL_DMA_Start_IT+0x488>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d059      	beq.n	800619c <HAL_DMA_Start_IT+0x350>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a7a      	ldr	r2, [pc, #488]	; (80062d8 <HAL_DMA_Start_IT+0x48c>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d054      	beq.n	800619c <HAL_DMA_Start_IT+0x350>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a79      	ldr	r2, [pc, #484]	; (80062dc <HAL_DMA_Start_IT+0x490>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d04f      	beq.n	800619c <HAL_DMA_Start_IT+0x350>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a77      	ldr	r2, [pc, #476]	; (80062e0 <HAL_DMA_Start_IT+0x494>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d04a      	beq.n	800619c <HAL_DMA_Start_IT+0x350>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a76      	ldr	r2, [pc, #472]	; (80062e4 <HAL_DMA_Start_IT+0x498>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d045      	beq.n	800619c <HAL_DMA_Start_IT+0x350>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a74      	ldr	r2, [pc, #464]	; (80062e8 <HAL_DMA_Start_IT+0x49c>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d040      	beq.n	800619c <HAL_DMA_Start_IT+0x350>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a73      	ldr	r2, [pc, #460]	; (80062ec <HAL_DMA_Start_IT+0x4a0>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d03b      	beq.n	800619c <HAL_DMA_Start_IT+0x350>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a71      	ldr	r2, [pc, #452]	; (80062f0 <HAL_DMA_Start_IT+0x4a4>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d036      	beq.n	800619c <HAL_DMA_Start_IT+0x350>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a70      	ldr	r2, [pc, #448]	; (80062f4 <HAL_DMA_Start_IT+0x4a8>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d031      	beq.n	800619c <HAL_DMA_Start_IT+0x350>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a6e      	ldr	r2, [pc, #440]	; (80062f8 <HAL_DMA_Start_IT+0x4ac>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d02c      	beq.n	800619c <HAL_DMA_Start_IT+0x350>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a6d      	ldr	r2, [pc, #436]	; (80062fc <HAL_DMA_Start_IT+0x4b0>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d027      	beq.n	800619c <HAL_DMA_Start_IT+0x350>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a6b      	ldr	r2, [pc, #428]	; (8006300 <HAL_DMA_Start_IT+0x4b4>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d022      	beq.n	800619c <HAL_DMA_Start_IT+0x350>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a6a      	ldr	r2, [pc, #424]	; (8006304 <HAL_DMA_Start_IT+0x4b8>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d01d      	beq.n	800619c <HAL_DMA_Start_IT+0x350>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a68      	ldr	r2, [pc, #416]	; (8006308 <HAL_DMA_Start_IT+0x4bc>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d018      	beq.n	800619c <HAL_DMA_Start_IT+0x350>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a67      	ldr	r2, [pc, #412]	; (800630c <HAL_DMA_Start_IT+0x4c0>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d013      	beq.n	800619c <HAL_DMA_Start_IT+0x350>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a65      	ldr	r2, [pc, #404]	; (8006310 <HAL_DMA_Start_IT+0x4c4>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d00e      	beq.n	800619c <HAL_DMA_Start_IT+0x350>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a64      	ldr	r2, [pc, #400]	; (8006314 <HAL_DMA_Start_IT+0x4c8>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d009      	beq.n	800619c <HAL_DMA_Start_IT+0x350>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a62      	ldr	r2, [pc, #392]	; (8006318 <HAL_DMA_Start_IT+0x4cc>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d004      	beq.n	800619c <HAL_DMA_Start_IT+0x350>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a61      	ldr	r2, [pc, #388]	; (800631c <HAL_DMA_Start_IT+0x4d0>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d101      	bne.n	80061a0 <HAL_DMA_Start_IT+0x354>
 800619c:	2301      	movs	r3, #1
 800619e:	e000      	b.n	80061a2 <HAL_DMA_Start_IT+0x356>
 80061a0:	2300      	movs	r3, #0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d01a      	beq.n	80061dc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d007      	beq.n	80061c4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061c2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d007      	beq.n	80061dc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061da:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a37      	ldr	r2, [pc, #220]	; (80062c0 <HAL_DMA_Start_IT+0x474>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d04a      	beq.n	800627c <HAL_DMA_Start_IT+0x430>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a36      	ldr	r2, [pc, #216]	; (80062c4 <HAL_DMA_Start_IT+0x478>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d045      	beq.n	800627c <HAL_DMA_Start_IT+0x430>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a34      	ldr	r2, [pc, #208]	; (80062c8 <HAL_DMA_Start_IT+0x47c>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d040      	beq.n	800627c <HAL_DMA_Start_IT+0x430>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a33      	ldr	r2, [pc, #204]	; (80062cc <HAL_DMA_Start_IT+0x480>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d03b      	beq.n	800627c <HAL_DMA_Start_IT+0x430>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a31      	ldr	r2, [pc, #196]	; (80062d0 <HAL_DMA_Start_IT+0x484>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d036      	beq.n	800627c <HAL_DMA_Start_IT+0x430>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a30      	ldr	r2, [pc, #192]	; (80062d4 <HAL_DMA_Start_IT+0x488>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d031      	beq.n	800627c <HAL_DMA_Start_IT+0x430>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a2e      	ldr	r2, [pc, #184]	; (80062d8 <HAL_DMA_Start_IT+0x48c>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d02c      	beq.n	800627c <HAL_DMA_Start_IT+0x430>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a2d      	ldr	r2, [pc, #180]	; (80062dc <HAL_DMA_Start_IT+0x490>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d027      	beq.n	800627c <HAL_DMA_Start_IT+0x430>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a2b      	ldr	r2, [pc, #172]	; (80062e0 <HAL_DMA_Start_IT+0x494>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d022      	beq.n	800627c <HAL_DMA_Start_IT+0x430>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a2a      	ldr	r2, [pc, #168]	; (80062e4 <HAL_DMA_Start_IT+0x498>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d01d      	beq.n	800627c <HAL_DMA_Start_IT+0x430>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a28      	ldr	r2, [pc, #160]	; (80062e8 <HAL_DMA_Start_IT+0x49c>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d018      	beq.n	800627c <HAL_DMA_Start_IT+0x430>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a27      	ldr	r2, [pc, #156]	; (80062ec <HAL_DMA_Start_IT+0x4a0>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d013      	beq.n	800627c <HAL_DMA_Start_IT+0x430>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a25      	ldr	r2, [pc, #148]	; (80062f0 <HAL_DMA_Start_IT+0x4a4>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d00e      	beq.n	800627c <HAL_DMA_Start_IT+0x430>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a24      	ldr	r2, [pc, #144]	; (80062f4 <HAL_DMA_Start_IT+0x4a8>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d009      	beq.n	800627c <HAL_DMA_Start_IT+0x430>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a22      	ldr	r2, [pc, #136]	; (80062f8 <HAL_DMA_Start_IT+0x4ac>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d004      	beq.n	800627c <HAL_DMA_Start_IT+0x430>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a21      	ldr	r2, [pc, #132]	; (80062fc <HAL_DMA_Start_IT+0x4b0>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d108      	bne.n	800628e <HAL_DMA_Start_IT+0x442>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f042 0201 	orr.w	r2, r2, #1
 800628a:	601a      	str	r2, [r3, #0]
 800628c:	e012      	b.n	80062b4 <HAL_DMA_Start_IT+0x468>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f042 0201 	orr.w	r2, r2, #1
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	e009      	b.n	80062b4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80062b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3718      	adds	r7, #24
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	40020010 	.word	0x40020010
 80062c4:	40020028 	.word	0x40020028
 80062c8:	40020040 	.word	0x40020040
 80062cc:	40020058 	.word	0x40020058
 80062d0:	40020070 	.word	0x40020070
 80062d4:	40020088 	.word	0x40020088
 80062d8:	400200a0 	.word	0x400200a0
 80062dc:	400200b8 	.word	0x400200b8
 80062e0:	40020410 	.word	0x40020410
 80062e4:	40020428 	.word	0x40020428
 80062e8:	40020440 	.word	0x40020440
 80062ec:	40020458 	.word	0x40020458
 80062f0:	40020470 	.word	0x40020470
 80062f4:	40020488 	.word	0x40020488
 80062f8:	400204a0 	.word	0x400204a0
 80062fc:	400204b8 	.word	0x400204b8
 8006300:	58025408 	.word	0x58025408
 8006304:	5802541c 	.word	0x5802541c
 8006308:	58025430 	.word	0x58025430
 800630c:	58025444 	.word	0x58025444
 8006310:	58025458 	.word	0x58025458
 8006314:	5802546c 	.word	0x5802546c
 8006318:	58025480 	.word	0x58025480
 800631c:	58025494 	.word	0x58025494

08006320 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d101      	bne.n	8006332 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e237      	b.n	80067a2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b02      	cmp	r3, #2
 800633c:	d004      	beq.n	8006348 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2280      	movs	r2, #128	; 0x80
 8006342:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e22c      	b.n	80067a2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a5c      	ldr	r2, [pc, #368]	; (80064c0 <HAL_DMA_Abort_IT+0x1a0>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d04a      	beq.n	80063e8 <HAL_DMA_Abort_IT+0xc8>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a5b      	ldr	r2, [pc, #364]	; (80064c4 <HAL_DMA_Abort_IT+0x1a4>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d045      	beq.n	80063e8 <HAL_DMA_Abort_IT+0xc8>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a59      	ldr	r2, [pc, #356]	; (80064c8 <HAL_DMA_Abort_IT+0x1a8>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d040      	beq.n	80063e8 <HAL_DMA_Abort_IT+0xc8>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a58      	ldr	r2, [pc, #352]	; (80064cc <HAL_DMA_Abort_IT+0x1ac>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d03b      	beq.n	80063e8 <HAL_DMA_Abort_IT+0xc8>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a56      	ldr	r2, [pc, #344]	; (80064d0 <HAL_DMA_Abort_IT+0x1b0>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d036      	beq.n	80063e8 <HAL_DMA_Abort_IT+0xc8>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a55      	ldr	r2, [pc, #340]	; (80064d4 <HAL_DMA_Abort_IT+0x1b4>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d031      	beq.n	80063e8 <HAL_DMA_Abort_IT+0xc8>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a53      	ldr	r2, [pc, #332]	; (80064d8 <HAL_DMA_Abort_IT+0x1b8>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d02c      	beq.n	80063e8 <HAL_DMA_Abort_IT+0xc8>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a52      	ldr	r2, [pc, #328]	; (80064dc <HAL_DMA_Abort_IT+0x1bc>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d027      	beq.n	80063e8 <HAL_DMA_Abort_IT+0xc8>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a50      	ldr	r2, [pc, #320]	; (80064e0 <HAL_DMA_Abort_IT+0x1c0>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d022      	beq.n	80063e8 <HAL_DMA_Abort_IT+0xc8>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a4f      	ldr	r2, [pc, #316]	; (80064e4 <HAL_DMA_Abort_IT+0x1c4>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d01d      	beq.n	80063e8 <HAL_DMA_Abort_IT+0xc8>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a4d      	ldr	r2, [pc, #308]	; (80064e8 <HAL_DMA_Abort_IT+0x1c8>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d018      	beq.n	80063e8 <HAL_DMA_Abort_IT+0xc8>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a4c      	ldr	r2, [pc, #304]	; (80064ec <HAL_DMA_Abort_IT+0x1cc>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d013      	beq.n	80063e8 <HAL_DMA_Abort_IT+0xc8>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a4a      	ldr	r2, [pc, #296]	; (80064f0 <HAL_DMA_Abort_IT+0x1d0>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d00e      	beq.n	80063e8 <HAL_DMA_Abort_IT+0xc8>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a49      	ldr	r2, [pc, #292]	; (80064f4 <HAL_DMA_Abort_IT+0x1d4>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d009      	beq.n	80063e8 <HAL_DMA_Abort_IT+0xc8>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a47      	ldr	r2, [pc, #284]	; (80064f8 <HAL_DMA_Abort_IT+0x1d8>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d004      	beq.n	80063e8 <HAL_DMA_Abort_IT+0xc8>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a46      	ldr	r2, [pc, #280]	; (80064fc <HAL_DMA_Abort_IT+0x1dc>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d101      	bne.n	80063ec <HAL_DMA_Abort_IT+0xcc>
 80063e8:	2301      	movs	r3, #1
 80063ea:	e000      	b.n	80063ee <HAL_DMA_Abort_IT+0xce>
 80063ec:	2300      	movs	r3, #0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f000 8086 	beq.w	8006500 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2204      	movs	r2, #4
 80063f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a2f      	ldr	r2, [pc, #188]	; (80064c0 <HAL_DMA_Abort_IT+0x1a0>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d04a      	beq.n	800649c <HAL_DMA_Abort_IT+0x17c>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a2e      	ldr	r2, [pc, #184]	; (80064c4 <HAL_DMA_Abort_IT+0x1a4>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d045      	beq.n	800649c <HAL_DMA_Abort_IT+0x17c>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a2c      	ldr	r2, [pc, #176]	; (80064c8 <HAL_DMA_Abort_IT+0x1a8>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d040      	beq.n	800649c <HAL_DMA_Abort_IT+0x17c>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a2b      	ldr	r2, [pc, #172]	; (80064cc <HAL_DMA_Abort_IT+0x1ac>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d03b      	beq.n	800649c <HAL_DMA_Abort_IT+0x17c>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a29      	ldr	r2, [pc, #164]	; (80064d0 <HAL_DMA_Abort_IT+0x1b0>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d036      	beq.n	800649c <HAL_DMA_Abort_IT+0x17c>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a28      	ldr	r2, [pc, #160]	; (80064d4 <HAL_DMA_Abort_IT+0x1b4>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d031      	beq.n	800649c <HAL_DMA_Abort_IT+0x17c>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a26      	ldr	r2, [pc, #152]	; (80064d8 <HAL_DMA_Abort_IT+0x1b8>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d02c      	beq.n	800649c <HAL_DMA_Abort_IT+0x17c>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a25      	ldr	r2, [pc, #148]	; (80064dc <HAL_DMA_Abort_IT+0x1bc>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d027      	beq.n	800649c <HAL_DMA_Abort_IT+0x17c>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a23      	ldr	r2, [pc, #140]	; (80064e0 <HAL_DMA_Abort_IT+0x1c0>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d022      	beq.n	800649c <HAL_DMA_Abort_IT+0x17c>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a22      	ldr	r2, [pc, #136]	; (80064e4 <HAL_DMA_Abort_IT+0x1c4>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d01d      	beq.n	800649c <HAL_DMA_Abort_IT+0x17c>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a20      	ldr	r2, [pc, #128]	; (80064e8 <HAL_DMA_Abort_IT+0x1c8>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d018      	beq.n	800649c <HAL_DMA_Abort_IT+0x17c>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a1f      	ldr	r2, [pc, #124]	; (80064ec <HAL_DMA_Abort_IT+0x1cc>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d013      	beq.n	800649c <HAL_DMA_Abort_IT+0x17c>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a1d      	ldr	r2, [pc, #116]	; (80064f0 <HAL_DMA_Abort_IT+0x1d0>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d00e      	beq.n	800649c <HAL_DMA_Abort_IT+0x17c>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a1c      	ldr	r2, [pc, #112]	; (80064f4 <HAL_DMA_Abort_IT+0x1d4>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d009      	beq.n	800649c <HAL_DMA_Abort_IT+0x17c>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a1a      	ldr	r2, [pc, #104]	; (80064f8 <HAL_DMA_Abort_IT+0x1d8>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d004      	beq.n	800649c <HAL_DMA_Abort_IT+0x17c>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a19      	ldr	r2, [pc, #100]	; (80064fc <HAL_DMA_Abort_IT+0x1dc>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d108      	bne.n	80064ae <HAL_DMA_Abort_IT+0x18e>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 0201 	bic.w	r2, r2, #1
 80064aa:	601a      	str	r2, [r3, #0]
 80064ac:	e178      	b.n	80067a0 <HAL_DMA_Abort_IT+0x480>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f022 0201 	bic.w	r2, r2, #1
 80064bc:	601a      	str	r2, [r3, #0]
 80064be:	e16f      	b.n	80067a0 <HAL_DMA_Abort_IT+0x480>
 80064c0:	40020010 	.word	0x40020010
 80064c4:	40020028 	.word	0x40020028
 80064c8:	40020040 	.word	0x40020040
 80064cc:	40020058 	.word	0x40020058
 80064d0:	40020070 	.word	0x40020070
 80064d4:	40020088 	.word	0x40020088
 80064d8:	400200a0 	.word	0x400200a0
 80064dc:	400200b8 	.word	0x400200b8
 80064e0:	40020410 	.word	0x40020410
 80064e4:	40020428 	.word	0x40020428
 80064e8:	40020440 	.word	0x40020440
 80064ec:	40020458 	.word	0x40020458
 80064f0:	40020470 	.word	0x40020470
 80064f4:	40020488 	.word	0x40020488
 80064f8:	400204a0 	.word	0x400204a0
 80064fc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f022 020e 	bic.w	r2, r2, #14
 800650e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a6c      	ldr	r2, [pc, #432]	; (80066c8 <HAL_DMA_Abort_IT+0x3a8>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d04a      	beq.n	80065b0 <HAL_DMA_Abort_IT+0x290>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a6b      	ldr	r2, [pc, #428]	; (80066cc <HAL_DMA_Abort_IT+0x3ac>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d045      	beq.n	80065b0 <HAL_DMA_Abort_IT+0x290>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a69      	ldr	r2, [pc, #420]	; (80066d0 <HAL_DMA_Abort_IT+0x3b0>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d040      	beq.n	80065b0 <HAL_DMA_Abort_IT+0x290>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a68      	ldr	r2, [pc, #416]	; (80066d4 <HAL_DMA_Abort_IT+0x3b4>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d03b      	beq.n	80065b0 <HAL_DMA_Abort_IT+0x290>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a66      	ldr	r2, [pc, #408]	; (80066d8 <HAL_DMA_Abort_IT+0x3b8>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d036      	beq.n	80065b0 <HAL_DMA_Abort_IT+0x290>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a65      	ldr	r2, [pc, #404]	; (80066dc <HAL_DMA_Abort_IT+0x3bc>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d031      	beq.n	80065b0 <HAL_DMA_Abort_IT+0x290>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a63      	ldr	r2, [pc, #396]	; (80066e0 <HAL_DMA_Abort_IT+0x3c0>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d02c      	beq.n	80065b0 <HAL_DMA_Abort_IT+0x290>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a62      	ldr	r2, [pc, #392]	; (80066e4 <HAL_DMA_Abort_IT+0x3c4>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d027      	beq.n	80065b0 <HAL_DMA_Abort_IT+0x290>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a60      	ldr	r2, [pc, #384]	; (80066e8 <HAL_DMA_Abort_IT+0x3c8>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d022      	beq.n	80065b0 <HAL_DMA_Abort_IT+0x290>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a5f      	ldr	r2, [pc, #380]	; (80066ec <HAL_DMA_Abort_IT+0x3cc>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d01d      	beq.n	80065b0 <HAL_DMA_Abort_IT+0x290>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a5d      	ldr	r2, [pc, #372]	; (80066f0 <HAL_DMA_Abort_IT+0x3d0>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d018      	beq.n	80065b0 <HAL_DMA_Abort_IT+0x290>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a5c      	ldr	r2, [pc, #368]	; (80066f4 <HAL_DMA_Abort_IT+0x3d4>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d013      	beq.n	80065b0 <HAL_DMA_Abort_IT+0x290>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a5a      	ldr	r2, [pc, #360]	; (80066f8 <HAL_DMA_Abort_IT+0x3d8>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d00e      	beq.n	80065b0 <HAL_DMA_Abort_IT+0x290>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a59      	ldr	r2, [pc, #356]	; (80066fc <HAL_DMA_Abort_IT+0x3dc>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d009      	beq.n	80065b0 <HAL_DMA_Abort_IT+0x290>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a57      	ldr	r2, [pc, #348]	; (8006700 <HAL_DMA_Abort_IT+0x3e0>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d004      	beq.n	80065b0 <HAL_DMA_Abort_IT+0x290>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a56      	ldr	r2, [pc, #344]	; (8006704 <HAL_DMA_Abort_IT+0x3e4>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d108      	bne.n	80065c2 <HAL_DMA_Abort_IT+0x2a2>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f022 0201 	bic.w	r2, r2, #1
 80065be:	601a      	str	r2, [r3, #0]
 80065c0:	e007      	b.n	80065d2 <HAL_DMA_Abort_IT+0x2b2>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f022 0201 	bic.w	r2, r2, #1
 80065d0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a3c      	ldr	r2, [pc, #240]	; (80066c8 <HAL_DMA_Abort_IT+0x3a8>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d072      	beq.n	80066c2 <HAL_DMA_Abort_IT+0x3a2>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a3a      	ldr	r2, [pc, #232]	; (80066cc <HAL_DMA_Abort_IT+0x3ac>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d06d      	beq.n	80066c2 <HAL_DMA_Abort_IT+0x3a2>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a39      	ldr	r2, [pc, #228]	; (80066d0 <HAL_DMA_Abort_IT+0x3b0>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d068      	beq.n	80066c2 <HAL_DMA_Abort_IT+0x3a2>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a37      	ldr	r2, [pc, #220]	; (80066d4 <HAL_DMA_Abort_IT+0x3b4>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d063      	beq.n	80066c2 <HAL_DMA_Abort_IT+0x3a2>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a36      	ldr	r2, [pc, #216]	; (80066d8 <HAL_DMA_Abort_IT+0x3b8>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d05e      	beq.n	80066c2 <HAL_DMA_Abort_IT+0x3a2>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a34      	ldr	r2, [pc, #208]	; (80066dc <HAL_DMA_Abort_IT+0x3bc>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d059      	beq.n	80066c2 <HAL_DMA_Abort_IT+0x3a2>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a33      	ldr	r2, [pc, #204]	; (80066e0 <HAL_DMA_Abort_IT+0x3c0>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d054      	beq.n	80066c2 <HAL_DMA_Abort_IT+0x3a2>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a31      	ldr	r2, [pc, #196]	; (80066e4 <HAL_DMA_Abort_IT+0x3c4>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d04f      	beq.n	80066c2 <HAL_DMA_Abort_IT+0x3a2>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a30      	ldr	r2, [pc, #192]	; (80066e8 <HAL_DMA_Abort_IT+0x3c8>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d04a      	beq.n	80066c2 <HAL_DMA_Abort_IT+0x3a2>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a2e      	ldr	r2, [pc, #184]	; (80066ec <HAL_DMA_Abort_IT+0x3cc>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d045      	beq.n	80066c2 <HAL_DMA_Abort_IT+0x3a2>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a2d      	ldr	r2, [pc, #180]	; (80066f0 <HAL_DMA_Abort_IT+0x3d0>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d040      	beq.n	80066c2 <HAL_DMA_Abort_IT+0x3a2>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a2b      	ldr	r2, [pc, #172]	; (80066f4 <HAL_DMA_Abort_IT+0x3d4>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d03b      	beq.n	80066c2 <HAL_DMA_Abort_IT+0x3a2>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a2a      	ldr	r2, [pc, #168]	; (80066f8 <HAL_DMA_Abort_IT+0x3d8>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d036      	beq.n	80066c2 <HAL_DMA_Abort_IT+0x3a2>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a28      	ldr	r2, [pc, #160]	; (80066fc <HAL_DMA_Abort_IT+0x3dc>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d031      	beq.n	80066c2 <HAL_DMA_Abort_IT+0x3a2>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a27      	ldr	r2, [pc, #156]	; (8006700 <HAL_DMA_Abort_IT+0x3e0>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d02c      	beq.n	80066c2 <HAL_DMA_Abort_IT+0x3a2>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a25      	ldr	r2, [pc, #148]	; (8006704 <HAL_DMA_Abort_IT+0x3e4>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d027      	beq.n	80066c2 <HAL_DMA_Abort_IT+0x3a2>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a24      	ldr	r2, [pc, #144]	; (8006708 <HAL_DMA_Abort_IT+0x3e8>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d022      	beq.n	80066c2 <HAL_DMA_Abort_IT+0x3a2>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a22      	ldr	r2, [pc, #136]	; (800670c <HAL_DMA_Abort_IT+0x3ec>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d01d      	beq.n	80066c2 <HAL_DMA_Abort_IT+0x3a2>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a21      	ldr	r2, [pc, #132]	; (8006710 <HAL_DMA_Abort_IT+0x3f0>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d018      	beq.n	80066c2 <HAL_DMA_Abort_IT+0x3a2>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a1f      	ldr	r2, [pc, #124]	; (8006714 <HAL_DMA_Abort_IT+0x3f4>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d013      	beq.n	80066c2 <HAL_DMA_Abort_IT+0x3a2>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a1e      	ldr	r2, [pc, #120]	; (8006718 <HAL_DMA_Abort_IT+0x3f8>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d00e      	beq.n	80066c2 <HAL_DMA_Abort_IT+0x3a2>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a1c      	ldr	r2, [pc, #112]	; (800671c <HAL_DMA_Abort_IT+0x3fc>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d009      	beq.n	80066c2 <HAL_DMA_Abort_IT+0x3a2>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a1b      	ldr	r2, [pc, #108]	; (8006720 <HAL_DMA_Abort_IT+0x400>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d004      	beq.n	80066c2 <HAL_DMA_Abort_IT+0x3a2>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a19      	ldr	r2, [pc, #100]	; (8006724 <HAL_DMA_Abort_IT+0x404>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d132      	bne.n	8006728 <HAL_DMA_Abort_IT+0x408>
 80066c2:	2301      	movs	r3, #1
 80066c4:	e031      	b.n	800672a <HAL_DMA_Abort_IT+0x40a>
 80066c6:	bf00      	nop
 80066c8:	40020010 	.word	0x40020010
 80066cc:	40020028 	.word	0x40020028
 80066d0:	40020040 	.word	0x40020040
 80066d4:	40020058 	.word	0x40020058
 80066d8:	40020070 	.word	0x40020070
 80066dc:	40020088 	.word	0x40020088
 80066e0:	400200a0 	.word	0x400200a0
 80066e4:	400200b8 	.word	0x400200b8
 80066e8:	40020410 	.word	0x40020410
 80066ec:	40020428 	.word	0x40020428
 80066f0:	40020440 	.word	0x40020440
 80066f4:	40020458 	.word	0x40020458
 80066f8:	40020470 	.word	0x40020470
 80066fc:	40020488 	.word	0x40020488
 8006700:	400204a0 	.word	0x400204a0
 8006704:	400204b8 	.word	0x400204b8
 8006708:	58025408 	.word	0x58025408
 800670c:	5802541c 	.word	0x5802541c
 8006710:	58025430 	.word	0x58025430
 8006714:	58025444 	.word	0x58025444
 8006718:	58025458 	.word	0x58025458
 800671c:	5802546c 	.word	0x5802546c
 8006720:	58025480 	.word	0x58025480
 8006724:	58025494 	.word	0x58025494
 8006728:	2300      	movs	r3, #0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d028      	beq.n	8006780 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006738:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800673c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006742:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006748:	f003 031f 	and.w	r3, r3, #31
 800674c:	2201      	movs	r2, #1
 800674e:	409a      	lsls	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800675c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00c      	beq.n	8006780 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006770:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006774:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800677e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006794:	2b00      	cmp	r3, #0
 8006796:	d003      	beq.n	80067a0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop

080067ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b08a      	sub	sp, #40	; 0x28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80067b4:	2300      	movs	r3, #0
 80067b6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80067b8:	4b67      	ldr	r3, [pc, #412]	; (8006958 <HAL_DMA_IRQHandler+0x1ac>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a67      	ldr	r2, [pc, #412]	; (800695c <HAL_DMA_IRQHandler+0x1b0>)
 80067be:	fba2 2303 	umull	r2, r3, r2, r3
 80067c2:	0a9b      	lsrs	r3, r3, #10
 80067c4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ca:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067d0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80067d2:	6a3b      	ldr	r3, [r7, #32]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a5f      	ldr	r2, [pc, #380]	; (8006960 <HAL_DMA_IRQHandler+0x1b4>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d04a      	beq.n	800687e <HAL_DMA_IRQHandler+0xd2>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a5d      	ldr	r2, [pc, #372]	; (8006964 <HAL_DMA_IRQHandler+0x1b8>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d045      	beq.n	800687e <HAL_DMA_IRQHandler+0xd2>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a5c      	ldr	r2, [pc, #368]	; (8006968 <HAL_DMA_IRQHandler+0x1bc>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d040      	beq.n	800687e <HAL_DMA_IRQHandler+0xd2>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a5a      	ldr	r2, [pc, #360]	; (800696c <HAL_DMA_IRQHandler+0x1c0>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d03b      	beq.n	800687e <HAL_DMA_IRQHandler+0xd2>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a59      	ldr	r2, [pc, #356]	; (8006970 <HAL_DMA_IRQHandler+0x1c4>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d036      	beq.n	800687e <HAL_DMA_IRQHandler+0xd2>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a57      	ldr	r2, [pc, #348]	; (8006974 <HAL_DMA_IRQHandler+0x1c8>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d031      	beq.n	800687e <HAL_DMA_IRQHandler+0xd2>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a56      	ldr	r2, [pc, #344]	; (8006978 <HAL_DMA_IRQHandler+0x1cc>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d02c      	beq.n	800687e <HAL_DMA_IRQHandler+0xd2>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a54      	ldr	r2, [pc, #336]	; (800697c <HAL_DMA_IRQHandler+0x1d0>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d027      	beq.n	800687e <HAL_DMA_IRQHandler+0xd2>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a53      	ldr	r2, [pc, #332]	; (8006980 <HAL_DMA_IRQHandler+0x1d4>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d022      	beq.n	800687e <HAL_DMA_IRQHandler+0xd2>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a51      	ldr	r2, [pc, #324]	; (8006984 <HAL_DMA_IRQHandler+0x1d8>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d01d      	beq.n	800687e <HAL_DMA_IRQHandler+0xd2>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a50      	ldr	r2, [pc, #320]	; (8006988 <HAL_DMA_IRQHandler+0x1dc>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d018      	beq.n	800687e <HAL_DMA_IRQHandler+0xd2>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a4e      	ldr	r2, [pc, #312]	; (800698c <HAL_DMA_IRQHandler+0x1e0>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d013      	beq.n	800687e <HAL_DMA_IRQHandler+0xd2>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a4d      	ldr	r2, [pc, #308]	; (8006990 <HAL_DMA_IRQHandler+0x1e4>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d00e      	beq.n	800687e <HAL_DMA_IRQHandler+0xd2>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a4b      	ldr	r2, [pc, #300]	; (8006994 <HAL_DMA_IRQHandler+0x1e8>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d009      	beq.n	800687e <HAL_DMA_IRQHandler+0xd2>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a4a      	ldr	r2, [pc, #296]	; (8006998 <HAL_DMA_IRQHandler+0x1ec>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d004      	beq.n	800687e <HAL_DMA_IRQHandler+0xd2>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a48      	ldr	r2, [pc, #288]	; (800699c <HAL_DMA_IRQHandler+0x1f0>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d101      	bne.n	8006882 <HAL_DMA_IRQHandler+0xd6>
 800687e:	2301      	movs	r3, #1
 8006880:	e000      	b.n	8006884 <HAL_DMA_IRQHandler+0xd8>
 8006882:	2300      	movs	r3, #0
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 842b 	beq.w	80070e0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800688e:	f003 031f 	and.w	r3, r3, #31
 8006892:	2208      	movs	r2, #8
 8006894:	409a      	lsls	r2, r3
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	4013      	ands	r3, r2
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 80a2 	beq.w	80069e4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a2e      	ldr	r2, [pc, #184]	; (8006960 <HAL_DMA_IRQHandler+0x1b4>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d04a      	beq.n	8006940 <HAL_DMA_IRQHandler+0x194>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a2d      	ldr	r2, [pc, #180]	; (8006964 <HAL_DMA_IRQHandler+0x1b8>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d045      	beq.n	8006940 <HAL_DMA_IRQHandler+0x194>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a2b      	ldr	r2, [pc, #172]	; (8006968 <HAL_DMA_IRQHandler+0x1bc>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d040      	beq.n	8006940 <HAL_DMA_IRQHandler+0x194>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a2a      	ldr	r2, [pc, #168]	; (800696c <HAL_DMA_IRQHandler+0x1c0>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d03b      	beq.n	8006940 <HAL_DMA_IRQHandler+0x194>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a28      	ldr	r2, [pc, #160]	; (8006970 <HAL_DMA_IRQHandler+0x1c4>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d036      	beq.n	8006940 <HAL_DMA_IRQHandler+0x194>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a27      	ldr	r2, [pc, #156]	; (8006974 <HAL_DMA_IRQHandler+0x1c8>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d031      	beq.n	8006940 <HAL_DMA_IRQHandler+0x194>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a25      	ldr	r2, [pc, #148]	; (8006978 <HAL_DMA_IRQHandler+0x1cc>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d02c      	beq.n	8006940 <HAL_DMA_IRQHandler+0x194>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a24      	ldr	r2, [pc, #144]	; (800697c <HAL_DMA_IRQHandler+0x1d0>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d027      	beq.n	8006940 <HAL_DMA_IRQHandler+0x194>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a22      	ldr	r2, [pc, #136]	; (8006980 <HAL_DMA_IRQHandler+0x1d4>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d022      	beq.n	8006940 <HAL_DMA_IRQHandler+0x194>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a21      	ldr	r2, [pc, #132]	; (8006984 <HAL_DMA_IRQHandler+0x1d8>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d01d      	beq.n	8006940 <HAL_DMA_IRQHandler+0x194>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a1f      	ldr	r2, [pc, #124]	; (8006988 <HAL_DMA_IRQHandler+0x1dc>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d018      	beq.n	8006940 <HAL_DMA_IRQHandler+0x194>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a1e      	ldr	r2, [pc, #120]	; (800698c <HAL_DMA_IRQHandler+0x1e0>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d013      	beq.n	8006940 <HAL_DMA_IRQHandler+0x194>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a1c      	ldr	r2, [pc, #112]	; (8006990 <HAL_DMA_IRQHandler+0x1e4>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d00e      	beq.n	8006940 <HAL_DMA_IRQHandler+0x194>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a1b      	ldr	r2, [pc, #108]	; (8006994 <HAL_DMA_IRQHandler+0x1e8>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d009      	beq.n	8006940 <HAL_DMA_IRQHandler+0x194>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a19      	ldr	r2, [pc, #100]	; (8006998 <HAL_DMA_IRQHandler+0x1ec>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d004      	beq.n	8006940 <HAL_DMA_IRQHandler+0x194>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a18      	ldr	r2, [pc, #96]	; (800699c <HAL_DMA_IRQHandler+0x1f0>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d12f      	bne.n	80069a0 <HAL_DMA_IRQHandler+0x1f4>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0304 	and.w	r3, r3, #4
 800694a:	2b00      	cmp	r3, #0
 800694c:	bf14      	ite	ne
 800694e:	2301      	movne	r3, #1
 8006950:	2300      	moveq	r3, #0
 8006952:	b2db      	uxtb	r3, r3
 8006954:	e02e      	b.n	80069b4 <HAL_DMA_IRQHandler+0x208>
 8006956:	bf00      	nop
 8006958:	24000000 	.word	0x24000000
 800695c:	1b4e81b5 	.word	0x1b4e81b5
 8006960:	40020010 	.word	0x40020010
 8006964:	40020028 	.word	0x40020028
 8006968:	40020040 	.word	0x40020040
 800696c:	40020058 	.word	0x40020058
 8006970:	40020070 	.word	0x40020070
 8006974:	40020088 	.word	0x40020088
 8006978:	400200a0 	.word	0x400200a0
 800697c:	400200b8 	.word	0x400200b8
 8006980:	40020410 	.word	0x40020410
 8006984:	40020428 	.word	0x40020428
 8006988:	40020440 	.word	0x40020440
 800698c:	40020458 	.word	0x40020458
 8006990:	40020470 	.word	0x40020470
 8006994:	40020488 	.word	0x40020488
 8006998:	400204a0 	.word	0x400204a0
 800699c:	400204b8 	.word	0x400204b8
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 0308 	and.w	r3, r3, #8
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	bf14      	ite	ne
 80069ae:	2301      	movne	r3, #1
 80069b0:	2300      	moveq	r3, #0
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d015      	beq.n	80069e4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f022 0204 	bic.w	r2, r2, #4
 80069c6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069cc:	f003 031f 	and.w	r3, r3, #31
 80069d0:	2208      	movs	r2, #8
 80069d2:	409a      	lsls	r2, r3
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069dc:	f043 0201 	orr.w	r2, r3, #1
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069e8:	f003 031f 	and.w	r3, r3, #31
 80069ec:	69ba      	ldr	r2, [r7, #24]
 80069ee:	fa22 f303 	lsr.w	r3, r2, r3
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d06e      	beq.n	8006ad8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a69      	ldr	r2, [pc, #420]	; (8006ba4 <HAL_DMA_IRQHandler+0x3f8>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d04a      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x2ee>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a67      	ldr	r2, [pc, #412]	; (8006ba8 <HAL_DMA_IRQHandler+0x3fc>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d045      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x2ee>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a66      	ldr	r2, [pc, #408]	; (8006bac <HAL_DMA_IRQHandler+0x400>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d040      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x2ee>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a64      	ldr	r2, [pc, #400]	; (8006bb0 <HAL_DMA_IRQHandler+0x404>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d03b      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x2ee>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a63      	ldr	r2, [pc, #396]	; (8006bb4 <HAL_DMA_IRQHandler+0x408>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d036      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x2ee>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a61      	ldr	r2, [pc, #388]	; (8006bb8 <HAL_DMA_IRQHandler+0x40c>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d031      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x2ee>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a60      	ldr	r2, [pc, #384]	; (8006bbc <HAL_DMA_IRQHandler+0x410>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d02c      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x2ee>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a5e      	ldr	r2, [pc, #376]	; (8006bc0 <HAL_DMA_IRQHandler+0x414>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d027      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x2ee>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a5d      	ldr	r2, [pc, #372]	; (8006bc4 <HAL_DMA_IRQHandler+0x418>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d022      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x2ee>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a5b      	ldr	r2, [pc, #364]	; (8006bc8 <HAL_DMA_IRQHandler+0x41c>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d01d      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x2ee>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a5a      	ldr	r2, [pc, #360]	; (8006bcc <HAL_DMA_IRQHandler+0x420>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d018      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x2ee>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a58      	ldr	r2, [pc, #352]	; (8006bd0 <HAL_DMA_IRQHandler+0x424>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d013      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x2ee>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a57      	ldr	r2, [pc, #348]	; (8006bd4 <HAL_DMA_IRQHandler+0x428>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d00e      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x2ee>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a55      	ldr	r2, [pc, #340]	; (8006bd8 <HAL_DMA_IRQHandler+0x42c>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d009      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x2ee>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a54      	ldr	r2, [pc, #336]	; (8006bdc <HAL_DMA_IRQHandler+0x430>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d004      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x2ee>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a52      	ldr	r2, [pc, #328]	; (8006be0 <HAL_DMA_IRQHandler+0x434>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d10a      	bne.n	8006ab0 <HAL_DMA_IRQHandler+0x304>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	695b      	ldr	r3, [r3, #20]
 8006aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	bf14      	ite	ne
 8006aa8:	2301      	movne	r3, #1
 8006aaa:	2300      	moveq	r3, #0
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	e003      	b.n	8006ab8 <HAL_DMA_IRQHandler+0x30c>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00d      	beq.n	8006ad8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ac0:	f003 031f 	and.w	r3, r3, #31
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	409a      	lsls	r2, r3
 8006ac8:	6a3b      	ldr	r3, [r7, #32]
 8006aca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ad0:	f043 0202 	orr.w	r2, r3, #2
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006adc:	f003 031f 	and.w	r3, r3, #31
 8006ae0:	2204      	movs	r2, #4
 8006ae2:	409a      	lsls	r2, r3
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f000 808f 	beq.w	8006c0c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a2c      	ldr	r2, [pc, #176]	; (8006ba4 <HAL_DMA_IRQHandler+0x3f8>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d04a      	beq.n	8006b8e <HAL_DMA_IRQHandler+0x3e2>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a2a      	ldr	r2, [pc, #168]	; (8006ba8 <HAL_DMA_IRQHandler+0x3fc>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d045      	beq.n	8006b8e <HAL_DMA_IRQHandler+0x3e2>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a29      	ldr	r2, [pc, #164]	; (8006bac <HAL_DMA_IRQHandler+0x400>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d040      	beq.n	8006b8e <HAL_DMA_IRQHandler+0x3e2>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a27      	ldr	r2, [pc, #156]	; (8006bb0 <HAL_DMA_IRQHandler+0x404>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d03b      	beq.n	8006b8e <HAL_DMA_IRQHandler+0x3e2>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a26      	ldr	r2, [pc, #152]	; (8006bb4 <HAL_DMA_IRQHandler+0x408>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d036      	beq.n	8006b8e <HAL_DMA_IRQHandler+0x3e2>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a24      	ldr	r2, [pc, #144]	; (8006bb8 <HAL_DMA_IRQHandler+0x40c>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d031      	beq.n	8006b8e <HAL_DMA_IRQHandler+0x3e2>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a23      	ldr	r2, [pc, #140]	; (8006bbc <HAL_DMA_IRQHandler+0x410>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d02c      	beq.n	8006b8e <HAL_DMA_IRQHandler+0x3e2>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a21      	ldr	r2, [pc, #132]	; (8006bc0 <HAL_DMA_IRQHandler+0x414>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d027      	beq.n	8006b8e <HAL_DMA_IRQHandler+0x3e2>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a20      	ldr	r2, [pc, #128]	; (8006bc4 <HAL_DMA_IRQHandler+0x418>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d022      	beq.n	8006b8e <HAL_DMA_IRQHandler+0x3e2>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a1e      	ldr	r2, [pc, #120]	; (8006bc8 <HAL_DMA_IRQHandler+0x41c>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d01d      	beq.n	8006b8e <HAL_DMA_IRQHandler+0x3e2>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a1d      	ldr	r2, [pc, #116]	; (8006bcc <HAL_DMA_IRQHandler+0x420>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d018      	beq.n	8006b8e <HAL_DMA_IRQHandler+0x3e2>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a1b      	ldr	r2, [pc, #108]	; (8006bd0 <HAL_DMA_IRQHandler+0x424>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d013      	beq.n	8006b8e <HAL_DMA_IRQHandler+0x3e2>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a1a      	ldr	r2, [pc, #104]	; (8006bd4 <HAL_DMA_IRQHandler+0x428>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d00e      	beq.n	8006b8e <HAL_DMA_IRQHandler+0x3e2>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a18      	ldr	r2, [pc, #96]	; (8006bd8 <HAL_DMA_IRQHandler+0x42c>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d009      	beq.n	8006b8e <HAL_DMA_IRQHandler+0x3e2>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a17      	ldr	r2, [pc, #92]	; (8006bdc <HAL_DMA_IRQHandler+0x430>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d004      	beq.n	8006b8e <HAL_DMA_IRQHandler+0x3e2>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a15      	ldr	r2, [pc, #84]	; (8006be0 <HAL_DMA_IRQHandler+0x434>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d12a      	bne.n	8006be4 <HAL_DMA_IRQHandler+0x438>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0302 	and.w	r3, r3, #2
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	bf14      	ite	ne
 8006b9c:	2301      	movne	r3, #1
 8006b9e:	2300      	moveq	r3, #0
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	e023      	b.n	8006bec <HAL_DMA_IRQHandler+0x440>
 8006ba4:	40020010 	.word	0x40020010
 8006ba8:	40020028 	.word	0x40020028
 8006bac:	40020040 	.word	0x40020040
 8006bb0:	40020058 	.word	0x40020058
 8006bb4:	40020070 	.word	0x40020070
 8006bb8:	40020088 	.word	0x40020088
 8006bbc:	400200a0 	.word	0x400200a0
 8006bc0:	400200b8 	.word	0x400200b8
 8006bc4:	40020410 	.word	0x40020410
 8006bc8:	40020428 	.word	0x40020428
 8006bcc:	40020440 	.word	0x40020440
 8006bd0:	40020458 	.word	0x40020458
 8006bd4:	40020470 	.word	0x40020470
 8006bd8:	40020488 	.word	0x40020488
 8006bdc:	400204a0 	.word	0x400204a0
 8006be0:	400204b8 	.word	0x400204b8
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2300      	movs	r3, #0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00d      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bf4:	f003 031f 	and.w	r3, r3, #31
 8006bf8:	2204      	movs	r2, #4
 8006bfa:	409a      	lsls	r2, r3
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c04:	f043 0204 	orr.w	r2, r3, #4
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c10:	f003 031f 	and.w	r3, r3, #31
 8006c14:	2210      	movs	r2, #16
 8006c16:	409a      	lsls	r2, r3
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f000 80a6 	beq.w	8006d6e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a85      	ldr	r2, [pc, #532]	; (8006e3c <HAL_DMA_IRQHandler+0x690>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d04a      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0x516>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a83      	ldr	r2, [pc, #524]	; (8006e40 <HAL_DMA_IRQHandler+0x694>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d045      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0x516>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a82      	ldr	r2, [pc, #520]	; (8006e44 <HAL_DMA_IRQHandler+0x698>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d040      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0x516>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a80      	ldr	r2, [pc, #512]	; (8006e48 <HAL_DMA_IRQHandler+0x69c>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d03b      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0x516>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a7f      	ldr	r2, [pc, #508]	; (8006e4c <HAL_DMA_IRQHandler+0x6a0>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d036      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0x516>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a7d      	ldr	r2, [pc, #500]	; (8006e50 <HAL_DMA_IRQHandler+0x6a4>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d031      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0x516>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a7c      	ldr	r2, [pc, #496]	; (8006e54 <HAL_DMA_IRQHandler+0x6a8>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d02c      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0x516>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a7a      	ldr	r2, [pc, #488]	; (8006e58 <HAL_DMA_IRQHandler+0x6ac>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d027      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0x516>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a79      	ldr	r2, [pc, #484]	; (8006e5c <HAL_DMA_IRQHandler+0x6b0>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d022      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0x516>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a77      	ldr	r2, [pc, #476]	; (8006e60 <HAL_DMA_IRQHandler+0x6b4>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d01d      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0x516>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a76      	ldr	r2, [pc, #472]	; (8006e64 <HAL_DMA_IRQHandler+0x6b8>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d018      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0x516>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a74      	ldr	r2, [pc, #464]	; (8006e68 <HAL_DMA_IRQHandler+0x6bc>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d013      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0x516>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a73      	ldr	r2, [pc, #460]	; (8006e6c <HAL_DMA_IRQHandler+0x6c0>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d00e      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0x516>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a71      	ldr	r2, [pc, #452]	; (8006e70 <HAL_DMA_IRQHandler+0x6c4>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d009      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0x516>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a70      	ldr	r2, [pc, #448]	; (8006e74 <HAL_DMA_IRQHandler+0x6c8>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d004      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0x516>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a6e      	ldr	r2, [pc, #440]	; (8006e78 <HAL_DMA_IRQHandler+0x6cc>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d10a      	bne.n	8006cd8 <HAL_DMA_IRQHandler+0x52c>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0308 	and.w	r3, r3, #8
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	bf14      	ite	ne
 8006cd0:	2301      	movne	r3, #1
 8006cd2:	2300      	moveq	r3, #0
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	e009      	b.n	8006cec <HAL_DMA_IRQHandler+0x540>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0304 	and.w	r3, r3, #4
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	bf14      	ite	ne
 8006ce6:	2301      	movne	r3, #1
 8006ce8:	2300      	moveq	r3, #0
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d03e      	beq.n	8006d6e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cf4:	f003 031f 	and.w	r3, r3, #31
 8006cf8:	2210      	movs	r2, #16
 8006cfa:	409a      	lsls	r2, r3
 8006cfc:	6a3b      	ldr	r3, [r7, #32]
 8006cfe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d018      	beq.n	8006d40 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d108      	bne.n	8006d2e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d024      	beq.n	8006d6e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	4798      	blx	r3
 8006d2c:	e01f      	b.n	8006d6e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d01b      	beq.n	8006d6e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	4798      	blx	r3
 8006d3e:	e016      	b.n	8006d6e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d107      	bne.n	8006d5e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f022 0208 	bic.w	r2, r2, #8
 8006d5c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d003      	beq.n	8006d6e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d72:	f003 031f 	and.w	r3, r3, #31
 8006d76:	2220      	movs	r2, #32
 8006d78:	409a      	lsls	r2, r3
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f000 8110 	beq.w	8006fa4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a2c      	ldr	r2, [pc, #176]	; (8006e3c <HAL_DMA_IRQHandler+0x690>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d04a      	beq.n	8006e24 <HAL_DMA_IRQHandler+0x678>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a2b      	ldr	r2, [pc, #172]	; (8006e40 <HAL_DMA_IRQHandler+0x694>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d045      	beq.n	8006e24 <HAL_DMA_IRQHandler+0x678>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a29      	ldr	r2, [pc, #164]	; (8006e44 <HAL_DMA_IRQHandler+0x698>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d040      	beq.n	8006e24 <HAL_DMA_IRQHandler+0x678>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a28      	ldr	r2, [pc, #160]	; (8006e48 <HAL_DMA_IRQHandler+0x69c>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d03b      	beq.n	8006e24 <HAL_DMA_IRQHandler+0x678>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a26      	ldr	r2, [pc, #152]	; (8006e4c <HAL_DMA_IRQHandler+0x6a0>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d036      	beq.n	8006e24 <HAL_DMA_IRQHandler+0x678>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a25      	ldr	r2, [pc, #148]	; (8006e50 <HAL_DMA_IRQHandler+0x6a4>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d031      	beq.n	8006e24 <HAL_DMA_IRQHandler+0x678>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a23      	ldr	r2, [pc, #140]	; (8006e54 <HAL_DMA_IRQHandler+0x6a8>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d02c      	beq.n	8006e24 <HAL_DMA_IRQHandler+0x678>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a22      	ldr	r2, [pc, #136]	; (8006e58 <HAL_DMA_IRQHandler+0x6ac>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d027      	beq.n	8006e24 <HAL_DMA_IRQHandler+0x678>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a20      	ldr	r2, [pc, #128]	; (8006e5c <HAL_DMA_IRQHandler+0x6b0>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d022      	beq.n	8006e24 <HAL_DMA_IRQHandler+0x678>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a1f      	ldr	r2, [pc, #124]	; (8006e60 <HAL_DMA_IRQHandler+0x6b4>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d01d      	beq.n	8006e24 <HAL_DMA_IRQHandler+0x678>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a1d      	ldr	r2, [pc, #116]	; (8006e64 <HAL_DMA_IRQHandler+0x6b8>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d018      	beq.n	8006e24 <HAL_DMA_IRQHandler+0x678>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a1c      	ldr	r2, [pc, #112]	; (8006e68 <HAL_DMA_IRQHandler+0x6bc>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d013      	beq.n	8006e24 <HAL_DMA_IRQHandler+0x678>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a1a      	ldr	r2, [pc, #104]	; (8006e6c <HAL_DMA_IRQHandler+0x6c0>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d00e      	beq.n	8006e24 <HAL_DMA_IRQHandler+0x678>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a19      	ldr	r2, [pc, #100]	; (8006e70 <HAL_DMA_IRQHandler+0x6c4>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d009      	beq.n	8006e24 <HAL_DMA_IRQHandler+0x678>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a17      	ldr	r2, [pc, #92]	; (8006e74 <HAL_DMA_IRQHandler+0x6c8>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d004      	beq.n	8006e24 <HAL_DMA_IRQHandler+0x678>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a16      	ldr	r2, [pc, #88]	; (8006e78 <HAL_DMA_IRQHandler+0x6cc>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d12b      	bne.n	8006e7c <HAL_DMA_IRQHandler+0x6d0>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 0310 	and.w	r3, r3, #16
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	bf14      	ite	ne
 8006e32:	2301      	movne	r3, #1
 8006e34:	2300      	moveq	r3, #0
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	e02a      	b.n	8006e90 <HAL_DMA_IRQHandler+0x6e4>
 8006e3a:	bf00      	nop
 8006e3c:	40020010 	.word	0x40020010
 8006e40:	40020028 	.word	0x40020028
 8006e44:	40020040 	.word	0x40020040
 8006e48:	40020058 	.word	0x40020058
 8006e4c:	40020070 	.word	0x40020070
 8006e50:	40020088 	.word	0x40020088
 8006e54:	400200a0 	.word	0x400200a0
 8006e58:	400200b8 	.word	0x400200b8
 8006e5c:	40020410 	.word	0x40020410
 8006e60:	40020428 	.word	0x40020428
 8006e64:	40020440 	.word	0x40020440
 8006e68:	40020458 	.word	0x40020458
 8006e6c:	40020470 	.word	0x40020470
 8006e70:	40020488 	.word	0x40020488
 8006e74:	400204a0 	.word	0x400204a0
 8006e78:	400204b8 	.word	0x400204b8
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0302 	and.w	r3, r3, #2
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	bf14      	ite	ne
 8006e8a:	2301      	movne	r3, #1
 8006e8c:	2300      	moveq	r3, #0
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f000 8087 	beq.w	8006fa4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e9a:	f003 031f 	and.w	r3, r3, #31
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	409a      	lsls	r2, r3
 8006ea2:	6a3b      	ldr	r3, [r7, #32]
 8006ea4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b04      	cmp	r3, #4
 8006eb0:	d139      	bne.n	8006f26 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f022 0216 	bic.w	r2, r2, #22
 8006ec0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	695a      	ldr	r2, [r3, #20]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ed0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d103      	bne.n	8006ee2 <HAL_DMA_IRQHandler+0x736>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d007      	beq.n	8006ef2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f022 0208 	bic.w	r2, r2, #8
 8006ef0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ef6:	f003 031f 	and.w	r3, r3, #31
 8006efa:	223f      	movs	r2, #63	; 0x3f
 8006efc:	409a      	lsls	r2, r3
 8006efe:	6a3b      	ldr	r3, [r7, #32]
 8006f00:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f000 834a 	beq.w	80075b0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	4798      	blx	r3
          }
          return;
 8006f24:	e344      	b.n	80075b0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d018      	beq.n	8006f66 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d108      	bne.n	8006f54 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d02c      	beq.n	8006fa4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	4798      	blx	r3
 8006f52:	e027      	b.n	8006fa4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d023      	beq.n	8006fa4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	4798      	blx	r3
 8006f64:	e01e      	b.n	8006fa4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10f      	bne.n	8006f94 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f022 0210 	bic.w	r2, r2, #16
 8006f82:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d003      	beq.n	8006fa4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 8306 	beq.w	80075ba <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f000 8088 	beq.w	80070cc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2204      	movs	r2, #4
 8006fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a7a      	ldr	r2, [pc, #488]	; (80071b4 <HAL_DMA_IRQHandler+0xa08>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d04a      	beq.n	8007064 <HAL_DMA_IRQHandler+0x8b8>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a79      	ldr	r2, [pc, #484]	; (80071b8 <HAL_DMA_IRQHandler+0xa0c>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d045      	beq.n	8007064 <HAL_DMA_IRQHandler+0x8b8>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a77      	ldr	r2, [pc, #476]	; (80071bc <HAL_DMA_IRQHandler+0xa10>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d040      	beq.n	8007064 <HAL_DMA_IRQHandler+0x8b8>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a76      	ldr	r2, [pc, #472]	; (80071c0 <HAL_DMA_IRQHandler+0xa14>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d03b      	beq.n	8007064 <HAL_DMA_IRQHandler+0x8b8>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a74      	ldr	r2, [pc, #464]	; (80071c4 <HAL_DMA_IRQHandler+0xa18>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d036      	beq.n	8007064 <HAL_DMA_IRQHandler+0x8b8>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a73      	ldr	r2, [pc, #460]	; (80071c8 <HAL_DMA_IRQHandler+0xa1c>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d031      	beq.n	8007064 <HAL_DMA_IRQHandler+0x8b8>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a71      	ldr	r2, [pc, #452]	; (80071cc <HAL_DMA_IRQHandler+0xa20>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d02c      	beq.n	8007064 <HAL_DMA_IRQHandler+0x8b8>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a70      	ldr	r2, [pc, #448]	; (80071d0 <HAL_DMA_IRQHandler+0xa24>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d027      	beq.n	8007064 <HAL_DMA_IRQHandler+0x8b8>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a6e      	ldr	r2, [pc, #440]	; (80071d4 <HAL_DMA_IRQHandler+0xa28>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d022      	beq.n	8007064 <HAL_DMA_IRQHandler+0x8b8>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a6d      	ldr	r2, [pc, #436]	; (80071d8 <HAL_DMA_IRQHandler+0xa2c>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d01d      	beq.n	8007064 <HAL_DMA_IRQHandler+0x8b8>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a6b      	ldr	r2, [pc, #428]	; (80071dc <HAL_DMA_IRQHandler+0xa30>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d018      	beq.n	8007064 <HAL_DMA_IRQHandler+0x8b8>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a6a      	ldr	r2, [pc, #424]	; (80071e0 <HAL_DMA_IRQHandler+0xa34>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d013      	beq.n	8007064 <HAL_DMA_IRQHandler+0x8b8>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a68      	ldr	r2, [pc, #416]	; (80071e4 <HAL_DMA_IRQHandler+0xa38>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d00e      	beq.n	8007064 <HAL_DMA_IRQHandler+0x8b8>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a67      	ldr	r2, [pc, #412]	; (80071e8 <HAL_DMA_IRQHandler+0xa3c>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d009      	beq.n	8007064 <HAL_DMA_IRQHandler+0x8b8>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a65      	ldr	r2, [pc, #404]	; (80071ec <HAL_DMA_IRQHandler+0xa40>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d004      	beq.n	8007064 <HAL_DMA_IRQHandler+0x8b8>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a64      	ldr	r2, [pc, #400]	; (80071f0 <HAL_DMA_IRQHandler+0xa44>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d108      	bne.n	8007076 <HAL_DMA_IRQHandler+0x8ca>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f022 0201 	bic.w	r2, r2, #1
 8007072:	601a      	str	r2, [r3, #0]
 8007074:	e007      	b.n	8007086 <HAL_DMA_IRQHandler+0x8da>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f022 0201 	bic.w	r2, r2, #1
 8007084:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	3301      	adds	r3, #1
 800708a:	60fb      	str	r3, [r7, #12]
 800708c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800708e:	429a      	cmp	r2, r3
 8007090:	d307      	bcc.n	80070a2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0301 	and.w	r3, r3, #1
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1f2      	bne.n	8007086 <HAL_DMA_IRQHandler+0x8da>
 80070a0:	e000      	b.n	80070a4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80070a2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d004      	beq.n	80070bc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2203      	movs	r2, #3
 80070b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80070ba:	e003      	b.n	80070c4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 8272 	beq.w	80075ba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	4798      	blx	r3
 80070de:	e26c      	b.n	80075ba <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a43      	ldr	r2, [pc, #268]	; (80071f4 <HAL_DMA_IRQHandler+0xa48>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d022      	beq.n	8007130 <HAL_DMA_IRQHandler+0x984>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a42      	ldr	r2, [pc, #264]	; (80071f8 <HAL_DMA_IRQHandler+0xa4c>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d01d      	beq.n	8007130 <HAL_DMA_IRQHandler+0x984>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a40      	ldr	r2, [pc, #256]	; (80071fc <HAL_DMA_IRQHandler+0xa50>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d018      	beq.n	8007130 <HAL_DMA_IRQHandler+0x984>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a3f      	ldr	r2, [pc, #252]	; (8007200 <HAL_DMA_IRQHandler+0xa54>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d013      	beq.n	8007130 <HAL_DMA_IRQHandler+0x984>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a3d      	ldr	r2, [pc, #244]	; (8007204 <HAL_DMA_IRQHandler+0xa58>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d00e      	beq.n	8007130 <HAL_DMA_IRQHandler+0x984>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a3c      	ldr	r2, [pc, #240]	; (8007208 <HAL_DMA_IRQHandler+0xa5c>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d009      	beq.n	8007130 <HAL_DMA_IRQHandler+0x984>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a3a      	ldr	r2, [pc, #232]	; (800720c <HAL_DMA_IRQHandler+0xa60>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d004      	beq.n	8007130 <HAL_DMA_IRQHandler+0x984>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a39      	ldr	r2, [pc, #228]	; (8007210 <HAL_DMA_IRQHandler+0xa64>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d101      	bne.n	8007134 <HAL_DMA_IRQHandler+0x988>
 8007130:	2301      	movs	r3, #1
 8007132:	e000      	b.n	8007136 <HAL_DMA_IRQHandler+0x98a>
 8007134:	2300      	movs	r3, #0
 8007136:	2b00      	cmp	r3, #0
 8007138:	f000 823f 	beq.w	80075ba <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007148:	f003 031f 	and.w	r3, r3, #31
 800714c:	2204      	movs	r2, #4
 800714e:	409a      	lsls	r2, r3
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	4013      	ands	r3, r2
 8007154:	2b00      	cmp	r3, #0
 8007156:	f000 80cd 	beq.w	80072f4 <HAL_DMA_IRQHandler+0xb48>
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	f003 0304 	and.w	r3, r3, #4
 8007160:	2b00      	cmp	r3, #0
 8007162:	f000 80c7 	beq.w	80072f4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800716a:	f003 031f 	and.w	r3, r3, #31
 800716e:	2204      	movs	r2, #4
 8007170:	409a      	lsls	r2, r3
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d049      	beq.n	8007214 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d109      	bne.n	800719e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800718e:	2b00      	cmp	r3, #0
 8007190:	f000 8210 	beq.w	80075b4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800719c:	e20a      	b.n	80075b4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	f000 8206 	beq.w	80075b4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071b0:	e200      	b.n	80075b4 <HAL_DMA_IRQHandler+0xe08>
 80071b2:	bf00      	nop
 80071b4:	40020010 	.word	0x40020010
 80071b8:	40020028 	.word	0x40020028
 80071bc:	40020040 	.word	0x40020040
 80071c0:	40020058 	.word	0x40020058
 80071c4:	40020070 	.word	0x40020070
 80071c8:	40020088 	.word	0x40020088
 80071cc:	400200a0 	.word	0x400200a0
 80071d0:	400200b8 	.word	0x400200b8
 80071d4:	40020410 	.word	0x40020410
 80071d8:	40020428 	.word	0x40020428
 80071dc:	40020440 	.word	0x40020440
 80071e0:	40020458 	.word	0x40020458
 80071e4:	40020470 	.word	0x40020470
 80071e8:	40020488 	.word	0x40020488
 80071ec:	400204a0 	.word	0x400204a0
 80071f0:	400204b8 	.word	0x400204b8
 80071f4:	58025408 	.word	0x58025408
 80071f8:	5802541c 	.word	0x5802541c
 80071fc:	58025430 	.word	0x58025430
 8007200:	58025444 	.word	0x58025444
 8007204:	58025458 	.word	0x58025458
 8007208:	5802546c 	.word	0x5802546c
 800720c:	58025480 	.word	0x58025480
 8007210:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	f003 0320 	and.w	r3, r3, #32
 800721a:	2b00      	cmp	r3, #0
 800721c:	d160      	bne.n	80072e0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a7f      	ldr	r2, [pc, #508]	; (8007420 <HAL_DMA_IRQHandler+0xc74>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d04a      	beq.n	80072be <HAL_DMA_IRQHandler+0xb12>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a7d      	ldr	r2, [pc, #500]	; (8007424 <HAL_DMA_IRQHandler+0xc78>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d045      	beq.n	80072be <HAL_DMA_IRQHandler+0xb12>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a7c      	ldr	r2, [pc, #496]	; (8007428 <HAL_DMA_IRQHandler+0xc7c>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d040      	beq.n	80072be <HAL_DMA_IRQHandler+0xb12>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a7a      	ldr	r2, [pc, #488]	; (800742c <HAL_DMA_IRQHandler+0xc80>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d03b      	beq.n	80072be <HAL_DMA_IRQHandler+0xb12>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a79      	ldr	r2, [pc, #484]	; (8007430 <HAL_DMA_IRQHandler+0xc84>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d036      	beq.n	80072be <HAL_DMA_IRQHandler+0xb12>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a77      	ldr	r2, [pc, #476]	; (8007434 <HAL_DMA_IRQHandler+0xc88>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d031      	beq.n	80072be <HAL_DMA_IRQHandler+0xb12>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a76      	ldr	r2, [pc, #472]	; (8007438 <HAL_DMA_IRQHandler+0xc8c>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d02c      	beq.n	80072be <HAL_DMA_IRQHandler+0xb12>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a74      	ldr	r2, [pc, #464]	; (800743c <HAL_DMA_IRQHandler+0xc90>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d027      	beq.n	80072be <HAL_DMA_IRQHandler+0xb12>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a73      	ldr	r2, [pc, #460]	; (8007440 <HAL_DMA_IRQHandler+0xc94>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d022      	beq.n	80072be <HAL_DMA_IRQHandler+0xb12>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a71      	ldr	r2, [pc, #452]	; (8007444 <HAL_DMA_IRQHandler+0xc98>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d01d      	beq.n	80072be <HAL_DMA_IRQHandler+0xb12>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a70      	ldr	r2, [pc, #448]	; (8007448 <HAL_DMA_IRQHandler+0xc9c>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d018      	beq.n	80072be <HAL_DMA_IRQHandler+0xb12>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a6e      	ldr	r2, [pc, #440]	; (800744c <HAL_DMA_IRQHandler+0xca0>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d013      	beq.n	80072be <HAL_DMA_IRQHandler+0xb12>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a6d      	ldr	r2, [pc, #436]	; (8007450 <HAL_DMA_IRQHandler+0xca4>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d00e      	beq.n	80072be <HAL_DMA_IRQHandler+0xb12>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a6b      	ldr	r2, [pc, #428]	; (8007454 <HAL_DMA_IRQHandler+0xca8>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d009      	beq.n	80072be <HAL_DMA_IRQHandler+0xb12>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a6a      	ldr	r2, [pc, #424]	; (8007458 <HAL_DMA_IRQHandler+0xcac>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d004      	beq.n	80072be <HAL_DMA_IRQHandler+0xb12>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a68      	ldr	r2, [pc, #416]	; (800745c <HAL_DMA_IRQHandler+0xcb0>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d108      	bne.n	80072d0 <HAL_DMA_IRQHandler+0xb24>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f022 0208 	bic.w	r2, r2, #8
 80072cc:	601a      	str	r2, [r3, #0]
 80072ce:	e007      	b.n	80072e0 <HAL_DMA_IRQHandler+0xb34>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f022 0204 	bic.w	r2, r2, #4
 80072de:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 8165 	beq.w	80075b4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80072f2:	e15f      	b.n	80075b4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072f8:	f003 031f 	and.w	r3, r3, #31
 80072fc:	2202      	movs	r2, #2
 80072fe:	409a      	lsls	r2, r3
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	4013      	ands	r3, r2
 8007304:	2b00      	cmp	r3, #0
 8007306:	f000 80c5 	beq.w	8007494 <HAL_DMA_IRQHandler+0xce8>
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	f003 0302 	and.w	r3, r3, #2
 8007310:	2b00      	cmp	r3, #0
 8007312:	f000 80bf 	beq.w	8007494 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800731a:	f003 031f 	and.w	r3, r3, #31
 800731e:	2202      	movs	r2, #2
 8007320:	409a      	lsls	r2, r3
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d018      	beq.n	8007362 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007336:	2b00      	cmp	r3, #0
 8007338:	d109      	bne.n	800734e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800733e:	2b00      	cmp	r3, #0
 8007340:	f000 813a 	beq.w	80075b8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800734c:	e134      	b.n	80075b8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007352:	2b00      	cmp	r3, #0
 8007354:	f000 8130 	beq.w	80075b8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007360:	e12a      	b.n	80075b8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	f003 0320 	and.w	r3, r3, #32
 8007368:	2b00      	cmp	r3, #0
 800736a:	f040 8089 	bne.w	8007480 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a2b      	ldr	r2, [pc, #172]	; (8007420 <HAL_DMA_IRQHandler+0xc74>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d04a      	beq.n	800740e <HAL_DMA_IRQHandler+0xc62>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a29      	ldr	r2, [pc, #164]	; (8007424 <HAL_DMA_IRQHandler+0xc78>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d045      	beq.n	800740e <HAL_DMA_IRQHandler+0xc62>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a28      	ldr	r2, [pc, #160]	; (8007428 <HAL_DMA_IRQHandler+0xc7c>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d040      	beq.n	800740e <HAL_DMA_IRQHandler+0xc62>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a26      	ldr	r2, [pc, #152]	; (800742c <HAL_DMA_IRQHandler+0xc80>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d03b      	beq.n	800740e <HAL_DMA_IRQHandler+0xc62>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a25      	ldr	r2, [pc, #148]	; (8007430 <HAL_DMA_IRQHandler+0xc84>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d036      	beq.n	800740e <HAL_DMA_IRQHandler+0xc62>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a23      	ldr	r2, [pc, #140]	; (8007434 <HAL_DMA_IRQHandler+0xc88>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d031      	beq.n	800740e <HAL_DMA_IRQHandler+0xc62>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a22      	ldr	r2, [pc, #136]	; (8007438 <HAL_DMA_IRQHandler+0xc8c>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d02c      	beq.n	800740e <HAL_DMA_IRQHandler+0xc62>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a20      	ldr	r2, [pc, #128]	; (800743c <HAL_DMA_IRQHandler+0xc90>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d027      	beq.n	800740e <HAL_DMA_IRQHandler+0xc62>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a1f      	ldr	r2, [pc, #124]	; (8007440 <HAL_DMA_IRQHandler+0xc94>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d022      	beq.n	800740e <HAL_DMA_IRQHandler+0xc62>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a1d      	ldr	r2, [pc, #116]	; (8007444 <HAL_DMA_IRQHandler+0xc98>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d01d      	beq.n	800740e <HAL_DMA_IRQHandler+0xc62>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a1c      	ldr	r2, [pc, #112]	; (8007448 <HAL_DMA_IRQHandler+0xc9c>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d018      	beq.n	800740e <HAL_DMA_IRQHandler+0xc62>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a1a      	ldr	r2, [pc, #104]	; (800744c <HAL_DMA_IRQHandler+0xca0>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d013      	beq.n	800740e <HAL_DMA_IRQHandler+0xc62>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a19      	ldr	r2, [pc, #100]	; (8007450 <HAL_DMA_IRQHandler+0xca4>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d00e      	beq.n	800740e <HAL_DMA_IRQHandler+0xc62>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a17      	ldr	r2, [pc, #92]	; (8007454 <HAL_DMA_IRQHandler+0xca8>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d009      	beq.n	800740e <HAL_DMA_IRQHandler+0xc62>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a16      	ldr	r2, [pc, #88]	; (8007458 <HAL_DMA_IRQHandler+0xcac>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d004      	beq.n	800740e <HAL_DMA_IRQHandler+0xc62>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a14      	ldr	r2, [pc, #80]	; (800745c <HAL_DMA_IRQHandler+0xcb0>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d128      	bne.n	8007460 <HAL_DMA_IRQHandler+0xcb4>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f022 0214 	bic.w	r2, r2, #20
 800741c:	601a      	str	r2, [r3, #0]
 800741e:	e027      	b.n	8007470 <HAL_DMA_IRQHandler+0xcc4>
 8007420:	40020010 	.word	0x40020010
 8007424:	40020028 	.word	0x40020028
 8007428:	40020040 	.word	0x40020040
 800742c:	40020058 	.word	0x40020058
 8007430:	40020070 	.word	0x40020070
 8007434:	40020088 	.word	0x40020088
 8007438:	400200a0 	.word	0x400200a0
 800743c:	400200b8 	.word	0x400200b8
 8007440:	40020410 	.word	0x40020410
 8007444:	40020428 	.word	0x40020428
 8007448:	40020440 	.word	0x40020440
 800744c:	40020458 	.word	0x40020458
 8007450:	40020470 	.word	0x40020470
 8007454:	40020488 	.word	0x40020488
 8007458:	400204a0 	.word	0x400204a0
 800745c:	400204b8 	.word	0x400204b8
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f022 020a 	bic.w	r2, r2, #10
 800746e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 8097 	beq.w	80075b8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007492:	e091      	b.n	80075b8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007498:	f003 031f 	and.w	r3, r3, #31
 800749c:	2208      	movs	r2, #8
 800749e:	409a      	lsls	r2, r3
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	4013      	ands	r3, r2
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f000 8088 	beq.w	80075ba <HAL_DMA_IRQHandler+0xe0e>
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	f003 0308 	and.w	r3, r3, #8
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f000 8082 	beq.w	80075ba <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a41      	ldr	r2, [pc, #260]	; (80075c0 <HAL_DMA_IRQHandler+0xe14>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d04a      	beq.n	8007556 <HAL_DMA_IRQHandler+0xdaa>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a3f      	ldr	r2, [pc, #252]	; (80075c4 <HAL_DMA_IRQHandler+0xe18>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d045      	beq.n	8007556 <HAL_DMA_IRQHandler+0xdaa>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a3e      	ldr	r2, [pc, #248]	; (80075c8 <HAL_DMA_IRQHandler+0xe1c>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d040      	beq.n	8007556 <HAL_DMA_IRQHandler+0xdaa>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a3c      	ldr	r2, [pc, #240]	; (80075cc <HAL_DMA_IRQHandler+0xe20>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d03b      	beq.n	8007556 <HAL_DMA_IRQHandler+0xdaa>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a3b      	ldr	r2, [pc, #236]	; (80075d0 <HAL_DMA_IRQHandler+0xe24>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d036      	beq.n	8007556 <HAL_DMA_IRQHandler+0xdaa>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a39      	ldr	r2, [pc, #228]	; (80075d4 <HAL_DMA_IRQHandler+0xe28>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d031      	beq.n	8007556 <HAL_DMA_IRQHandler+0xdaa>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a38      	ldr	r2, [pc, #224]	; (80075d8 <HAL_DMA_IRQHandler+0xe2c>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d02c      	beq.n	8007556 <HAL_DMA_IRQHandler+0xdaa>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a36      	ldr	r2, [pc, #216]	; (80075dc <HAL_DMA_IRQHandler+0xe30>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d027      	beq.n	8007556 <HAL_DMA_IRQHandler+0xdaa>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a35      	ldr	r2, [pc, #212]	; (80075e0 <HAL_DMA_IRQHandler+0xe34>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d022      	beq.n	8007556 <HAL_DMA_IRQHandler+0xdaa>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a33      	ldr	r2, [pc, #204]	; (80075e4 <HAL_DMA_IRQHandler+0xe38>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d01d      	beq.n	8007556 <HAL_DMA_IRQHandler+0xdaa>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a32      	ldr	r2, [pc, #200]	; (80075e8 <HAL_DMA_IRQHandler+0xe3c>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d018      	beq.n	8007556 <HAL_DMA_IRQHandler+0xdaa>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a30      	ldr	r2, [pc, #192]	; (80075ec <HAL_DMA_IRQHandler+0xe40>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d013      	beq.n	8007556 <HAL_DMA_IRQHandler+0xdaa>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a2f      	ldr	r2, [pc, #188]	; (80075f0 <HAL_DMA_IRQHandler+0xe44>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d00e      	beq.n	8007556 <HAL_DMA_IRQHandler+0xdaa>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a2d      	ldr	r2, [pc, #180]	; (80075f4 <HAL_DMA_IRQHandler+0xe48>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d009      	beq.n	8007556 <HAL_DMA_IRQHandler+0xdaa>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a2c      	ldr	r2, [pc, #176]	; (80075f8 <HAL_DMA_IRQHandler+0xe4c>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d004      	beq.n	8007556 <HAL_DMA_IRQHandler+0xdaa>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a2a      	ldr	r2, [pc, #168]	; (80075fc <HAL_DMA_IRQHandler+0xe50>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d108      	bne.n	8007568 <HAL_DMA_IRQHandler+0xdbc>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f022 021c 	bic.w	r2, r2, #28
 8007564:	601a      	str	r2, [r3, #0]
 8007566:	e007      	b.n	8007578 <HAL_DMA_IRQHandler+0xdcc>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f022 020e 	bic.w	r2, r2, #14
 8007576:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800757c:	f003 031f 	and.w	r3, r3, #31
 8007580:	2201      	movs	r2, #1
 8007582:	409a      	lsls	r2, r3
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d009      	beq.n	80075ba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	4798      	blx	r3
 80075ae:	e004      	b.n	80075ba <HAL_DMA_IRQHandler+0xe0e>
          return;
 80075b0:	bf00      	nop
 80075b2:	e002      	b.n	80075ba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075b4:	bf00      	nop
 80075b6:	e000      	b.n	80075ba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075b8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80075ba:	3728      	adds	r7, #40	; 0x28
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	40020010 	.word	0x40020010
 80075c4:	40020028 	.word	0x40020028
 80075c8:	40020040 	.word	0x40020040
 80075cc:	40020058 	.word	0x40020058
 80075d0:	40020070 	.word	0x40020070
 80075d4:	40020088 	.word	0x40020088
 80075d8:	400200a0 	.word	0x400200a0
 80075dc:	400200b8 	.word	0x400200b8
 80075e0:	40020410 	.word	0x40020410
 80075e4:	40020428 	.word	0x40020428
 80075e8:	40020440 	.word	0x40020440
 80075ec:	40020458 	.word	0x40020458
 80075f0:	40020470 	.word	0x40020470
 80075f4:	40020488 	.word	0x40020488
 80075f8:	400204a0 	.word	0x400204a0
 80075fc:	400204b8 	.word	0x400204b8

08007600 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007600:	b480      	push	{r7}
 8007602:	b087      	sub	sp, #28
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	607a      	str	r2, [r7, #4]
 800760c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007612:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007618:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a7f      	ldr	r2, [pc, #508]	; (800781c <DMA_SetConfig+0x21c>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d072      	beq.n	800770a <DMA_SetConfig+0x10a>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a7d      	ldr	r2, [pc, #500]	; (8007820 <DMA_SetConfig+0x220>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d06d      	beq.n	800770a <DMA_SetConfig+0x10a>
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a7c      	ldr	r2, [pc, #496]	; (8007824 <DMA_SetConfig+0x224>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d068      	beq.n	800770a <DMA_SetConfig+0x10a>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a7a      	ldr	r2, [pc, #488]	; (8007828 <DMA_SetConfig+0x228>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d063      	beq.n	800770a <DMA_SetConfig+0x10a>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a79      	ldr	r2, [pc, #484]	; (800782c <DMA_SetConfig+0x22c>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d05e      	beq.n	800770a <DMA_SetConfig+0x10a>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a77      	ldr	r2, [pc, #476]	; (8007830 <DMA_SetConfig+0x230>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d059      	beq.n	800770a <DMA_SetConfig+0x10a>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a76      	ldr	r2, [pc, #472]	; (8007834 <DMA_SetConfig+0x234>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d054      	beq.n	800770a <DMA_SetConfig+0x10a>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a74      	ldr	r2, [pc, #464]	; (8007838 <DMA_SetConfig+0x238>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d04f      	beq.n	800770a <DMA_SetConfig+0x10a>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a73      	ldr	r2, [pc, #460]	; (800783c <DMA_SetConfig+0x23c>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d04a      	beq.n	800770a <DMA_SetConfig+0x10a>
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a71      	ldr	r2, [pc, #452]	; (8007840 <DMA_SetConfig+0x240>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d045      	beq.n	800770a <DMA_SetConfig+0x10a>
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a70      	ldr	r2, [pc, #448]	; (8007844 <DMA_SetConfig+0x244>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d040      	beq.n	800770a <DMA_SetConfig+0x10a>
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a6e      	ldr	r2, [pc, #440]	; (8007848 <DMA_SetConfig+0x248>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d03b      	beq.n	800770a <DMA_SetConfig+0x10a>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a6d      	ldr	r2, [pc, #436]	; (800784c <DMA_SetConfig+0x24c>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d036      	beq.n	800770a <DMA_SetConfig+0x10a>
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a6b      	ldr	r2, [pc, #428]	; (8007850 <DMA_SetConfig+0x250>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d031      	beq.n	800770a <DMA_SetConfig+0x10a>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a6a      	ldr	r2, [pc, #424]	; (8007854 <DMA_SetConfig+0x254>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d02c      	beq.n	800770a <DMA_SetConfig+0x10a>
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a68      	ldr	r2, [pc, #416]	; (8007858 <DMA_SetConfig+0x258>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d027      	beq.n	800770a <DMA_SetConfig+0x10a>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a67      	ldr	r2, [pc, #412]	; (800785c <DMA_SetConfig+0x25c>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d022      	beq.n	800770a <DMA_SetConfig+0x10a>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a65      	ldr	r2, [pc, #404]	; (8007860 <DMA_SetConfig+0x260>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d01d      	beq.n	800770a <DMA_SetConfig+0x10a>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a64      	ldr	r2, [pc, #400]	; (8007864 <DMA_SetConfig+0x264>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d018      	beq.n	800770a <DMA_SetConfig+0x10a>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a62      	ldr	r2, [pc, #392]	; (8007868 <DMA_SetConfig+0x268>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d013      	beq.n	800770a <DMA_SetConfig+0x10a>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a61      	ldr	r2, [pc, #388]	; (800786c <DMA_SetConfig+0x26c>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d00e      	beq.n	800770a <DMA_SetConfig+0x10a>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a5f      	ldr	r2, [pc, #380]	; (8007870 <DMA_SetConfig+0x270>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d009      	beq.n	800770a <DMA_SetConfig+0x10a>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a5e      	ldr	r2, [pc, #376]	; (8007874 <DMA_SetConfig+0x274>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d004      	beq.n	800770a <DMA_SetConfig+0x10a>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a5c      	ldr	r2, [pc, #368]	; (8007878 <DMA_SetConfig+0x278>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d101      	bne.n	800770e <DMA_SetConfig+0x10e>
 800770a:	2301      	movs	r3, #1
 800770c:	e000      	b.n	8007710 <DMA_SetConfig+0x110>
 800770e:	2300      	movs	r3, #0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00d      	beq.n	8007730 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800771c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007722:	2b00      	cmp	r3, #0
 8007724:	d004      	beq.n	8007730 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800772e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a39      	ldr	r2, [pc, #228]	; (800781c <DMA_SetConfig+0x21c>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d04a      	beq.n	80077d0 <DMA_SetConfig+0x1d0>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a38      	ldr	r2, [pc, #224]	; (8007820 <DMA_SetConfig+0x220>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d045      	beq.n	80077d0 <DMA_SetConfig+0x1d0>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a36      	ldr	r2, [pc, #216]	; (8007824 <DMA_SetConfig+0x224>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d040      	beq.n	80077d0 <DMA_SetConfig+0x1d0>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a35      	ldr	r2, [pc, #212]	; (8007828 <DMA_SetConfig+0x228>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d03b      	beq.n	80077d0 <DMA_SetConfig+0x1d0>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a33      	ldr	r2, [pc, #204]	; (800782c <DMA_SetConfig+0x22c>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d036      	beq.n	80077d0 <DMA_SetConfig+0x1d0>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a32      	ldr	r2, [pc, #200]	; (8007830 <DMA_SetConfig+0x230>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d031      	beq.n	80077d0 <DMA_SetConfig+0x1d0>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a30      	ldr	r2, [pc, #192]	; (8007834 <DMA_SetConfig+0x234>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d02c      	beq.n	80077d0 <DMA_SetConfig+0x1d0>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a2f      	ldr	r2, [pc, #188]	; (8007838 <DMA_SetConfig+0x238>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d027      	beq.n	80077d0 <DMA_SetConfig+0x1d0>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a2d      	ldr	r2, [pc, #180]	; (800783c <DMA_SetConfig+0x23c>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d022      	beq.n	80077d0 <DMA_SetConfig+0x1d0>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a2c      	ldr	r2, [pc, #176]	; (8007840 <DMA_SetConfig+0x240>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d01d      	beq.n	80077d0 <DMA_SetConfig+0x1d0>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a2a      	ldr	r2, [pc, #168]	; (8007844 <DMA_SetConfig+0x244>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d018      	beq.n	80077d0 <DMA_SetConfig+0x1d0>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a29      	ldr	r2, [pc, #164]	; (8007848 <DMA_SetConfig+0x248>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d013      	beq.n	80077d0 <DMA_SetConfig+0x1d0>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a27      	ldr	r2, [pc, #156]	; (800784c <DMA_SetConfig+0x24c>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d00e      	beq.n	80077d0 <DMA_SetConfig+0x1d0>
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a26      	ldr	r2, [pc, #152]	; (8007850 <DMA_SetConfig+0x250>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d009      	beq.n	80077d0 <DMA_SetConfig+0x1d0>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a24      	ldr	r2, [pc, #144]	; (8007854 <DMA_SetConfig+0x254>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d004      	beq.n	80077d0 <DMA_SetConfig+0x1d0>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a23      	ldr	r2, [pc, #140]	; (8007858 <DMA_SetConfig+0x258>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d101      	bne.n	80077d4 <DMA_SetConfig+0x1d4>
 80077d0:	2301      	movs	r3, #1
 80077d2:	e000      	b.n	80077d6 <DMA_SetConfig+0x1d6>
 80077d4:	2300      	movs	r3, #0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d059      	beq.n	800788e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077de:	f003 031f 	and.w	r3, r3, #31
 80077e2:	223f      	movs	r2, #63	; 0x3f
 80077e4:	409a      	lsls	r2, r3
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80077f8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	683a      	ldr	r2, [r7, #0]
 8007800:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	2b40      	cmp	r3, #64	; 0x40
 8007808:	d138      	bne.n	800787c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68ba      	ldr	r2, [r7, #8]
 8007818:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800781a:	e086      	b.n	800792a <DMA_SetConfig+0x32a>
 800781c:	40020010 	.word	0x40020010
 8007820:	40020028 	.word	0x40020028
 8007824:	40020040 	.word	0x40020040
 8007828:	40020058 	.word	0x40020058
 800782c:	40020070 	.word	0x40020070
 8007830:	40020088 	.word	0x40020088
 8007834:	400200a0 	.word	0x400200a0
 8007838:	400200b8 	.word	0x400200b8
 800783c:	40020410 	.word	0x40020410
 8007840:	40020428 	.word	0x40020428
 8007844:	40020440 	.word	0x40020440
 8007848:	40020458 	.word	0x40020458
 800784c:	40020470 	.word	0x40020470
 8007850:	40020488 	.word	0x40020488
 8007854:	400204a0 	.word	0x400204a0
 8007858:	400204b8 	.word	0x400204b8
 800785c:	58025408 	.word	0x58025408
 8007860:	5802541c 	.word	0x5802541c
 8007864:	58025430 	.word	0x58025430
 8007868:	58025444 	.word	0x58025444
 800786c:	58025458 	.word	0x58025458
 8007870:	5802546c 	.word	0x5802546c
 8007874:	58025480 	.word	0x58025480
 8007878:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68ba      	ldr	r2, [r7, #8]
 8007882:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	60da      	str	r2, [r3, #12]
}
 800788c:	e04d      	b.n	800792a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a29      	ldr	r2, [pc, #164]	; (8007938 <DMA_SetConfig+0x338>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d022      	beq.n	80078de <DMA_SetConfig+0x2de>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a27      	ldr	r2, [pc, #156]	; (800793c <DMA_SetConfig+0x33c>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d01d      	beq.n	80078de <DMA_SetConfig+0x2de>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a26      	ldr	r2, [pc, #152]	; (8007940 <DMA_SetConfig+0x340>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d018      	beq.n	80078de <DMA_SetConfig+0x2de>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a24      	ldr	r2, [pc, #144]	; (8007944 <DMA_SetConfig+0x344>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d013      	beq.n	80078de <DMA_SetConfig+0x2de>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a23      	ldr	r2, [pc, #140]	; (8007948 <DMA_SetConfig+0x348>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d00e      	beq.n	80078de <DMA_SetConfig+0x2de>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a21      	ldr	r2, [pc, #132]	; (800794c <DMA_SetConfig+0x34c>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d009      	beq.n	80078de <DMA_SetConfig+0x2de>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a20      	ldr	r2, [pc, #128]	; (8007950 <DMA_SetConfig+0x350>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d004      	beq.n	80078de <DMA_SetConfig+0x2de>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a1e      	ldr	r2, [pc, #120]	; (8007954 <DMA_SetConfig+0x354>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d101      	bne.n	80078e2 <DMA_SetConfig+0x2e2>
 80078de:	2301      	movs	r3, #1
 80078e0:	e000      	b.n	80078e4 <DMA_SetConfig+0x2e4>
 80078e2:	2300      	movs	r3, #0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d020      	beq.n	800792a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078ec:	f003 031f 	and.w	r3, r3, #31
 80078f0:	2201      	movs	r2, #1
 80078f2:	409a      	lsls	r2, r3
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	683a      	ldr	r2, [r7, #0]
 80078fe:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	2b40      	cmp	r3, #64	; 0x40
 8007906:	d108      	bne.n	800791a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68ba      	ldr	r2, [r7, #8]
 8007916:	60da      	str	r2, [r3, #12]
}
 8007918:	e007      	b.n	800792a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68ba      	ldr	r2, [r7, #8]
 8007920:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	60da      	str	r2, [r3, #12]
}
 800792a:	bf00      	nop
 800792c:	371c      	adds	r7, #28
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	58025408 	.word	0x58025408
 800793c:	5802541c 	.word	0x5802541c
 8007940:	58025430 	.word	0x58025430
 8007944:	58025444 	.word	0x58025444
 8007948:	58025458 	.word	0x58025458
 800794c:	5802546c 	.word	0x5802546c
 8007950:	58025480 	.word	0x58025480
 8007954:	58025494 	.word	0x58025494

08007958 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a42      	ldr	r2, [pc, #264]	; (8007a70 <DMA_CalcBaseAndBitshift+0x118>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d04a      	beq.n	8007a00 <DMA_CalcBaseAndBitshift+0xa8>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a41      	ldr	r2, [pc, #260]	; (8007a74 <DMA_CalcBaseAndBitshift+0x11c>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d045      	beq.n	8007a00 <DMA_CalcBaseAndBitshift+0xa8>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a3f      	ldr	r2, [pc, #252]	; (8007a78 <DMA_CalcBaseAndBitshift+0x120>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d040      	beq.n	8007a00 <DMA_CalcBaseAndBitshift+0xa8>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a3e      	ldr	r2, [pc, #248]	; (8007a7c <DMA_CalcBaseAndBitshift+0x124>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d03b      	beq.n	8007a00 <DMA_CalcBaseAndBitshift+0xa8>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a3c      	ldr	r2, [pc, #240]	; (8007a80 <DMA_CalcBaseAndBitshift+0x128>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d036      	beq.n	8007a00 <DMA_CalcBaseAndBitshift+0xa8>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a3b      	ldr	r2, [pc, #236]	; (8007a84 <DMA_CalcBaseAndBitshift+0x12c>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d031      	beq.n	8007a00 <DMA_CalcBaseAndBitshift+0xa8>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a39      	ldr	r2, [pc, #228]	; (8007a88 <DMA_CalcBaseAndBitshift+0x130>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d02c      	beq.n	8007a00 <DMA_CalcBaseAndBitshift+0xa8>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a38      	ldr	r2, [pc, #224]	; (8007a8c <DMA_CalcBaseAndBitshift+0x134>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d027      	beq.n	8007a00 <DMA_CalcBaseAndBitshift+0xa8>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a36      	ldr	r2, [pc, #216]	; (8007a90 <DMA_CalcBaseAndBitshift+0x138>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d022      	beq.n	8007a00 <DMA_CalcBaseAndBitshift+0xa8>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a35      	ldr	r2, [pc, #212]	; (8007a94 <DMA_CalcBaseAndBitshift+0x13c>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d01d      	beq.n	8007a00 <DMA_CalcBaseAndBitshift+0xa8>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a33      	ldr	r2, [pc, #204]	; (8007a98 <DMA_CalcBaseAndBitshift+0x140>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d018      	beq.n	8007a00 <DMA_CalcBaseAndBitshift+0xa8>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a32      	ldr	r2, [pc, #200]	; (8007a9c <DMA_CalcBaseAndBitshift+0x144>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d013      	beq.n	8007a00 <DMA_CalcBaseAndBitshift+0xa8>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a30      	ldr	r2, [pc, #192]	; (8007aa0 <DMA_CalcBaseAndBitshift+0x148>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d00e      	beq.n	8007a00 <DMA_CalcBaseAndBitshift+0xa8>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a2f      	ldr	r2, [pc, #188]	; (8007aa4 <DMA_CalcBaseAndBitshift+0x14c>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d009      	beq.n	8007a00 <DMA_CalcBaseAndBitshift+0xa8>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a2d      	ldr	r2, [pc, #180]	; (8007aa8 <DMA_CalcBaseAndBitshift+0x150>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d004      	beq.n	8007a00 <DMA_CalcBaseAndBitshift+0xa8>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a2c      	ldr	r2, [pc, #176]	; (8007aac <DMA_CalcBaseAndBitshift+0x154>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d101      	bne.n	8007a04 <DMA_CalcBaseAndBitshift+0xac>
 8007a00:	2301      	movs	r3, #1
 8007a02:	e000      	b.n	8007a06 <DMA_CalcBaseAndBitshift+0xae>
 8007a04:	2300      	movs	r3, #0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d024      	beq.n	8007a54 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	3b10      	subs	r3, #16
 8007a12:	4a27      	ldr	r2, [pc, #156]	; (8007ab0 <DMA_CalcBaseAndBitshift+0x158>)
 8007a14:	fba2 2303 	umull	r2, r3, r2, r3
 8007a18:	091b      	lsrs	r3, r3, #4
 8007a1a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f003 0307 	and.w	r3, r3, #7
 8007a22:	4a24      	ldr	r2, [pc, #144]	; (8007ab4 <DMA_CalcBaseAndBitshift+0x15c>)
 8007a24:	5cd3      	ldrb	r3, [r2, r3]
 8007a26:	461a      	mov	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2b03      	cmp	r3, #3
 8007a30:	d908      	bls.n	8007a44 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	461a      	mov	r2, r3
 8007a38:	4b1f      	ldr	r3, [pc, #124]	; (8007ab8 <DMA_CalcBaseAndBitshift+0x160>)
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	1d1a      	adds	r2, r3, #4
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	659a      	str	r2, [r3, #88]	; 0x58
 8007a42:	e00d      	b.n	8007a60 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	461a      	mov	r2, r3
 8007a4a:	4b1b      	ldr	r3, [pc, #108]	; (8007ab8 <DMA_CalcBaseAndBitshift+0x160>)
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	6593      	str	r3, [r2, #88]	; 0x58
 8007a52:	e005      	b.n	8007a60 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3714      	adds	r7, #20
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr
 8007a70:	40020010 	.word	0x40020010
 8007a74:	40020028 	.word	0x40020028
 8007a78:	40020040 	.word	0x40020040
 8007a7c:	40020058 	.word	0x40020058
 8007a80:	40020070 	.word	0x40020070
 8007a84:	40020088 	.word	0x40020088
 8007a88:	400200a0 	.word	0x400200a0
 8007a8c:	400200b8 	.word	0x400200b8
 8007a90:	40020410 	.word	0x40020410
 8007a94:	40020428 	.word	0x40020428
 8007a98:	40020440 	.word	0x40020440
 8007a9c:	40020458 	.word	0x40020458
 8007aa0:	40020470 	.word	0x40020470
 8007aa4:	40020488 	.word	0x40020488
 8007aa8:	400204a0 	.word	0x400204a0
 8007aac:	400204b8 	.word	0x400204b8
 8007ab0:	aaaaaaab 	.word	0xaaaaaaab
 8007ab4:	08014ea0 	.word	0x08014ea0
 8007ab8:	fffffc00 	.word	0xfffffc00

08007abc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d120      	bne.n	8007b12 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad4:	2b03      	cmp	r3, #3
 8007ad6:	d858      	bhi.n	8007b8a <DMA_CheckFifoParam+0xce>
 8007ad8:	a201      	add	r2, pc, #4	; (adr r2, 8007ae0 <DMA_CheckFifoParam+0x24>)
 8007ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ade:	bf00      	nop
 8007ae0:	08007af1 	.word	0x08007af1
 8007ae4:	08007b03 	.word	0x08007b03
 8007ae8:	08007af1 	.word	0x08007af1
 8007aec:	08007b8b 	.word	0x08007b8b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d048      	beq.n	8007b8e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b00:	e045      	b.n	8007b8e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b0a:	d142      	bne.n	8007b92 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b10:	e03f      	b.n	8007b92 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	699b      	ldr	r3, [r3, #24]
 8007b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b1a:	d123      	bne.n	8007b64 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b20:	2b03      	cmp	r3, #3
 8007b22:	d838      	bhi.n	8007b96 <DMA_CheckFifoParam+0xda>
 8007b24:	a201      	add	r2, pc, #4	; (adr r2, 8007b2c <DMA_CheckFifoParam+0x70>)
 8007b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b2a:	bf00      	nop
 8007b2c:	08007b3d 	.word	0x08007b3d
 8007b30:	08007b43 	.word	0x08007b43
 8007b34:	08007b3d 	.word	0x08007b3d
 8007b38:	08007b55 	.word	0x08007b55
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	73fb      	strb	r3, [r7, #15]
        break;
 8007b40:	e030      	b.n	8007ba4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d025      	beq.n	8007b9a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b52:	e022      	b.n	8007b9a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b5c:	d11f      	bne.n	8007b9e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b62:	e01c      	b.n	8007b9e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	d902      	bls.n	8007b72 <DMA_CheckFifoParam+0xb6>
 8007b6c:	2b03      	cmp	r3, #3
 8007b6e:	d003      	beq.n	8007b78 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007b70:	e018      	b.n	8007ba4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	73fb      	strb	r3, [r7, #15]
        break;
 8007b76:	e015      	b.n	8007ba4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00e      	beq.n	8007ba2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	73fb      	strb	r3, [r7, #15]
    break;
 8007b88:	e00b      	b.n	8007ba2 <DMA_CheckFifoParam+0xe6>
        break;
 8007b8a:	bf00      	nop
 8007b8c:	e00a      	b.n	8007ba4 <DMA_CheckFifoParam+0xe8>
        break;
 8007b8e:	bf00      	nop
 8007b90:	e008      	b.n	8007ba4 <DMA_CheckFifoParam+0xe8>
        break;
 8007b92:	bf00      	nop
 8007b94:	e006      	b.n	8007ba4 <DMA_CheckFifoParam+0xe8>
        break;
 8007b96:	bf00      	nop
 8007b98:	e004      	b.n	8007ba4 <DMA_CheckFifoParam+0xe8>
        break;
 8007b9a:	bf00      	nop
 8007b9c:	e002      	b.n	8007ba4 <DMA_CheckFifoParam+0xe8>
        break;
 8007b9e:	bf00      	nop
 8007ba0:	e000      	b.n	8007ba4 <DMA_CheckFifoParam+0xe8>
    break;
 8007ba2:	bf00      	nop
    }
  }

  return status;
 8007ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3714      	adds	r7, #20
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop

08007bb4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a38      	ldr	r2, [pc, #224]	; (8007ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d022      	beq.n	8007c12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a36      	ldr	r2, [pc, #216]	; (8007cac <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d01d      	beq.n	8007c12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a35      	ldr	r2, [pc, #212]	; (8007cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d018      	beq.n	8007c12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a33      	ldr	r2, [pc, #204]	; (8007cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d013      	beq.n	8007c12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a32      	ldr	r2, [pc, #200]	; (8007cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d00e      	beq.n	8007c12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a30      	ldr	r2, [pc, #192]	; (8007cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d009      	beq.n	8007c12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a2f      	ldr	r2, [pc, #188]	; (8007cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d004      	beq.n	8007c12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a2d      	ldr	r2, [pc, #180]	; (8007cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d101      	bne.n	8007c16 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007c12:	2301      	movs	r3, #1
 8007c14:	e000      	b.n	8007c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007c16:	2300      	movs	r3, #0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d01a      	beq.n	8007c52 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	3b08      	subs	r3, #8
 8007c24:	4a28      	ldr	r2, [pc, #160]	; (8007cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007c26:	fba2 2303 	umull	r2, r3, r2, r3
 8007c2a:	091b      	lsrs	r3, r3, #4
 8007c2c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	4b26      	ldr	r3, [pc, #152]	; (8007ccc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007c32:	4413      	add	r3, r2
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	461a      	mov	r2, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4a24      	ldr	r2, [pc, #144]	; (8007cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007c40:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f003 031f 	and.w	r3, r3, #31
 8007c48:	2201      	movs	r2, #1
 8007c4a:	409a      	lsls	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007c50:	e024      	b.n	8007c9c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	3b10      	subs	r3, #16
 8007c5a:	4a1e      	ldr	r2, [pc, #120]	; (8007cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c60:	091b      	lsrs	r3, r3, #4
 8007c62:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	4a1c      	ldr	r2, [pc, #112]	; (8007cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d806      	bhi.n	8007c7a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	4a1b      	ldr	r2, [pc, #108]	; (8007cdc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d902      	bls.n	8007c7a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	3308      	adds	r3, #8
 8007c78:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007c7a:	68fa      	ldr	r2, [r7, #12]
 8007c7c:	4b18      	ldr	r3, [pc, #96]	; (8007ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007c7e:	4413      	add	r3, r2
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	461a      	mov	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a16      	ldr	r2, [pc, #88]	; (8007ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007c8c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f003 031f 	and.w	r3, r3, #31
 8007c94:	2201      	movs	r2, #1
 8007c96:	409a      	lsls	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007c9c:	bf00      	nop
 8007c9e:	3714      	adds	r7, #20
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr
 8007ca8:	58025408 	.word	0x58025408
 8007cac:	5802541c 	.word	0x5802541c
 8007cb0:	58025430 	.word	0x58025430
 8007cb4:	58025444 	.word	0x58025444
 8007cb8:	58025458 	.word	0x58025458
 8007cbc:	5802546c 	.word	0x5802546c
 8007cc0:	58025480 	.word	0x58025480
 8007cc4:	58025494 	.word	0x58025494
 8007cc8:	cccccccd 	.word	0xcccccccd
 8007ccc:	16009600 	.word	0x16009600
 8007cd0:	58025880 	.word	0x58025880
 8007cd4:	aaaaaaab 	.word	0xaaaaaaab
 8007cd8:	400204b8 	.word	0x400204b8
 8007cdc:	4002040f 	.word	0x4002040f
 8007ce0:	10008200 	.word	0x10008200
 8007ce4:	40020880 	.word	0x40020880

08007ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d04a      	beq.n	8007d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2b08      	cmp	r3, #8
 8007d02:	d847      	bhi.n	8007d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a25      	ldr	r2, [pc, #148]	; (8007da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d022      	beq.n	8007d54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a24      	ldr	r2, [pc, #144]	; (8007da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d01d      	beq.n	8007d54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a22      	ldr	r2, [pc, #136]	; (8007da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d018      	beq.n	8007d54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a21      	ldr	r2, [pc, #132]	; (8007dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d013      	beq.n	8007d54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a1f      	ldr	r2, [pc, #124]	; (8007db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d00e      	beq.n	8007d54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a1e      	ldr	r2, [pc, #120]	; (8007db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d009      	beq.n	8007d54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a1c      	ldr	r2, [pc, #112]	; (8007db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d004      	beq.n	8007d54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a1b      	ldr	r2, [pc, #108]	; (8007dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d101      	bne.n	8007d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007d54:	2301      	movs	r3, #1
 8007d56:	e000      	b.n	8007d5a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007d58:	2300      	movs	r3, #0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00a      	beq.n	8007d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	4b17      	ldr	r3, [pc, #92]	; (8007dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007d62:	4413      	add	r3, r2
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	461a      	mov	r2, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a15      	ldr	r2, [pc, #84]	; (8007dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007d70:	671a      	str	r2, [r3, #112]	; 0x70
 8007d72:	e009      	b.n	8007d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	4b14      	ldr	r3, [pc, #80]	; (8007dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007d78:	4413      	add	r3, r2
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a11      	ldr	r2, [pc, #68]	; (8007dcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007d86:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	409a      	lsls	r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007d94:	bf00      	nop
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr
 8007da0:	58025408 	.word	0x58025408
 8007da4:	5802541c 	.word	0x5802541c
 8007da8:	58025430 	.word	0x58025430
 8007dac:	58025444 	.word	0x58025444
 8007db0:	58025458 	.word	0x58025458
 8007db4:	5802546c 	.word	0x5802546c
 8007db8:	58025480 	.word	0x58025480
 8007dbc:	58025494 	.word	0x58025494
 8007dc0:	1600963f 	.word	0x1600963f
 8007dc4:	58025940 	.word	0x58025940
 8007dc8:	1000823f 	.word	0x1000823f
 8007dcc:	40020940 	.word	0x40020940

08007dd0 <HAL_DTS_Init>:
  *         parameters in the DTS_InitTypeDef and initialize the associated handle.
  * @param  hdts  DTS handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DTS_Init(DTS_HandleTypeDef *hdts)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  /* Check the DTS handle allocation */
  if (hdts == NULL)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d101      	bne.n	8007de2 <HAL_DTS_Init+0x12>
  {
    return HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	e089      	b.n	8007ef6 <HAL_DTS_Init+0x126>
  assert_param(IS_DTS_TRIGGERINPUT(hdts->Init.TriggerInput));
  assert_param(IS_DTS_SAMPLINGTIME(hdts->Init.SamplingTime));
  assert_param(IS_DTS_THRESHOLD(hdts->Init.HighThreshold));
  assert_param(IS_DTS_THRESHOLD(hdts->Init.LowThreshold));

  if (hdts->State == HAL_DTS_STATE_RESET)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d102      	bne.n	8007df4 <HAL_DTS_Init+0x24>

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hdts->MspInitCallback(hdts);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_DTS_MspInit(hdts);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f7fa fbfa 	bl	80025e8 <HAL_DTS_MspInit>
#endif /* USE_HAL_DTS_REGISTER_CALLBACKS */
  }

  /* Change the DTS state */
  hdts->State = HAL_DTS_STATE_BUSY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2202      	movs	r2, #2
 8007df8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check ramp coefficient */
  if (hdts->Instance->RAMPVALR == 0UL)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d101      	bne.n	8007e0a <HAL_DTS_Init+0x3a>
  {
    return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e075      	b.n	8007ef6 <HAL_DTS_Init+0x126>
  }

  /* Check factory calibration temperature  */
  if (hdts->Instance->T0VALR1 == 0UL)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d101      	bne.n	8007e18 <HAL_DTS_Init+0x48>
  {
    return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e06e      	b.n	8007ef6 <HAL_DTS_Init+0x126>
  }

  /* Check Quick Measure option is enabled or disabled */
  if (hdts->Init.QuickMeasure == DTS_QUICKMEAS_DISABLE)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d108      	bne.n	8007e32 <HAL_DTS_Init+0x62>
    if (hdts->Init.RefClock == DTS_REFCLKSEL_PCLK)
    {
      assert_param(IS_DTS_DIVIDER_RATIO_NUMBER(hdts->Init.Divider));
    }
    /* Quick measurement mode disabled */
    CLEAR_BIT(hdts->Instance->CFGR1, DTS_CFGR1_Q_MEAS_OPT);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8007e2e:	601a      	str	r2, [r3, #0]
 8007e30:	e00e      	b.n	8007e50 <HAL_DTS_Init+0x80>
  }
  else
  {
    /* DTS_QUICKMEAS_ENABLE shall be used only when the LSE clock is
       selected as reference clock */
    if (hdts->Init.RefClock != DTS_REFCLKSEL_LSE)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e3a:	d001      	beq.n	8007e40 <HAL_DTS_Init+0x70>
    {
      return HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e05a      	b.n	8007ef6 <HAL_DTS_Init+0x126>
    }

    /* Quick measurement mode enabled - no calibration needed */
    SET_BIT(hdts->Instance->CFGR1, DTS_CFGR1_Q_MEAS_OPT);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8007e4e:	601a      	str	r2, [r3, #0]
  }

  /* set the DTS clk source */
  if (hdts->Init.RefClock == DTS_REFCLKSEL_LSE)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e58:	d108      	bne.n	8007e6c <HAL_DTS_Init+0x9c>
  {
    SET_BIT(hdts->Instance->CFGR1, DTS_CFGR1_REFCLK_SEL);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007e68:	601a      	str	r2, [r3, #0]
 8007e6a:	e007      	b.n	8007e7c <HAL_DTS_Init+0xac>
  }
  else
  {
    CLEAR_BIT(hdts->Instance->CFGR1, DTS_CFGR1_REFCLK_SEL);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8007e7a:	601a      	str	r2, [r3, #0]
  }

  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_HSREF_CLK_DIV, (hdts->Init.Divider << DTS_CFGR1_HSREF_CLK_DIV_Pos));
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f023 41fe 	bic.w	r1, r3, #2130706432	; 0x7f000000
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	061a      	lsls	r2, r3, #24
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	430a      	orrs	r2, r1
 8007e92:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_TS1_SMP_TIME, hdts->Init.SamplingTime);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	691a      	ldr	r2, [r3, #16]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	430a      	orrs	r2, r1
 8007ea8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_TS1_INTRIG_SEL, hdts->Init.TriggerInput);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	68da      	ldr	r2, [r3, #12]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	430a      	orrs	r2, r1
 8007ebe:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->ITR1, DTS_ITR1_TS1_HITTHD, (hdts->Init.HighThreshold << DTS_ITR1_TS1_HITTHD_Pos));
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	695b      	ldr	r3, [r3, #20]
 8007ec6:	b299      	uxth	r1, r3
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	699b      	ldr	r3, [r3, #24]
 8007ecc:	041a      	lsls	r2, r3, #16
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	430a      	orrs	r2, r1
 8007ed4:	615a      	str	r2, [r3, #20]
  MODIFY_REG(hdts->Instance->ITR1, DTS_ITR1_TS1_LITTHD, hdts->Init.LowThreshold);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	695a      	ldr	r2, [r3, #20]
 8007edc:	4b08      	ldr	r3, [pc, #32]	; (8007f00 <HAL_DTS_Init+0x130>)
 8007ede:	4013      	ands	r3, r2
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	69d1      	ldr	r1, [r2, #28]
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	6812      	ldr	r2, [r2, #0]
 8007ee8:	430b      	orrs	r3, r1
 8007eea:	6153      	str	r3, [r2, #20]

  /* Change the DTS state */
  hdts->State = HAL_DTS_STATE_READY;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3708      	adds	r7, #8
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	ffff0000 	.word	0xffff0000

08007f04 <HAL_DTS_Start>:
  * @brief  Start the DTS sensor.
  * @param  hdts  DTS handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DTS_Start(DTS_HandleTypeDef *hdts)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  uint32_t Ref_Time;

  /* Check the DTS handle allocation */
  if (hdts == NULL)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d101      	bne.n	8007f16 <HAL_DTS_Start+0x12>
  {
    return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e03f      	b.n	8007f96 <HAL_DTS_Start+0x92>
  }

  if (hdts->State == HAL_DTS_STATE_READY)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d138      	bne.n	8007f94 <HAL_DTS_Start+0x90>
  {
    hdts->State = HAL_DTS_STATE_BUSY;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2202      	movs	r2, #2
 8007f26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Enable DTS sensor */
    __HAL_DTS_ENABLE(hdts);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f042 0201 	orr.w	r2, r2, #1
 8007f38:	601a      	str	r2, [r3, #0]

    /* Get Start Tick*/
    Ref_Time = HAL_GetTick();
 8007f3a:	f7fb f92d 	bl	8003198 <HAL_GetTick>
 8007f3e:	60f8      	str	r0, [r7, #12]

    /* Wait till TS1_RDY flag is set */
    while (__HAL_DTS_GET_FLAG(hdts, DTS_FLAG_TS1_RDY) == RESET)
 8007f40:	e008      	b.n	8007f54 <HAL_DTS_Start+0x50>
    {
      if ((HAL_GetTick() - Ref_Time) > DTS_DELAY_STARTUP)
 8007f42:	f7fb f929 	bl	8003198 <HAL_GetTick>
 8007f46:	4602      	mov	r2, r0
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	1ad3      	subs	r3, r2, r3
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d901      	bls.n	8007f54 <HAL_DTS_Start+0x50>
      {
        return HAL_TIMEOUT;
 8007f50:	2303      	movs	r3, #3
 8007f52:	e020      	b.n	8007f96 <HAL_DTS_Start+0x92>
    while (__HAL_DTS_GET_FLAG(hdts, DTS_FLAG_TS1_RDY) == RESET)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	6a1b      	ldr	r3, [r3, #32]
 8007f5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f62:	d1ee      	bne.n	8007f42 <HAL_DTS_Start+0x3e>
      }
    }

    if (__HAL_DTS_GET_TRIGGER(hdts) == DTS_TRIGGER_HW_NONE)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d10a      	bne.n	8007f88 <HAL_DTS_Start+0x84>
    {
      /* Start continuous measures */
      SET_BIT(hdts->Instance->CFGR1, DTS_CFGR1_TS1_START);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f042 0210 	orr.w	r2, r2, #16
 8007f80:	601a      	str	r2, [r3, #0]

      /* Ensure start is taken into account */
      HAL_Delay(TS_TIMEOUT_MS);
 8007f82:	2005      	movs	r0, #5
 8007f84:	f7fb f914 	bl	80031b0 <HAL_Delay>
    }

    hdts->State = HAL_DTS_STATE_READY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  else
  {
    return HAL_BUSY;
  }

  return HAL_OK;
 8007f90:	2300      	movs	r3, #0
 8007f92:	e000      	b.n	8007f96 <HAL_DTS_Start+0x92>
    return HAL_BUSY;
 8007f94:	2302      	movs	r3, #2
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3710      	adds	r7, #16
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <HAL_DTS_GetTemperature>:
  * @param  Temperature  Temperature in deg C
  * @note This function retrieves latest available measure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DTS_GetTemperature(DTS_HandleTypeDef *hdts, int32_t *Temperature)
{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b088      	sub	sp, #32
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
 8007fa6:	6039      	str	r1, [r7, #0]
  uint32_t samples;
  uint32_t t0_temp;
  uint32_t t0_freq;
  uint32_t ramp_coeff;

  if (hdts->State == HAL_DTS_STATE_READY)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d16c      	bne.n	800808e <HAL_DTS_GetTemperature+0xf0>
  {
    hdts->State = HAL_DTS_STATE_BUSY;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2202      	movs	r2, #2
 8007fb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Get the total number of samples */
    samples = (hdts->Instance->DR & DTS_DR_TS1_MFREQ);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	69db      	ldr	r3, [r3, #28]
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	617b      	str	r3, [r7, #20]

    if ((hdts->Init.SamplingTime == 0UL) || (samples == 0UL))
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d002      	beq.n	8007fd4 <HAL_DTS_GetTemperature+0x36>
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d105      	bne.n	8007fe0 <HAL_DTS_GetTemperature+0x42>
    {
      hdts->State = HAL_DTS_STATE_READY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      return HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e057      	b.n	8008090 <HAL_DTS_GetTemperature+0xf2>
    }

    if ((hdts->Init.RefClock) == DTS_REFCLKSEL_LSE)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fe8:	d108      	bne.n	8007ffc <HAL_DTS_GetTemperature+0x5e>
    {
      freq_meas = (LSE_VALUE * samples) / (hdts->Init.SamplingTime >> DTS_CFGR1_TS1_SMP_TIME_Pos); /* On Hz */
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	03da      	lsls	r2, r3, #15
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	0c1b      	lsrs	r3, r3, #16
 8007ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ff8:	61fb      	str	r3, [r7, #28]
 8007ffa:	e00b      	b.n	8008014 <HAL_DTS_GetTemperature+0x76>
    }
    else
    {
      freq_meas = (HAL_RCCEx_GetD3PCLK1Freq() * (hdts->Init.SamplingTime >> DTS_CFGR1_TS1_SMP_TIME_Pos)) / samples; /* On Hz */
 8007ffc:	f003 fcdc 	bl	800b9b8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008000:	4602      	mov	r2, r0
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	691b      	ldr	r3, [r3, #16]
 8008006:	0c1b      	lsrs	r3, r3, #16
 8008008:	fb03 f202 	mul.w	r2, r3, r2
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008012:	61fb      	str	r3, [r7, #28]
    }

    /* Read factory settings */
    t0_temp = hdts->Instance->T0VALR1 >> DTS_T0VALR1_TS1_T0_Pos;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	0c1b      	lsrs	r3, r3, #16
 800801c:	61bb      	str	r3, [r7, #24]

    if (t0_temp == 0UL)
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d102      	bne.n	800802a <HAL_DTS_GetTemperature+0x8c>
    {
      t0_temp = DTS_FACTORY_TEMPERATURE1; /* 30 deg C */
 8008024:	231e      	movs	r3, #30
 8008026:	61bb      	str	r3, [r7, #24]
 8008028:	e00b      	b.n	8008042 <HAL_DTS_GetTemperature+0xa4>
    }
    else if (t0_temp == 1UL)
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d102      	bne.n	8008036 <HAL_DTS_GetTemperature+0x98>
    {
      t0_temp = DTS_FACTORY_TEMPERATURE2; /* 130 deg C */
 8008030:	2382      	movs	r3, #130	; 0x82
 8008032:	61bb      	str	r3, [r7, #24]
 8008034:	e005      	b.n	8008042 <HAL_DTS_GetTemperature+0xa4>
    }
    else
    {
      hdts->State = HAL_DTS_STATE_READY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2201      	movs	r2, #1
 800803a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e026      	b.n	8008090 <HAL_DTS_GetTemperature+0xf2>
    }

    t0_freq = (hdts->Instance->T0VALR1 & DTS_T0VALR1_TS1_FMT0) * 100UL; /* Hz */
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	b29b      	uxth	r3, r3
 800804a:	2264      	movs	r2, #100	; 0x64
 800804c:	fb02 f303 	mul.w	r3, r2, r3
 8008050:	613b      	str	r3, [r7, #16]

    ramp_coeff = hdts->Instance->RAMPVALR & DTS_RAMPVALR_TS1_RAMP_COEFF; /* deg C/Hz */
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	b29b      	uxth	r3, r3
 800805a:	60fb      	str	r3, [r7, #12]

    if (ramp_coeff == 0UL)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d105      	bne.n	800806e <HAL_DTS_GetTemperature+0xd0>
    {
      hdts->State = HAL_DTS_STATE_READY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      return HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	e010      	b.n	8008090 <HAL_DTS_GetTemperature+0xf2>
    }

    /* Figure out the temperature deg C */
    *Temperature = (int32_t)t0_temp + (((int32_t)freq_meas - (int32_t)t0_freq) / (int32_t)ramp_coeff);
 800806e:	69fa      	ldr	r2, [r7, #28]
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	1ad2      	subs	r2, r2, r3
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	fb92 f2f3 	sdiv	r2, r2, r3
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	441a      	add	r2, r3
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	601a      	str	r2, [r3, #0]

    hdts->State = HAL_DTS_STATE_READY;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  else
  {
    return HAL_BUSY;
  }

  return HAL_OK;
 800808a:	2300      	movs	r3, #0
 800808c:	e000      	b.n	8008090 <HAL_DTS_GetTemperature+0xf2>
    return HAL_BUSY;
 800808e:	2302      	movs	r3, #2
}
 8008090:	4618      	mov	r0, r3
 8008092:	3720      	adds	r7, #32
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b098      	sub	sp, #96	; 0x60
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80080a0:	4a84      	ldr	r2, [pc, #528]	; (80082b4 <HAL_FDCAN_Init+0x21c>)
 80080a2:	f107 030c 	add.w	r3, r7, #12
 80080a6:	4611      	mov	r1, r2
 80080a8:	224c      	movs	r2, #76	; 0x4c
 80080aa:	4618      	mov	r0, r3
 80080ac:	f009 fb4c 	bl	8011748 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d101      	bne.n	80080ba <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	e1c6      	b.n	8008448 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a7e      	ldr	r2, [pc, #504]	; (80082b8 <HAL_FDCAN_Init+0x220>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d106      	bne.n	80080d2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80080cc:	461a      	mov	r2, r3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d106      	bne.n	80080ec <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f7fa faa0 	bl	800262c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	699a      	ldr	r2, [r3, #24]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f022 0210 	bic.w	r2, r2, #16
 80080fa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80080fc:	f7fb f84c 	bl	8003198 <HAL_GetTick>
 8008100:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008102:	e014      	b.n	800812e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008104:	f7fb f848 	bl	8003198 <HAL_GetTick>
 8008108:	4602      	mov	r2, r0
 800810a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800810c:	1ad3      	subs	r3, r2, r3
 800810e:	2b0a      	cmp	r3, #10
 8008110:	d90d      	bls.n	800812e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008118:	f043 0201 	orr.w	r2, r3, #1
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2203      	movs	r2, #3
 8008126:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	e18c      	b.n	8008448 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	699b      	ldr	r3, [r3, #24]
 8008134:	f003 0308 	and.w	r3, r3, #8
 8008138:	2b08      	cmp	r3, #8
 800813a:	d0e3      	beq.n	8008104 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	699a      	ldr	r2, [r3, #24]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f042 0201 	orr.w	r2, r2, #1
 800814a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800814c:	f7fb f824 	bl	8003198 <HAL_GetTick>
 8008150:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008152:	e014      	b.n	800817e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008154:	f7fb f820 	bl	8003198 <HAL_GetTick>
 8008158:	4602      	mov	r2, r0
 800815a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800815c:	1ad3      	subs	r3, r2, r3
 800815e:	2b0a      	cmp	r3, #10
 8008160:	d90d      	bls.n	800817e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008168:	f043 0201 	orr.w	r2, r3, #1
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2203      	movs	r2, #3
 8008176:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e164      	b.n	8008448 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	699b      	ldr	r3, [r3, #24]
 8008184:	f003 0301 	and.w	r3, r3, #1
 8008188:	2b00      	cmp	r3, #0
 800818a:	d0e3      	beq.n	8008154 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	699a      	ldr	r2, [r3, #24]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f042 0202 	orr.w	r2, r2, #2
 800819a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	7c1b      	ldrb	r3, [r3, #16]
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d108      	bne.n	80081b6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	699a      	ldr	r2, [r3, #24]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081b2:	619a      	str	r2, [r3, #24]
 80081b4:	e007      	b.n	80081c6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	699a      	ldr	r2, [r3, #24]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081c4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	7c5b      	ldrb	r3, [r3, #17]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d108      	bne.n	80081e0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	699a      	ldr	r2, [r3, #24]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081dc:	619a      	str	r2, [r3, #24]
 80081de:	e007      	b.n	80081f0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	699a      	ldr	r2, [r3, #24]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80081ee:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	7c9b      	ldrb	r3, [r3, #18]
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d108      	bne.n	800820a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	699a      	ldr	r2, [r3, #24]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008206:	619a      	str	r2, [r3, #24]
 8008208:	e007      	b.n	800821a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	699a      	ldr	r2, [r3, #24]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008218:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	689a      	ldr	r2, [r3, #8]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	430a      	orrs	r2, r1
 800822e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	699a      	ldr	r2, [r3, #24]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800823e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	691a      	ldr	r2, [r3, #16]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f022 0210 	bic.w	r2, r2, #16
 800824e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d108      	bne.n	800826a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	699a      	ldr	r2, [r3, #24]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f042 0204 	orr.w	r2, r2, #4
 8008266:	619a      	str	r2, [r3, #24]
 8008268:	e030      	b.n	80082cc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d02c      	beq.n	80082cc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	2b02      	cmp	r3, #2
 8008278:	d020      	beq.n	80082bc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	699a      	ldr	r2, [r3, #24]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008288:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	691a      	ldr	r2, [r3, #16]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f042 0210 	orr.w	r2, r2, #16
 8008298:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	2b03      	cmp	r3, #3
 80082a0:	d114      	bne.n	80082cc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	699a      	ldr	r2, [r3, #24]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f042 0220 	orr.w	r2, r2, #32
 80082b0:	619a      	str	r2, [r3, #24]
 80082b2:	e00b      	b.n	80082cc <HAL_FDCAN_Init+0x234>
 80082b4:	08014e44 	.word	0x08014e44
 80082b8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	699a      	ldr	r2, [r3, #24]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f042 0220 	orr.w	r2, r2, #32
 80082ca:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	3b01      	subs	r3, #1
 80082d2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	69db      	ldr	r3, [r3, #28]
 80082d8:	3b01      	subs	r3, #1
 80082da:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80082dc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a1b      	ldr	r3, [r3, #32]
 80082e2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80082e4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	695b      	ldr	r3, [r3, #20]
 80082ec:	3b01      	subs	r3, #1
 80082ee:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80082f4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80082f6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008300:	d115      	bne.n	800832e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008306:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830c:	3b01      	subs	r3, #1
 800830e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008310:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008316:	3b01      	subs	r3, #1
 8008318:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800831a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008322:	3b01      	subs	r3, #1
 8008324:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800832a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800832c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00a      	beq.n	800834c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	430a      	orrs	r2, r1
 8008348:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008354:	4413      	add	r3, r2
 8008356:	2b00      	cmp	r3, #0
 8008358:	d011      	beq.n	800837e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008362:	f023 0107 	bic.w	r1, r3, #7
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	3360      	adds	r3, #96	; 0x60
 800836e:	443b      	add	r3, r7
 8008370:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	430a      	orrs	r2, r1
 800837a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008382:	2b00      	cmp	r3, #0
 8008384:	d011      	beq.n	80083aa <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800838e:	f023 0107 	bic.w	r1, r3, #7
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	3360      	adds	r3, #96	; 0x60
 800839a:	443b      	add	r3, r7
 800839c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	430a      	orrs	r2, r1
 80083a6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d012      	beq.n	80083d8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80083ba:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	3360      	adds	r3, #96	; 0x60
 80083c6:	443b      	add	r3, r7
 80083c8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80083cc:	011a      	lsls	r2, r3, #4
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	430a      	orrs	r2, r1
 80083d4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d012      	beq.n	8008406 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80083e8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	3360      	adds	r3, #96	; 0x60
 80083f4:	443b      	add	r3, r7
 80083f6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80083fa:	021a      	lsls	r2, r3, #8
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	430a      	orrs	r2, r1
 8008402:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a11      	ldr	r2, [pc, #68]	; (8008450 <HAL_FDCAN_Init+0x3b8>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d107      	bne.n	8008420 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	689a      	ldr	r2, [r3, #8]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	f022 0203 	bic.w	r2, r2, #3
 800841e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 f80b 	bl	8008454 <FDCAN_CalcultateRamBlockAddresses>
 800843e:	4603      	mov	r3, r0
 8008440:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8008444:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8008448:	4618      	mov	r0, r3
 800844a:	3760      	adds	r7, #96	; 0x60
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	4000a000 	.word	0x4000a000

08008454 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008454:	b480      	push	{r7}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008460:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800846a:	4ba7      	ldr	r3, [pc, #668]	; (8008708 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800846c:	4013      	ands	r3, r2
 800846e:	68ba      	ldr	r2, [r7, #8]
 8008470:	0091      	lsls	r1, r2, #2
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	6812      	ldr	r2, [r2, #0]
 8008476:	430b      	orrs	r3, r1
 8008478:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008484:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800848c:	041a      	lsls	r2, r3, #16
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	430a      	orrs	r2, r1
 8008494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	4413      	add	r3, r2
 80084a0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80084aa:	4b97      	ldr	r3, [pc, #604]	; (8008708 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80084ac:	4013      	ands	r3, r2
 80084ae:	68ba      	ldr	r2, [r7, #8]
 80084b0:	0091      	lsls	r1, r2, #2
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	6812      	ldr	r2, [r2, #0]
 80084b6:	430b      	orrs	r3, r1
 80084b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084c4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084cc:	041a      	lsls	r2, r3, #16
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	430a      	orrs	r2, r1
 80084d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084dc:	005b      	lsls	r3, r3, #1
 80084de:	68ba      	ldr	r2, [r7, #8]
 80084e0:	4413      	add	r3, r2
 80084e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80084ec:	4b86      	ldr	r3, [pc, #536]	; (8008708 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80084ee:	4013      	ands	r3, r2
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	0091      	lsls	r1, r2, #2
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	6812      	ldr	r2, [r2, #0]
 80084f8:	430b      	orrs	r3, r1
 80084fa:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008506:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850e:	041a      	lsls	r2, r3, #16
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	430a      	orrs	r2, r1
 8008516:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008522:	fb02 f303 	mul.w	r3, r2, r3
 8008526:	68ba      	ldr	r2, [r7, #8]
 8008528:	4413      	add	r3, r2
 800852a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008534:	4b74      	ldr	r3, [pc, #464]	; (8008708 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008536:	4013      	ands	r3, r2
 8008538:	68ba      	ldr	r2, [r7, #8]
 800853a:	0091      	lsls	r1, r2, #2
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	6812      	ldr	r2, [r2, #0]
 8008540:	430b      	orrs	r3, r1
 8008542:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800854e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008556:	041a      	lsls	r2, r3, #16
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	430a      	orrs	r2, r1
 800855e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800856a:	fb02 f303 	mul.w	r3, r2, r3
 800856e:	68ba      	ldr	r2, [r7, #8]
 8008570:	4413      	add	r3, r2
 8008572:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800857c:	4b62      	ldr	r3, [pc, #392]	; (8008708 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800857e:	4013      	ands	r3, r2
 8008580:	68ba      	ldr	r2, [r7, #8]
 8008582:	0091      	lsls	r1, r2, #2
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	6812      	ldr	r2, [r2, #0]
 8008588:	430b      	orrs	r3, r1
 800858a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008596:	fb02 f303 	mul.w	r3, r2, r3
 800859a:	68ba      	ldr	r2, [r7, #8]
 800859c:	4413      	add	r3, r2
 800859e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80085a8:	4b57      	ldr	r3, [pc, #348]	; (8008708 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80085aa:	4013      	ands	r3, r2
 80085ac:	68ba      	ldr	r2, [r7, #8]
 80085ae:	0091      	lsls	r1, r2, #2
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	6812      	ldr	r2, [r2, #0]
 80085b4:	430b      	orrs	r3, r1
 80085b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80085c2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ca:	041a      	lsls	r2, r3, #16
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	430a      	orrs	r2, r1
 80085d2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085da:	005b      	lsls	r3, r3, #1
 80085dc:	68ba      	ldr	r2, [r7, #8]
 80085de:	4413      	add	r3, r2
 80085e0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80085ea:	4b47      	ldr	r3, [pc, #284]	; (8008708 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80085ec:	4013      	ands	r3, r2
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	0091      	lsls	r1, r2, #2
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	6812      	ldr	r2, [r2, #0]
 80085f6:	430b      	orrs	r3, r1
 80085f8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008604:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800860c:	041a      	lsls	r2, r3, #16
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	430a      	orrs	r2, r1
 8008614:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008620:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008628:	061a      	lsls	r2, r3, #24
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	430a      	orrs	r2, r1
 8008630:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008638:	4b34      	ldr	r3, [pc, #208]	; (800870c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800863a:	4413      	add	r3, r2
 800863c:	009a      	lsls	r2, r3, #2
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	441a      	add	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800865a:	00db      	lsls	r3, r3, #3
 800865c:	441a      	add	r2, r3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866a:	6879      	ldr	r1, [r7, #4]
 800866c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800866e:	fb01 f303 	mul.w	r3, r1, r3
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	441a      	add	r2, r3
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008682:	6879      	ldr	r1, [r7, #4]
 8008684:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8008686:	fb01 f303 	mul.w	r3, r1, r3
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	441a      	add	r2, r3
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800869a:	6879      	ldr	r1, [r7, #4]
 800869c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800869e:	fb01 f303 	mul.w	r3, r1, r3
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	441a      	add	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086b6:	00db      	lsls	r3, r3, #3
 80086b8:	441a      	add	r2, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086ca:	6879      	ldr	r1, [r7, #4]
 80086cc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80086ce:	fb01 f303 	mul.w	r3, r1, r3
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	441a      	add	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086e6:	6879      	ldr	r1, [r7, #4]
 80086e8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80086ea:	fb01 f303 	mul.w	r3, r1, r3
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	441a      	add	r2, r3
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086fe:	4a04      	ldr	r2, [pc, #16]	; (8008710 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d915      	bls.n	8008730 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008704:	e006      	b.n	8008714 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8008706:	bf00      	nop
 8008708:	ffff0003 	.word	0xffff0003
 800870c:	10002b00 	.word	0x10002b00
 8008710:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800871a:	f043 0220 	orr.w	r2, r3, #32
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2203      	movs	r2, #3
 8008728:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	e010      	b.n	8008752 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008734:	60fb      	str	r3, [r7, #12]
 8008736:	e005      	b.n	8008744 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	3304      	adds	r3, #4
 8008742:	60fb      	str	r3, [r7, #12]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800874a:	68fa      	ldr	r2, [r7, #12]
 800874c:	429a      	cmp	r2, r3
 800874e:	d3f3      	bcc.n	8008738 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3714      	adds	r7, #20
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop

08008760 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008760:	b480      	push	{r7}
 8008762:	b089      	sub	sp, #36	; 0x24
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800876a:	2300      	movs	r3, #0
 800876c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800876e:	4b86      	ldr	r3, [pc, #536]	; (8008988 <HAL_GPIO_Init+0x228>)
 8008770:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008772:	e18c      	b.n	8008a8e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	2101      	movs	r1, #1
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	fa01 f303 	lsl.w	r3, r1, r3
 8008780:	4013      	ands	r3, r2
 8008782:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	2b00      	cmp	r3, #0
 8008788:	f000 817e 	beq.w	8008a88 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	f003 0303 	and.w	r3, r3, #3
 8008794:	2b01      	cmp	r3, #1
 8008796:	d005      	beq.n	80087a4 <HAL_GPIO_Init+0x44>
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	f003 0303 	and.w	r3, r3, #3
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d130      	bne.n	8008806 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	005b      	lsls	r3, r3, #1
 80087ae:	2203      	movs	r2, #3
 80087b0:	fa02 f303 	lsl.w	r3, r2, r3
 80087b4:	43db      	mvns	r3, r3
 80087b6:	69ba      	ldr	r2, [r7, #24]
 80087b8:	4013      	ands	r3, r2
 80087ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	68da      	ldr	r2, [r3, #12]
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	005b      	lsls	r3, r3, #1
 80087c4:	fa02 f303 	lsl.w	r3, r2, r3
 80087c8:	69ba      	ldr	r2, [r7, #24]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	69ba      	ldr	r2, [r7, #24]
 80087d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80087da:	2201      	movs	r2, #1
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	fa02 f303 	lsl.w	r3, r2, r3
 80087e2:	43db      	mvns	r3, r3
 80087e4:	69ba      	ldr	r2, [r7, #24]
 80087e6:	4013      	ands	r3, r2
 80087e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	091b      	lsrs	r3, r3, #4
 80087f0:	f003 0201 	and.w	r2, r3, #1
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	fa02 f303 	lsl.w	r3, r2, r3
 80087fa:	69ba      	ldr	r2, [r7, #24]
 80087fc:	4313      	orrs	r3, r2
 80087fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	69ba      	ldr	r2, [r7, #24]
 8008804:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	f003 0303 	and.w	r3, r3, #3
 800880e:	2b03      	cmp	r3, #3
 8008810:	d017      	beq.n	8008842 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	005b      	lsls	r3, r3, #1
 800881c:	2203      	movs	r2, #3
 800881e:	fa02 f303 	lsl.w	r3, r2, r3
 8008822:	43db      	mvns	r3, r3
 8008824:	69ba      	ldr	r2, [r7, #24]
 8008826:	4013      	ands	r3, r2
 8008828:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	689a      	ldr	r2, [r3, #8]
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	005b      	lsls	r3, r3, #1
 8008832:	fa02 f303 	lsl.w	r3, r2, r3
 8008836:	69ba      	ldr	r2, [r7, #24]
 8008838:	4313      	orrs	r3, r2
 800883a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	69ba      	ldr	r2, [r7, #24]
 8008840:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	f003 0303 	and.w	r3, r3, #3
 800884a:	2b02      	cmp	r3, #2
 800884c:	d123      	bne.n	8008896 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	08da      	lsrs	r2, r3, #3
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	3208      	adds	r2, #8
 8008856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800885a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	f003 0307 	and.w	r3, r3, #7
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	220f      	movs	r2, #15
 8008866:	fa02 f303 	lsl.w	r3, r2, r3
 800886a:	43db      	mvns	r3, r3
 800886c:	69ba      	ldr	r2, [r7, #24]
 800886e:	4013      	ands	r3, r2
 8008870:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	691a      	ldr	r2, [r3, #16]
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	f003 0307 	and.w	r3, r3, #7
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	fa02 f303 	lsl.w	r3, r2, r3
 8008882:	69ba      	ldr	r2, [r7, #24]
 8008884:	4313      	orrs	r3, r2
 8008886:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008888:	69fb      	ldr	r3, [r7, #28]
 800888a:	08da      	lsrs	r2, r3, #3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	3208      	adds	r2, #8
 8008890:	69b9      	ldr	r1, [r7, #24]
 8008892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	005b      	lsls	r3, r3, #1
 80088a0:	2203      	movs	r2, #3
 80088a2:	fa02 f303 	lsl.w	r3, r2, r3
 80088a6:	43db      	mvns	r3, r3
 80088a8:	69ba      	ldr	r2, [r7, #24]
 80088aa:	4013      	ands	r3, r2
 80088ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	f003 0203 	and.w	r2, r3, #3
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	005b      	lsls	r3, r3, #1
 80088ba:	fa02 f303 	lsl.w	r3, r2, r3
 80088be:	69ba      	ldr	r2, [r7, #24]
 80088c0:	4313      	orrs	r3, r2
 80088c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	69ba      	ldr	r2, [r7, #24]
 80088c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	f000 80d8 	beq.w	8008a88 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80088d8:	4b2c      	ldr	r3, [pc, #176]	; (800898c <HAL_GPIO_Init+0x22c>)
 80088da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80088de:	4a2b      	ldr	r2, [pc, #172]	; (800898c <HAL_GPIO_Init+0x22c>)
 80088e0:	f043 0302 	orr.w	r3, r3, #2
 80088e4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80088e8:	4b28      	ldr	r3, [pc, #160]	; (800898c <HAL_GPIO_Init+0x22c>)
 80088ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80088ee:	f003 0302 	and.w	r3, r3, #2
 80088f2:	60fb      	str	r3, [r7, #12]
 80088f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80088f6:	4a26      	ldr	r2, [pc, #152]	; (8008990 <HAL_GPIO_Init+0x230>)
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	089b      	lsrs	r3, r3, #2
 80088fc:	3302      	adds	r3, #2
 80088fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008902:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	f003 0303 	and.w	r3, r3, #3
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	220f      	movs	r2, #15
 800890e:	fa02 f303 	lsl.w	r3, r2, r3
 8008912:	43db      	mvns	r3, r3
 8008914:	69ba      	ldr	r2, [r7, #24]
 8008916:	4013      	ands	r3, r2
 8008918:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4a1d      	ldr	r2, [pc, #116]	; (8008994 <HAL_GPIO_Init+0x234>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d04a      	beq.n	80089b8 <HAL_GPIO_Init+0x258>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4a1c      	ldr	r2, [pc, #112]	; (8008998 <HAL_GPIO_Init+0x238>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d02b      	beq.n	8008982 <HAL_GPIO_Init+0x222>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a1b      	ldr	r2, [pc, #108]	; (800899c <HAL_GPIO_Init+0x23c>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d025      	beq.n	800897e <HAL_GPIO_Init+0x21e>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a1a      	ldr	r2, [pc, #104]	; (80089a0 <HAL_GPIO_Init+0x240>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d01f      	beq.n	800897a <HAL_GPIO_Init+0x21a>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4a19      	ldr	r2, [pc, #100]	; (80089a4 <HAL_GPIO_Init+0x244>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d019      	beq.n	8008976 <HAL_GPIO_Init+0x216>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4a18      	ldr	r2, [pc, #96]	; (80089a8 <HAL_GPIO_Init+0x248>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d013      	beq.n	8008972 <HAL_GPIO_Init+0x212>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4a17      	ldr	r2, [pc, #92]	; (80089ac <HAL_GPIO_Init+0x24c>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d00d      	beq.n	800896e <HAL_GPIO_Init+0x20e>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4a16      	ldr	r2, [pc, #88]	; (80089b0 <HAL_GPIO_Init+0x250>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d007      	beq.n	800896a <HAL_GPIO_Init+0x20a>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4a15      	ldr	r2, [pc, #84]	; (80089b4 <HAL_GPIO_Init+0x254>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d101      	bne.n	8008966 <HAL_GPIO_Init+0x206>
 8008962:	2309      	movs	r3, #9
 8008964:	e029      	b.n	80089ba <HAL_GPIO_Init+0x25a>
 8008966:	230a      	movs	r3, #10
 8008968:	e027      	b.n	80089ba <HAL_GPIO_Init+0x25a>
 800896a:	2307      	movs	r3, #7
 800896c:	e025      	b.n	80089ba <HAL_GPIO_Init+0x25a>
 800896e:	2306      	movs	r3, #6
 8008970:	e023      	b.n	80089ba <HAL_GPIO_Init+0x25a>
 8008972:	2305      	movs	r3, #5
 8008974:	e021      	b.n	80089ba <HAL_GPIO_Init+0x25a>
 8008976:	2304      	movs	r3, #4
 8008978:	e01f      	b.n	80089ba <HAL_GPIO_Init+0x25a>
 800897a:	2303      	movs	r3, #3
 800897c:	e01d      	b.n	80089ba <HAL_GPIO_Init+0x25a>
 800897e:	2302      	movs	r3, #2
 8008980:	e01b      	b.n	80089ba <HAL_GPIO_Init+0x25a>
 8008982:	2301      	movs	r3, #1
 8008984:	e019      	b.n	80089ba <HAL_GPIO_Init+0x25a>
 8008986:	bf00      	nop
 8008988:	58000080 	.word	0x58000080
 800898c:	58024400 	.word	0x58024400
 8008990:	58000400 	.word	0x58000400
 8008994:	58020000 	.word	0x58020000
 8008998:	58020400 	.word	0x58020400
 800899c:	58020800 	.word	0x58020800
 80089a0:	58020c00 	.word	0x58020c00
 80089a4:	58021000 	.word	0x58021000
 80089a8:	58021400 	.word	0x58021400
 80089ac:	58021800 	.word	0x58021800
 80089b0:	58021c00 	.word	0x58021c00
 80089b4:	58022400 	.word	0x58022400
 80089b8:	2300      	movs	r3, #0
 80089ba:	69fa      	ldr	r2, [r7, #28]
 80089bc:	f002 0203 	and.w	r2, r2, #3
 80089c0:	0092      	lsls	r2, r2, #2
 80089c2:	4093      	lsls	r3, r2
 80089c4:	69ba      	ldr	r2, [r7, #24]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80089ca:	4938      	ldr	r1, [pc, #224]	; (8008aac <HAL_GPIO_Init+0x34c>)
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	089b      	lsrs	r3, r3, #2
 80089d0:	3302      	adds	r3, #2
 80089d2:	69ba      	ldr	r2, [r7, #24]
 80089d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80089d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	43db      	mvns	r3, r3
 80089e4:	69ba      	ldr	r2, [r7, #24]
 80089e6:	4013      	ands	r3, r2
 80089e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d003      	beq.n	80089fe <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80089f6:	69ba      	ldr	r2, [r7, #24]
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80089fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	43db      	mvns	r3, r3
 8008a12:	69ba      	ldr	r2, [r7, #24]
 8008a14:	4013      	ands	r3, r2
 8008a16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d003      	beq.n	8008a2c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008a24:	69ba      	ldr	r2, [r7, #24]
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008a2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	43db      	mvns	r3, r3
 8008a3e:	69ba      	ldr	r2, [r7, #24]
 8008a40:	4013      	ands	r3, r2
 8008a42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d003      	beq.n	8008a58 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008a50:	69ba      	ldr	r2, [r7, #24]
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	69ba      	ldr	r2, [r7, #24]
 8008a5c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	43db      	mvns	r3, r3
 8008a68:	69ba      	ldr	r2, [r7, #24]
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d003      	beq.n	8008a82 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008a7a:	69ba      	ldr	r2, [r7, #24]
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	69ba      	ldr	r2, [r7, #24]
 8008a86:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	fa22 f303 	lsr.w	r3, r2, r3
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f47f ae6b 	bne.w	8008774 <HAL_GPIO_Init+0x14>
  }
}
 8008a9e:	bf00      	nop
 8008aa0:	bf00      	nop
 8008aa2:	3724      	adds	r7, #36	; 0x24
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr
 8008aac:	58000400 	.word	0x58000400

08008ab0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	460b      	mov	r3, r1
 8008aba:	807b      	strh	r3, [r7, #2]
 8008abc:	4613      	mov	r3, r2
 8008abe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008ac0:	787b      	ldrb	r3, [r7, #1]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d003      	beq.n	8008ace <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008ac6:	887a      	ldrh	r2, [r7, #2]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008acc:	e003      	b.n	8008ad6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008ace:	887b      	ldrh	r3, [r7, #2]
 8008ad0:	041a      	lsls	r2, r3, #16
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	619a      	str	r2, [r3, #24]
}
 8008ad6:	bf00      	nop
 8008ad8:	370c      	adds	r7, #12
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr

08008ae2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008ae2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ae4:	b08f      	sub	sp, #60	; 0x3c
 8008ae6:	af0a      	add	r7, sp, #40	; 0x28
 8008ae8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d101      	bne.n	8008af4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e116      	b.n	8008d22 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d106      	bne.n	8008b14 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f7fa f86c 	bl	8002bec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2203      	movs	r2, #3
 8008b18:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d102      	bne.n	8008b2e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4618      	mov	r0, r3
 8008b34:	f007 fb9a 	bl	801026c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	603b      	str	r3, [r7, #0]
 8008b3e:	687e      	ldr	r6, [r7, #4]
 8008b40:	466d      	mov	r5, sp
 8008b42:	f106 0410 	add.w	r4, r6, #16
 8008b46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008b48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008b4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008b4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008b4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008b52:	e885 0003 	stmia.w	r5, {r0, r1}
 8008b56:	1d33      	adds	r3, r6, #4
 8008b58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008b5a:	6838      	ldr	r0, [r7, #0]
 8008b5c:	f007 fb18 	bl	8010190 <USB_CoreInit>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d005      	beq.n	8008b72 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2202      	movs	r2, #2
 8008b6a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e0d7      	b.n	8008d22 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2100      	movs	r1, #0
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f007 fb88 	bl	801028e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b7e:	2300      	movs	r3, #0
 8008b80:	73fb      	strb	r3, [r7, #15]
 8008b82:	e04a      	b.n	8008c1a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008b84:	7bfa      	ldrb	r2, [r7, #15]
 8008b86:	6879      	ldr	r1, [r7, #4]
 8008b88:	4613      	mov	r3, r2
 8008b8a:	00db      	lsls	r3, r3, #3
 8008b8c:	4413      	add	r3, r2
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	440b      	add	r3, r1
 8008b92:	333d      	adds	r3, #61	; 0x3d
 8008b94:	2201      	movs	r2, #1
 8008b96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008b98:	7bfa      	ldrb	r2, [r7, #15]
 8008b9a:	6879      	ldr	r1, [r7, #4]
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	00db      	lsls	r3, r3, #3
 8008ba0:	4413      	add	r3, r2
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	440b      	add	r3, r1
 8008ba6:	333c      	adds	r3, #60	; 0x3c
 8008ba8:	7bfa      	ldrb	r2, [r7, #15]
 8008baa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008bac:	7bfa      	ldrb	r2, [r7, #15]
 8008bae:	7bfb      	ldrb	r3, [r7, #15]
 8008bb0:	b298      	uxth	r0, r3
 8008bb2:	6879      	ldr	r1, [r7, #4]
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	00db      	lsls	r3, r3, #3
 8008bb8:	4413      	add	r3, r2
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	440b      	add	r3, r1
 8008bbe:	3356      	adds	r3, #86	; 0x56
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008bc4:	7bfa      	ldrb	r2, [r7, #15]
 8008bc6:	6879      	ldr	r1, [r7, #4]
 8008bc8:	4613      	mov	r3, r2
 8008bca:	00db      	lsls	r3, r3, #3
 8008bcc:	4413      	add	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	440b      	add	r3, r1
 8008bd2:	3340      	adds	r3, #64	; 0x40
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008bd8:	7bfa      	ldrb	r2, [r7, #15]
 8008bda:	6879      	ldr	r1, [r7, #4]
 8008bdc:	4613      	mov	r3, r2
 8008bde:	00db      	lsls	r3, r3, #3
 8008be0:	4413      	add	r3, r2
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	440b      	add	r3, r1
 8008be6:	3344      	adds	r3, #68	; 0x44
 8008be8:	2200      	movs	r2, #0
 8008bea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008bec:	7bfa      	ldrb	r2, [r7, #15]
 8008bee:	6879      	ldr	r1, [r7, #4]
 8008bf0:	4613      	mov	r3, r2
 8008bf2:	00db      	lsls	r3, r3, #3
 8008bf4:	4413      	add	r3, r2
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	440b      	add	r3, r1
 8008bfa:	3348      	adds	r3, #72	; 0x48
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008c00:	7bfa      	ldrb	r2, [r7, #15]
 8008c02:	6879      	ldr	r1, [r7, #4]
 8008c04:	4613      	mov	r3, r2
 8008c06:	00db      	lsls	r3, r3, #3
 8008c08:	4413      	add	r3, r2
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	440b      	add	r3, r1
 8008c0e:	334c      	adds	r3, #76	; 0x4c
 8008c10:	2200      	movs	r2, #0
 8008c12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c14:	7bfb      	ldrb	r3, [r7, #15]
 8008c16:	3301      	adds	r3, #1
 8008c18:	73fb      	strb	r3, [r7, #15]
 8008c1a:	7bfa      	ldrb	r2, [r7, #15]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d3af      	bcc.n	8008b84 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c24:	2300      	movs	r3, #0
 8008c26:	73fb      	strb	r3, [r7, #15]
 8008c28:	e044      	b.n	8008cb4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008c2a:	7bfa      	ldrb	r2, [r7, #15]
 8008c2c:	6879      	ldr	r1, [r7, #4]
 8008c2e:	4613      	mov	r3, r2
 8008c30:	00db      	lsls	r3, r3, #3
 8008c32:	4413      	add	r3, r2
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	440b      	add	r3, r1
 8008c38:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008c40:	7bfa      	ldrb	r2, [r7, #15]
 8008c42:	6879      	ldr	r1, [r7, #4]
 8008c44:	4613      	mov	r3, r2
 8008c46:	00db      	lsls	r3, r3, #3
 8008c48:	4413      	add	r3, r2
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	440b      	add	r3, r1
 8008c4e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008c52:	7bfa      	ldrb	r2, [r7, #15]
 8008c54:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008c56:	7bfa      	ldrb	r2, [r7, #15]
 8008c58:	6879      	ldr	r1, [r7, #4]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	00db      	lsls	r3, r3, #3
 8008c5e:	4413      	add	r3, r2
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	440b      	add	r3, r1
 8008c64:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008c68:	2200      	movs	r2, #0
 8008c6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008c6c:	7bfa      	ldrb	r2, [r7, #15]
 8008c6e:	6879      	ldr	r1, [r7, #4]
 8008c70:	4613      	mov	r3, r2
 8008c72:	00db      	lsls	r3, r3, #3
 8008c74:	4413      	add	r3, r2
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	440b      	add	r3, r1
 8008c7a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8008c7e:	2200      	movs	r2, #0
 8008c80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008c82:	7bfa      	ldrb	r2, [r7, #15]
 8008c84:	6879      	ldr	r1, [r7, #4]
 8008c86:	4613      	mov	r3, r2
 8008c88:	00db      	lsls	r3, r3, #3
 8008c8a:	4413      	add	r3, r2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	440b      	add	r3, r1
 8008c90:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008c94:	2200      	movs	r2, #0
 8008c96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008c98:	7bfa      	ldrb	r2, [r7, #15]
 8008c9a:	6879      	ldr	r1, [r7, #4]
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	00db      	lsls	r3, r3, #3
 8008ca0:	4413      	add	r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	440b      	add	r3, r1
 8008ca6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008caa:	2200      	movs	r2, #0
 8008cac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008cae:	7bfb      	ldrb	r3, [r7, #15]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	73fb      	strb	r3, [r7, #15]
 8008cb4:	7bfa      	ldrb	r2, [r7, #15]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d3b5      	bcc.n	8008c2a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	603b      	str	r3, [r7, #0]
 8008cc4:	687e      	ldr	r6, [r7, #4]
 8008cc6:	466d      	mov	r5, sp
 8008cc8:	f106 0410 	add.w	r4, r6, #16
 8008ccc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008cce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008cd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008cd4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008cd8:	e885 0003 	stmia.w	r5, {r0, r1}
 8008cdc:	1d33      	adds	r3, r6, #4
 8008cde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ce0:	6838      	ldr	r0, [r7, #0]
 8008ce2:	f007 fb21 	bl	8010328 <USB_DevInit>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d005      	beq.n	8008cf8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2202      	movs	r2, #2
 8008cf0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e014      	b.n	8008d22 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d102      	bne.n	8008d16 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 f80b 	bl	8008d2c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f007 fcdf 	bl	80106de <USB_DevDisconnect>

  return HAL_OK;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3714      	adds	r7, #20
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008d2c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	699b      	ldr	r3, [r3, #24]
 8008d4e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d5a:	4b05      	ldr	r3, [pc, #20]	; (8008d70 <HAL_PCDEx_ActivateLPM+0x44>)
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	68fa      	ldr	r2, [r7, #12]
 8008d60:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3714      	adds	r7, #20
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr
 8008d70:	10000003 	.word	0x10000003

08008d74 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008d7c:	4b19      	ldr	r3, [pc, #100]	; (8008de4 <HAL_PWREx_ConfigSupply+0x70>)
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	f003 0304 	and.w	r3, r3, #4
 8008d84:	2b04      	cmp	r3, #4
 8008d86:	d00a      	beq.n	8008d9e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008d88:	4b16      	ldr	r3, [pc, #88]	; (8008de4 <HAL_PWREx_ConfigSupply+0x70>)
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	f003 0307 	and.w	r3, r3, #7
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d001      	beq.n	8008d9a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	e01f      	b.n	8008dda <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	e01d      	b.n	8008dda <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008d9e:	4b11      	ldr	r3, [pc, #68]	; (8008de4 <HAL_PWREx_ConfigSupply+0x70>)
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	f023 0207 	bic.w	r2, r3, #7
 8008da6:	490f      	ldr	r1, [pc, #60]	; (8008de4 <HAL_PWREx_ConfigSupply+0x70>)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008dae:	f7fa f9f3 	bl	8003198 <HAL_GetTick>
 8008db2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008db4:	e009      	b.n	8008dca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008db6:	f7fa f9ef 	bl	8003198 <HAL_GetTick>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	1ad3      	subs	r3, r2, r3
 8008dc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008dc4:	d901      	bls.n	8008dca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e007      	b.n	8008dda <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008dca:	4b06      	ldr	r3, [pc, #24]	; (8008de4 <HAL_PWREx_ConfigSupply+0x70>)
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dd6:	d1ee      	bne.n	8008db6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	58024800 	.word	0x58024800

08008de8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008de8:	b480      	push	{r7}
 8008dea:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008dec:	4b05      	ldr	r3, [pc, #20]	; (8008e04 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	4a04      	ldr	r2, [pc, #16]	; (8008e04 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008df2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008df6:	60d3      	str	r3, [r2, #12]
}
 8008df8:	bf00      	nop
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	58024800 	.word	0x58024800

08008e08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b08c      	sub	sp, #48	; 0x30
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d101      	bne.n	8008e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008e16:	2301      	movs	r3, #1
 8008e18:	e3c8      	b.n	80095ac <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f003 0301 	and.w	r3, r3, #1
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f000 8087 	beq.w	8008f36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e28:	4b88      	ldr	r3, [pc, #544]	; (800904c <HAL_RCC_OscConfig+0x244>)
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e30:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e32:	4b86      	ldr	r3, [pc, #536]	; (800904c <HAL_RCC_OscConfig+0x244>)
 8008e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e36:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3a:	2b10      	cmp	r3, #16
 8008e3c:	d007      	beq.n	8008e4e <HAL_RCC_OscConfig+0x46>
 8008e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e40:	2b18      	cmp	r3, #24
 8008e42:	d110      	bne.n	8008e66 <HAL_RCC_OscConfig+0x5e>
 8008e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e46:	f003 0303 	and.w	r3, r3, #3
 8008e4a:	2b02      	cmp	r3, #2
 8008e4c:	d10b      	bne.n	8008e66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e4e:	4b7f      	ldr	r3, [pc, #508]	; (800904c <HAL_RCC_OscConfig+0x244>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d06c      	beq.n	8008f34 <HAL_RCC_OscConfig+0x12c>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d168      	bne.n	8008f34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	e3a2      	b.n	80095ac <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e6e:	d106      	bne.n	8008e7e <HAL_RCC_OscConfig+0x76>
 8008e70:	4b76      	ldr	r3, [pc, #472]	; (800904c <HAL_RCC_OscConfig+0x244>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a75      	ldr	r2, [pc, #468]	; (800904c <HAL_RCC_OscConfig+0x244>)
 8008e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e7a:	6013      	str	r3, [r2, #0]
 8008e7c:	e02e      	b.n	8008edc <HAL_RCC_OscConfig+0xd4>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d10c      	bne.n	8008ea0 <HAL_RCC_OscConfig+0x98>
 8008e86:	4b71      	ldr	r3, [pc, #452]	; (800904c <HAL_RCC_OscConfig+0x244>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a70      	ldr	r2, [pc, #448]	; (800904c <HAL_RCC_OscConfig+0x244>)
 8008e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e90:	6013      	str	r3, [r2, #0]
 8008e92:	4b6e      	ldr	r3, [pc, #440]	; (800904c <HAL_RCC_OscConfig+0x244>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a6d      	ldr	r2, [pc, #436]	; (800904c <HAL_RCC_OscConfig+0x244>)
 8008e98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e9c:	6013      	str	r3, [r2, #0]
 8008e9e:	e01d      	b.n	8008edc <HAL_RCC_OscConfig+0xd4>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ea8:	d10c      	bne.n	8008ec4 <HAL_RCC_OscConfig+0xbc>
 8008eaa:	4b68      	ldr	r3, [pc, #416]	; (800904c <HAL_RCC_OscConfig+0x244>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a67      	ldr	r2, [pc, #412]	; (800904c <HAL_RCC_OscConfig+0x244>)
 8008eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008eb4:	6013      	str	r3, [r2, #0]
 8008eb6:	4b65      	ldr	r3, [pc, #404]	; (800904c <HAL_RCC_OscConfig+0x244>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a64      	ldr	r2, [pc, #400]	; (800904c <HAL_RCC_OscConfig+0x244>)
 8008ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ec0:	6013      	str	r3, [r2, #0]
 8008ec2:	e00b      	b.n	8008edc <HAL_RCC_OscConfig+0xd4>
 8008ec4:	4b61      	ldr	r3, [pc, #388]	; (800904c <HAL_RCC_OscConfig+0x244>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a60      	ldr	r2, [pc, #384]	; (800904c <HAL_RCC_OscConfig+0x244>)
 8008eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ece:	6013      	str	r3, [r2, #0]
 8008ed0:	4b5e      	ldr	r3, [pc, #376]	; (800904c <HAL_RCC_OscConfig+0x244>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a5d      	ldr	r2, [pc, #372]	; (800904c <HAL_RCC_OscConfig+0x244>)
 8008ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d013      	beq.n	8008f0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ee4:	f7fa f958 	bl	8003198 <HAL_GetTick>
 8008ee8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008eea:	e008      	b.n	8008efe <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008eec:	f7fa f954 	bl	8003198 <HAL_GetTick>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef4:	1ad3      	subs	r3, r2, r3
 8008ef6:	2b64      	cmp	r3, #100	; 0x64
 8008ef8:	d901      	bls.n	8008efe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008efa:	2303      	movs	r3, #3
 8008efc:	e356      	b.n	80095ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008efe:	4b53      	ldr	r3, [pc, #332]	; (800904c <HAL_RCC_OscConfig+0x244>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d0f0      	beq.n	8008eec <HAL_RCC_OscConfig+0xe4>
 8008f0a:	e014      	b.n	8008f36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f0c:	f7fa f944 	bl	8003198 <HAL_GetTick>
 8008f10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008f12:	e008      	b.n	8008f26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f14:	f7fa f940 	bl	8003198 <HAL_GetTick>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1c:	1ad3      	subs	r3, r2, r3
 8008f1e:	2b64      	cmp	r3, #100	; 0x64
 8008f20:	d901      	bls.n	8008f26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008f22:	2303      	movs	r3, #3
 8008f24:	e342      	b.n	80095ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008f26:	4b49      	ldr	r3, [pc, #292]	; (800904c <HAL_RCC_OscConfig+0x244>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d1f0      	bne.n	8008f14 <HAL_RCC_OscConfig+0x10c>
 8008f32:	e000      	b.n	8008f36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f003 0302 	and.w	r3, r3, #2
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	f000 808c 	beq.w	800905c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f44:	4b41      	ldr	r3, [pc, #260]	; (800904c <HAL_RCC_OscConfig+0x244>)
 8008f46:	691b      	ldr	r3, [r3, #16]
 8008f48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f4c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008f4e:	4b3f      	ldr	r3, [pc, #252]	; (800904c <HAL_RCC_OscConfig+0x244>)
 8008f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f52:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008f54:	6a3b      	ldr	r3, [r7, #32]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d007      	beq.n	8008f6a <HAL_RCC_OscConfig+0x162>
 8008f5a:	6a3b      	ldr	r3, [r7, #32]
 8008f5c:	2b18      	cmp	r3, #24
 8008f5e:	d137      	bne.n	8008fd0 <HAL_RCC_OscConfig+0x1c8>
 8008f60:	69fb      	ldr	r3, [r7, #28]
 8008f62:	f003 0303 	and.w	r3, r3, #3
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d132      	bne.n	8008fd0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f6a:	4b38      	ldr	r3, [pc, #224]	; (800904c <HAL_RCC_OscConfig+0x244>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f003 0304 	and.w	r3, r3, #4
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d005      	beq.n	8008f82 <HAL_RCC_OscConfig+0x17a>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d101      	bne.n	8008f82 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e314      	b.n	80095ac <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008f82:	4b32      	ldr	r3, [pc, #200]	; (800904c <HAL_RCC_OscConfig+0x244>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f023 0219 	bic.w	r2, r3, #25
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	492f      	ldr	r1, [pc, #188]	; (800904c <HAL_RCC_OscConfig+0x244>)
 8008f90:	4313      	orrs	r3, r2
 8008f92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f94:	f7fa f900 	bl	8003198 <HAL_GetTick>
 8008f98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f9a:	e008      	b.n	8008fae <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f9c:	f7fa f8fc 	bl	8003198 <HAL_GetTick>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa4:	1ad3      	subs	r3, r2, r3
 8008fa6:	2b02      	cmp	r3, #2
 8008fa8:	d901      	bls.n	8008fae <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008faa:	2303      	movs	r3, #3
 8008fac:	e2fe      	b.n	80095ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008fae:	4b27      	ldr	r3, [pc, #156]	; (800904c <HAL_RCC_OscConfig+0x244>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f003 0304 	and.w	r3, r3, #4
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d0f0      	beq.n	8008f9c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fba:	4b24      	ldr	r3, [pc, #144]	; (800904c <HAL_RCC_OscConfig+0x244>)
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	061b      	lsls	r3, r3, #24
 8008fc8:	4920      	ldr	r1, [pc, #128]	; (800904c <HAL_RCC_OscConfig+0x244>)
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fce:	e045      	b.n	800905c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d026      	beq.n	8009026 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008fd8:	4b1c      	ldr	r3, [pc, #112]	; (800904c <HAL_RCC_OscConfig+0x244>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f023 0219 	bic.w	r2, r3, #25
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	4919      	ldr	r1, [pc, #100]	; (800904c <HAL_RCC_OscConfig+0x244>)
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fea:	f7fa f8d5 	bl	8003198 <HAL_GetTick>
 8008fee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ff0:	e008      	b.n	8009004 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ff2:	f7fa f8d1 	bl	8003198 <HAL_GetTick>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffa:	1ad3      	subs	r3, r2, r3
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	d901      	bls.n	8009004 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009000:	2303      	movs	r3, #3
 8009002:	e2d3      	b.n	80095ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009004:	4b11      	ldr	r3, [pc, #68]	; (800904c <HAL_RCC_OscConfig+0x244>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f003 0304 	and.w	r3, r3, #4
 800900c:	2b00      	cmp	r3, #0
 800900e:	d0f0      	beq.n	8008ff2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009010:	4b0e      	ldr	r3, [pc, #56]	; (800904c <HAL_RCC_OscConfig+0x244>)
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	691b      	ldr	r3, [r3, #16]
 800901c:	061b      	lsls	r3, r3, #24
 800901e:	490b      	ldr	r1, [pc, #44]	; (800904c <HAL_RCC_OscConfig+0x244>)
 8009020:	4313      	orrs	r3, r2
 8009022:	604b      	str	r3, [r1, #4]
 8009024:	e01a      	b.n	800905c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009026:	4b09      	ldr	r3, [pc, #36]	; (800904c <HAL_RCC_OscConfig+0x244>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a08      	ldr	r2, [pc, #32]	; (800904c <HAL_RCC_OscConfig+0x244>)
 800902c:	f023 0301 	bic.w	r3, r3, #1
 8009030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009032:	f7fa f8b1 	bl	8003198 <HAL_GetTick>
 8009036:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009038:	e00a      	b.n	8009050 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800903a:	f7fa f8ad 	bl	8003198 <HAL_GetTick>
 800903e:	4602      	mov	r2, r0
 8009040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009042:	1ad3      	subs	r3, r2, r3
 8009044:	2b02      	cmp	r3, #2
 8009046:	d903      	bls.n	8009050 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009048:	2303      	movs	r3, #3
 800904a:	e2af      	b.n	80095ac <HAL_RCC_OscConfig+0x7a4>
 800904c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009050:	4b96      	ldr	r3, [pc, #600]	; (80092ac <HAL_RCC_OscConfig+0x4a4>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f003 0304 	and.w	r3, r3, #4
 8009058:	2b00      	cmp	r3, #0
 800905a:	d1ee      	bne.n	800903a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f003 0310 	and.w	r3, r3, #16
 8009064:	2b00      	cmp	r3, #0
 8009066:	d06a      	beq.n	800913e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009068:	4b90      	ldr	r3, [pc, #576]	; (80092ac <HAL_RCC_OscConfig+0x4a4>)
 800906a:	691b      	ldr	r3, [r3, #16]
 800906c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009070:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009072:	4b8e      	ldr	r3, [pc, #568]	; (80092ac <HAL_RCC_OscConfig+0x4a4>)
 8009074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009076:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	2b08      	cmp	r3, #8
 800907c:	d007      	beq.n	800908e <HAL_RCC_OscConfig+0x286>
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	2b18      	cmp	r3, #24
 8009082:	d11b      	bne.n	80090bc <HAL_RCC_OscConfig+0x2b4>
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	f003 0303 	and.w	r3, r3, #3
 800908a:	2b01      	cmp	r3, #1
 800908c:	d116      	bne.n	80090bc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800908e:	4b87      	ldr	r3, [pc, #540]	; (80092ac <HAL_RCC_OscConfig+0x4a4>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009096:	2b00      	cmp	r3, #0
 8009098:	d005      	beq.n	80090a6 <HAL_RCC_OscConfig+0x29e>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	69db      	ldr	r3, [r3, #28]
 800909e:	2b80      	cmp	r3, #128	; 0x80
 80090a0:	d001      	beq.n	80090a6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	e282      	b.n	80095ac <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80090a6:	4b81      	ldr	r3, [pc, #516]	; (80092ac <HAL_RCC_OscConfig+0x4a4>)
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6a1b      	ldr	r3, [r3, #32]
 80090b2:	061b      	lsls	r3, r3, #24
 80090b4:	497d      	ldr	r1, [pc, #500]	; (80092ac <HAL_RCC_OscConfig+0x4a4>)
 80090b6:	4313      	orrs	r3, r2
 80090b8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80090ba:	e040      	b.n	800913e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	69db      	ldr	r3, [r3, #28]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d023      	beq.n	800910c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80090c4:	4b79      	ldr	r3, [pc, #484]	; (80092ac <HAL_RCC_OscConfig+0x4a4>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a78      	ldr	r2, [pc, #480]	; (80092ac <HAL_RCC_OscConfig+0x4a4>)
 80090ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090d0:	f7fa f862 	bl	8003198 <HAL_GetTick>
 80090d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80090d6:	e008      	b.n	80090ea <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80090d8:	f7fa f85e 	bl	8003198 <HAL_GetTick>
 80090dc:	4602      	mov	r2, r0
 80090de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e0:	1ad3      	subs	r3, r2, r3
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d901      	bls.n	80090ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80090e6:	2303      	movs	r3, #3
 80090e8:	e260      	b.n	80095ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80090ea:	4b70      	ldr	r3, [pc, #448]	; (80092ac <HAL_RCC_OscConfig+0x4a4>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d0f0      	beq.n	80090d8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80090f6:	4b6d      	ldr	r3, [pc, #436]	; (80092ac <HAL_RCC_OscConfig+0x4a4>)
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6a1b      	ldr	r3, [r3, #32]
 8009102:	061b      	lsls	r3, r3, #24
 8009104:	4969      	ldr	r1, [pc, #420]	; (80092ac <HAL_RCC_OscConfig+0x4a4>)
 8009106:	4313      	orrs	r3, r2
 8009108:	60cb      	str	r3, [r1, #12]
 800910a:	e018      	b.n	800913e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800910c:	4b67      	ldr	r3, [pc, #412]	; (80092ac <HAL_RCC_OscConfig+0x4a4>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a66      	ldr	r2, [pc, #408]	; (80092ac <HAL_RCC_OscConfig+0x4a4>)
 8009112:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009118:	f7fa f83e 	bl	8003198 <HAL_GetTick>
 800911c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800911e:	e008      	b.n	8009132 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009120:	f7fa f83a 	bl	8003198 <HAL_GetTick>
 8009124:	4602      	mov	r2, r0
 8009126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009128:	1ad3      	subs	r3, r2, r3
 800912a:	2b02      	cmp	r3, #2
 800912c:	d901      	bls.n	8009132 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800912e:	2303      	movs	r3, #3
 8009130:	e23c      	b.n	80095ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009132:	4b5e      	ldr	r3, [pc, #376]	; (80092ac <HAL_RCC_OscConfig+0x4a4>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800913a:	2b00      	cmp	r3, #0
 800913c:	d1f0      	bne.n	8009120 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f003 0308 	and.w	r3, r3, #8
 8009146:	2b00      	cmp	r3, #0
 8009148:	d036      	beq.n	80091b8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	695b      	ldr	r3, [r3, #20]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d019      	beq.n	8009186 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009152:	4b56      	ldr	r3, [pc, #344]	; (80092ac <HAL_RCC_OscConfig+0x4a4>)
 8009154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009156:	4a55      	ldr	r2, [pc, #340]	; (80092ac <HAL_RCC_OscConfig+0x4a4>)
 8009158:	f043 0301 	orr.w	r3, r3, #1
 800915c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800915e:	f7fa f81b 	bl	8003198 <HAL_GetTick>
 8009162:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009164:	e008      	b.n	8009178 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009166:	f7fa f817 	bl	8003198 <HAL_GetTick>
 800916a:	4602      	mov	r2, r0
 800916c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916e:	1ad3      	subs	r3, r2, r3
 8009170:	2b02      	cmp	r3, #2
 8009172:	d901      	bls.n	8009178 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009174:	2303      	movs	r3, #3
 8009176:	e219      	b.n	80095ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009178:	4b4c      	ldr	r3, [pc, #304]	; (80092ac <HAL_RCC_OscConfig+0x4a4>)
 800917a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800917c:	f003 0302 	and.w	r3, r3, #2
 8009180:	2b00      	cmp	r3, #0
 8009182:	d0f0      	beq.n	8009166 <HAL_RCC_OscConfig+0x35e>
 8009184:	e018      	b.n	80091b8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009186:	4b49      	ldr	r3, [pc, #292]	; (80092ac <HAL_RCC_OscConfig+0x4a4>)
 8009188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800918a:	4a48      	ldr	r2, [pc, #288]	; (80092ac <HAL_RCC_OscConfig+0x4a4>)
 800918c:	f023 0301 	bic.w	r3, r3, #1
 8009190:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009192:	f7fa f801 	bl	8003198 <HAL_GetTick>
 8009196:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009198:	e008      	b.n	80091ac <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800919a:	f7f9 fffd 	bl	8003198 <HAL_GetTick>
 800919e:	4602      	mov	r2, r0
 80091a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a2:	1ad3      	subs	r3, r2, r3
 80091a4:	2b02      	cmp	r3, #2
 80091a6:	d901      	bls.n	80091ac <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80091a8:	2303      	movs	r3, #3
 80091aa:	e1ff      	b.n	80095ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80091ac:	4b3f      	ldr	r3, [pc, #252]	; (80092ac <HAL_RCC_OscConfig+0x4a4>)
 80091ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091b0:	f003 0302 	and.w	r3, r3, #2
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d1f0      	bne.n	800919a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f003 0320 	and.w	r3, r3, #32
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d036      	beq.n	8009232 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	699b      	ldr	r3, [r3, #24]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d019      	beq.n	8009200 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80091cc:	4b37      	ldr	r3, [pc, #220]	; (80092ac <HAL_RCC_OscConfig+0x4a4>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a36      	ldr	r2, [pc, #216]	; (80092ac <HAL_RCC_OscConfig+0x4a4>)
 80091d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80091d6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80091d8:	f7f9 ffde 	bl	8003198 <HAL_GetTick>
 80091dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80091de:	e008      	b.n	80091f2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80091e0:	f7f9 ffda 	bl	8003198 <HAL_GetTick>
 80091e4:	4602      	mov	r2, r0
 80091e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e8:	1ad3      	subs	r3, r2, r3
 80091ea:	2b02      	cmp	r3, #2
 80091ec:	d901      	bls.n	80091f2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80091ee:	2303      	movs	r3, #3
 80091f0:	e1dc      	b.n	80095ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80091f2:	4b2e      	ldr	r3, [pc, #184]	; (80092ac <HAL_RCC_OscConfig+0x4a4>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d0f0      	beq.n	80091e0 <HAL_RCC_OscConfig+0x3d8>
 80091fe:	e018      	b.n	8009232 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009200:	4b2a      	ldr	r3, [pc, #168]	; (80092ac <HAL_RCC_OscConfig+0x4a4>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a29      	ldr	r2, [pc, #164]	; (80092ac <HAL_RCC_OscConfig+0x4a4>)
 8009206:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800920a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800920c:	f7f9 ffc4 	bl	8003198 <HAL_GetTick>
 8009210:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009212:	e008      	b.n	8009226 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009214:	f7f9 ffc0 	bl	8003198 <HAL_GetTick>
 8009218:	4602      	mov	r2, r0
 800921a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921c:	1ad3      	subs	r3, r2, r3
 800921e:	2b02      	cmp	r3, #2
 8009220:	d901      	bls.n	8009226 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009222:	2303      	movs	r3, #3
 8009224:	e1c2      	b.n	80095ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009226:	4b21      	ldr	r3, [pc, #132]	; (80092ac <HAL_RCC_OscConfig+0x4a4>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800922e:	2b00      	cmp	r3, #0
 8009230:	d1f0      	bne.n	8009214 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f003 0304 	and.w	r3, r3, #4
 800923a:	2b00      	cmp	r3, #0
 800923c:	f000 8086 	beq.w	800934c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009240:	4b1b      	ldr	r3, [pc, #108]	; (80092b0 <HAL_RCC_OscConfig+0x4a8>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a1a      	ldr	r2, [pc, #104]	; (80092b0 <HAL_RCC_OscConfig+0x4a8>)
 8009246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800924a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800924c:	f7f9 ffa4 	bl	8003198 <HAL_GetTick>
 8009250:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009252:	e008      	b.n	8009266 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009254:	f7f9 ffa0 	bl	8003198 <HAL_GetTick>
 8009258:	4602      	mov	r2, r0
 800925a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925c:	1ad3      	subs	r3, r2, r3
 800925e:	2b64      	cmp	r3, #100	; 0x64
 8009260:	d901      	bls.n	8009266 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009262:	2303      	movs	r3, #3
 8009264:	e1a2      	b.n	80095ac <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009266:	4b12      	ldr	r3, [pc, #72]	; (80092b0 <HAL_RCC_OscConfig+0x4a8>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800926e:	2b00      	cmp	r3, #0
 8009270:	d0f0      	beq.n	8009254 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	2b01      	cmp	r3, #1
 8009278:	d106      	bne.n	8009288 <HAL_RCC_OscConfig+0x480>
 800927a:	4b0c      	ldr	r3, [pc, #48]	; (80092ac <HAL_RCC_OscConfig+0x4a4>)
 800927c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800927e:	4a0b      	ldr	r2, [pc, #44]	; (80092ac <HAL_RCC_OscConfig+0x4a4>)
 8009280:	f043 0301 	orr.w	r3, r3, #1
 8009284:	6713      	str	r3, [r2, #112]	; 0x70
 8009286:	e032      	b.n	80092ee <HAL_RCC_OscConfig+0x4e6>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d111      	bne.n	80092b4 <HAL_RCC_OscConfig+0x4ac>
 8009290:	4b06      	ldr	r3, [pc, #24]	; (80092ac <HAL_RCC_OscConfig+0x4a4>)
 8009292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009294:	4a05      	ldr	r2, [pc, #20]	; (80092ac <HAL_RCC_OscConfig+0x4a4>)
 8009296:	f023 0301 	bic.w	r3, r3, #1
 800929a:	6713      	str	r3, [r2, #112]	; 0x70
 800929c:	4b03      	ldr	r3, [pc, #12]	; (80092ac <HAL_RCC_OscConfig+0x4a4>)
 800929e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092a0:	4a02      	ldr	r2, [pc, #8]	; (80092ac <HAL_RCC_OscConfig+0x4a4>)
 80092a2:	f023 0304 	bic.w	r3, r3, #4
 80092a6:	6713      	str	r3, [r2, #112]	; 0x70
 80092a8:	e021      	b.n	80092ee <HAL_RCC_OscConfig+0x4e6>
 80092aa:	bf00      	nop
 80092ac:	58024400 	.word	0x58024400
 80092b0:	58024800 	.word	0x58024800
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	2b05      	cmp	r3, #5
 80092ba:	d10c      	bne.n	80092d6 <HAL_RCC_OscConfig+0x4ce>
 80092bc:	4b83      	ldr	r3, [pc, #524]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 80092be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092c0:	4a82      	ldr	r2, [pc, #520]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 80092c2:	f043 0304 	orr.w	r3, r3, #4
 80092c6:	6713      	str	r3, [r2, #112]	; 0x70
 80092c8:	4b80      	ldr	r3, [pc, #512]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 80092ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092cc:	4a7f      	ldr	r2, [pc, #508]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 80092ce:	f043 0301 	orr.w	r3, r3, #1
 80092d2:	6713      	str	r3, [r2, #112]	; 0x70
 80092d4:	e00b      	b.n	80092ee <HAL_RCC_OscConfig+0x4e6>
 80092d6:	4b7d      	ldr	r3, [pc, #500]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 80092d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092da:	4a7c      	ldr	r2, [pc, #496]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 80092dc:	f023 0301 	bic.w	r3, r3, #1
 80092e0:	6713      	str	r3, [r2, #112]	; 0x70
 80092e2:	4b7a      	ldr	r3, [pc, #488]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 80092e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092e6:	4a79      	ldr	r2, [pc, #484]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 80092e8:	f023 0304 	bic.w	r3, r3, #4
 80092ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d015      	beq.n	8009322 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092f6:	f7f9 ff4f 	bl	8003198 <HAL_GetTick>
 80092fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092fc:	e00a      	b.n	8009314 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092fe:	f7f9 ff4b 	bl	8003198 <HAL_GetTick>
 8009302:	4602      	mov	r2, r0
 8009304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009306:	1ad3      	subs	r3, r2, r3
 8009308:	f241 3288 	movw	r2, #5000	; 0x1388
 800930c:	4293      	cmp	r3, r2
 800930e:	d901      	bls.n	8009314 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009310:	2303      	movs	r3, #3
 8009312:	e14b      	b.n	80095ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009314:	4b6d      	ldr	r3, [pc, #436]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 8009316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009318:	f003 0302 	and.w	r3, r3, #2
 800931c:	2b00      	cmp	r3, #0
 800931e:	d0ee      	beq.n	80092fe <HAL_RCC_OscConfig+0x4f6>
 8009320:	e014      	b.n	800934c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009322:	f7f9 ff39 	bl	8003198 <HAL_GetTick>
 8009326:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009328:	e00a      	b.n	8009340 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800932a:	f7f9 ff35 	bl	8003198 <HAL_GetTick>
 800932e:	4602      	mov	r2, r0
 8009330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009332:	1ad3      	subs	r3, r2, r3
 8009334:	f241 3288 	movw	r2, #5000	; 0x1388
 8009338:	4293      	cmp	r3, r2
 800933a:	d901      	bls.n	8009340 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800933c:	2303      	movs	r3, #3
 800933e:	e135      	b.n	80095ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009340:	4b62      	ldr	r3, [pc, #392]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 8009342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009344:	f003 0302 	and.w	r3, r3, #2
 8009348:	2b00      	cmp	r3, #0
 800934a:	d1ee      	bne.n	800932a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009350:	2b00      	cmp	r3, #0
 8009352:	f000 812a 	beq.w	80095aa <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009356:	4b5d      	ldr	r3, [pc, #372]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 8009358:	691b      	ldr	r3, [r3, #16]
 800935a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800935e:	2b18      	cmp	r3, #24
 8009360:	f000 80ba 	beq.w	80094d8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009368:	2b02      	cmp	r3, #2
 800936a:	f040 8095 	bne.w	8009498 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800936e:	4b57      	ldr	r3, [pc, #348]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a56      	ldr	r2, [pc, #344]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 8009374:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800937a:	f7f9 ff0d 	bl	8003198 <HAL_GetTick>
 800937e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009380:	e008      	b.n	8009394 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009382:	f7f9 ff09 	bl	8003198 <HAL_GetTick>
 8009386:	4602      	mov	r2, r0
 8009388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938a:	1ad3      	subs	r3, r2, r3
 800938c:	2b02      	cmp	r3, #2
 800938e:	d901      	bls.n	8009394 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009390:	2303      	movs	r3, #3
 8009392:	e10b      	b.n	80095ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009394:	4b4d      	ldr	r3, [pc, #308]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800939c:	2b00      	cmp	r3, #0
 800939e:	d1f0      	bne.n	8009382 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80093a0:	4b4a      	ldr	r3, [pc, #296]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 80093a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093a4:	4b4a      	ldr	r3, [pc, #296]	; (80094d0 <HAL_RCC_OscConfig+0x6c8>)
 80093a6:	4013      	ands	r3, r2
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80093b0:	0112      	lsls	r2, r2, #4
 80093b2:	430a      	orrs	r2, r1
 80093b4:	4945      	ldr	r1, [pc, #276]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 80093b6:	4313      	orrs	r3, r2
 80093b8:	628b      	str	r3, [r1, #40]	; 0x28
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093be:	3b01      	subs	r3, #1
 80093c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093c8:	3b01      	subs	r3, #1
 80093ca:	025b      	lsls	r3, r3, #9
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	431a      	orrs	r2, r3
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d4:	3b01      	subs	r3, #1
 80093d6:	041b      	lsls	r3, r3, #16
 80093d8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80093dc:	431a      	orrs	r2, r3
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093e2:	3b01      	subs	r3, #1
 80093e4:	061b      	lsls	r3, r3, #24
 80093e6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80093ea:	4938      	ldr	r1, [pc, #224]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 80093ec:	4313      	orrs	r3, r2
 80093ee:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80093f0:	4b36      	ldr	r3, [pc, #216]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 80093f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f4:	4a35      	ldr	r2, [pc, #212]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 80093f6:	f023 0301 	bic.w	r3, r3, #1
 80093fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80093fc:	4b33      	ldr	r3, [pc, #204]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 80093fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009400:	4b34      	ldr	r3, [pc, #208]	; (80094d4 <HAL_RCC_OscConfig+0x6cc>)
 8009402:	4013      	ands	r3, r2
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009408:	00d2      	lsls	r2, r2, #3
 800940a:	4930      	ldr	r1, [pc, #192]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 800940c:	4313      	orrs	r3, r2
 800940e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009410:	4b2e      	ldr	r3, [pc, #184]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 8009412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009414:	f023 020c 	bic.w	r2, r3, #12
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800941c:	492b      	ldr	r1, [pc, #172]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 800941e:	4313      	orrs	r3, r2
 8009420:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009422:	4b2a      	ldr	r3, [pc, #168]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 8009424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009426:	f023 0202 	bic.w	r2, r3, #2
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800942e:	4927      	ldr	r1, [pc, #156]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 8009430:	4313      	orrs	r3, r2
 8009432:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009434:	4b25      	ldr	r3, [pc, #148]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 8009436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009438:	4a24      	ldr	r2, [pc, #144]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 800943a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800943e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009440:	4b22      	ldr	r3, [pc, #136]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 8009442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009444:	4a21      	ldr	r2, [pc, #132]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 8009446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800944a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800944c:	4b1f      	ldr	r3, [pc, #124]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 800944e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009450:	4a1e      	ldr	r2, [pc, #120]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 8009452:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009456:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009458:	4b1c      	ldr	r3, [pc, #112]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 800945a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800945c:	4a1b      	ldr	r2, [pc, #108]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 800945e:	f043 0301 	orr.w	r3, r3, #1
 8009462:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009464:	4b19      	ldr	r3, [pc, #100]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a18      	ldr	r2, [pc, #96]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 800946a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800946e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009470:	f7f9 fe92 	bl	8003198 <HAL_GetTick>
 8009474:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009476:	e008      	b.n	800948a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009478:	f7f9 fe8e 	bl	8003198 <HAL_GetTick>
 800947c:	4602      	mov	r2, r0
 800947e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009480:	1ad3      	subs	r3, r2, r3
 8009482:	2b02      	cmp	r3, #2
 8009484:	d901      	bls.n	800948a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009486:	2303      	movs	r3, #3
 8009488:	e090      	b.n	80095ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800948a:	4b10      	ldr	r3, [pc, #64]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009492:	2b00      	cmp	r3, #0
 8009494:	d0f0      	beq.n	8009478 <HAL_RCC_OscConfig+0x670>
 8009496:	e088      	b.n	80095aa <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009498:	4b0c      	ldr	r3, [pc, #48]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a0b      	ldr	r2, [pc, #44]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 800949e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094a4:	f7f9 fe78 	bl	8003198 <HAL_GetTick>
 80094a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80094aa:	e008      	b.n	80094be <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094ac:	f7f9 fe74 	bl	8003198 <HAL_GetTick>
 80094b0:	4602      	mov	r2, r0
 80094b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b4:	1ad3      	subs	r3, r2, r3
 80094b6:	2b02      	cmp	r3, #2
 80094b8:	d901      	bls.n	80094be <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80094ba:	2303      	movs	r3, #3
 80094bc:	e076      	b.n	80095ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80094be:	4b03      	ldr	r3, [pc, #12]	; (80094cc <HAL_RCC_OscConfig+0x6c4>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d1f0      	bne.n	80094ac <HAL_RCC_OscConfig+0x6a4>
 80094ca:	e06e      	b.n	80095aa <HAL_RCC_OscConfig+0x7a2>
 80094cc:	58024400 	.word	0x58024400
 80094d0:	fffffc0c 	.word	0xfffffc0c
 80094d4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80094d8:	4b36      	ldr	r3, [pc, #216]	; (80095b4 <HAL_RCC_OscConfig+0x7ac>)
 80094da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80094de:	4b35      	ldr	r3, [pc, #212]	; (80095b4 <HAL_RCC_OscConfig+0x7ac>)
 80094e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094e2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d031      	beq.n	8009550 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	f003 0203 	and.w	r2, r3, #3
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d12a      	bne.n	8009550 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	091b      	lsrs	r3, r3, #4
 80094fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009506:	429a      	cmp	r2, r3
 8009508:	d122      	bne.n	8009550 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009514:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009516:	429a      	cmp	r2, r3
 8009518:	d11a      	bne.n	8009550 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	0a5b      	lsrs	r3, r3, #9
 800951e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009526:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009528:	429a      	cmp	r2, r3
 800952a:	d111      	bne.n	8009550 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	0c1b      	lsrs	r3, r3, #16
 8009530:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009538:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800953a:	429a      	cmp	r2, r3
 800953c:	d108      	bne.n	8009550 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	0e1b      	lsrs	r3, r3, #24
 8009542:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800954a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800954c:	429a      	cmp	r2, r3
 800954e:	d001      	beq.n	8009554 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009550:	2301      	movs	r3, #1
 8009552:	e02b      	b.n	80095ac <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009554:	4b17      	ldr	r3, [pc, #92]	; (80095b4 <HAL_RCC_OscConfig+0x7ac>)
 8009556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009558:	08db      	lsrs	r3, r3, #3
 800955a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800955e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009564:	693a      	ldr	r2, [r7, #16]
 8009566:	429a      	cmp	r2, r3
 8009568:	d01f      	beq.n	80095aa <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800956a:	4b12      	ldr	r3, [pc, #72]	; (80095b4 <HAL_RCC_OscConfig+0x7ac>)
 800956c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800956e:	4a11      	ldr	r2, [pc, #68]	; (80095b4 <HAL_RCC_OscConfig+0x7ac>)
 8009570:	f023 0301 	bic.w	r3, r3, #1
 8009574:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009576:	f7f9 fe0f 	bl	8003198 <HAL_GetTick>
 800957a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800957c:	bf00      	nop
 800957e:	f7f9 fe0b 	bl	8003198 <HAL_GetTick>
 8009582:	4602      	mov	r2, r0
 8009584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009586:	4293      	cmp	r3, r2
 8009588:	d0f9      	beq.n	800957e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800958a:	4b0a      	ldr	r3, [pc, #40]	; (80095b4 <HAL_RCC_OscConfig+0x7ac>)
 800958c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800958e:	4b0a      	ldr	r3, [pc, #40]	; (80095b8 <HAL_RCC_OscConfig+0x7b0>)
 8009590:	4013      	ands	r3, r2
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009596:	00d2      	lsls	r2, r2, #3
 8009598:	4906      	ldr	r1, [pc, #24]	; (80095b4 <HAL_RCC_OscConfig+0x7ac>)
 800959a:	4313      	orrs	r3, r2
 800959c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800959e:	4b05      	ldr	r3, [pc, #20]	; (80095b4 <HAL_RCC_OscConfig+0x7ac>)
 80095a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a2:	4a04      	ldr	r2, [pc, #16]	; (80095b4 <HAL_RCC_OscConfig+0x7ac>)
 80095a4:	f043 0301 	orr.w	r3, r3, #1
 80095a8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3730      	adds	r7, #48	; 0x30
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	58024400 	.word	0x58024400
 80095b8:	ffff0007 	.word	0xffff0007

080095bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b086      	sub	sp, #24
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d101      	bne.n	80095d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80095cc:	2301      	movs	r3, #1
 80095ce:	e19c      	b.n	800990a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80095d0:	4b8a      	ldr	r3, [pc, #552]	; (80097fc <HAL_RCC_ClockConfig+0x240>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f003 030f 	and.w	r3, r3, #15
 80095d8:	683a      	ldr	r2, [r7, #0]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d910      	bls.n	8009600 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095de:	4b87      	ldr	r3, [pc, #540]	; (80097fc <HAL_RCC_ClockConfig+0x240>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f023 020f 	bic.w	r2, r3, #15
 80095e6:	4985      	ldr	r1, [pc, #532]	; (80097fc <HAL_RCC_ClockConfig+0x240>)
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	4313      	orrs	r3, r2
 80095ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80095ee:	4b83      	ldr	r3, [pc, #524]	; (80097fc <HAL_RCC_ClockConfig+0x240>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f003 030f 	and.w	r3, r3, #15
 80095f6:	683a      	ldr	r2, [r7, #0]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d001      	beq.n	8009600 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80095fc:	2301      	movs	r3, #1
 80095fe:	e184      	b.n	800990a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f003 0304 	and.w	r3, r3, #4
 8009608:	2b00      	cmp	r3, #0
 800960a:	d010      	beq.n	800962e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	691a      	ldr	r2, [r3, #16]
 8009610:	4b7b      	ldr	r3, [pc, #492]	; (8009800 <HAL_RCC_ClockConfig+0x244>)
 8009612:	699b      	ldr	r3, [r3, #24]
 8009614:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009618:	429a      	cmp	r2, r3
 800961a:	d908      	bls.n	800962e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800961c:	4b78      	ldr	r3, [pc, #480]	; (8009800 <HAL_RCC_ClockConfig+0x244>)
 800961e:	699b      	ldr	r3, [r3, #24]
 8009620:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	691b      	ldr	r3, [r3, #16]
 8009628:	4975      	ldr	r1, [pc, #468]	; (8009800 <HAL_RCC_ClockConfig+0x244>)
 800962a:	4313      	orrs	r3, r2
 800962c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f003 0308 	and.w	r3, r3, #8
 8009636:	2b00      	cmp	r3, #0
 8009638:	d010      	beq.n	800965c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	695a      	ldr	r2, [r3, #20]
 800963e:	4b70      	ldr	r3, [pc, #448]	; (8009800 <HAL_RCC_ClockConfig+0x244>)
 8009640:	69db      	ldr	r3, [r3, #28]
 8009642:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009646:	429a      	cmp	r2, r3
 8009648:	d908      	bls.n	800965c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800964a:	4b6d      	ldr	r3, [pc, #436]	; (8009800 <HAL_RCC_ClockConfig+0x244>)
 800964c:	69db      	ldr	r3, [r3, #28]
 800964e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	695b      	ldr	r3, [r3, #20]
 8009656:	496a      	ldr	r1, [pc, #424]	; (8009800 <HAL_RCC_ClockConfig+0x244>)
 8009658:	4313      	orrs	r3, r2
 800965a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f003 0310 	and.w	r3, r3, #16
 8009664:	2b00      	cmp	r3, #0
 8009666:	d010      	beq.n	800968a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	699a      	ldr	r2, [r3, #24]
 800966c:	4b64      	ldr	r3, [pc, #400]	; (8009800 <HAL_RCC_ClockConfig+0x244>)
 800966e:	69db      	ldr	r3, [r3, #28]
 8009670:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009674:	429a      	cmp	r2, r3
 8009676:	d908      	bls.n	800968a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009678:	4b61      	ldr	r3, [pc, #388]	; (8009800 <HAL_RCC_ClockConfig+0x244>)
 800967a:	69db      	ldr	r3, [r3, #28]
 800967c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	699b      	ldr	r3, [r3, #24]
 8009684:	495e      	ldr	r1, [pc, #376]	; (8009800 <HAL_RCC_ClockConfig+0x244>)
 8009686:	4313      	orrs	r3, r2
 8009688:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f003 0320 	and.w	r3, r3, #32
 8009692:	2b00      	cmp	r3, #0
 8009694:	d010      	beq.n	80096b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	69da      	ldr	r2, [r3, #28]
 800969a:	4b59      	ldr	r3, [pc, #356]	; (8009800 <HAL_RCC_ClockConfig+0x244>)
 800969c:	6a1b      	ldr	r3, [r3, #32]
 800969e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d908      	bls.n	80096b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80096a6:	4b56      	ldr	r3, [pc, #344]	; (8009800 <HAL_RCC_ClockConfig+0x244>)
 80096a8:	6a1b      	ldr	r3, [r3, #32]
 80096aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	69db      	ldr	r3, [r3, #28]
 80096b2:	4953      	ldr	r1, [pc, #332]	; (8009800 <HAL_RCC_ClockConfig+0x244>)
 80096b4:	4313      	orrs	r3, r2
 80096b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f003 0302 	and.w	r3, r3, #2
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d010      	beq.n	80096e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	68da      	ldr	r2, [r3, #12]
 80096c8:	4b4d      	ldr	r3, [pc, #308]	; (8009800 <HAL_RCC_ClockConfig+0x244>)
 80096ca:	699b      	ldr	r3, [r3, #24]
 80096cc:	f003 030f 	and.w	r3, r3, #15
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d908      	bls.n	80096e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80096d4:	4b4a      	ldr	r3, [pc, #296]	; (8009800 <HAL_RCC_ClockConfig+0x244>)
 80096d6:	699b      	ldr	r3, [r3, #24]
 80096d8:	f023 020f 	bic.w	r2, r3, #15
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	4947      	ldr	r1, [pc, #284]	; (8009800 <HAL_RCC_ClockConfig+0x244>)
 80096e2:	4313      	orrs	r3, r2
 80096e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f003 0301 	and.w	r3, r3, #1
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d055      	beq.n	800979e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80096f2:	4b43      	ldr	r3, [pc, #268]	; (8009800 <HAL_RCC_ClockConfig+0x244>)
 80096f4:	699b      	ldr	r3, [r3, #24]
 80096f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	4940      	ldr	r1, [pc, #256]	; (8009800 <HAL_RCC_ClockConfig+0x244>)
 8009700:	4313      	orrs	r3, r2
 8009702:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	2b02      	cmp	r3, #2
 800970a:	d107      	bne.n	800971c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800970c:	4b3c      	ldr	r3, [pc, #240]	; (8009800 <HAL_RCC_ClockConfig+0x244>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009714:	2b00      	cmp	r3, #0
 8009716:	d121      	bne.n	800975c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	e0f6      	b.n	800990a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	2b03      	cmp	r3, #3
 8009722:	d107      	bne.n	8009734 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009724:	4b36      	ldr	r3, [pc, #216]	; (8009800 <HAL_RCC_ClockConfig+0x244>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800972c:	2b00      	cmp	r3, #0
 800972e:	d115      	bne.n	800975c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009730:	2301      	movs	r3, #1
 8009732:	e0ea      	b.n	800990a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	2b01      	cmp	r3, #1
 800973a:	d107      	bne.n	800974c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800973c:	4b30      	ldr	r3, [pc, #192]	; (8009800 <HAL_RCC_ClockConfig+0x244>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009744:	2b00      	cmp	r3, #0
 8009746:	d109      	bne.n	800975c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009748:	2301      	movs	r3, #1
 800974a:	e0de      	b.n	800990a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800974c:	4b2c      	ldr	r3, [pc, #176]	; (8009800 <HAL_RCC_ClockConfig+0x244>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f003 0304 	and.w	r3, r3, #4
 8009754:	2b00      	cmp	r3, #0
 8009756:	d101      	bne.n	800975c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009758:	2301      	movs	r3, #1
 800975a:	e0d6      	b.n	800990a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800975c:	4b28      	ldr	r3, [pc, #160]	; (8009800 <HAL_RCC_ClockConfig+0x244>)
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	f023 0207 	bic.w	r2, r3, #7
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	4925      	ldr	r1, [pc, #148]	; (8009800 <HAL_RCC_ClockConfig+0x244>)
 800976a:	4313      	orrs	r3, r2
 800976c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800976e:	f7f9 fd13 	bl	8003198 <HAL_GetTick>
 8009772:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009774:	e00a      	b.n	800978c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009776:	f7f9 fd0f 	bl	8003198 <HAL_GetTick>
 800977a:	4602      	mov	r2, r0
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	1ad3      	subs	r3, r2, r3
 8009780:	f241 3288 	movw	r2, #5000	; 0x1388
 8009784:	4293      	cmp	r3, r2
 8009786:	d901      	bls.n	800978c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009788:	2303      	movs	r3, #3
 800978a:	e0be      	b.n	800990a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800978c:	4b1c      	ldr	r3, [pc, #112]	; (8009800 <HAL_RCC_ClockConfig+0x244>)
 800978e:	691b      	ldr	r3, [r3, #16]
 8009790:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	00db      	lsls	r3, r3, #3
 800979a:	429a      	cmp	r2, r3
 800979c:	d1eb      	bne.n	8009776 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f003 0302 	and.w	r3, r3, #2
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d010      	beq.n	80097cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	68da      	ldr	r2, [r3, #12]
 80097ae:	4b14      	ldr	r3, [pc, #80]	; (8009800 <HAL_RCC_ClockConfig+0x244>)
 80097b0:	699b      	ldr	r3, [r3, #24]
 80097b2:	f003 030f 	and.w	r3, r3, #15
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d208      	bcs.n	80097cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80097ba:	4b11      	ldr	r3, [pc, #68]	; (8009800 <HAL_RCC_ClockConfig+0x244>)
 80097bc:	699b      	ldr	r3, [r3, #24]
 80097be:	f023 020f 	bic.w	r2, r3, #15
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	490e      	ldr	r1, [pc, #56]	; (8009800 <HAL_RCC_ClockConfig+0x244>)
 80097c8:	4313      	orrs	r3, r2
 80097ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80097cc:	4b0b      	ldr	r3, [pc, #44]	; (80097fc <HAL_RCC_ClockConfig+0x240>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f003 030f 	and.w	r3, r3, #15
 80097d4:	683a      	ldr	r2, [r7, #0]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d214      	bcs.n	8009804 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80097da:	4b08      	ldr	r3, [pc, #32]	; (80097fc <HAL_RCC_ClockConfig+0x240>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f023 020f 	bic.w	r2, r3, #15
 80097e2:	4906      	ldr	r1, [pc, #24]	; (80097fc <HAL_RCC_ClockConfig+0x240>)
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	4313      	orrs	r3, r2
 80097e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80097ea:	4b04      	ldr	r3, [pc, #16]	; (80097fc <HAL_RCC_ClockConfig+0x240>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f003 030f 	and.w	r3, r3, #15
 80097f2:	683a      	ldr	r2, [r7, #0]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d005      	beq.n	8009804 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	e086      	b.n	800990a <HAL_RCC_ClockConfig+0x34e>
 80097fc:	52002000 	.word	0x52002000
 8009800:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f003 0304 	and.w	r3, r3, #4
 800980c:	2b00      	cmp	r3, #0
 800980e:	d010      	beq.n	8009832 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	691a      	ldr	r2, [r3, #16]
 8009814:	4b3f      	ldr	r3, [pc, #252]	; (8009914 <HAL_RCC_ClockConfig+0x358>)
 8009816:	699b      	ldr	r3, [r3, #24]
 8009818:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800981c:	429a      	cmp	r2, r3
 800981e:	d208      	bcs.n	8009832 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009820:	4b3c      	ldr	r3, [pc, #240]	; (8009914 <HAL_RCC_ClockConfig+0x358>)
 8009822:	699b      	ldr	r3, [r3, #24]
 8009824:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	691b      	ldr	r3, [r3, #16]
 800982c:	4939      	ldr	r1, [pc, #228]	; (8009914 <HAL_RCC_ClockConfig+0x358>)
 800982e:	4313      	orrs	r3, r2
 8009830:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f003 0308 	and.w	r3, r3, #8
 800983a:	2b00      	cmp	r3, #0
 800983c:	d010      	beq.n	8009860 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	695a      	ldr	r2, [r3, #20]
 8009842:	4b34      	ldr	r3, [pc, #208]	; (8009914 <HAL_RCC_ClockConfig+0x358>)
 8009844:	69db      	ldr	r3, [r3, #28]
 8009846:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800984a:	429a      	cmp	r2, r3
 800984c:	d208      	bcs.n	8009860 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800984e:	4b31      	ldr	r3, [pc, #196]	; (8009914 <HAL_RCC_ClockConfig+0x358>)
 8009850:	69db      	ldr	r3, [r3, #28]
 8009852:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	695b      	ldr	r3, [r3, #20]
 800985a:	492e      	ldr	r1, [pc, #184]	; (8009914 <HAL_RCC_ClockConfig+0x358>)
 800985c:	4313      	orrs	r3, r2
 800985e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f003 0310 	and.w	r3, r3, #16
 8009868:	2b00      	cmp	r3, #0
 800986a:	d010      	beq.n	800988e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	699a      	ldr	r2, [r3, #24]
 8009870:	4b28      	ldr	r3, [pc, #160]	; (8009914 <HAL_RCC_ClockConfig+0x358>)
 8009872:	69db      	ldr	r3, [r3, #28]
 8009874:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009878:	429a      	cmp	r2, r3
 800987a:	d208      	bcs.n	800988e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800987c:	4b25      	ldr	r3, [pc, #148]	; (8009914 <HAL_RCC_ClockConfig+0x358>)
 800987e:	69db      	ldr	r3, [r3, #28]
 8009880:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	699b      	ldr	r3, [r3, #24]
 8009888:	4922      	ldr	r1, [pc, #136]	; (8009914 <HAL_RCC_ClockConfig+0x358>)
 800988a:	4313      	orrs	r3, r2
 800988c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f003 0320 	and.w	r3, r3, #32
 8009896:	2b00      	cmp	r3, #0
 8009898:	d010      	beq.n	80098bc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	69da      	ldr	r2, [r3, #28]
 800989e:	4b1d      	ldr	r3, [pc, #116]	; (8009914 <HAL_RCC_ClockConfig+0x358>)
 80098a0:	6a1b      	ldr	r3, [r3, #32]
 80098a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d208      	bcs.n	80098bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80098aa:	4b1a      	ldr	r3, [pc, #104]	; (8009914 <HAL_RCC_ClockConfig+0x358>)
 80098ac:	6a1b      	ldr	r3, [r3, #32]
 80098ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	69db      	ldr	r3, [r3, #28]
 80098b6:	4917      	ldr	r1, [pc, #92]	; (8009914 <HAL_RCC_ClockConfig+0x358>)
 80098b8:	4313      	orrs	r3, r2
 80098ba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80098bc:	f000 f834 	bl	8009928 <HAL_RCC_GetSysClockFreq>
 80098c0:	4602      	mov	r2, r0
 80098c2:	4b14      	ldr	r3, [pc, #80]	; (8009914 <HAL_RCC_ClockConfig+0x358>)
 80098c4:	699b      	ldr	r3, [r3, #24]
 80098c6:	0a1b      	lsrs	r3, r3, #8
 80098c8:	f003 030f 	and.w	r3, r3, #15
 80098cc:	4912      	ldr	r1, [pc, #72]	; (8009918 <HAL_RCC_ClockConfig+0x35c>)
 80098ce:	5ccb      	ldrb	r3, [r1, r3]
 80098d0:	f003 031f 	and.w	r3, r3, #31
 80098d4:	fa22 f303 	lsr.w	r3, r2, r3
 80098d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80098da:	4b0e      	ldr	r3, [pc, #56]	; (8009914 <HAL_RCC_ClockConfig+0x358>)
 80098dc:	699b      	ldr	r3, [r3, #24]
 80098de:	f003 030f 	and.w	r3, r3, #15
 80098e2:	4a0d      	ldr	r2, [pc, #52]	; (8009918 <HAL_RCC_ClockConfig+0x35c>)
 80098e4:	5cd3      	ldrb	r3, [r2, r3]
 80098e6:	f003 031f 	and.w	r3, r3, #31
 80098ea:	693a      	ldr	r2, [r7, #16]
 80098ec:	fa22 f303 	lsr.w	r3, r2, r3
 80098f0:	4a0a      	ldr	r2, [pc, #40]	; (800991c <HAL_RCC_ClockConfig+0x360>)
 80098f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80098f4:	4a0a      	ldr	r2, [pc, #40]	; (8009920 <HAL_RCC_ClockConfig+0x364>)
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80098fa:	4b0a      	ldr	r3, [pc, #40]	; (8009924 <HAL_RCC_ClockConfig+0x368>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4618      	mov	r0, r3
 8009900:	f7f9 fc00 	bl	8003104 <HAL_InitTick>
 8009904:	4603      	mov	r3, r0
 8009906:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009908:	7bfb      	ldrb	r3, [r7, #15]
}
 800990a:	4618      	mov	r0, r3
 800990c:	3718      	adds	r7, #24
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	58024400 	.word	0x58024400
 8009918:	08014e90 	.word	0x08014e90
 800991c:	24000004 	.word	0x24000004
 8009920:	24000000 	.word	0x24000000
 8009924:	24000008 	.word	0x24000008

08009928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009928:	b480      	push	{r7}
 800992a:	b089      	sub	sp, #36	; 0x24
 800992c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800992e:	4bb3      	ldr	r3, [pc, #716]	; (8009bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009930:	691b      	ldr	r3, [r3, #16]
 8009932:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009936:	2b18      	cmp	r3, #24
 8009938:	f200 8155 	bhi.w	8009be6 <HAL_RCC_GetSysClockFreq+0x2be>
 800993c:	a201      	add	r2, pc, #4	; (adr r2, 8009944 <HAL_RCC_GetSysClockFreq+0x1c>)
 800993e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009942:	bf00      	nop
 8009944:	080099a9 	.word	0x080099a9
 8009948:	08009be7 	.word	0x08009be7
 800994c:	08009be7 	.word	0x08009be7
 8009950:	08009be7 	.word	0x08009be7
 8009954:	08009be7 	.word	0x08009be7
 8009958:	08009be7 	.word	0x08009be7
 800995c:	08009be7 	.word	0x08009be7
 8009960:	08009be7 	.word	0x08009be7
 8009964:	080099cf 	.word	0x080099cf
 8009968:	08009be7 	.word	0x08009be7
 800996c:	08009be7 	.word	0x08009be7
 8009970:	08009be7 	.word	0x08009be7
 8009974:	08009be7 	.word	0x08009be7
 8009978:	08009be7 	.word	0x08009be7
 800997c:	08009be7 	.word	0x08009be7
 8009980:	08009be7 	.word	0x08009be7
 8009984:	080099d5 	.word	0x080099d5
 8009988:	08009be7 	.word	0x08009be7
 800998c:	08009be7 	.word	0x08009be7
 8009990:	08009be7 	.word	0x08009be7
 8009994:	08009be7 	.word	0x08009be7
 8009998:	08009be7 	.word	0x08009be7
 800999c:	08009be7 	.word	0x08009be7
 80099a0:	08009be7 	.word	0x08009be7
 80099a4:	080099db 	.word	0x080099db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099a8:	4b94      	ldr	r3, [pc, #592]	; (8009bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f003 0320 	and.w	r3, r3, #32
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d009      	beq.n	80099c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80099b4:	4b91      	ldr	r3, [pc, #580]	; (8009bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	08db      	lsrs	r3, r3, #3
 80099ba:	f003 0303 	and.w	r3, r3, #3
 80099be:	4a90      	ldr	r2, [pc, #576]	; (8009c00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80099c0:	fa22 f303 	lsr.w	r3, r2, r3
 80099c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80099c6:	e111      	b.n	8009bec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80099c8:	4b8d      	ldr	r3, [pc, #564]	; (8009c00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80099ca:	61bb      	str	r3, [r7, #24]
      break;
 80099cc:	e10e      	b.n	8009bec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80099ce:	4b8d      	ldr	r3, [pc, #564]	; (8009c04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80099d0:	61bb      	str	r3, [r7, #24]
      break;
 80099d2:	e10b      	b.n	8009bec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80099d4:	4b8c      	ldr	r3, [pc, #560]	; (8009c08 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80099d6:	61bb      	str	r3, [r7, #24]
      break;
 80099d8:	e108      	b.n	8009bec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80099da:	4b88      	ldr	r3, [pc, #544]	; (8009bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099de:	f003 0303 	and.w	r3, r3, #3
 80099e2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80099e4:	4b85      	ldr	r3, [pc, #532]	; (8009bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e8:	091b      	lsrs	r3, r3, #4
 80099ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099ee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80099f0:	4b82      	ldr	r3, [pc, #520]	; (8009bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f4:	f003 0301 	and.w	r3, r3, #1
 80099f8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80099fa:	4b80      	ldr	r3, [pc, #512]	; (8009bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099fe:	08db      	lsrs	r3, r3, #3
 8009a00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a04:	68fa      	ldr	r2, [r7, #12]
 8009a06:	fb02 f303 	mul.w	r3, r2, r3
 8009a0a:	ee07 3a90 	vmov	s15, r3
 8009a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a12:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	f000 80e1 	beq.w	8009be0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	2b02      	cmp	r3, #2
 8009a22:	f000 8083 	beq.w	8009b2c <HAL_RCC_GetSysClockFreq+0x204>
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	2b02      	cmp	r3, #2
 8009a2a:	f200 80a1 	bhi.w	8009b70 <HAL_RCC_GetSysClockFreq+0x248>
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d003      	beq.n	8009a3c <HAL_RCC_GetSysClockFreq+0x114>
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d056      	beq.n	8009ae8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009a3a:	e099      	b.n	8009b70 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a3c:	4b6f      	ldr	r3, [pc, #444]	; (8009bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f003 0320 	and.w	r3, r3, #32
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d02d      	beq.n	8009aa4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a48:	4b6c      	ldr	r3, [pc, #432]	; (8009bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	08db      	lsrs	r3, r3, #3
 8009a4e:	f003 0303 	and.w	r3, r3, #3
 8009a52:	4a6b      	ldr	r2, [pc, #428]	; (8009c00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a54:	fa22 f303 	lsr.w	r3, r2, r3
 8009a58:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	ee07 3a90 	vmov	s15, r3
 8009a60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	ee07 3a90 	vmov	s15, r3
 8009a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a72:	4b62      	ldr	r3, [pc, #392]	; (8009bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a7a:	ee07 3a90 	vmov	s15, r3
 8009a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a82:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a86:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009c0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a9e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009aa2:	e087      	b.n	8009bb4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	ee07 3a90 	vmov	s15, r3
 8009aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009c10 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ab6:	4b51      	ldr	r3, [pc, #324]	; (8009bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009abe:	ee07 3a90 	vmov	s15, r3
 8009ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ac6:	ed97 6a02 	vldr	s12, [r7, #8]
 8009aca:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009c0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ae2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009ae6:	e065      	b.n	8009bb4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	ee07 3a90 	vmov	s15, r3
 8009aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009af2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009c14 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009afa:	4b40      	ldr	r3, [pc, #256]	; (8009bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b02:	ee07 3a90 	vmov	s15, r3
 8009b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b0e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009c0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009b2a:	e043      	b.n	8009bb4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	ee07 3a90 	vmov	s15, r3
 8009b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b36:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009c18 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b3e:	4b2f      	ldr	r3, [pc, #188]	; (8009bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b46:	ee07 3a90 	vmov	s15, r3
 8009b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b52:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009c0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009b6e:	e021      	b.n	8009bb4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	ee07 3a90 	vmov	s15, r3
 8009b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b7a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009c14 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b82:	4b1e      	ldr	r3, [pc, #120]	; (8009bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b8a:	ee07 3a90 	vmov	s15, r3
 8009b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b92:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b96:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009c0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009bb2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009bb4:	4b11      	ldr	r3, [pc, #68]	; (8009bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bb8:	0a5b      	lsrs	r3, r3, #9
 8009bba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	ee07 3a90 	vmov	s15, r3
 8009bc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009bcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bd8:	ee17 3a90 	vmov	r3, s15
 8009bdc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009bde:	e005      	b.n	8009bec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009be0:	2300      	movs	r3, #0
 8009be2:	61bb      	str	r3, [r7, #24]
      break;
 8009be4:	e002      	b.n	8009bec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009be6:	4b07      	ldr	r3, [pc, #28]	; (8009c04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009be8:	61bb      	str	r3, [r7, #24]
      break;
 8009bea:	bf00      	nop
  }

  return sysclockfreq;
 8009bec:	69bb      	ldr	r3, [r7, #24]
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3724      	adds	r7, #36	; 0x24
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr
 8009bfa:	bf00      	nop
 8009bfc:	58024400 	.word	0x58024400
 8009c00:	03d09000 	.word	0x03d09000
 8009c04:	003d0900 	.word	0x003d0900
 8009c08:	007a1200 	.word	0x007a1200
 8009c0c:	46000000 	.word	0x46000000
 8009c10:	4c742400 	.word	0x4c742400
 8009c14:	4a742400 	.word	0x4a742400
 8009c18:	4af42400 	.word	0x4af42400

08009c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009c22:	f7ff fe81 	bl	8009928 <HAL_RCC_GetSysClockFreq>
 8009c26:	4602      	mov	r2, r0
 8009c28:	4b10      	ldr	r3, [pc, #64]	; (8009c6c <HAL_RCC_GetHCLKFreq+0x50>)
 8009c2a:	699b      	ldr	r3, [r3, #24]
 8009c2c:	0a1b      	lsrs	r3, r3, #8
 8009c2e:	f003 030f 	and.w	r3, r3, #15
 8009c32:	490f      	ldr	r1, [pc, #60]	; (8009c70 <HAL_RCC_GetHCLKFreq+0x54>)
 8009c34:	5ccb      	ldrb	r3, [r1, r3]
 8009c36:	f003 031f 	and.w	r3, r3, #31
 8009c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c3e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009c40:	4b0a      	ldr	r3, [pc, #40]	; (8009c6c <HAL_RCC_GetHCLKFreq+0x50>)
 8009c42:	699b      	ldr	r3, [r3, #24]
 8009c44:	f003 030f 	and.w	r3, r3, #15
 8009c48:	4a09      	ldr	r2, [pc, #36]	; (8009c70 <HAL_RCC_GetHCLKFreq+0x54>)
 8009c4a:	5cd3      	ldrb	r3, [r2, r3]
 8009c4c:	f003 031f 	and.w	r3, r3, #31
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	fa22 f303 	lsr.w	r3, r2, r3
 8009c56:	4a07      	ldr	r2, [pc, #28]	; (8009c74 <HAL_RCC_GetHCLKFreq+0x58>)
 8009c58:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009c5a:	4a07      	ldr	r2, [pc, #28]	; (8009c78 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009c60:	4b04      	ldr	r3, [pc, #16]	; (8009c74 <HAL_RCC_GetHCLKFreq+0x58>)
 8009c62:	681b      	ldr	r3, [r3, #0]
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3708      	adds	r7, #8
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	58024400 	.word	0x58024400
 8009c70:	08014e90 	.word	0x08014e90
 8009c74:	24000004 	.word	0x24000004
 8009c78:	24000000 	.word	0x24000000

08009c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009c80:	f7ff ffcc 	bl	8009c1c <HAL_RCC_GetHCLKFreq>
 8009c84:	4602      	mov	r2, r0
 8009c86:	4b06      	ldr	r3, [pc, #24]	; (8009ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009c88:	69db      	ldr	r3, [r3, #28]
 8009c8a:	091b      	lsrs	r3, r3, #4
 8009c8c:	f003 0307 	and.w	r3, r3, #7
 8009c90:	4904      	ldr	r1, [pc, #16]	; (8009ca4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009c92:	5ccb      	ldrb	r3, [r1, r3]
 8009c94:	f003 031f 	and.w	r3, r3, #31
 8009c98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	58024400 	.word	0x58024400
 8009ca4:	08014e90 	.word	0x08014e90

08009ca8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009cac:	f7ff ffb6 	bl	8009c1c <HAL_RCC_GetHCLKFreq>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	4b06      	ldr	r3, [pc, #24]	; (8009ccc <HAL_RCC_GetPCLK2Freq+0x24>)
 8009cb4:	69db      	ldr	r3, [r3, #28]
 8009cb6:	0a1b      	lsrs	r3, r3, #8
 8009cb8:	f003 0307 	and.w	r3, r3, #7
 8009cbc:	4904      	ldr	r1, [pc, #16]	; (8009cd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009cbe:	5ccb      	ldrb	r3, [r1, r3]
 8009cc0:	f003 031f 	and.w	r3, r3, #31
 8009cc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	58024400 	.word	0x58024400
 8009cd0:	08014e90 	.word	0x08014e90

08009cd4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009cd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009cd8:	b0c6      	sub	sp, #280	; 0x118
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009cf8:	2500      	movs	r5, #0
 8009cfa:	ea54 0305 	orrs.w	r3, r4, r5
 8009cfe:	d049      	beq.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d06:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009d0a:	d02f      	beq.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009d0c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009d10:	d828      	bhi.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009d12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d16:	d01a      	beq.n	8009d4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009d18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d1c:	d822      	bhi.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d003      	beq.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009d22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d26:	d007      	beq.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009d28:	e01c      	b.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d2a:	4bab      	ldr	r3, [pc, #684]	; (8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d2e:	4aaa      	ldr	r2, [pc, #680]	; (8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009d36:	e01a      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d3c:	3308      	adds	r3, #8
 8009d3e:	2102      	movs	r1, #2
 8009d40:	4618      	mov	r0, r3
 8009d42:	f002 fa49 	bl	800c1d8 <RCCEx_PLL2_Config>
 8009d46:	4603      	mov	r3, r0
 8009d48:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009d4c:	e00f      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d52:	3328      	adds	r3, #40	; 0x28
 8009d54:	2102      	movs	r1, #2
 8009d56:	4618      	mov	r0, r3
 8009d58:	f002 faf0 	bl	800c33c <RCCEx_PLL3_Config>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009d62:	e004      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d64:	2301      	movs	r3, #1
 8009d66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009d6a:	e000      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009d6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d6e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d10a      	bne.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009d76:	4b98      	ldr	r3, [pc, #608]	; (8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d7a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d84:	4a94      	ldr	r2, [pc, #592]	; (8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d86:	430b      	orrs	r3, r1
 8009d88:	6513      	str	r3, [r2, #80]	; 0x50
 8009d8a:	e003      	b.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009d90:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009da0:	f04f 0900 	mov.w	r9, #0
 8009da4:	ea58 0309 	orrs.w	r3, r8, r9
 8009da8:	d047      	beq.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009db0:	2b04      	cmp	r3, #4
 8009db2:	d82a      	bhi.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009db4:	a201      	add	r2, pc, #4	; (adr r2, 8009dbc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dba:	bf00      	nop
 8009dbc:	08009dd1 	.word	0x08009dd1
 8009dc0:	08009ddf 	.word	0x08009ddf
 8009dc4:	08009df5 	.word	0x08009df5
 8009dc8:	08009e13 	.word	0x08009e13
 8009dcc:	08009e13 	.word	0x08009e13
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dd0:	4b81      	ldr	r3, [pc, #516]	; (8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd4:	4a80      	ldr	r2, [pc, #512]	; (8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009dd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ddc:	e01a      	b.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009de2:	3308      	adds	r3, #8
 8009de4:	2100      	movs	r1, #0
 8009de6:	4618      	mov	r0, r3
 8009de8:	f002 f9f6 	bl	800c1d8 <RCCEx_PLL2_Config>
 8009dec:	4603      	mov	r3, r0
 8009dee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009df2:	e00f      	b.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009df8:	3328      	adds	r3, #40	; 0x28
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f002 fa9d 	bl	800c33c <RCCEx_PLL3_Config>
 8009e02:	4603      	mov	r3, r0
 8009e04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e08:	e004      	b.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009e10:	e000      	b.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009e12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d10a      	bne.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009e1c:	4b6e      	ldr	r3, [pc, #440]	; (8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e20:	f023 0107 	bic.w	r1, r3, #7
 8009e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e2a:	4a6b      	ldr	r2, [pc, #428]	; (8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e2c:	430b      	orrs	r3, r1
 8009e2e:	6513      	str	r3, [r2, #80]	; 0x50
 8009e30:	e003      	b.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e32:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009e36:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e42:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8009e46:	f04f 0b00 	mov.w	fp, #0
 8009e4a:	ea5a 030b 	orrs.w	r3, sl, fp
 8009e4e:	d05b      	beq.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009e58:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009e5c:	d03b      	beq.n	8009ed6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009e5e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009e62:	d834      	bhi.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009e64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e68:	d037      	beq.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009e6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e6e:	d82e      	bhi.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009e70:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009e74:	d033      	beq.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009e76:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009e7a:	d828      	bhi.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009e7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e80:	d01a      	beq.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009e82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e86:	d822      	bhi.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d003      	beq.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009e8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e90:	d007      	beq.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8009e92:	e01c      	b.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e94:	4b50      	ldr	r3, [pc, #320]	; (8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e98:	4a4f      	ldr	r2, [pc, #316]	; (8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ea0:	e01e      	b.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ea6:	3308      	adds	r3, #8
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f002 f994 	bl	800c1d8 <RCCEx_PLL2_Config>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009eb6:	e013      	b.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ebc:	3328      	adds	r3, #40	; 0x28
 8009ebe:	2100      	movs	r1, #0
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f002 fa3b 	bl	800c33c <RCCEx_PLL3_Config>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ecc:	e008      	b.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009ed4:	e004      	b.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009ed6:	bf00      	nop
 8009ed8:	e002      	b.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009eda:	bf00      	nop
 8009edc:	e000      	b.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009ede:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ee0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d10b      	bne.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009ee8:	4b3b      	ldr	r3, [pc, #236]	; (8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eec:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ef4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009ef8:	4a37      	ldr	r2, [pc, #220]	; (8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009efa:	430b      	orrs	r3, r1
 8009efc:	6593      	str	r3, [r2, #88]	; 0x58
 8009efe:	e003      	b.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f04:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f10:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009f14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009f18:	2300      	movs	r3, #0
 8009f1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009f1e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009f22:	460b      	mov	r3, r1
 8009f24:	4313      	orrs	r3, r2
 8009f26:	d05d      	beq.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f2c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009f30:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009f34:	d03b      	beq.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009f36:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009f3a:	d834      	bhi.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009f3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009f40:	d037      	beq.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009f42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009f46:	d82e      	bhi.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009f48:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009f4c:	d033      	beq.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8009f4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009f52:	d828      	bhi.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009f54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f58:	d01a      	beq.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8009f5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f5e:	d822      	bhi.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d003      	beq.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009f64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009f68:	d007      	beq.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009f6a:	e01c      	b.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f6c:	4b1a      	ldr	r3, [pc, #104]	; (8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f70:	4a19      	ldr	r2, [pc, #100]	; (8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f78:	e01e      	b.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f7e:	3308      	adds	r3, #8
 8009f80:	2100      	movs	r1, #0
 8009f82:	4618      	mov	r0, r3
 8009f84:	f002 f928 	bl	800c1d8 <RCCEx_PLL2_Config>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009f8e:	e013      	b.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f94:	3328      	adds	r3, #40	; 0x28
 8009f96:	2100      	movs	r1, #0
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f002 f9cf 	bl	800c33c <RCCEx_PLL3_Config>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009fa4:	e008      	b.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009fac:	e004      	b.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009fae:	bf00      	nop
 8009fb0:	e002      	b.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009fb2:	bf00      	nop
 8009fb4:	e000      	b.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009fb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fb8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d10d      	bne.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009fc0:	4b05      	ldr	r3, [pc, #20]	; (8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fc4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fcc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009fd0:	4a01      	ldr	r2, [pc, #4]	; (8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009fd2:	430b      	orrs	r3, r1
 8009fd4:	6593      	str	r3, [r2, #88]	; 0x58
 8009fd6:	e005      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009fd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fdc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009fe0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fec:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009ff0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009ffa:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009ffe:	460b      	mov	r3, r1
 800a000:	4313      	orrs	r3, r2
 800a002:	d03a      	beq.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a00a:	2b30      	cmp	r3, #48	; 0x30
 800a00c:	d01f      	beq.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800a00e:	2b30      	cmp	r3, #48	; 0x30
 800a010:	d819      	bhi.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a012:	2b20      	cmp	r3, #32
 800a014:	d00c      	beq.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a016:	2b20      	cmp	r3, #32
 800a018:	d815      	bhi.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d019      	beq.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a01e:	2b10      	cmp	r3, #16
 800a020:	d111      	bne.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a022:	4baa      	ldr	r3, [pc, #680]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a026:	4aa9      	ldr	r2, [pc, #676]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a02c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a02e:	e011      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a034:	3308      	adds	r3, #8
 800a036:	2102      	movs	r1, #2
 800a038:	4618      	mov	r0, r3
 800a03a:	f002 f8cd 	bl	800c1d8 <RCCEx_PLL2_Config>
 800a03e:	4603      	mov	r3, r0
 800a040:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a044:	e006      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a046:	2301      	movs	r3, #1
 800a048:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a04c:	e002      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a04e:	bf00      	nop
 800a050:	e000      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a052:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a054:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d10a      	bne.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a05c:	4b9b      	ldr	r3, [pc, #620]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a05e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a060:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800a064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a06a:	4a98      	ldr	r2, [pc, #608]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a06c:	430b      	orrs	r3, r1
 800a06e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a070:	e003      	b.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a072:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a076:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a07a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a082:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800a086:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a08a:	2300      	movs	r3, #0
 800a08c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a090:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800a094:	460b      	mov	r3, r1
 800a096:	4313      	orrs	r3, r2
 800a098:	d051      	beq.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a09a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a09e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0a4:	d035      	beq.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800a0a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0aa:	d82e      	bhi.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a0ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a0b0:	d031      	beq.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800a0b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a0b6:	d828      	bhi.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a0b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0bc:	d01a      	beq.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800a0be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0c2:	d822      	bhi.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d003      	beq.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800a0c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0cc:	d007      	beq.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800a0ce:	e01c      	b.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0d0:	4b7e      	ldr	r3, [pc, #504]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d4:	4a7d      	ldr	r2, [pc, #500]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a0d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a0dc:	e01c      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0e2:	3308      	adds	r3, #8
 800a0e4:	2100      	movs	r1, #0
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f002 f876 	bl	800c1d8 <RCCEx_PLL2_Config>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a0f2:	e011      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a0f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0f8:	3328      	adds	r3, #40	; 0x28
 800a0fa:	2100      	movs	r1, #0
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f002 f91d 	bl	800c33c <RCCEx_PLL3_Config>
 800a102:	4603      	mov	r3, r0
 800a104:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a108:	e006      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a10a:	2301      	movs	r3, #1
 800a10c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a110:	e002      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a112:	bf00      	nop
 800a114:	e000      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a116:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a118:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d10a      	bne.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a120:	4b6a      	ldr	r3, [pc, #424]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a124:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a12c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a12e:	4a67      	ldr	r2, [pc, #412]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a130:	430b      	orrs	r3, r1
 800a132:	6513      	str	r3, [r2, #80]	; 0x50
 800a134:	e003      	b.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a136:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a13a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a13e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a146:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800a14a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a14e:	2300      	movs	r3, #0
 800a150:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a154:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800a158:	460b      	mov	r3, r1
 800a15a:	4313      	orrs	r3, r2
 800a15c:	d053      	beq.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a15e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a168:	d033      	beq.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800a16a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a16e:	d82c      	bhi.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a170:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a174:	d02f      	beq.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800a176:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a17a:	d826      	bhi.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a17c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a180:	d02b      	beq.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a182:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a186:	d820      	bhi.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a188:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a18c:	d012      	beq.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800a18e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a192:	d81a      	bhi.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a194:	2b00      	cmp	r3, #0
 800a196:	d022      	beq.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800a198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a19c:	d115      	bne.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a19e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1a2:	3308      	adds	r3, #8
 800a1a4:	2101      	movs	r1, #1
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f002 f816 	bl	800c1d8 <RCCEx_PLL2_Config>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a1b2:	e015      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1b8:	3328      	adds	r3, #40	; 0x28
 800a1ba:	2101      	movs	r1, #1
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f002 f8bd 	bl	800c33c <RCCEx_PLL3_Config>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a1c8:	e00a      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a1d0:	e006      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a1d2:	bf00      	nop
 800a1d4:	e004      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a1d6:	bf00      	nop
 800a1d8:	e002      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a1da:	bf00      	nop
 800a1dc:	e000      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a1de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d10a      	bne.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a1e8:	4b38      	ldr	r3, [pc, #224]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a1ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1ec:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a1f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1f6:	4a35      	ldr	r2, [pc, #212]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a1f8:	430b      	orrs	r3, r1
 800a1fa:	6513      	str	r3, [r2, #80]	; 0x50
 800a1fc:	e003      	b.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a202:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a206:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800a212:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a216:	2300      	movs	r3, #0
 800a218:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a21c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a220:	460b      	mov	r3, r1
 800a222:	4313      	orrs	r3, r2
 800a224:	d058      	beq.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a22a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a22e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a232:	d033      	beq.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a234:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a238:	d82c      	bhi.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a23a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a23e:	d02f      	beq.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a244:	d826      	bhi.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a246:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a24a:	d02b      	beq.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a24c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a250:	d820      	bhi.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a252:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a256:	d012      	beq.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800a258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a25c:	d81a      	bhi.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d022      	beq.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a262:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a266:	d115      	bne.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a268:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a26c:	3308      	adds	r3, #8
 800a26e:	2101      	movs	r1, #1
 800a270:	4618      	mov	r0, r3
 800a272:	f001 ffb1 	bl	800c1d8 <RCCEx_PLL2_Config>
 800a276:	4603      	mov	r3, r0
 800a278:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a27c:	e015      	b.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a27e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a282:	3328      	adds	r3, #40	; 0x28
 800a284:	2101      	movs	r1, #1
 800a286:	4618      	mov	r0, r3
 800a288:	f002 f858 	bl	800c33c <RCCEx_PLL3_Config>
 800a28c:	4603      	mov	r3, r0
 800a28e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a292:	e00a      	b.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a294:	2301      	movs	r3, #1
 800a296:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a29a:	e006      	b.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a29c:	bf00      	nop
 800a29e:	e004      	b.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a2a0:	bf00      	nop
 800a2a2:	e002      	b.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a2a4:	bf00      	nop
 800a2a6:	e000      	b.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a2a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d10e      	bne.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a2b2:	4b06      	ldr	r3, [pc, #24]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a2b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2b6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a2ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a2c2:	4a02      	ldr	r2, [pc, #8]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a2c4:	430b      	orrs	r3, r1
 800a2c6:	6593      	str	r3, [r2, #88]	; 0x58
 800a2c8:	e006      	b.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a2ca:	bf00      	nop
 800a2cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a2d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a2d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800a2e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a2ee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	d037      	beq.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a2f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a302:	d00e      	beq.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800a304:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a308:	d816      	bhi.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d018      	beq.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800a30e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a312:	d111      	bne.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a314:	4bc4      	ldr	r3, [pc, #784]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a318:	4ac3      	ldr	r2, [pc, #780]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a31a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a31e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a320:	e00f      	b.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a326:	3308      	adds	r3, #8
 800a328:	2101      	movs	r1, #1
 800a32a:	4618      	mov	r0, r3
 800a32c:	f001 ff54 	bl	800c1d8 <RCCEx_PLL2_Config>
 800a330:	4603      	mov	r3, r0
 800a332:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a336:	e004      	b.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a338:	2301      	movs	r3, #1
 800a33a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a33e:	e000      	b.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800a340:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a342:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a346:	2b00      	cmp	r3, #0
 800a348:	d10a      	bne.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a34a:	4bb7      	ldr	r3, [pc, #732]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a34c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a34e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a352:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a358:	4ab3      	ldr	r2, [pc, #716]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a35a:	430b      	orrs	r3, r1
 800a35c:	6513      	str	r3, [r2, #80]	; 0x50
 800a35e:	e003      	b.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a360:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a364:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a370:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800a374:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a378:	2300      	movs	r3, #0
 800a37a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a37e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a382:	460b      	mov	r3, r1
 800a384:	4313      	orrs	r3, r2
 800a386:	d039      	beq.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a388:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a38c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a38e:	2b03      	cmp	r3, #3
 800a390:	d81c      	bhi.n	800a3cc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800a392:	a201      	add	r2, pc, #4	; (adr r2, 800a398 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800a394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a398:	0800a3d5 	.word	0x0800a3d5
 800a39c:	0800a3a9 	.word	0x0800a3a9
 800a3a0:	0800a3b7 	.word	0x0800a3b7
 800a3a4:	0800a3d5 	.word	0x0800a3d5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3a8:	4b9f      	ldr	r3, [pc, #636]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ac:	4a9e      	ldr	r2, [pc, #632]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a3b4:	e00f      	b.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a3b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3ba:	3308      	adds	r3, #8
 800a3bc:	2102      	movs	r1, #2
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f001 ff0a 	bl	800c1d8 <RCCEx_PLL2_Config>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a3ca:	e004      	b.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a3d2:	e000      	b.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800a3d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d10a      	bne.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a3de:	4b92      	ldr	r3, [pc, #584]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3e2:	f023 0103 	bic.w	r1, r3, #3
 800a3e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3ec:	4a8e      	ldr	r2, [pc, #568]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3ee:	430b      	orrs	r3, r1
 800a3f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a3f2:	e003      	b.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a3f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a3fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a404:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800a408:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a40c:	2300      	movs	r3, #0
 800a40e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a412:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a416:	460b      	mov	r3, r1
 800a418:	4313      	orrs	r3, r2
 800a41a:	f000 8099 	beq.w	800a550 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a41e:	4b83      	ldr	r3, [pc, #524]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a82      	ldr	r2, [pc, #520]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a428:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a42a:	f7f8 feb5 	bl	8003198 <HAL_GetTick>
 800a42e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a432:	e00b      	b.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a434:	f7f8 feb0 	bl	8003198 <HAL_GetTick>
 800a438:	4602      	mov	r2, r0
 800a43a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a43e:	1ad3      	subs	r3, r2, r3
 800a440:	2b64      	cmp	r3, #100	; 0x64
 800a442:	d903      	bls.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800a444:	2303      	movs	r3, #3
 800a446:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a44a:	e005      	b.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a44c:	4b77      	ldr	r3, [pc, #476]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a454:	2b00      	cmp	r3, #0
 800a456:	d0ed      	beq.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800a458:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d173      	bne.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a460:	4b71      	ldr	r3, [pc, #452]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a462:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a468:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a46c:	4053      	eors	r3, r2
 800a46e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a472:	2b00      	cmp	r3, #0
 800a474:	d015      	beq.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a476:	4b6c      	ldr	r3, [pc, #432]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a47a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a47e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a482:	4b69      	ldr	r3, [pc, #420]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a486:	4a68      	ldr	r2, [pc, #416]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a48c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a48e:	4b66      	ldr	r3, [pc, #408]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a492:	4a65      	ldr	r2, [pc, #404]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a498:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a49a:	4a63      	ldr	r2, [pc, #396]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a49c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a4a0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a4a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a4aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4ae:	d118      	bne.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4b0:	f7f8 fe72 	bl	8003198 <HAL_GetTick>
 800a4b4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a4b8:	e00d      	b.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4ba:	f7f8 fe6d 	bl	8003198 <HAL_GetTick>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a4c4:	1ad2      	subs	r2, r2, r3
 800a4c6:	f241 3388 	movw	r3, #5000	; 0x1388
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d903      	bls.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800a4ce:	2303      	movs	r3, #3
 800a4d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800a4d4:	e005      	b.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a4d6:	4b54      	ldr	r3, [pc, #336]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4da:	f003 0302 	and.w	r3, r3, #2
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d0eb      	beq.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800a4e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d129      	bne.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a4ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a4f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a4fa:	d10e      	bne.n	800a51a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800a4fc:	4b4a      	ldr	r3, [pc, #296]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4fe:	691b      	ldr	r3, [r3, #16]
 800a500:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a508:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a50c:	091a      	lsrs	r2, r3, #4
 800a50e:	4b48      	ldr	r3, [pc, #288]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a510:	4013      	ands	r3, r2
 800a512:	4a45      	ldr	r2, [pc, #276]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a514:	430b      	orrs	r3, r1
 800a516:	6113      	str	r3, [r2, #16]
 800a518:	e005      	b.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a51a:	4b43      	ldr	r3, [pc, #268]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	4a42      	ldr	r2, [pc, #264]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a520:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a524:	6113      	str	r3, [r2, #16]
 800a526:	4b40      	ldr	r3, [pc, #256]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a528:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a52a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a52e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a536:	4a3c      	ldr	r2, [pc, #240]	; (800a628 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a538:	430b      	orrs	r3, r1
 800a53a:	6713      	str	r3, [r2, #112]	; 0x70
 800a53c:	e008      	b.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a53e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a542:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800a546:	e003      	b.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a548:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a54c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a558:	f002 0301 	and.w	r3, r2, #1
 800a55c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a560:	2300      	movs	r3, #0
 800a562:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a566:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a56a:	460b      	mov	r3, r1
 800a56c:	4313      	orrs	r3, r2
 800a56e:	f000 808f 	beq.w	800a690 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a572:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a576:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a578:	2b28      	cmp	r3, #40	; 0x28
 800a57a:	d871      	bhi.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800a57c:	a201      	add	r2, pc, #4	; (adr r2, 800a584 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800a57e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a582:	bf00      	nop
 800a584:	0800a669 	.word	0x0800a669
 800a588:	0800a661 	.word	0x0800a661
 800a58c:	0800a661 	.word	0x0800a661
 800a590:	0800a661 	.word	0x0800a661
 800a594:	0800a661 	.word	0x0800a661
 800a598:	0800a661 	.word	0x0800a661
 800a59c:	0800a661 	.word	0x0800a661
 800a5a0:	0800a661 	.word	0x0800a661
 800a5a4:	0800a635 	.word	0x0800a635
 800a5a8:	0800a661 	.word	0x0800a661
 800a5ac:	0800a661 	.word	0x0800a661
 800a5b0:	0800a661 	.word	0x0800a661
 800a5b4:	0800a661 	.word	0x0800a661
 800a5b8:	0800a661 	.word	0x0800a661
 800a5bc:	0800a661 	.word	0x0800a661
 800a5c0:	0800a661 	.word	0x0800a661
 800a5c4:	0800a64b 	.word	0x0800a64b
 800a5c8:	0800a661 	.word	0x0800a661
 800a5cc:	0800a661 	.word	0x0800a661
 800a5d0:	0800a661 	.word	0x0800a661
 800a5d4:	0800a661 	.word	0x0800a661
 800a5d8:	0800a661 	.word	0x0800a661
 800a5dc:	0800a661 	.word	0x0800a661
 800a5e0:	0800a661 	.word	0x0800a661
 800a5e4:	0800a669 	.word	0x0800a669
 800a5e8:	0800a661 	.word	0x0800a661
 800a5ec:	0800a661 	.word	0x0800a661
 800a5f0:	0800a661 	.word	0x0800a661
 800a5f4:	0800a661 	.word	0x0800a661
 800a5f8:	0800a661 	.word	0x0800a661
 800a5fc:	0800a661 	.word	0x0800a661
 800a600:	0800a661 	.word	0x0800a661
 800a604:	0800a669 	.word	0x0800a669
 800a608:	0800a661 	.word	0x0800a661
 800a60c:	0800a661 	.word	0x0800a661
 800a610:	0800a661 	.word	0x0800a661
 800a614:	0800a661 	.word	0x0800a661
 800a618:	0800a661 	.word	0x0800a661
 800a61c:	0800a661 	.word	0x0800a661
 800a620:	0800a661 	.word	0x0800a661
 800a624:	0800a669 	.word	0x0800a669
 800a628:	58024400 	.word	0x58024400
 800a62c:	58024800 	.word	0x58024800
 800a630:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a638:	3308      	adds	r3, #8
 800a63a:	2101      	movs	r1, #1
 800a63c:	4618      	mov	r0, r3
 800a63e:	f001 fdcb 	bl	800c1d8 <RCCEx_PLL2_Config>
 800a642:	4603      	mov	r3, r0
 800a644:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a648:	e00f      	b.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a64a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a64e:	3328      	adds	r3, #40	; 0x28
 800a650:	2101      	movs	r1, #1
 800a652:	4618      	mov	r0, r3
 800a654:	f001 fe72 	bl	800c33c <RCCEx_PLL3_Config>
 800a658:	4603      	mov	r3, r0
 800a65a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a65e:	e004      	b.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a660:	2301      	movs	r3, #1
 800a662:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a666:	e000      	b.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800a668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a66a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d10a      	bne.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a672:	4bbf      	ldr	r3, [pc, #764]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a676:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a67a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a67e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a680:	4abb      	ldr	r2, [pc, #748]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a682:	430b      	orrs	r3, r1
 800a684:	6553      	str	r3, [r2, #84]	; 0x54
 800a686:	e003      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a688:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a68c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a698:	f002 0302 	and.w	r3, r2, #2
 800a69c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a6a6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	d041      	beq.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a6b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6b6:	2b05      	cmp	r3, #5
 800a6b8:	d824      	bhi.n	800a704 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800a6ba:	a201      	add	r2, pc, #4	; (adr r2, 800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800a6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c0:	0800a70d 	.word	0x0800a70d
 800a6c4:	0800a6d9 	.word	0x0800a6d9
 800a6c8:	0800a6ef 	.word	0x0800a6ef
 800a6cc:	0800a70d 	.word	0x0800a70d
 800a6d0:	0800a70d 	.word	0x0800a70d
 800a6d4:	0800a70d 	.word	0x0800a70d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a6d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6dc:	3308      	adds	r3, #8
 800a6de:	2101      	movs	r1, #1
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f001 fd79 	bl	800c1d8 <RCCEx_PLL2_Config>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a6ec:	e00f      	b.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a6ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6f2:	3328      	adds	r3, #40	; 0x28
 800a6f4:	2101      	movs	r1, #1
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f001 fe20 	bl	800c33c <RCCEx_PLL3_Config>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a702:	e004      	b.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a704:	2301      	movs	r3, #1
 800a706:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a70a:	e000      	b.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800a70c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a70e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a712:	2b00      	cmp	r3, #0
 800a714:	d10a      	bne.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a716:	4b96      	ldr	r3, [pc, #600]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a71a:	f023 0107 	bic.w	r1, r3, #7
 800a71e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a724:	4a92      	ldr	r2, [pc, #584]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a726:	430b      	orrs	r3, r1
 800a728:	6553      	str	r3, [r2, #84]	; 0x54
 800a72a:	e003      	b.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a72c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a730:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73c:	f002 0304 	and.w	r3, r2, #4
 800a740:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a744:	2300      	movs	r3, #0
 800a746:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a74a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a74e:	460b      	mov	r3, r1
 800a750:	4313      	orrs	r3, r2
 800a752:	d044      	beq.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a754:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a75c:	2b05      	cmp	r3, #5
 800a75e:	d825      	bhi.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a760:	a201      	add	r2, pc, #4	; (adr r2, 800a768 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a766:	bf00      	nop
 800a768:	0800a7b5 	.word	0x0800a7b5
 800a76c:	0800a781 	.word	0x0800a781
 800a770:	0800a797 	.word	0x0800a797
 800a774:	0800a7b5 	.word	0x0800a7b5
 800a778:	0800a7b5 	.word	0x0800a7b5
 800a77c:	0800a7b5 	.word	0x0800a7b5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a784:	3308      	adds	r3, #8
 800a786:	2101      	movs	r1, #1
 800a788:	4618      	mov	r0, r3
 800a78a:	f001 fd25 	bl	800c1d8 <RCCEx_PLL2_Config>
 800a78e:	4603      	mov	r3, r0
 800a790:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a794:	e00f      	b.n	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a79a:	3328      	adds	r3, #40	; 0x28
 800a79c:	2101      	movs	r1, #1
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f001 fdcc 	bl	800c33c <RCCEx_PLL3_Config>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a7aa:	e004      	b.n	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a7b2:	e000      	b.n	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a7b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d10b      	bne.n	800a7d6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a7be:	4b6c      	ldr	r3, [pc, #432]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a7c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7c2:	f023 0107 	bic.w	r1, r3, #7
 800a7c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7ce:	4a68      	ldr	r2, [pc, #416]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a7d0:	430b      	orrs	r3, r1
 800a7d2:	6593      	str	r3, [r2, #88]	; 0x58
 800a7d4:	e003      	b.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7da:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a7de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e6:	f002 0320 	and.w	r3, r2, #32
 800a7ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a7f4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	d055      	beq.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a7fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a802:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a806:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a80a:	d033      	beq.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a80c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a810:	d82c      	bhi.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a816:	d02f      	beq.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a81c:	d826      	bhi.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a81e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a822:	d02b      	beq.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a824:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a828:	d820      	bhi.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a82a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a82e:	d012      	beq.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800a830:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a834:	d81a      	bhi.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a836:	2b00      	cmp	r3, #0
 800a838:	d022      	beq.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a83a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a83e:	d115      	bne.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a844:	3308      	adds	r3, #8
 800a846:	2100      	movs	r1, #0
 800a848:	4618      	mov	r0, r3
 800a84a:	f001 fcc5 	bl	800c1d8 <RCCEx_PLL2_Config>
 800a84e:	4603      	mov	r3, r0
 800a850:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a854:	e015      	b.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a85a:	3328      	adds	r3, #40	; 0x28
 800a85c:	2102      	movs	r1, #2
 800a85e:	4618      	mov	r0, r3
 800a860:	f001 fd6c 	bl	800c33c <RCCEx_PLL3_Config>
 800a864:	4603      	mov	r3, r0
 800a866:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a86a:	e00a      	b.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a86c:	2301      	movs	r3, #1
 800a86e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a872:	e006      	b.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a874:	bf00      	nop
 800a876:	e004      	b.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a878:	bf00      	nop
 800a87a:	e002      	b.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a87c:	bf00      	nop
 800a87e:	e000      	b.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a880:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a882:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a886:	2b00      	cmp	r3, #0
 800a888:	d10b      	bne.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a88a:	4b39      	ldr	r3, [pc, #228]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a88c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a88e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a896:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a89a:	4a35      	ldr	r2, [pc, #212]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a89c:	430b      	orrs	r3, r1
 800a89e:	6553      	str	r3, [r2, #84]	; 0x54
 800a8a0:	e003      	b.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8a6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a8aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a8b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a8c0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	d058      	beq.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a8ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a8d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a8d6:	d033      	beq.n	800a940 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800a8d8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a8dc:	d82c      	bhi.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a8de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8e2:	d02f      	beq.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a8e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8e8:	d826      	bhi.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a8ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a8ee:	d02b      	beq.n	800a948 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a8f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a8f4:	d820      	bhi.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a8f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8fa:	d012      	beq.n	800a922 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800a8fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a900:	d81a      	bhi.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a902:	2b00      	cmp	r3, #0
 800a904:	d022      	beq.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a90a:	d115      	bne.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a90c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a910:	3308      	adds	r3, #8
 800a912:	2100      	movs	r1, #0
 800a914:	4618      	mov	r0, r3
 800a916:	f001 fc5f 	bl	800c1d8 <RCCEx_PLL2_Config>
 800a91a:	4603      	mov	r3, r0
 800a91c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a920:	e015      	b.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a926:	3328      	adds	r3, #40	; 0x28
 800a928:	2102      	movs	r1, #2
 800a92a:	4618      	mov	r0, r3
 800a92c:	f001 fd06 	bl	800c33c <RCCEx_PLL3_Config>
 800a930:	4603      	mov	r3, r0
 800a932:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a936:	e00a      	b.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a938:	2301      	movs	r3, #1
 800a93a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a93e:	e006      	b.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a940:	bf00      	nop
 800a942:	e004      	b.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a944:	bf00      	nop
 800a946:	e002      	b.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a948:	bf00      	nop
 800a94a:	e000      	b.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a94c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a94e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a952:	2b00      	cmp	r3, #0
 800a954:	d10e      	bne.n	800a974 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a956:	4b06      	ldr	r3, [pc, #24]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a95a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a95e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a962:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a966:	4a02      	ldr	r2, [pc, #8]	; (800a970 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a968:	430b      	orrs	r3, r1
 800a96a:	6593      	str	r3, [r2, #88]	; 0x58
 800a96c:	e006      	b.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800a96e:	bf00      	nop
 800a970:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a974:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a978:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a97c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a984:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a988:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a98c:	2300      	movs	r3, #0
 800a98e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a992:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a996:	460b      	mov	r3, r1
 800a998:	4313      	orrs	r3, r2
 800a99a:	d055      	beq.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a99c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a9a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a9a8:	d033      	beq.n	800aa12 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800a9aa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a9ae:	d82c      	bhi.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a9b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9b4:	d02f      	beq.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a9b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9ba:	d826      	bhi.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a9bc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a9c0:	d02b      	beq.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a9c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a9c6:	d820      	bhi.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a9c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a9cc:	d012      	beq.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800a9ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a9d2:	d81a      	bhi.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d022      	beq.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a9d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9dc:	d115      	bne.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9e2:	3308      	adds	r3, #8
 800a9e4:	2100      	movs	r1, #0
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f001 fbf6 	bl	800c1d8 <RCCEx_PLL2_Config>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a9f2:	e015      	b.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a9f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9f8:	3328      	adds	r3, #40	; 0x28
 800a9fa:	2102      	movs	r1, #2
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f001 fc9d 	bl	800c33c <RCCEx_PLL3_Config>
 800aa02:	4603      	mov	r3, r0
 800aa04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800aa08:	e00a      	b.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa10:	e006      	b.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800aa12:	bf00      	nop
 800aa14:	e004      	b.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800aa16:	bf00      	nop
 800aa18:	e002      	b.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800aa1a:	bf00      	nop
 800aa1c:	e000      	b.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800aa1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d10b      	bne.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800aa28:	4ba0      	ldr	r3, [pc, #640]	; (800acac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa2c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800aa30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aa38:	4a9c      	ldr	r2, [pc, #624]	; (800acac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa3a:	430b      	orrs	r3, r1
 800aa3c:	6593      	str	r3, [r2, #88]	; 0x58
 800aa3e:	e003      	b.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa44:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800aa48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa50:	f002 0308 	and.w	r3, r2, #8
 800aa54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800aa58:	2300      	movs	r3, #0
 800aa5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800aa5e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800aa62:	460b      	mov	r3, r1
 800aa64:	4313      	orrs	r3, r2
 800aa66:	d01e      	beq.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800aa68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa74:	d10c      	bne.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aa76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa7a:	3328      	adds	r3, #40	; 0x28
 800aa7c:	2102      	movs	r1, #2
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f001 fc5c 	bl	800c33c <RCCEx_PLL3_Config>
 800aa84:	4603      	mov	r3, r0
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d002      	beq.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800aa90:	4b86      	ldr	r3, [pc, #536]	; (800acac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aa98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aaa0:	4a82      	ldr	r2, [pc, #520]	; (800acac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aaa2:	430b      	orrs	r3, r1
 800aaa4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aaa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaae:	f002 0310 	and.w	r3, r2, #16
 800aab2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aab6:	2300      	movs	r3, #0
 800aab8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800aabc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800aac0:	460b      	mov	r3, r1
 800aac2:	4313      	orrs	r3, r2
 800aac4:	d01e      	beq.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800aac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aad2:	d10c      	bne.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aad8:	3328      	adds	r3, #40	; 0x28
 800aada:	2102      	movs	r1, #2
 800aadc:	4618      	mov	r0, r3
 800aade:	f001 fc2d 	bl	800c33c <RCCEx_PLL3_Config>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d002      	beq.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800aae8:	2301      	movs	r3, #1
 800aaea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aaee:	4b6f      	ldr	r3, [pc, #444]	; (800acac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aaf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaf2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800aaf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aafa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aafe:	4a6b      	ldr	r2, [pc, #428]	; (800acac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab00:	430b      	orrs	r3, r1
 800ab02:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ab04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800ab10:	67bb      	str	r3, [r7, #120]	; 0x78
 800ab12:	2300      	movs	r3, #0
 800ab14:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ab16:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	d03e      	beq.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ab20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ab28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab2c:	d022      	beq.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800ab2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab32:	d81b      	bhi.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d003      	beq.n	800ab40 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800ab38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab3c:	d00b      	beq.n	800ab56 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800ab3e:	e015      	b.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab44:	3308      	adds	r3, #8
 800ab46:	2100      	movs	r1, #0
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f001 fb45 	bl	800c1d8 <RCCEx_PLL2_Config>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ab54:	e00f      	b.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab5a:	3328      	adds	r3, #40	; 0x28
 800ab5c:	2102      	movs	r1, #2
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f001 fbec 	bl	800c33c <RCCEx_PLL3_Config>
 800ab64:	4603      	mov	r3, r0
 800ab66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ab6a:	e004      	b.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab72:	e000      	b.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800ab74:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab76:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d10b      	bne.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ab7e:	4b4b      	ldr	r3, [pc, #300]	; (800acac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab82:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800ab86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ab8e:	4a47      	ldr	r2, [pc, #284]	; (800acac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab90:	430b      	orrs	r3, r1
 800ab92:	6593      	str	r3, [r2, #88]	; 0x58
 800ab94:	e003      	b.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab96:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab9a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ab9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800abaa:	673b      	str	r3, [r7, #112]	; 0x70
 800abac:	2300      	movs	r3, #0
 800abae:	677b      	str	r3, [r7, #116]	; 0x74
 800abb0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800abb4:	460b      	mov	r3, r1
 800abb6:	4313      	orrs	r3, r2
 800abb8:	d03b      	beq.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800abba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abc2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800abc6:	d01f      	beq.n	800ac08 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800abc8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800abcc:	d818      	bhi.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800abce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abd2:	d003      	beq.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800abd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800abd8:	d007      	beq.n	800abea <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800abda:	e011      	b.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abdc:	4b33      	ldr	r3, [pc, #204]	; (800acac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800abde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe0:	4a32      	ldr	r2, [pc, #200]	; (800acac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800abe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abe6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800abe8:	e00f      	b.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800abea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abee:	3328      	adds	r3, #40	; 0x28
 800abf0:	2101      	movs	r1, #1
 800abf2:	4618      	mov	r0, r3
 800abf4:	f001 fba2 	bl	800c33c <RCCEx_PLL3_Config>
 800abf8:	4603      	mov	r3, r0
 800abfa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800abfe:	e004      	b.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac00:	2301      	movs	r3, #1
 800ac02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac06:	e000      	b.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800ac08:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac0a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d10b      	bne.n	800ac2a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ac12:	4b26      	ldr	r3, [pc, #152]	; (800acac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac16:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ac1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac22:	4a22      	ldr	r2, [pc, #136]	; (800acac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac24:	430b      	orrs	r3, r1
 800ac26:	6553      	str	r3, [r2, #84]	; 0x54
 800ac28:	e003      	b.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac2a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac2e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ac32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac3a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800ac3e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac40:	2300      	movs	r3, #0
 800ac42:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac44:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800ac48:	460b      	mov	r3, r1
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	d034      	beq.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ac4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d003      	beq.n	800ac60 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800ac58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac5c:	d007      	beq.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800ac5e:	e011      	b.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac60:	4b12      	ldr	r3, [pc, #72]	; (800acac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac64:	4a11      	ldr	r2, [pc, #68]	; (800acac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ac6c:	e00e      	b.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ac6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac72:	3308      	adds	r3, #8
 800ac74:	2102      	movs	r1, #2
 800ac76:	4618      	mov	r0, r3
 800ac78:	f001 faae 	bl	800c1d8 <RCCEx_PLL2_Config>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ac82:	e003      	b.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800ac84:	2301      	movs	r3, #1
 800ac86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d10d      	bne.n	800acb0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ac94:	4b05      	ldr	r3, [pc, #20]	; (800acac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ac9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aca2:	4a02      	ldr	r2, [pc, #8]	; (800acac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aca4:	430b      	orrs	r3, r1
 800aca6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aca8:	e006      	b.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800acaa:	bf00      	nop
 800acac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acb0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acb4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800acb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800acc4:	663b      	str	r3, [r7, #96]	; 0x60
 800acc6:	2300      	movs	r3, #0
 800acc8:	667b      	str	r3, [r7, #100]	; 0x64
 800acca:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800acce:	460b      	mov	r3, r1
 800acd0:	4313      	orrs	r3, r2
 800acd2:	d00c      	beq.n	800acee <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800acd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acd8:	3328      	adds	r3, #40	; 0x28
 800acda:	2102      	movs	r1, #2
 800acdc:	4618      	mov	r0, r3
 800acde:	f001 fb2d 	bl	800c33c <RCCEx_PLL3_Config>
 800ace2:	4603      	mov	r3, r0
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d002      	beq.n	800acee <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800ace8:	2301      	movs	r3, #1
 800acea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800acee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800acfa:	65bb      	str	r3, [r7, #88]	; 0x58
 800acfc:	2300      	movs	r3, #0
 800acfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad00:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800ad04:	460b      	mov	r3, r1
 800ad06:	4313      	orrs	r3, r2
 800ad08:	d036      	beq.n	800ad78 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ad0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad14:	d018      	beq.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800ad16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad1a:	d811      	bhi.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ad1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad20:	d014      	beq.n	800ad4c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800ad22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad26:	d80b      	bhi.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d011      	beq.n	800ad50 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800ad2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad30:	d106      	bne.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad32:	4bb7      	ldr	r3, [pc, #732]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad36:	4ab6      	ldr	r2, [pc, #728]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ad3e:	e008      	b.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad40:	2301      	movs	r3, #1
 800ad42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad46:	e004      	b.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ad48:	bf00      	nop
 800ad4a:	e002      	b.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ad4c:	bf00      	nop
 800ad4e:	e000      	b.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ad50:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad52:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d10a      	bne.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ad5a:	4bad      	ldr	r3, [pc, #692]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ad62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad68:	4aa9      	ldr	r2, [pc, #676]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad6a:	430b      	orrs	r3, r1
 800ad6c:	6553      	str	r3, [r2, #84]	; 0x54
 800ad6e:	e003      	b.n	800ad78 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad74:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ad78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad80:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800ad84:	653b      	str	r3, [r7, #80]	; 0x50
 800ad86:	2300      	movs	r3, #0
 800ad88:	657b      	str	r3, [r7, #84]	; 0x54
 800ad8a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800ad8e:	460b      	mov	r3, r1
 800ad90:	4313      	orrs	r3, r2
 800ad92:	d009      	beq.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ad94:	4b9e      	ldr	r3, [pc, #632]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad98:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ad9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ada0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ada2:	4a9b      	ldr	r2, [pc, #620]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ada4:	430b      	orrs	r3, r1
 800ada6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ada8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800adb4:	64bb      	str	r3, [r7, #72]	; 0x48
 800adb6:	2300      	movs	r3, #0
 800adb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800adba:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800adbe:	460b      	mov	r3, r1
 800adc0:	4313      	orrs	r3, r2
 800adc2:	d009      	beq.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800adc4:	4b92      	ldr	r3, [pc, #584]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800adc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adc8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800adcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800add0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800add2:	4a8f      	ldr	r2, [pc, #572]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800add4:	430b      	orrs	r3, r1
 800add6:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800add8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800addc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800ade4:	643b      	str	r3, [r7, #64]	; 0x40
 800ade6:	2300      	movs	r3, #0
 800ade8:	647b      	str	r3, [r7, #68]	; 0x44
 800adea:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800adee:	460b      	mov	r3, r1
 800adf0:	4313      	orrs	r3, r2
 800adf2:	d00e      	beq.n	800ae12 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800adf4:	4b86      	ldr	r3, [pc, #536]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800adf6:	691b      	ldr	r3, [r3, #16]
 800adf8:	4a85      	ldr	r2, [pc, #532]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800adfa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800adfe:	6113      	str	r3, [r2, #16]
 800ae00:	4b83      	ldr	r3, [pc, #524]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae02:	6919      	ldr	r1, [r3, #16]
 800ae04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ae0c:	4a80      	ldr	r2, [pc, #512]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae0e:	430b      	orrs	r3, r1
 800ae10:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ae12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae1a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800ae1e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae20:	2300      	movs	r3, #0
 800ae22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae24:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800ae28:	460b      	mov	r3, r1
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	d009      	beq.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ae2e:	4b78      	ldr	r3, [pc, #480]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae32:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ae36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae3c:	4a74      	ldr	r2, [pc, #464]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae3e:	430b      	orrs	r3, r1
 800ae40:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ae42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800ae4e:	633b      	str	r3, [r7, #48]	; 0x30
 800ae50:	2300      	movs	r3, #0
 800ae52:	637b      	str	r3, [r7, #52]	; 0x34
 800ae54:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800ae58:	460b      	mov	r3, r1
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	d00a      	beq.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ae5e:	4b6c      	ldr	r3, [pc, #432]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae62:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800ae66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae6e:	4a68      	ldr	r2, [pc, #416]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae70:	430b      	orrs	r3, r1
 800ae72:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ae74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7c:	2100      	movs	r1, #0
 800ae7e:	62b9      	str	r1, [r7, #40]	; 0x28
 800ae80:	f003 0301 	and.w	r3, r3, #1
 800ae84:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae86:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800ae8a:	460b      	mov	r3, r1
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	d011      	beq.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae94:	3308      	adds	r3, #8
 800ae96:	2100      	movs	r1, #0
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f001 f99d 	bl	800c1d8 <RCCEx_PLL2_Config>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800aea4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d003      	beq.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aeb0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800aeb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebc:	2100      	movs	r1, #0
 800aebe:	6239      	str	r1, [r7, #32]
 800aec0:	f003 0302 	and.w	r3, r3, #2
 800aec4:	627b      	str	r3, [r7, #36]	; 0x24
 800aec6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800aeca:	460b      	mov	r3, r1
 800aecc:	4313      	orrs	r3, r2
 800aece:	d011      	beq.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aed4:	3308      	adds	r3, #8
 800aed6:	2101      	movs	r1, #1
 800aed8:	4618      	mov	r0, r3
 800aeda:	f001 f97d 	bl	800c1d8 <RCCEx_PLL2_Config>
 800aede:	4603      	mov	r3, r0
 800aee0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800aee4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d003      	beq.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aef0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800aef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefc:	2100      	movs	r1, #0
 800aefe:	61b9      	str	r1, [r7, #24]
 800af00:	f003 0304 	and.w	r3, r3, #4
 800af04:	61fb      	str	r3, [r7, #28]
 800af06:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800af0a:	460b      	mov	r3, r1
 800af0c:	4313      	orrs	r3, r2
 800af0e:	d011      	beq.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800af10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af14:	3308      	adds	r3, #8
 800af16:	2102      	movs	r1, #2
 800af18:	4618      	mov	r0, r3
 800af1a:	f001 f95d 	bl	800c1d8 <RCCEx_PLL2_Config>
 800af1e:	4603      	mov	r3, r0
 800af20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800af24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d003      	beq.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af30:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800af34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3c:	2100      	movs	r1, #0
 800af3e:	6139      	str	r1, [r7, #16]
 800af40:	f003 0308 	and.w	r3, r3, #8
 800af44:	617b      	str	r3, [r7, #20]
 800af46:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800af4a:	460b      	mov	r3, r1
 800af4c:	4313      	orrs	r3, r2
 800af4e:	d011      	beq.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af54:	3328      	adds	r3, #40	; 0x28
 800af56:	2100      	movs	r1, #0
 800af58:	4618      	mov	r0, r3
 800af5a:	f001 f9ef 	bl	800c33c <RCCEx_PLL3_Config>
 800af5e:	4603      	mov	r3, r0
 800af60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800af64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d003      	beq.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af70:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800af74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7c:	2100      	movs	r1, #0
 800af7e:	60b9      	str	r1, [r7, #8]
 800af80:	f003 0310 	and.w	r3, r3, #16
 800af84:	60fb      	str	r3, [r7, #12]
 800af86:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800af8a:	460b      	mov	r3, r1
 800af8c:	4313      	orrs	r3, r2
 800af8e:	d011      	beq.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af94:	3328      	adds	r3, #40	; 0x28
 800af96:	2101      	movs	r1, #1
 800af98:	4618      	mov	r0, r3
 800af9a:	f001 f9cf 	bl	800c33c <RCCEx_PLL3_Config>
 800af9e:	4603      	mov	r3, r0
 800afa0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800afa4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d003      	beq.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afb0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800afb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afbc:	2100      	movs	r1, #0
 800afbe:	6039      	str	r1, [r7, #0]
 800afc0:	f003 0320 	and.w	r3, r3, #32
 800afc4:	607b      	str	r3, [r7, #4]
 800afc6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800afca:	460b      	mov	r3, r1
 800afcc:	4313      	orrs	r3, r2
 800afce:	d011      	beq.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800afd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afd4:	3328      	adds	r3, #40	; 0x28
 800afd6:	2102      	movs	r1, #2
 800afd8:	4618      	mov	r0, r3
 800afda:	f001 f9af 	bl	800c33c <RCCEx_PLL3_Config>
 800afde:	4603      	mov	r3, r0
 800afe0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800afe4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d003      	beq.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aff0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800aff4:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d101      	bne.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800affc:	2300      	movs	r3, #0
 800affe:	e000      	b.n	800b002 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800b000:	2301      	movs	r3, #1
}
 800b002:	4618      	mov	r0, r3
 800b004:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800b008:	46bd      	mov	sp, r7
 800b00a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b00e:	bf00      	nop
 800b010:	58024400 	.word	0x58024400

0800b014 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b090      	sub	sp, #64	; 0x40
 800b018:	af00      	add	r7, sp, #0
 800b01a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b01e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b022:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800b026:	430b      	orrs	r3, r1
 800b028:	f040 8094 	bne.w	800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b02c:	4b9b      	ldr	r3, [pc, #620]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b02e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b030:	f003 0307 	and.w	r3, r3, #7
 800b034:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b038:	2b04      	cmp	r3, #4
 800b03a:	f200 8087 	bhi.w	800b14c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b03e:	a201      	add	r2, pc, #4	; (adr r2, 800b044 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b044:	0800b059 	.word	0x0800b059
 800b048:	0800b081 	.word	0x0800b081
 800b04c:	0800b0a9 	.word	0x0800b0a9
 800b050:	0800b145 	.word	0x0800b145
 800b054:	0800b0d1 	.word	0x0800b0d1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b058:	4b90      	ldr	r3, [pc, #576]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b060:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b064:	d108      	bne.n	800b078 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b06a:	4618      	mov	r0, r3
 800b06c:	f000 ff62 	bl	800bf34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b072:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b074:	f000 bc93 	b.w	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b078:	2300      	movs	r3, #0
 800b07a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b07c:	f000 bc8f 	b.w	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b080:	4b86      	ldr	r3, [pc, #536]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b088:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b08c:	d108      	bne.n	800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b08e:	f107 0318 	add.w	r3, r7, #24
 800b092:	4618      	mov	r0, r3
 800b094:	f000 fca6 	bl	800b9e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b098:	69bb      	ldr	r3, [r7, #24]
 800b09a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b09c:	f000 bc7f 	b.w	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0a4:	f000 bc7b 	b.w	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b0a8:	4b7c      	ldr	r3, [pc, #496]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0b4:	d108      	bne.n	800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0b6:	f107 030c 	add.w	r3, r7, #12
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f000 fde6 	bl	800bc8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0c4:	f000 bc6b 	b.w	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0cc:	f000 bc67 	b.w	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b0d0:	4b72      	ldr	r3, [pc, #456]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b0d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b0d8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b0da:	4b70      	ldr	r3, [pc, #448]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f003 0304 	and.w	r3, r3, #4
 800b0e2:	2b04      	cmp	r3, #4
 800b0e4:	d10c      	bne.n	800b100 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b0e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d109      	bne.n	800b100 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b0ec:	4b6b      	ldr	r3, [pc, #428]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	08db      	lsrs	r3, r3, #3
 800b0f2:	f003 0303 	and.w	r3, r3, #3
 800b0f6:	4a6a      	ldr	r2, [pc, #424]	; (800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b0f8:	fa22 f303 	lsr.w	r3, r2, r3
 800b0fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0fe:	e01f      	b.n	800b140 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b100:	4b66      	ldr	r3, [pc, #408]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b10c:	d106      	bne.n	800b11c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b10e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b110:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b114:	d102      	bne.n	800b11c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b116:	4b63      	ldr	r3, [pc, #396]	; (800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b118:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b11a:	e011      	b.n	800b140 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b11c:	4b5f      	ldr	r3, [pc, #380]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b124:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b128:	d106      	bne.n	800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b12a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b12c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b130:	d102      	bne.n	800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b132:	4b5d      	ldr	r3, [pc, #372]	; (800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b134:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b136:	e003      	b.n	800b140 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b138:	2300      	movs	r3, #0
 800b13a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b13c:	f000 bc2f 	b.w	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b140:	f000 bc2d 	b.w	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b144:	4b59      	ldr	r3, [pc, #356]	; (800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b148:	f000 bc29 	b.w	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b14c:	2300      	movs	r3, #0
 800b14e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b150:	f000 bc25 	b.w	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b154:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b158:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800b15c:	430b      	orrs	r3, r1
 800b15e:	f040 80a7 	bne.w	800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b162:	4b4e      	ldr	r3, [pc, #312]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b166:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b16a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b172:	d054      	beq.n	800b21e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800b174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b176:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b17a:	f200 808b 	bhi.w	800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b180:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b184:	f000 8083 	beq.w	800b28e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800b188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b18a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b18e:	f200 8081 	bhi.w	800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b194:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b198:	d02f      	beq.n	800b1fa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b19c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b1a0:	d878      	bhi.n	800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d004      	beq.n	800b1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800b1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b1ae:	d012      	beq.n	800b1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800b1b0:	e070      	b.n	800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b1b2:	4b3a      	ldr	r3, [pc, #232]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b1be:	d107      	bne.n	800b1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b1c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f000 feb5 	bl	800bf34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1ce:	e3e6      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1d4:	e3e3      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b1d6:	4b31      	ldr	r3, [pc, #196]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b1e2:	d107      	bne.n	800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1e4:	f107 0318 	add.w	r3, r7, #24
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f000 fbfb 	bl	800b9e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b1ee:	69bb      	ldr	r3, [r7, #24]
 800b1f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1f2:	e3d4      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1f8:	e3d1      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b1fa:	4b28      	ldr	r3, [pc, #160]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b202:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b206:	d107      	bne.n	800b218 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b208:	f107 030c 	add.w	r3, r7, #12
 800b20c:	4618      	mov	r0, r3
 800b20e:	f000 fd3d 	bl	800bc8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b216:	e3c2      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b218:	2300      	movs	r3, #0
 800b21a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b21c:	e3bf      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b21e:	4b1f      	ldr	r3, [pc, #124]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b222:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b226:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b228:	4b1c      	ldr	r3, [pc, #112]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f003 0304 	and.w	r3, r3, #4
 800b230:	2b04      	cmp	r3, #4
 800b232:	d10c      	bne.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800b234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b236:	2b00      	cmp	r3, #0
 800b238:	d109      	bne.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b23a:	4b18      	ldr	r3, [pc, #96]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	08db      	lsrs	r3, r3, #3
 800b240:	f003 0303 	and.w	r3, r3, #3
 800b244:	4a16      	ldr	r2, [pc, #88]	; (800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b246:	fa22 f303 	lsr.w	r3, r2, r3
 800b24a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b24c:	e01e      	b.n	800b28c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b24e:	4b13      	ldr	r3, [pc, #76]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b25a:	d106      	bne.n	800b26a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800b25c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b25e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b262:	d102      	bne.n	800b26a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b264:	4b0f      	ldr	r3, [pc, #60]	; (800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b266:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b268:	e010      	b.n	800b28c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b26a:	4b0c      	ldr	r3, [pc, #48]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b272:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b276:	d106      	bne.n	800b286 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800b278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b27a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b27e:	d102      	bne.n	800b286 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b280:	4b09      	ldr	r3, [pc, #36]	; (800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b282:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b284:	e002      	b.n	800b28c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b286:	2300      	movs	r3, #0
 800b288:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b28a:	e388      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b28c:	e387      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b28e:	4b07      	ldr	r3, [pc, #28]	; (800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b290:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b292:	e384      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b294:	2300      	movs	r3, #0
 800b296:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b298:	e381      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b29a:	bf00      	nop
 800b29c:	58024400 	.word	0x58024400
 800b2a0:	03d09000 	.word	0x03d09000
 800b2a4:	003d0900 	.word	0x003d0900
 800b2a8:	007a1200 	.word	0x007a1200
 800b2ac:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b2b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2b4:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800b2b8:	430b      	orrs	r3, r1
 800b2ba:	f040 809c 	bne.w	800b3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b2be:	4b9e      	ldr	r3, [pc, #632]	; (800b538 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b2c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2c2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b2c6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b2ce:	d054      	beq.n	800b37a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800b2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b2d6:	f200 808b 	bhi.w	800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b2e0:	f000 8083 	beq.w	800b3ea <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800b2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b2ea:	f200 8081 	bhi.w	800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2f4:	d02f      	beq.n	800b356 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800b2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2fc:	d878      	bhi.n	800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b300:	2b00      	cmp	r3, #0
 800b302:	d004      	beq.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b306:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b30a:	d012      	beq.n	800b332 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800b30c:	e070      	b.n	800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b30e:	4b8a      	ldr	r3, [pc, #552]	; (800b538 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b316:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b31a:	d107      	bne.n	800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b31c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b320:	4618      	mov	r0, r3
 800b322:	f000 fe07 	bl	800bf34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b328:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b32a:	e338      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b32c:	2300      	movs	r3, #0
 800b32e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b330:	e335      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b332:	4b81      	ldr	r3, [pc, #516]	; (800b538 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b33a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b33e:	d107      	bne.n	800b350 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b340:	f107 0318 	add.w	r3, r7, #24
 800b344:	4618      	mov	r0, r3
 800b346:	f000 fb4d 	bl	800b9e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b34a:	69bb      	ldr	r3, [r7, #24]
 800b34c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b34e:	e326      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b350:	2300      	movs	r3, #0
 800b352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b354:	e323      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b356:	4b78      	ldr	r3, [pc, #480]	; (800b538 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b35e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b362:	d107      	bne.n	800b374 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b364:	f107 030c 	add.w	r3, r7, #12
 800b368:	4618      	mov	r0, r3
 800b36a:	f000 fc8f 	bl	800bc8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b372:	e314      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b374:	2300      	movs	r3, #0
 800b376:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b378:	e311      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b37a:	4b6f      	ldr	r3, [pc, #444]	; (800b538 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b37c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b37e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b382:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b384:	4b6c      	ldr	r3, [pc, #432]	; (800b538 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f003 0304 	and.w	r3, r3, #4
 800b38c:	2b04      	cmp	r3, #4
 800b38e:	d10c      	bne.n	800b3aa <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800b390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b392:	2b00      	cmp	r3, #0
 800b394:	d109      	bne.n	800b3aa <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b396:	4b68      	ldr	r3, [pc, #416]	; (800b538 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	08db      	lsrs	r3, r3, #3
 800b39c:	f003 0303 	and.w	r3, r3, #3
 800b3a0:	4a66      	ldr	r2, [pc, #408]	; (800b53c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b3a2:	fa22 f303 	lsr.w	r3, r2, r3
 800b3a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3a8:	e01e      	b.n	800b3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b3aa:	4b63      	ldr	r3, [pc, #396]	; (800b538 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3b6:	d106      	bne.n	800b3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b3b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3be:	d102      	bne.n	800b3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b3c0:	4b5f      	ldr	r3, [pc, #380]	; (800b540 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3c4:	e010      	b.n	800b3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b3c6:	4b5c      	ldr	r3, [pc, #368]	; (800b538 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3d2:	d106      	bne.n	800b3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800b3d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3da:	d102      	bne.n	800b3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b3dc:	4b59      	ldr	r3, [pc, #356]	; (800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b3de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3e0:	e002      	b.n	800b3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b3e6:	e2da      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b3e8:	e2d9      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b3ea:	4b57      	ldr	r3, [pc, #348]	; (800b548 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3ee:	e2d6      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3f4:	e2d3      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b3f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3fa:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b3fe:	430b      	orrs	r3, r1
 800b400:	f040 80a7 	bne.w	800b552 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b404:	4b4c      	ldr	r3, [pc, #304]	; (800b538 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b408:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b40c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b410:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b414:	d055      	beq.n	800b4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800b416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b418:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b41c:	f200 8096 	bhi.w	800b54c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b422:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b426:	f000 8084 	beq.w	800b532 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800b42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b42c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b430:	f200 808c 	bhi.w	800b54c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b43a:	d030      	beq.n	800b49e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b442:	f200 8083 	bhi.w	800b54c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d004      	beq.n	800b456 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800b44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b44e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b452:	d012      	beq.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800b454:	e07a      	b.n	800b54c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b456:	4b38      	ldr	r3, [pc, #224]	; (800b538 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b45e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b462:	d107      	bne.n	800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b468:	4618      	mov	r0, r3
 800b46a:	f000 fd63 	bl	800bf34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b470:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b472:	e294      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b474:	2300      	movs	r3, #0
 800b476:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b478:	e291      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b47a:	4b2f      	ldr	r3, [pc, #188]	; (800b538 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b482:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b486:	d107      	bne.n	800b498 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b488:	f107 0318 	add.w	r3, r7, #24
 800b48c:	4618      	mov	r0, r3
 800b48e:	f000 faa9 	bl	800b9e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b492:	69bb      	ldr	r3, [r7, #24]
 800b494:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b496:	e282      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b498:	2300      	movs	r3, #0
 800b49a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b49c:	e27f      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b49e:	4b26      	ldr	r3, [pc, #152]	; (800b538 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4aa:	d107      	bne.n	800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4ac:	f107 030c 	add.w	r3, r7, #12
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f000 fbeb 	bl	800bc8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4ba:	e270      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4c0:	e26d      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b4c2:	4b1d      	ldr	r3, [pc, #116]	; (800b538 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b4c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b4ca:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b4cc:	4b1a      	ldr	r3, [pc, #104]	; (800b538 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f003 0304 	and.w	r3, r3, #4
 800b4d4:	2b04      	cmp	r3, #4
 800b4d6:	d10c      	bne.n	800b4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800b4d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d109      	bne.n	800b4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4de:	4b16      	ldr	r3, [pc, #88]	; (800b538 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	08db      	lsrs	r3, r3, #3
 800b4e4:	f003 0303 	and.w	r3, r3, #3
 800b4e8:	4a14      	ldr	r2, [pc, #80]	; (800b53c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b4ea:	fa22 f303 	lsr.w	r3, r2, r3
 800b4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4f0:	e01e      	b.n	800b530 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b4f2:	4b11      	ldr	r3, [pc, #68]	; (800b538 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4fe:	d106      	bne.n	800b50e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b502:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b506:	d102      	bne.n	800b50e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b508:	4b0d      	ldr	r3, [pc, #52]	; (800b540 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b50a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b50c:	e010      	b.n	800b530 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b50e:	4b0a      	ldr	r3, [pc, #40]	; (800b538 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b516:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b51a:	d106      	bne.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800b51c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b51e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b522:	d102      	bne.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b524:	4b07      	ldr	r3, [pc, #28]	; (800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b526:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b528:	e002      	b.n	800b530 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b52a:	2300      	movs	r3, #0
 800b52c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b52e:	e236      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b530:	e235      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b532:	4b05      	ldr	r3, [pc, #20]	; (800b548 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b534:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b536:	e232      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b538:	58024400 	.word	0x58024400
 800b53c:	03d09000 	.word	0x03d09000
 800b540:	003d0900 	.word	0x003d0900
 800b544:	007a1200 	.word	0x007a1200
 800b548:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800b54c:	2300      	movs	r3, #0
 800b54e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b550:	e225      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b552:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b556:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b55a:	430b      	orrs	r3, r1
 800b55c:	f040 8085 	bne.w	800b66a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b560:	4b9c      	ldr	r3, [pc, #624]	; (800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b564:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b568:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b56c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b570:	d06b      	beq.n	800b64a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800b572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b574:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b578:	d874      	bhi.n	800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b57c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b580:	d056      	beq.n	800b630 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800b582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b584:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b588:	d86c      	bhi.n	800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b58c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b590:	d03b      	beq.n	800b60a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800b592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b594:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b598:	d864      	bhi.n	800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b59c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5a0:	d021      	beq.n	800b5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5a8:	d85c      	bhi.n	800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d004      	beq.n	800b5ba <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800b5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5b6:	d004      	beq.n	800b5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800b5b8:	e054      	b.n	800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b5ba:	f7fe fb5f 	bl	8009c7c <HAL_RCC_GetPCLK1Freq>
 800b5be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b5c0:	e1ed      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b5c2:	4b84      	ldr	r3, [pc, #528]	; (800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b5ce:	d107      	bne.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5d0:	f107 0318 	add.w	r3, r7, #24
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f000 fa05 	bl	800b9e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b5da:	69fb      	ldr	r3, [r7, #28]
 800b5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5de:	e1de      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5e4:	e1db      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b5e6:	4b7b      	ldr	r3, [pc, #492]	; (800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5f2:	d107      	bne.n	800b604 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5f4:	f107 030c 	add.w	r3, r7, #12
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f000 fb47 	bl	800bc8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b602:	e1cc      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b604:	2300      	movs	r3, #0
 800b606:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b608:	e1c9      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b60a:	4b72      	ldr	r3, [pc, #456]	; (800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f003 0304 	and.w	r3, r3, #4
 800b612:	2b04      	cmp	r3, #4
 800b614:	d109      	bne.n	800b62a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b616:	4b6f      	ldr	r3, [pc, #444]	; (800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	08db      	lsrs	r3, r3, #3
 800b61c:	f003 0303 	and.w	r3, r3, #3
 800b620:	4a6d      	ldr	r2, [pc, #436]	; (800b7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b622:	fa22 f303 	lsr.w	r3, r2, r3
 800b626:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b628:	e1b9      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b62a:	2300      	movs	r3, #0
 800b62c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b62e:	e1b6      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b630:	4b68      	ldr	r3, [pc, #416]	; (800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b63c:	d102      	bne.n	800b644 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800b63e:	4b67      	ldr	r3, [pc, #412]	; (800b7dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b640:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b642:	e1ac      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b644:	2300      	movs	r3, #0
 800b646:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b648:	e1a9      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b64a:	4b62      	ldr	r3, [pc, #392]	; (800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b652:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b656:	d102      	bne.n	800b65e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800b658:	4b61      	ldr	r3, [pc, #388]	; (800b7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b65a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b65c:	e19f      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b65e:	2300      	movs	r3, #0
 800b660:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b662:	e19c      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b664:	2300      	movs	r3, #0
 800b666:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b668:	e199      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b66a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b66e:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b672:	430b      	orrs	r3, r1
 800b674:	d173      	bne.n	800b75e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b676:	4b57      	ldr	r3, [pc, #348]	; (800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b67a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b67e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b682:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b686:	d02f      	beq.n	800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800b688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b68a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b68e:	d863      	bhi.n	800b758 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800b690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b692:	2b00      	cmp	r3, #0
 800b694:	d004      	beq.n	800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800b696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b69c:	d012      	beq.n	800b6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800b69e:	e05b      	b.n	800b758 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b6a0:	4b4c      	ldr	r3, [pc, #304]	; (800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b6a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b6ac:	d107      	bne.n	800b6be <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6ae:	f107 0318 	add.w	r3, r7, #24
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f000 f996 	bl	800b9e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b6b8:	69bb      	ldr	r3, [r7, #24]
 800b6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6bc:	e16f      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6c2:	e16c      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b6c4:	4b43      	ldr	r3, [pc, #268]	; (800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b6cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6d0:	d107      	bne.n	800b6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6d2:	f107 030c 	add.w	r3, r7, #12
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f000 fad8 	bl	800bc8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6e0:	e15d      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6e6:	e15a      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b6e8:	4b3a      	ldr	r3, [pc, #232]	; (800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b6ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b6f0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b6f2:	4b38      	ldr	r3, [pc, #224]	; (800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f003 0304 	and.w	r3, r3, #4
 800b6fa:	2b04      	cmp	r3, #4
 800b6fc:	d10c      	bne.n	800b718 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b6fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b700:	2b00      	cmp	r3, #0
 800b702:	d109      	bne.n	800b718 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b704:	4b33      	ldr	r3, [pc, #204]	; (800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	08db      	lsrs	r3, r3, #3
 800b70a:	f003 0303 	and.w	r3, r3, #3
 800b70e:	4a32      	ldr	r2, [pc, #200]	; (800b7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b710:	fa22 f303 	lsr.w	r3, r2, r3
 800b714:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b716:	e01e      	b.n	800b756 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b718:	4b2e      	ldr	r3, [pc, #184]	; (800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b720:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b724:	d106      	bne.n	800b734 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800b726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b728:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b72c:	d102      	bne.n	800b734 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b72e:	4b2b      	ldr	r3, [pc, #172]	; (800b7dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b730:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b732:	e010      	b.n	800b756 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b734:	4b27      	ldr	r3, [pc, #156]	; (800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b73c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b740:	d106      	bne.n	800b750 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800b742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b744:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b748:	d102      	bne.n	800b750 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b74a:	4b25      	ldr	r3, [pc, #148]	; (800b7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b74c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b74e:	e002      	b.n	800b756 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b750:	2300      	movs	r3, #0
 800b752:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b754:	e123      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b756:	e122      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b758:	2300      	movs	r3, #0
 800b75a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b75c:	e11f      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b75e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b762:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b766:	430b      	orrs	r3, r1
 800b768:	d13c      	bne.n	800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b76a:	4b1a      	ldr	r3, [pc, #104]	; (800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b76c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b76e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b772:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b776:	2b00      	cmp	r3, #0
 800b778:	d004      	beq.n	800b784 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800b77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b77c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b780:	d012      	beq.n	800b7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800b782:	e023      	b.n	800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b784:	4b13      	ldr	r3, [pc, #76]	; (800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b78c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b790:	d107      	bne.n	800b7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b796:	4618      	mov	r0, r3
 800b798:	f000 fbcc 	bl	800bf34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b79e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7a0:	e0fd      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7a6:	e0fa      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b7a8:	4b0a      	ldr	r3, [pc, #40]	; (800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b7b4:	d107      	bne.n	800b7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7b6:	f107 0318 	add.w	r3, r7, #24
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f000 f912 	bl	800b9e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b7c0:	6a3b      	ldr	r3, [r7, #32]
 800b7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7c4:	e0eb      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7ca:	e0e8      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7d0:	e0e5      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b7d2:	bf00      	nop
 800b7d4:	58024400 	.word	0x58024400
 800b7d8:	03d09000 	.word	0x03d09000
 800b7dc:	003d0900 	.word	0x003d0900
 800b7e0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b7e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7e8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b7ec:	430b      	orrs	r3, r1
 800b7ee:	f040 8085 	bne.w	800b8fc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b7f2:	4b6d      	ldr	r3, [pc, #436]	; (800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b7f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7f6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b7fa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b802:	d06b      	beq.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800b804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b806:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b80a:	d874      	bhi.n	800b8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b80e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b812:	d056      	beq.n	800b8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800b814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b81a:	d86c      	bhi.n	800b8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b81e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b822:	d03b      	beq.n	800b89c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800b824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b826:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b82a:	d864      	bhi.n	800b8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b82e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b832:	d021      	beq.n	800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800b834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b836:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b83a:	d85c      	bhi.n	800b8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d004      	beq.n	800b84c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800b842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b844:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b848:	d004      	beq.n	800b854 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800b84a:	e054      	b.n	800b8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b84c:	f000 f8b4 	bl	800b9b8 <HAL_RCCEx_GetD3PCLK1Freq>
 800b850:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b852:	e0a4      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b854:	4b54      	ldr	r3, [pc, #336]	; (800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b85c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b860:	d107      	bne.n	800b872 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b862:	f107 0318 	add.w	r3, r7, #24
 800b866:	4618      	mov	r0, r3
 800b868:	f000 f8bc 	bl	800b9e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b86c:	69fb      	ldr	r3, [r7, #28]
 800b86e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b870:	e095      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b872:	2300      	movs	r3, #0
 800b874:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b876:	e092      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b878:	4b4b      	ldr	r3, [pc, #300]	; (800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b880:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b884:	d107      	bne.n	800b896 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b886:	f107 030c 	add.w	r3, r7, #12
 800b88a:	4618      	mov	r0, r3
 800b88c:	f000 f9fe 	bl	800bc8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b894:	e083      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b896:	2300      	movs	r3, #0
 800b898:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b89a:	e080      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b89c:	4b42      	ldr	r3, [pc, #264]	; (800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f003 0304 	and.w	r3, r3, #4
 800b8a4:	2b04      	cmp	r3, #4
 800b8a6:	d109      	bne.n	800b8bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b8a8:	4b3f      	ldr	r3, [pc, #252]	; (800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	08db      	lsrs	r3, r3, #3
 800b8ae:	f003 0303 	and.w	r3, r3, #3
 800b8b2:	4a3e      	ldr	r2, [pc, #248]	; (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b8b4:	fa22 f303 	lsr.w	r3, r2, r3
 800b8b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8ba:	e070      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8c0:	e06d      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b8c2:	4b39      	ldr	r3, [pc, #228]	; (800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8ce:	d102      	bne.n	800b8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800b8d0:	4b37      	ldr	r3, [pc, #220]	; (800b9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8d4:	e063      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8da:	e060      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b8dc:	4b32      	ldr	r3, [pc, #200]	; (800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8e8:	d102      	bne.n	800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800b8ea:	4b32      	ldr	r3, [pc, #200]	; (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b8ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8ee:	e056      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8f4:	e053      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8fa:	e050      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b8fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b900:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b904:	430b      	orrs	r3, r1
 800b906:	d148      	bne.n	800b99a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b908:	4b27      	ldr	r3, [pc, #156]	; (800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b90a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b90c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b910:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b914:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b918:	d02a      	beq.n	800b970 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b920:	d838      	bhi.n	800b994 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b924:	2b00      	cmp	r3, #0
 800b926:	d004      	beq.n	800b932 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b92a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b92e:	d00d      	beq.n	800b94c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b930:	e030      	b.n	800b994 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b932:	4b1d      	ldr	r3, [pc, #116]	; (800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b93a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b93e:	d102      	bne.n	800b946 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800b940:	4b1c      	ldr	r3, [pc, #112]	; (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b942:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b944:	e02b      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b946:	2300      	movs	r3, #0
 800b948:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b94a:	e028      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b94c:	4b16      	ldr	r3, [pc, #88]	; (800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b954:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b958:	d107      	bne.n	800b96a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b95a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b95e:	4618      	mov	r0, r3
 800b960:	f000 fae8 	bl	800bf34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b966:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b968:	e019      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b96a:	2300      	movs	r3, #0
 800b96c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b96e:	e016      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b970:	4b0d      	ldr	r3, [pc, #52]	; (800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b978:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b97c:	d107      	bne.n	800b98e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b97e:	f107 0318 	add.w	r3, r7, #24
 800b982:	4618      	mov	r0, r3
 800b984:	f000 f82e 	bl	800b9e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b988:	69fb      	ldr	r3, [r7, #28]
 800b98a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b98c:	e007      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b98e:	2300      	movs	r3, #0
 800b990:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b992:	e004      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b994:	2300      	movs	r3, #0
 800b996:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b998:	e001      	b.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800b99a:	2300      	movs	r3, #0
 800b99c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b99e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3740      	adds	r7, #64	; 0x40
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	58024400 	.word	0x58024400
 800b9ac:	03d09000 	.word	0x03d09000
 800b9b0:	003d0900 	.word	0x003d0900
 800b9b4:	007a1200 	.word	0x007a1200

0800b9b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b9bc:	f7fe f92e 	bl	8009c1c <HAL_RCC_GetHCLKFreq>
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	4b06      	ldr	r3, [pc, #24]	; (800b9dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b9c4:	6a1b      	ldr	r3, [r3, #32]
 800b9c6:	091b      	lsrs	r3, r3, #4
 800b9c8:	f003 0307 	and.w	r3, r3, #7
 800b9cc:	4904      	ldr	r1, [pc, #16]	; (800b9e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b9ce:	5ccb      	ldrb	r3, [r1, r3]
 800b9d0:	f003 031f 	and.w	r3, r3, #31
 800b9d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	bd80      	pop	{r7, pc}
 800b9dc:	58024400 	.word	0x58024400
 800b9e0:	08014e90 	.word	0x08014e90

0800b9e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b089      	sub	sp, #36	; 0x24
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b9ec:	4ba1      	ldr	r3, [pc, #644]	; (800bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9f0:	f003 0303 	and.w	r3, r3, #3
 800b9f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b9f6:	4b9f      	ldr	r3, [pc, #636]	; (800bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9fa:	0b1b      	lsrs	r3, r3, #12
 800b9fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba00:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ba02:	4b9c      	ldr	r3, [pc, #624]	; (800bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba06:	091b      	lsrs	r3, r3, #4
 800ba08:	f003 0301 	and.w	r3, r3, #1
 800ba0c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ba0e:	4b99      	ldr	r3, [pc, #612]	; (800bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba12:	08db      	lsrs	r3, r3, #3
 800ba14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba18:	693a      	ldr	r2, [r7, #16]
 800ba1a:	fb02 f303 	mul.w	r3, r2, r3
 800ba1e:	ee07 3a90 	vmov	s15, r3
 800ba22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	f000 8111 	beq.w	800bc54 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	2b02      	cmp	r3, #2
 800ba36:	f000 8083 	beq.w	800bb40 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ba3a:	69bb      	ldr	r3, [r7, #24]
 800ba3c:	2b02      	cmp	r3, #2
 800ba3e:	f200 80a1 	bhi.w	800bb84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ba42:	69bb      	ldr	r3, [r7, #24]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d003      	beq.n	800ba50 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ba48:	69bb      	ldr	r3, [r7, #24]
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	d056      	beq.n	800bafc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ba4e:	e099      	b.n	800bb84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba50:	4b88      	ldr	r3, [pc, #544]	; (800bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f003 0320 	and.w	r3, r3, #32
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d02d      	beq.n	800bab8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba5c:	4b85      	ldr	r3, [pc, #532]	; (800bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	08db      	lsrs	r3, r3, #3
 800ba62:	f003 0303 	and.w	r3, r3, #3
 800ba66:	4a84      	ldr	r2, [pc, #528]	; (800bc78 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ba68:	fa22 f303 	lsr.w	r3, r2, r3
 800ba6c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	ee07 3a90 	vmov	s15, r3
 800ba74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	ee07 3a90 	vmov	s15, r3
 800ba7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba86:	4b7b      	ldr	r3, [pc, #492]	; (800bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba8e:	ee07 3a90 	vmov	s15, r3
 800ba92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba96:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba9a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bc7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ba9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800baaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bab2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bab6:	e087      	b.n	800bbc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	ee07 3a90 	vmov	s15, r3
 800babe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bac2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bc80 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800baca:	4b6a      	ldr	r3, [pc, #424]	; (800bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bacc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bad2:	ee07 3a90 	vmov	s15, r3
 800bad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bada:	ed97 6a03 	vldr	s12, [r7, #12]
 800bade:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bc7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800baee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bafa:	e065      	b.n	800bbc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	ee07 3a90 	vmov	s15, r3
 800bb02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb06:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bc84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bb0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb0e:	4b59      	ldr	r3, [pc, #356]	; (800bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb16:	ee07 3a90 	vmov	s15, r3
 800bb1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb22:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bc7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb3e:	e043      	b.n	800bbc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	ee07 3a90 	vmov	s15, r3
 800bb46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb4a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bc88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bb4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb52:	4b48      	ldr	r3, [pc, #288]	; (800bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb5a:	ee07 3a90 	vmov	s15, r3
 800bb5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb62:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb66:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bc7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb82:	e021      	b.n	800bbc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	ee07 3a90 	vmov	s15, r3
 800bb8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb8e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bc84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bb92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb96:	4b37      	ldr	r3, [pc, #220]	; (800bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb9e:	ee07 3a90 	vmov	s15, r3
 800bba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bba6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbaa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bc7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bbae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbc6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bbc8:	4b2a      	ldr	r3, [pc, #168]	; (800bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbcc:	0a5b      	lsrs	r3, r3, #9
 800bbce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbd2:	ee07 3a90 	vmov	s15, r3
 800bbd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bbde:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbe2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbe6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbee:	ee17 2a90 	vmov	r2, s15
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bbf6:	4b1f      	ldr	r3, [pc, #124]	; (800bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbfa:	0c1b      	lsrs	r3, r3, #16
 800bbfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc00:	ee07 3a90 	vmov	s15, r3
 800bc04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc10:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc1c:	ee17 2a90 	vmov	r2, s15
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bc24:	4b13      	ldr	r3, [pc, #76]	; (800bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc28:	0e1b      	lsrs	r3, r3, #24
 800bc2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc2e:	ee07 3a90 	vmov	s15, r3
 800bc32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc3e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc4a:	ee17 2a90 	vmov	r2, s15
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bc52:	e008      	b.n	800bc66 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2200      	movs	r2, #0
 800bc58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2200      	movs	r2, #0
 800bc64:	609a      	str	r2, [r3, #8]
}
 800bc66:	bf00      	nop
 800bc68:	3724      	adds	r7, #36	; 0x24
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr
 800bc72:	bf00      	nop
 800bc74:	58024400 	.word	0x58024400
 800bc78:	03d09000 	.word	0x03d09000
 800bc7c:	46000000 	.word	0x46000000
 800bc80:	4c742400 	.word	0x4c742400
 800bc84:	4a742400 	.word	0x4a742400
 800bc88:	4af42400 	.word	0x4af42400

0800bc8c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b089      	sub	sp, #36	; 0x24
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bc94:	4ba1      	ldr	r3, [pc, #644]	; (800bf1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc98:	f003 0303 	and.w	r3, r3, #3
 800bc9c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bc9e:	4b9f      	ldr	r3, [pc, #636]	; (800bf1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bca2:	0d1b      	lsrs	r3, r3, #20
 800bca4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bca8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bcaa:	4b9c      	ldr	r3, [pc, #624]	; (800bf1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcae:	0a1b      	lsrs	r3, r3, #8
 800bcb0:	f003 0301 	and.w	r3, r3, #1
 800bcb4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bcb6:	4b99      	ldr	r3, [pc, #612]	; (800bf1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcba:	08db      	lsrs	r3, r3, #3
 800bcbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bcc0:	693a      	ldr	r2, [r7, #16]
 800bcc2:	fb02 f303 	mul.w	r3, r2, r3
 800bcc6:	ee07 3a90 	vmov	s15, r3
 800bcca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	f000 8111 	beq.w	800befc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bcda:	69bb      	ldr	r3, [r7, #24]
 800bcdc:	2b02      	cmp	r3, #2
 800bcde:	f000 8083 	beq.w	800bde8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bce2:	69bb      	ldr	r3, [r7, #24]
 800bce4:	2b02      	cmp	r3, #2
 800bce6:	f200 80a1 	bhi.w	800be2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bcea:	69bb      	ldr	r3, [r7, #24]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d003      	beq.n	800bcf8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bcf0:	69bb      	ldr	r3, [r7, #24]
 800bcf2:	2b01      	cmp	r3, #1
 800bcf4:	d056      	beq.n	800bda4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bcf6:	e099      	b.n	800be2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bcf8:	4b88      	ldr	r3, [pc, #544]	; (800bf1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	f003 0320 	and.w	r3, r3, #32
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d02d      	beq.n	800bd60 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd04:	4b85      	ldr	r3, [pc, #532]	; (800bf1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	08db      	lsrs	r3, r3, #3
 800bd0a:	f003 0303 	and.w	r3, r3, #3
 800bd0e:	4a84      	ldr	r2, [pc, #528]	; (800bf20 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bd10:	fa22 f303 	lsr.w	r3, r2, r3
 800bd14:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	ee07 3a90 	vmov	s15, r3
 800bd1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	ee07 3a90 	vmov	s15, r3
 800bd26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd2e:	4b7b      	ldr	r3, [pc, #492]	; (800bf1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd36:	ee07 3a90 	vmov	s15, r3
 800bd3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd42:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bf24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bd5e:	e087      	b.n	800be70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	ee07 3a90 	vmov	s15, r3
 800bd66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bf28 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bd6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd72:	4b6a      	ldr	r3, [pc, #424]	; (800bf1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd7a:	ee07 3a90 	vmov	s15, r3
 800bd7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd82:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd86:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bf24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bda2:	e065      	b.n	800be70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	ee07 3a90 	vmov	s15, r3
 800bdaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bf2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bdb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdb6:	4b59      	ldr	r3, [pc, #356]	; (800bf1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdbe:	ee07 3a90 	vmov	s15, r3
 800bdc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdc6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdca:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bf24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bdce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bdda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bde2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bde6:	e043      	b.n	800be70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	ee07 3a90 	vmov	s15, r3
 800bdee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdf2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bf30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bdf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdfa:	4b48      	ldr	r3, [pc, #288]	; (800bf1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be02:	ee07 3a90 	vmov	s15, r3
 800be06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800be0e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bf24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be2a:	e021      	b.n	800be70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800be2c:	697b      	ldr	r3, [r7, #20]
 800be2e:	ee07 3a90 	vmov	s15, r3
 800be32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be36:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bf2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800be3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be3e:	4b37      	ldr	r3, [pc, #220]	; (800bf1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be46:	ee07 3a90 	vmov	s15, r3
 800be4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800be52:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bf24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be6e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800be70:	4b2a      	ldr	r3, [pc, #168]	; (800bf1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be74:	0a5b      	lsrs	r3, r3, #9
 800be76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be7a:	ee07 3a90 	vmov	s15, r3
 800be7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be86:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be8a:	edd7 6a07 	vldr	s13, [r7, #28]
 800be8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be96:	ee17 2a90 	vmov	r2, s15
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800be9e:	4b1f      	ldr	r3, [pc, #124]	; (800bf1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bea2:	0c1b      	lsrs	r3, r3, #16
 800bea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bea8:	ee07 3a90 	vmov	s15, r3
 800beac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800beb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800beb8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bec0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bec4:	ee17 2a90 	vmov	r2, s15
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800becc:	4b13      	ldr	r3, [pc, #76]	; (800bf1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bed0:	0e1b      	lsrs	r3, r3, #24
 800bed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bed6:	ee07 3a90 	vmov	s15, r3
 800beda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bede:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bee2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bee6:	edd7 6a07 	vldr	s13, [r7, #28]
 800beea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800beee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bef2:	ee17 2a90 	vmov	r2, s15
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800befa:	e008      	b.n	800bf0e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2200      	movs	r2, #0
 800bf00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2200      	movs	r2, #0
 800bf06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	609a      	str	r2, [r3, #8]
}
 800bf0e:	bf00      	nop
 800bf10:	3724      	adds	r7, #36	; 0x24
 800bf12:	46bd      	mov	sp, r7
 800bf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf18:	4770      	bx	lr
 800bf1a:	bf00      	nop
 800bf1c:	58024400 	.word	0x58024400
 800bf20:	03d09000 	.word	0x03d09000
 800bf24:	46000000 	.word	0x46000000
 800bf28:	4c742400 	.word	0x4c742400
 800bf2c:	4a742400 	.word	0x4a742400
 800bf30:	4af42400 	.word	0x4af42400

0800bf34 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b089      	sub	sp, #36	; 0x24
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bf3c:	4ba0      	ldr	r3, [pc, #640]	; (800c1c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf40:	f003 0303 	and.w	r3, r3, #3
 800bf44:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bf46:	4b9e      	ldr	r3, [pc, #632]	; (800c1c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf4a:	091b      	lsrs	r3, r3, #4
 800bf4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf50:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bf52:	4b9b      	ldr	r3, [pc, #620]	; (800c1c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf56:	f003 0301 	and.w	r3, r3, #1
 800bf5a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bf5c:	4b98      	ldr	r3, [pc, #608]	; (800c1c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf60:	08db      	lsrs	r3, r3, #3
 800bf62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf66:	693a      	ldr	r2, [r7, #16]
 800bf68:	fb02 f303 	mul.w	r3, r2, r3
 800bf6c:	ee07 3a90 	vmov	s15, r3
 800bf70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf74:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	f000 8111 	beq.w	800c1a2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	2b02      	cmp	r3, #2
 800bf84:	f000 8083 	beq.w	800c08e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bf88:	69bb      	ldr	r3, [r7, #24]
 800bf8a:	2b02      	cmp	r3, #2
 800bf8c:	f200 80a1 	bhi.w	800c0d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d003      	beq.n	800bf9e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bf96:	69bb      	ldr	r3, [r7, #24]
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d056      	beq.n	800c04a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bf9c:	e099      	b.n	800c0d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf9e:	4b88      	ldr	r3, [pc, #544]	; (800c1c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f003 0320 	and.w	r3, r3, #32
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d02d      	beq.n	800c006 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bfaa:	4b85      	ldr	r3, [pc, #532]	; (800c1c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	08db      	lsrs	r3, r3, #3
 800bfb0:	f003 0303 	and.w	r3, r3, #3
 800bfb4:	4a83      	ldr	r2, [pc, #524]	; (800c1c4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bfb6:	fa22 f303 	lsr.w	r3, r2, r3
 800bfba:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	ee07 3a90 	vmov	s15, r3
 800bfc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	ee07 3a90 	vmov	s15, r3
 800bfcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfd4:	4b7a      	ldr	r3, [pc, #488]	; (800c1c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfdc:	ee07 3a90 	vmov	s15, r3
 800bfe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfe4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfe8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c1c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bfec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bff0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bff4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bff8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c000:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c004:	e087      	b.n	800c116 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	ee07 3a90 	vmov	s15, r3
 800c00c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c010:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c1cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c014:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c018:	4b69      	ldr	r3, [pc, #420]	; (800c1c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c01a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c01c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c020:	ee07 3a90 	vmov	s15, r3
 800c024:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c028:	ed97 6a03 	vldr	s12, [r7, #12]
 800c02c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c1c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c030:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c034:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c038:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c03c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c040:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c044:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c048:	e065      	b.n	800c116 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	ee07 3a90 	vmov	s15, r3
 800c050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c054:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c058:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c05c:	4b58      	ldr	r3, [pc, #352]	; (800c1c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c05e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c064:	ee07 3a90 	vmov	s15, r3
 800c068:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c06c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c070:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c1c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c074:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c078:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c07c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c080:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c084:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c088:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c08c:	e043      	b.n	800c116 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	ee07 3a90 	vmov	s15, r3
 800c094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c098:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c1d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c09c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0a0:	4b47      	ldr	r3, [pc, #284]	; (800c1c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0a8:	ee07 3a90 	vmov	s15, r3
 800c0ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0b4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c1c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c0b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0d0:	e021      	b.n	800c116 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	ee07 3a90 	vmov	s15, r3
 800c0d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0dc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c1cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c0e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0e4:	4b36      	ldr	r3, [pc, #216]	; (800c1c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0ec:	ee07 3a90 	vmov	s15, r3
 800c0f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0f8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c1c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c0fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c100:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c104:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c108:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c10c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c110:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c114:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c116:	4b2a      	ldr	r3, [pc, #168]	; (800c1c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c11a:	0a5b      	lsrs	r3, r3, #9
 800c11c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c120:	ee07 3a90 	vmov	s15, r3
 800c124:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c128:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c12c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c130:	edd7 6a07 	vldr	s13, [r7, #28]
 800c134:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c138:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c13c:	ee17 2a90 	vmov	r2, s15
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c144:	4b1e      	ldr	r3, [pc, #120]	; (800c1c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c148:	0c1b      	lsrs	r3, r3, #16
 800c14a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c14e:	ee07 3a90 	vmov	s15, r3
 800c152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c156:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c15a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c15e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c162:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c16a:	ee17 2a90 	vmov	r2, s15
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c172:	4b13      	ldr	r3, [pc, #76]	; (800c1c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c176:	0e1b      	lsrs	r3, r3, #24
 800c178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c17c:	ee07 3a90 	vmov	s15, r3
 800c180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c184:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c188:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c18c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c194:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c198:	ee17 2a90 	vmov	r2, s15
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c1a0:	e008      	b.n	800c1b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	609a      	str	r2, [r3, #8]
}
 800c1b4:	bf00      	nop
 800c1b6:	3724      	adds	r7, #36	; 0x24
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1be:	4770      	bx	lr
 800c1c0:	58024400 	.word	0x58024400
 800c1c4:	03d09000 	.word	0x03d09000
 800c1c8:	46000000 	.word	0x46000000
 800c1cc:	4c742400 	.word	0x4c742400
 800c1d0:	4a742400 	.word	0x4a742400
 800c1d4:	4af42400 	.word	0x4af42400

0800c1d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c1e6:	4b53      	ldr	r3, [pc, #332]	; (800c334 <RCCEx_PLL2_Config+0x15c>)
 800c1e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1ea:	f003 0303 	and.w	r3, r3, #3
 800c1ee:	2b03      	cmp	r3, #3
 800c1f0:	d101      	bne.n	800c1f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e099      	b.n	800c32a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c1f6:	4b4f      	ldr	r3, [pc, #316]	; (800c334 <RCCEx_PLL2_Config+0x15c>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	4a4e      	ldr	r2, [pc, #312]	; (800c334 <RCCEx_PLL2_Config+0x15c>)
 800c1fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c200:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c202:	f7f6 ffc9 	bl	8003198 <HAL_GetTick>
 800c206:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c208:	e008      	b.n	800c21c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c20a:	f7f6 ffc5 	bl	8003198 <HAL_GetTick>
 800c20e:	4602      	mov	r2, r0
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	1ad3      	subs	r3, r2, r3
 800c214:	2b02      	cmp	r3, #2
 800c216:	d901      	bls.n	800c21c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c218:	2303      	movs	r3, #3
 800c21a:	e086      	b.n	800c32a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c21c:	4b45      	ldr	r3, [pc, #276]	; (800c334 <RCCEx_PLL2_Config+0x15c>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c224:	2b00      	cmp	r3, #0
 800c226:	d1f0      	bne.n	800c20a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c228:	4b42      	ldr	r3, [pc, #264]	; (800c334 <RCCEx_PLL2_Config+0x15c>)
 800c22a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c22c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	031b      	lsls	r3, r3, #12
 800c236:	493f      	ldr	r1, [pc, #252]	; (800c334 <RCCEx_PLL2_Config+0x15c>)
 800c238:	4313      	orrs	r3, r2
 800c23a:	628b      	str	r3, [r1, #40]	; 0x28
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	3b01      	subs	r3, #1
 800c242:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	689b      	ldr	r3, [r3, #8]
 800c24a:	3b01      	subs	r3, #1
 800c24c:	025b      	lsls	r3, r3, #9
 800c24e:	b29b      	uxth	r3, r3
 800c250:	431a      	orrs	r2, r3
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	68db      	ldr	r3, [r3, #12]
 800c256:	3b01      	subs	r3, #1
 800c258:	041b      	lsls	r3, r3, #16
 800c25a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c25e:	431a      	orrs	r2, r3
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	691b      	ldr	r3, [r3, #16]
 800c264:	3b01      	subs	r3, #1
 800c266:	061b      	lsls	r3, r3, #24
 800c268:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c26c:	4931      	ldr	r1, [pc, #196]	; (800c334 <RCCEx_PLL2_Config+0x15c>)
 800c26e:	4313      	orrs	r3, r2
 800c270:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c272:	4b30      	ldr	r3, [pc, #192]	; (800c334 <RCCEx_PLL2_Config+0x15c>)
 800c274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c276:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	695b      	ldr	r3, [r3, #20]
 800c27e:	492d      	ldr	r1, [pc, #180]	; (800c334 <RCCEx_PLL2_Config+0x15c>)
 800c280:	4313      	orrs	r3, r2
 800c282:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c284:	4b2b      	ldr	r3, [pc, #172]	; (800c334 <RCCEx_PLL2_Config+0x15c>)
 800c286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c288:	f023 0220 	bic.w	r2, r3, #32
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	699b      	ldr	r3, [r3, #24]
 800c290:	4928      	ldr	r1, [pc, #160]	; (800c334 <RCCEx_PLL2_Config+0x15c>)
 800c292:	4313      	orrs	r3, r2
 800c294:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c296:	4b27      	ldr	r3, [pc, #156]	; (800c334 <RCCEx_PLL2_Config+0x15c>)
 800c298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c29a:	4a26      	ldr	r2, [pc, #152]	; (800c334 <RCCEx_PLL2_Config+0x15c>)
 800c29c:	f023 0310 	bic.w	r3, r3, #16
 800c2a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c2a2:	4b24      	ldr	r3, [pc, #144]	; (800c334 <RCCEx_PLL2_Config+0x15c>)
 800c2a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c2a6:	4b24      	ldr	r3, [pc, #144]	; (800c338 <RCCEx_PLL2_Config+0x160>)
 800c2a8:	4013      	ands	r3, r2
 800c2aa:	687a      	ldr	r2, [r7, #4]
 800c2ac:	69d2      	ldr	r2, [r2, #28]
 800c2ae:	00d2      	lsls	r2, r2, #3
 800c2b0:	4920      	ldr	r1, [pc, #128]	; (800c334 <RCCEx_PLL2_Config+0x15c>)
 800c2b2:	4313      	orrs	r3, r2
 800c2b4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c2b6:	4b1f      	ldr	r3, [pc, #124]	; (800c334 <RCCEx_PLL2_Config+0x15c>)
 800c2b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ba:	4a1e      	ldr	r2, [pc, #120]	; (800c334 <RCCEx_PLL2_Config+0x15c>)
 800c2bc:	f043 0310 	orr.w	r3, r3, #16
 800c2c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d106      	bne.n	800c2d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c2c8:	4b1a      	ldr	r3, [pc, #104]	; (800c334 <RCCEx_PLL2_Config+0x15c>)
 800c2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2cc:	4a19      	ldr	r2, [pc, #100]	; (800c334 <RCCEx_PLL2_Config+0x15c>)
 800c2ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c2d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c2d4:	e00f      	b.n	800c2f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d106      	bne.n	800c2ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c2dc:	4b15      	ldr	r3, [pc, #84]	; (800c334 <RCCEx_PLL2_Config+0x15c>)
 800c2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2e0:	4a14      	ldr	r2, [pc, #80]	; (800c334 <RCCEx_PLL2_Config+0x15c>)
 800c2e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c2e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c2e8:	e005      	b.n	800c2f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c2ea:	4b12      	ldr	r3, [pc, #72]	; (800c334 <RCCEx_PLL2_Config+0x15c>)
 800c2ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ee:	4a11      	ldr	r2, [pc, #68]	; (800c334 <RCCEx_PLL2_Config+0x15c>)
 800c2f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c2f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c2f6:	4b0f      	ldr	r3, [pc, #60]	; (800c334 <RCCEx_PLL2_Config+0x15c>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	4a0e      	ldr	r2, [pc, #56]	; (800c334 <RCCEx_PLL2_Config+0x15c>)
 800c2fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c300:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c302:	f7f6 ff49 	bl	8003198 <HAL_GetTick>
 800c306:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c308:	e008      	b.n	800c31c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c30a:	f7f6 ff45 	bl	8003198 <HAL_GetTick>
 800c30e:	4602      	mov	r2, r0
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	1ad3      	subs	r3, r2, r3
 800c314:	2b02      	cmp	r3, #2
 800c316:	d901      	bls.n	800c31c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c318:	2303      	movs	r3, #3
 800c31a:	e006      	b.n	800c32a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c31c:	4b05      	ldr	r3, [pc, #20]	; (800c334 <RCCEx_PLL2_Config+0x15c>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c324:	2b00      	cmp	r3, #0
 800c326:	d0f0      	beq.n	800c30a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c328:	7bfb      	ldrb	r3, [r7, #15]
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3710      	adds	r7, #16
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
 800c332:	bf00      	nop
 800c334:	58024400 	.word	0x58024400
 800c338:	ffff0007 	.word	0xffff0007

0800c33c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b084      	sub	sp, #16
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c346:	2300      	movs	r3, #0
 800c348:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c34a:	4b53      	ldr	r3, [pc, #332]	; (800c498 <RCCEx_PLL3_Config+0x15c>)
 800c34c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c34e:	f003 0303 	and.w	r3, r3, #3
 800c352:	2b03      	cmp	r3, #3
 800c354:	d101      	bne.n	800c35a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c356:	2301      	movs	r3, #1
 800c358:	e099      	b.n	800c48e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c35a:	4b4f      	ldr	r3, [pc, #316]	; (800c498 <RCCEx_PLL3_Config+0x15c>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	4a4e      	ldr	r2, [pc, #312]	; (800c498 <RCCEx_PLL3_Config+0x15c>)
 800c360:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c364:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c366:	f7f6 ff17 	bl	8003198 <HAL_GetTick>
 800c36a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c36c:	e008      	b.n	800c380 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c36e:	f7f6 ff13 	bl	8003198 <HAL_GetTick>
 800c372:	4602      	mov	r2, r0
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	1ad3      	subs	r3, r2, r3
 800c378:	2b02      	cmp	r3, #2
 800c37a:	d901      	bls.n	800c380 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c37c:	2303      	movs	r3, #3
 800c37e:	e086      	b.n	800c48e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c380:	4b45      	ldr	r3, [pc, #276]	; (800c498 <RCCEx_PLL3_Config+0x15c>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d1f0      	bne.n	800c36e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c38c:	4b42      	ldr	r3, [pc, #264]	; (800c498 <RCCEx_PLL3_Config+0x15c>)
 800c38e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c390:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	051b      	lsls	r3, r3, #20
 800c39a:	493f      	ldr	r1, [pc, #252]	; (800c498 <RCCEx_PLL3_Config+0x15c>)
 800c39c:	4313      	orrs	r3, r2
 800c39e:	628b      	str	r3, [r1, #40]	; 0x28
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	3b01      	subs	r3, #1
 800c3a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	689b      	ldr	r3, [r3, #8]
 800c3ae:	3b01      	subs	r3, #1
 800c3b0:	025b      	lsls	r3, r3, #9
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	431a      	orrs	r2, r3
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	68db      	ldr	r3, [r3, #12]
 800c3ba:	3b01      	subs	r3, #1
 800c3bc:	041b      	lsls	r3, r3, #16
 800c3be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c3c2:	431a      	orrs	r2, r3
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	691b      	ldr	r3, [r3, #16]
 800c3c8:	3b01      	subs	r3, #1
 800c3ca:	061b      	lsls	r3, r3, #24
 800c3cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c3d0:	4931      	ldr	r1, [pc, #196]	; (800c498 <RCCEx_PLL3_Config+0x15c>)
 800c3d2:	4313      	orrs	r3, r2
 800c3d4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c3d6:	4b30      	ldr	r3, [pc, #192]	; (800c498 <RCCEx_PLL3_Config+0x15c>)
 800c3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	695b      	ldr	r3, [r3, #20]
 800c3e2:	492d      	ldr	r1, [pc, #180]	; (800c498 <RCCEx_PLL3_Config+0x15c>)
 800c3e4:	4313      	orrs	r3, r2
 800c3e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c3e8:	4b2b      	ldr	r3, [pc, #172]	; (800c498 <RCCEx_PLL3_Config+0x15c>)
 800c3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	699b      	ldr	r3, [r3, #24]
 800c3f4:	4928      	ldr	r1, [pc, #160]	; (800c498 <RCCEx_PLL3_Config+0x15c>)
 800c3f6:	4313      	orrs	r3, r2
 800c3f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c3fa:	4b27      	ldr	r3, [pc, #156]	; (800c498 <RCCEx_PLL3_Config+0x15c>)
 800c3fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3fe:	4a26      	ldr	r2, [pc, #152]	; (800c498 <RCCEx_PLL3_Config+0x15c>)
 800c400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c404:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c406:	4b24      	ldr	r3, [pc, #144]	; (800c498 <RCCEx_PLL3_Config+0x15c>)
 800c408:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c40a:	4b24      	ldr	r3, [pc, #144]	; (800c49c <RCCEx_PLL3_Config+0x160>)
 800c40c:	4013      	ands	r3, r2
 800c40e:	687a      	ldr	r2, [r7, #4]
 800c410:	69d2      	ldr	r2, [r2, #28]
 800c412:	00d2      	lsls	r2, r2, #3
 800c414:	4920      	ldr	r1, [pc, #128]	; (800c498 <RCCEx_PLL3_Config+0x15c>)
 800c416:	4313      	orrs	r3, r2
 800c418:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c41a:	4b1f      	ldr	r3, [pc, #124]	; (800c498 <RCCEx_PLL3_Config+0x15c>)
 800c41c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c41e:	4a1e      	ldr	r2, [pc, #120]	; (800c498 <RCCEx_PLL3_Config+0x15c>)
 800c420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c424:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d106      	bne.n	800c43a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c42c:	4b1a      	ldr	r3, [pc, #104]	; (800c498 <RCCEx_PLL3_Config+0x15c>)
 800c42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c430:	4a19      	ldr	r2, [pc, #100]	; (800c498 <RCCEx_PLL3_Config+0x15c>)
 800c432:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c436:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c438:	e00f      	b.n	800c45a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	2b01      	cmp	r3, #1
 800c43e:	d106      	bne.n	800c44e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c440:	4b15      	ldr	r3, [pc, #84]	; (800c498 <RCCEx_PLL3_Config+0x15c>)
 800c442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c444:	4a14      	ldr	r2, [pc, #80]	; (800c498 <RCCEx_PLL3_Config+0x15c>)
 800c446:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c44a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c44c:	e005      	b.n	800c45a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c44e:	4b12      	ldr	r3, [pc, #72]	; (800c498 <RCCEx_PLL3_Config+0x15c>)
 800c450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c452:	4a11      	ldr	r2, [pc, #68]	; (800c498 <RCCEx_PLL3_Config+0x15c>)
 800c454:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c458:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c45a:	4b0f      	ldr	r3, [pc, #60]	; (800c498 <RCCEx_PLL3_Config+0x15c>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	4a0e      	ldr	r2, [pc, #56]	; (800c498 <RCCEx_PLL3_Config+0x15c>)
 800c460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c464:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c466:	f7f6 fe97 	bl	8003198 <HAL_GetTick>
 800c46a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c46c:	e008      	b.n	800c480 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c46e:	f7f6 fe93 	bl	8003198 <HAL_GetTick>
 800c472:	4602      	mov	r2, r0
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	1ad3      	subs	r3, r2, r3
 800c478:	2b02      	cmp	r3, #2
 800c47a:	d901      	bls.n	800c480 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c47c:	2303      	movs	r3, #3
 800c47e:	e006      	b.n	800c48e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c480:	4b05      	ldr	r3, [pc, #20]	; (800c498 <RCCEx_PLL3_Config+0x15c>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d0f0      	beq.n	800c46e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c48c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3710      	adds	r7, #16
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	58024400 	.word	0x58024400
 800c49c:	ffff0007 	.word	0xffff0007

0800c4a0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b084      	sub	sp, #16
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d101      	bne.n	800c4b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	e10f      	b.n	800c6d2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a87      	ldr	r2, [pc, #540]	; (800c6dc <HAL_SPI_Init+0x23c>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d00f      	beq.n	800c4e2 <HAL_SPI_Init+0x42>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4a86      	ldr	r2, [pc, #536]	; (800c6e0 <HAL_SPI_Init+0x240>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d00a      	beq.n	800c4e2 <HAL_SPI_Init+0x42>
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4a84      	ldr	r2, [pc, #528]	; (800c6e4 <HAL_SPI_Init+0x244>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d005      	beq.n	800c4e2 <HAL_SPI_Init+0x42>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	68db      	ldr	r3, [r3, #12]
 800c4da:	2b0f      	cmp	r3, #15
 800c4dc:	d901      	bls.n	800c4e2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c4de:	2301      	movs	r3, #1
 800c4e0:	e0f7      	b.n	800c6d2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f000 ff48 	bl	800d378 <SPI_GetPacketSize>
 800c4e8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	4a7b      	ldr	r2, [pc, #492]	; (800c6dc <HAL_SPI_Init+0x23c>)
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d00c      	beq.n	800c50e <HAL_SPI_Init+0x6e>
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4a79      	ldr	r2, [pc, #484]	; (800c6e0 <HAL_SPI_Init+0x240>)
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d007      	beq.n	800c50e <HAL_SPI_Init+0x6e>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	4a78      	ldr	r2, [pc, #480]	; (800c6e4 <HAL_SPI_Init+0x244>)
 800c504:	4293      	cmp	r3, r2
 800c506:	d002      	beq.n	800c50e <HAL_SPI_Init+0x6e>
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	2b08      	cmp	r3, #8
 800c50c:	d811      	bhi.n	800c532 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c512:	4a72      	ldr	r2, [pc, #456]	; (800c6dc <HAL_SPI_Init+0x23c>)
 800c514:	4293      	cmp	r3, r2
 800c516:	d009      	beq.n	800c52c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4a70      	ldr	r2, [pc, #448]	; (800c6e0 <HAL_SPI_Init+0x240>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d004      	beq.n	800c52c <HAL_SPI_Init+0x8c>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	4a6f      	ldr	r2, [pc, #444]	; (800c6e4 <HAL_SPI_Init+0x244>)
 800c528:	4293      	cmp	r3, r2
 800c52a:	d104      	bne.n	800c536 <HAL_SPI_Init+0x96>
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	2b10      	cmp	r3, #16
 800c530:	d901      	bls.n	800c536 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c532:	2301      	movs	r3, #1
 800c534:	e0cd      	b.n	800c6d2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c53c:	b2db      	uxtb	r3, r3
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d106      	bne.n	800c550 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2200      	movs	r2, #0
 800c546:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f7f6 f990 	bl	8002870 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2202      	movs	r2, #2
 800c554:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	681a      	ldr	r2, [r3, #0]
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f022 0201 	bic.w	r2, r2, #1
 800c566:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	689b      	ldr	r3, [r3, #8]
 800c56e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c572:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	699b      	ldr	r3, [r3, #24]
 800c578:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c57c:	d119      	bne.n	800c5b2 <HAL_SPI_Init+0x112>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	685b      	ldr	r3, [r3, #4]
 800c582:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c586:	d103      	bne.n	800c590 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d008      	beq.n	800c5a2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c594:	2b00      	cmp	r3, #0
 800c596:	d10c      	bne.n	800c5b2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c59c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c5a0:	d107      	bne.n	800c5b2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	681a      	ldr	r2, [r3, #0]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c5b0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	685b      	ldr	r3, [r3, #4]
 800c5b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d00f      	beq.n	800c5de <HAL_SPI_Init+0x13e>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	68db      	ldr	r3, [r3, #12]
 800c5c2:	2b06      	cmp	r3, #6
 800c5c4:	d90b      	bls.n	800c5de <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	430a      	orrs	r2, r1
 800c5da:	601a      	str	r2, [r3, #0]
 800c5dc:	e007      	b.n	800c5ee <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	681a      	ldr	r2, [r3, #0]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c5ec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	69da      	ldr	r2, [r3, #28]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5f6:	431a      	orrs	r2, r3
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	431a      	orrs	r2, r3
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c600:	ea42 0103 	orr.w	r1, r2, r3
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	68da      	ldr	r2, [r3, #12]
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	430a      	orrs	r2, r1
 800c60e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c618:	431a      	orrs	r2, r3
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c61e:	431a      	orrs	r2, r3
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	699b      	ldr	r3, [r3, #24]
 800c624:	431a      	orrs	r2, r3
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	691b      	ldr	r3, [r3, #16]
 800c62a:	431a      	orrs	r2, r3
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	695b      	ldr	r3, [r3, #20]
 800c630:	431a      	orrs	r2, r3
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6a1b      	ldr	r3, [r3, #32]
 800c636:	431a      	orrs	r2, r3
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	685b      	ldr	r3, [r3, #4]
 800c63c:	431a      	orrs	r2, r3
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c642:	431a      	orrs	r2, r3
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	689b      	ldr	r3, [r3, #8]
 800c648:	431a      	orrs	r2, r3
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c64e:	ea42 0103 	orr.w	r1, r2, r3
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	430a      	orrs	r2, r1
 800c65c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d113      	bne.n	800c68e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	689b      	ldr	r3, [r3, #8]
 800c66c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c678:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	689b      	ldr	r3, [r3, #8]
 800c680:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c68c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	f022 0201 	bic.w	r2, r2, #1
 800c69c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	685b      	ldr	r3, [r3, #4]
 800c6a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d00a      	beq.n	800c6c0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	68db      	ldr	r3, [r3, #12]
 800c6b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	430a      	orrs	r2, r1
 800c6be:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c6d0:	2300      	movs	r3, #0
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3710      	adds	r7, #16
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	40013000 	.word	0x40013000
 800c6e0:	40003800 	.word	0x40003800
 800c6e4:	40003c00 	.word	0x40003c00

0800c6e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b08c      	sub	sp, #48	; 0x30
 800c6ec:	af02      	add	r7, sp, #8
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	60b9      	str	r1, [r7, #8]
 800c6f2:	607a      	str	r2, [r7, #4]
 800c6f4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	3320      	adds	r3, #32
 800c702:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	3330      	adds	r3, #48	; 0x30
 800c70a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c712:	2b01      	cmp	r3, #1
 800c714:	d101      	bne.n	800c71a <HAL_SPI_TransmitReceive+0x32>
 800c716:	2302      	movs	r3, #2
 800c718:	e1fd      	b.n	800cb16 <HAL_SPI_TransmitReceive+0x42e>
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	2201      	movs	r2, #1
 800c71e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c722:	f7f6 fd39 	bl	8003198 <HAL_GetTick>
 800c726:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 800c728:	887b      	ldrh	r3, [r7, #2]
 800c72a:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 800c72c:	887b      	ldrh	r3, [r7, #2]
 800c72e:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c736:	b2db      	uxtb	r3, r3
 800c738:	2b01      	cmp	r3, #1
 800c73a:	d009      	beq.n	800c750 <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 800c73c:	2302      	movs	r3, #2
 800c73e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	2200      	movs	r2, #0
 800c746:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c74a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c74e:	e1e2      	b.n	800cb16 <HAL_SPI_TransmitReceive+0x42e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d005      	beq.n	800c762 <HAL_SPI_TransmitReceive+0x7a>
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d002      	beq.n	800c762 <HAL_SPI_TransmitReceive+0x7a>
 800c75c:	887b      	ldrh	r3, [r7, #2]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d109      	bne.n	800c776 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 800c762:	2301      	movs	r3, #1
 800c764:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	2200      	movs	r2, #0
 800c76c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c770:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c774:	e1cf      	b.n	800cb16 <HAL_SPI_TransmitReceive+0x42e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	2205      	movs	r2, #5
 800c77a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	2200      	movs	r2, #0
 800c782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	687a      	ldr	r2, [r7, #4]
 800c78a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	887a      	ldrh	r2, [r7, #2]
 800c790:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	887a      	ldrh	r2, [r7, #2]
 800c798:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	68ba      	ldr	r2, [r7, #8]
 800c7a0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	887a      	ldrh	r2, [r7, #2]
 800c7a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	887a      	ldrh	r2, [r7, #2]
 800c7ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	68da      	ldr	r2, [r3, #12]
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 800c7cc:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	685a      	ldr	r2, [r3, #4]
 800c7d4:	4b82      	ldr	r3, [pc, #520]	; (800c9e0 <HAL_SPI_TransmitReceive+0x2f8>)
 800c7d6:	4013      	ands	r3, r2
 800c7d8:	8879      	ldrh	r1, [r7, #2]
 800c7da:	68fa      	ldr	r2, [r7, #12]
 800c7dc:	6812      	ldr	r2, [r2, #0]
 800c7de:	430b      	orrs	r3, r1
 800c7e0:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	681a      	ldr	r2, [r3, #0]
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f042 0201 	orr.w	r2, r2, #1
 800c7f0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	685b      	ldr	r3, [r3, #4]
 800c7f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7fa:	d107      	bne.n	800c80c <HAL_SPI_TransmitReceive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	681a      	ldr	r2, [r3, #0]
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c80a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	2b0f      	cmp	r3, #15
 800c812:	d970      	bls.n	800c8f6 <HAL_SPI_TransmitReceive+0x20e>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c814:	e068      	b.n	800c8e8 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	695b      	ldr	r3, [r3, #20]
 800c81c:	f003 0302 	and.w	r3, r3, #2
 800c820:	2b02      	cmp	r3, #2
 800c822:	d11a      	bne.n	800c85a <HAL_SPI_TransmitReceive+0x172>
 800c824:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c826:	2b00      	cmp	r3, #0
 800c828:	d017      	beq.n	800c85a <HAL_SPI_TransmitReceive+0x172>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	6812      	ldr	r2, [r2, #0]
 800c834:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c83a:	1d1a      	adds	r2, r3, #4
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c846:	b29b      	uxth	r3, r3
 800c848:	3b01      	subs	r3, #1
 800c84a:	b29a      	uxth	r2, r3
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c858:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	695a      	ldr	r2, [r3, #20]
 800c860:	f248 0308 	movw	r3, #32776	; 0x8008
 800c864:	4013      	ands	r3, r2
 800c866:	2b00      	cmp	r3, #0
 800c868:	d01a      	beq.n	800c8a0 <HAL_SPI_TransmitReceive+0x1b8>
 800c86a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d017      	beq.n	800c8a0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	681a      	ldr	r2, [r3, #0]
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c878:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c87a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c880:	1d1a      	adds	r2, r3, #4
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c88c:	b29b      	uxth	r3, r3
 800c88e:	3b01      	subs	r3, #1
 800c890:	b29a      	uxth	r2, r3
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c89e:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c8a0:	f7f6 fc7a 	bl	8003198 <HAL_GetTick>
 800c8a4:	4602      	mov	r2, r0
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	1ad3      	subs	r3, r2, r3
 800c8aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	d803      	bhi.n	800c8b8 <HAL_SPI_TransmitReceive+0x1d0>
 800c8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8b6:	d102      	bne.n	800c8be <HAL_SPI_TransmitReceive+0x1d6>
 800c8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d114      	bne.n	800c8e8 <HAL_SPI_TransmitReceive+0x200>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c8be:	68f8      	ldr	r0, [r7, #12]
 800c8c0:	f000 fc8c 	bl	800d1dc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	2201      	movs	r2, #1
 800c8e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c8e4:	2303      	movs	r3, #3
 800c8e6:	e116      	b.n	800cb16 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c8e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d193      	bne.n	800c816 <HAL_SPI_TransmitReceive+0x12e>
 800c8ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d190      	bne.n	800c816 <HAL_SPI_TransmitReceive+0x12e>
 800c8f4:	e0e8      	b.n	800cac8 <HAL_SPI_TransmitReceive+0x3e0>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	68db      	ldr	r3, [r3, #12]
 800c8fa:	2b07      	cmp	r3, #7
 800c8fc:	f240 80de 	bls.w	800cabc <HAL_SPI_TransmitReceive+0x3d4>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c900:	e066      	b.n	800c9d0 <HAL_SPI_TransmitReceive+0x2e8>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	695b      	ldr	r3, [r3, #20]
 800c908:	f003 0302 	and.w	r3, r3, #2
 800c90c:	2b02      	cmp	r3, #2
 800c90e:	d119      	bne.n	800c944 <HAL_SPI_TransmitReceive+0x25c>
 800c910:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c912:	2b00      	cmp	r3, #0
 800c914:	d016      	beq.n	800c944 <HAL_SPI_TransmitReceive+0x25c>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c91a:	881a      	ldrh	r2, [r3, #0]
 800c91c:	69fb      	ldr	r3, [r7, #28]
 800c91e:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c924:	1c9a      	adds	r2, r3, #2
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c930:	b29b      	uxth	r3, r3
 800c932:	3b01      	subs	r3, #1
 800c934:	b29a      	uxth	r2, r3
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c942:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	695b      	ldr	r3, [r3, #20]
 800c94a:	f003 0301 	and.w	r3, r3, #1
 800c94e:	2b01      	cmp	r3, #1
 800c950:	d11a      	bne.n	800c988 <HAL_SPI_TransmitReceive+0x2a0>
 800c952:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c954:	2b00      	cmp	r3, #0
 800c956:	d017      	beq.n	800c988 <HAL_SPI_TransmitReceive+0x2a0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c95c:	69ba      	ldr	r2, [r7, #24]
 800c95e:	8812      	ldrh	r2, [r2, #0]
 800c960:	b292      	uxth	r2, r2
 800c962:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c968:	1c9a      	adds	r2, r3, #2
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c974:	b29b      	uxth	r3, r3
 800c976:	3b01      	subs	r3, #1
 800c978:	b29a      	uxth	r2, r3
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c986:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c988:	f7f6 fc06 	bl	8003198 <HAL_GetTick>
 800c98c:	4602      	mov	r2, r0
 800c98e:	697b      	ldr	r3, [r7, #20]
 800c990:	1ad3      	subs	r3, r2, r3
 800c992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c994:	429a      	cmp	r2, r3
 800c996:	d803      	bhi.n	800c9a0 <HAL_SPI_TransmitReceive+0x2b8>
 800c998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c99a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c99e:	d102      	bne.n	800c9a6 <HAL_SPI_TransmitReceive+0x2be>
 800c9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d114      	bne.n	800c9d0 <HAL_SPI_TransmitReceive+0x2e8>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c9a6:	68f8      	ldr	r0, [r7, #12]
 800c9a8:	f000 fc18 	bl	800d1dc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	2201      	movs	r2, #1
 800c9c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c9cc:	2303      	movs	r3, #3
 800c9ce:	e0a2      	b.n	800cb16 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c9d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d195      	bne.n	800c902 <HAL_SPI_TransmitReceive+0x21a>
 800c9d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d192      	bne.n	800c902 <HAL_SPI_TransmitReceive+0x21a>
 800c9dc:	e074      	b.n	800cac8 <HAL_SPI_TransmitReceive+0x3e0>
 800c9de:	bf00      	nop
 800c9e0:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	695b      	ldr	r3, [r3, #20]
 800c9ea:	f003 0302 	and.w	r3, r3, #2
 800c9ee:	2b02      	cmp	r3, #2
 800c9f0:	d11b      	bne.n	800ca2a <HAL_SPI_TransmitReceive+0x342>
 800c9f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d018      	beq.n	800ca2a <HAL_SPI_TransmitReceive+0x342>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	3320      	adds	r3, #32
 800ca02:	7812      	ldrb	r2, [r2, #0]
 800ca04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca0a:	1c5a      	adds	r2, r3, #1
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ca16:	b29b      	uxth	r3, r3
 800ca18:	3b01      	subs	r3, #1
 800ca1a:	b29a      	uxth	r2, r3
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ca28:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	695b      	ldr	r3, [r3, #20]
 800ca30:	f003 0301 	and.w	r3, r3, #1
 800ca34:	2b01      	cmp	r3, #1
 800ca36:	d11d      	bne.n	800ca74 <HAL_SPI_TransmitReceive+0x38c>
 800ca38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d01a      	beq.n	800ca74 <HAL_SPI_TransmitReceive+0x38c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca4a:	7812      	ldrb	r2, [r2, #0]
 800ca4c:	b2d2      	uxtb	r2, r2
 800ca4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca54:	1c5a      	adds	r2, r3, #1
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ca60:	b29b      	uxth	r3, r3
 800ca62:	3b01      	subs	r3, #1
 800ca64:	b29a      	uxth	r2, r3
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ca72:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ca74:	f7f6 fb90 	bl	8003198 <HAL_GetTick>
 800ca78:	4602      	mov	r2, r0
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	1ad3      	subs	r3, r2, r3
 800ca7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d803      	bhi.n	800ca8c <HAL_SPI_TransmitReceive+0x3a4>
 800ca84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca8a:	d102      	bne.n	800ca92 <HAL_SPI_TransmitReceive+0x3aa>
 800ca8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d114      	bne.n	800cabc <HAL_SPI_TransmitReceive+0x3d4>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800ca92:	68f8      	ldr	r0, [r7, #12]
 800ca94:	f000 fba2 	bl	800d1dc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800caa6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	2201      	movs	r2, #1
 800cab4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800cab8:	2303      	movs	r3, #3
 800caba:	e02c      	b.n	800cb16 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cabc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d190      	bne.n	800c9e4 <HAL_SPI_TransmitReceive+0x2fc>
 800cac2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d18d      	bne.n	800c9e4 <HAL_SPI_TransmitReceive+0x2fc>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	9300      	str	r3, [sp, #0]
 800cacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cace:	2200      	movs	r2, #0
 800cad0:	2108      	movs	r1, #8
 800cad2:	68f8      	ldr	r0, [r7, #12]
 800cad4:	f000 fc22 	bl	800d31c <SPI_WaitOnFlagUntilTimeout>
 800cad8:	4603      	mov	r3, r0
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d007      	beq.n	800caee <HAL_SPI_TransmitReceive+0x406>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cae4:	f043 0220 	orr.w	r2, r3, #32
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800caee:	68f8      	ldr	r0, [r7, #12]
 800caf0:	f000 fb74 	bl	800d1dc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	2200      	movs	r2, #0
 800caf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	2201      	movs	r2, #1
 800cb00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d001      	beq.n	800cb12 <HAL_SPI_TransmitReceive+0x42a>
  {
    return HAL_ERROR;
 800cb0e:	2301      	movs	r3, #1
 800cb10:	e001      	b.n	800cb16 <HAL_SPI_TransmitReceive+0x42e>
  }
  return errorcode;
 800cb12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3728      	adds	r7, #40	; 0x28
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}
 800cb1e:	bf00      	nop

0800cb20 <HAL_SPI_Receive_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800cb20:	b480      	push	{r7}
 800cb22:	b087      	sub	sp, #28
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	60f8      	str	r0, [r7, #12]
 800cb28:	60b9      	str	r1, [r7, #8]
 800cb2a:	4613      	mov	r3, r2
 800cb2c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cb38:	2b01      	cmp	r3, #1
 800cb3a:	d101      	bne.n	800cb40 <HAL_SPI_Receive_IT+0x20>
 800cb3c:	2302      	movs	r3, #2
 800cb3e:	e098      	b.n	800cc72 <HAL_SPI_Receive_IT+0x152>
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	2201      	movs	r2, #1
 800cb44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cb4e:	b2db      	uxtb	r3, r3
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	d007      	beq.n	800cb64 <HAL_SPI_Receive_IT+0x44>
  {
    errorcode = HAL_BUSY;
 800cb54:	2302      	movs	r3, #2
 800cb56:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cb60:	7dfb      	ldrb	r3, [r7, #23]
 800cb62:	e086      	b.n	800cc72 <HAL_SPI_Receive_IT+0x152>
  }

  if ((pData == NULL) || (Size == 0UL))
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d002      	beq.n	800cb70 <HAL_SPI_Receive_IT+0x50>
 800cb6a:	88fb      	ldrh	r3, [r7, #6]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d107      	bne.n	800cb80 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 800cb70:	2301      	movs	r3, #1
 800cb72:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	2200      	movs	r2, #0
 800cb78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cb7c:	7dfb      	ldrb	r3, [r7, #23]
 800cb7e:	e078      	b.n	800cc72 <HAL_SPI_Receive_IT+0x152>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	2204      	movs	r2, #4
 800cb84:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	68ba      	ldr	r2, [r7, #8]
 800cb94:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	88fa      	ldrh	r2, [r7, #6]
 800cb9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	88fa      	ldrh	r2, [r7, #6]
 800cba2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxISR       = NULL;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	68db      	ldr	r3, [r3, #12]
 800cbc6:	2b0f      	cmp	r3, #15
 800cbc8:	d903      	bls.n	800cbd2 <HAL_SPI_Receive_IT+0xb2>
  {
    hspi->RxISR = SPI_RxISR_32BIT;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	4a2c      	ldr	r2, [pc, #176]	; (800cc80 <HAL_SPI_Receive_IT+0x160>)
 800cbce:	671a      	str	r2, [r3, #112]	; 0x70
 800cbd0:	e00a      	b.n	800cbe8 <HAL_SPI_Receive_IT+0xc8>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	68db      	ldr	r3, [r3, #12]
 800cbd6:	2b07      	cmp	r3, #7
 800cbd8:	d903      	bls.n	800cbe2 <HAL_SPI_Receive_IT+0xc2>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	4a29      	ldr	r2, [pc, #164]	; (800cc84 <HAL_SPI_Receive_IT+0x164>)
 800cbde:	671a      	str	r2, [r3, #112]	; 0x70
 800cbe0:	e002      	b.n	800cbe8 <HAL_SPI_Receive_IT+0xc8>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	4a28      	ldr	r2, [pc, #160]	; (800cc88 <HAL_SPI_Receive_IT+0x168>)
 800cbe6:	671a      	str	r2, [r3, #112]	; 0x70
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	689b      	ldr	r3, [r3, #8]
 800cbec:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800cbf0:	d108      	bne.n	800cc04 <HAL_SPI_Receive_IT+0xe4>
  {
    SPI_1LINE_RX(hspi);
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	681a      	ldr	r2, [r3, #0]
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cc00:	601a      	str	r2, [r3, #0]
 800cc02:	e009      	b.n	800cc18 <HAL_SPI_Receive_IT+0xf8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	68db      	ldr	r3, [r3, #12]
 800cc0a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800cc16:	60da      	str	r2, [r3, #12]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	685a      	ldr	r2, [r3, #4]
 800cc1e:	4b1b      	ldr	r3, [pc, #108]	; (800cc8c <HAL_SPI_Receive_IT+0x16c>)
 800cc20:	4013      	ands	r3, r2
 800cc22:	88f9      	ldrh	r1, [r7, #6]
 800cc24:	68fa      	ldr	r2, [r7, #12]
 800cc26:	6812      	ldr	r2, [r2, #0]
 800cc28:	430b      	orrs	r3, r1
 800cc2a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	681a      	ldr	r2, [r3, #0]
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f042 0201 	orr.w	r2, r2, #1
 800cc3a:	601a      	str	r2, [r3, #0]

  /* Enable EOT, RXP, OVR, FRE, MODF and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	6919      	ldr	r1, [r3, #16]
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	681a      	ldr	r2, [r3, #0]
 800cc46:	f240 7349 	movw	r3, #1865	; 0x749
 800cc4a:	430b      	orrs	r3, r1
 800cc4c:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	685b      	ldr	r3, [r3, #4]
 800cc52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cc56:	d107      	bne.n	800cc68 <HAL_SPI_Receive_IT+0x148>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	681a      	ldr	r2, [r3, #0]
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc66:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800cc70:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	371c      	adds	r7, #28
 800cc76:	46bd      	mov	sp, r7
 800cc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7c:	4770      	bx	lr
 800cc7e:	bf00      	nop
 800cc80:	0800d183 	.word	0x0800d183
 800cc84:	0800d123 	.word	0x0800d123
 800cc88:	0800d0c5 	.word	0x0800d0c5
 800cc8c:	ffff0000 	.word	0xffff0000

0800cc90 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b08a      	sub	sp, #40	; 0x28
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	691b      	ldr	r3, [r3, #16]
 800cc9e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	695b      	ldr	r3, [r3, #20]
 800cca6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800cca8:	6a3a      	ldr	r2, [r7, #32]
 800ccaa:	69fb      	ldr	r3, [r7, #28]
 800ccac:	4013      	ands	r3, r2
 800ccae:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	689b      	ldr	r3, [r3, #8]
 800ccb6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ccc2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	3330      	adds	r3, #48	; 0x30
 800ccca:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800cccc:	69fb      	ldr	r3, [r7, #28]
 800ccce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d010      	beq.n	800ccf8 <HAL_SPI_IRQHandler+0x68>
 800ccd6:	6a3b      	ldr	r3, [r7, #32]
 800ccd8:	f003 0308 	and.w	r3, r3, #8
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d00b      	beq.n	800ccf8 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	699a      	ldr	r2, [r3, #24]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ccee:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f000 f9c3 	bl	800d07c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800ccf6:	e192      	b.n	800d01e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800ccf8:	69bb      	ldr	r3, [r7, #24]
 800ccfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d113      	bne.n	800cd2a <HAL_SPI_IRQHandler+0x9a>
 800cd02:	69bb      	ldr	r3, [r7, #24]
 800cd04:	f003 0320 	and.w	r3, r3, #32
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d10e      	bne.n	800cd2a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800cd0c:	69bb      	ldr	r3, [r7, #24]
 800cd0e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d009      	beq.n	800cd2a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	4798      	blx	r3
    handled = 1UL;
 800cd26:	2301      	movs	r3, #1
 800cd28:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800cd2a:	69bb      	ldr	r3, [r7, #24]
 800cd2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d10f      	bne.n	800cd54 <HAL_SPI_IRQHandler+0xc4>
 800cd34:	69bb      	ldr	r3, [r7, #24]
 800cd36:	f003 0301 	and.w	r3, r3, #1
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d00a      	beq.n	800cd54 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800cd3e:	69bb      	ldr	r3, [r7, #24]
 800cd40:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d105      	bne.n	800cd54 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	4798      	blx	r3
    handled = 1UL;
 800cd50:	2301      	movs	r3, #1
 800cd52:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800cd54:	69bb      	ldr	r3, [r7, #24]
 800cd56:	f003 0320 	and.w	r3, r3, #32
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d10f      	bne.n	800cd7e <HAL_SPI_IRQHandler+0xee>
 800cd5e:	69bb      	ldr	r3, [r7, #24]
 800cd60:	f003 0302 	and.w	r3, r3, #2
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d00a      	beq.n	800cd7e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800cd68:	69bb      	ldr	r3, [r7, #24]
 800cd6a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d105      	bne.n	800cd7e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	4798      	blx	r3
    handled = 1UL;
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800cd7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	f040 8147 	bne.w	800d014 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800cd86:	69bb      	ldr	r3, [r7, #24]
 800cd88:	f003 0308 	and.w	r3, r3, #8
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	f000 808b 	beq.w	800cea8 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	699a      	ldr	r2, [r3, #24]
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	f042 0208 	orr.w	r2, r2, #8
 800cda0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	699a      	ldr	r2, [r3, #24]
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	f042 0210 	orr.w	r2, r2, #16
 800cdb0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	699a      	ldr	r2, [r3, #24]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cdc0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	691a      	ldr	r2, [r3, #16]
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	f022 0208 	bic.w	r2, r2, #8
 800cdd0:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	689b      	ldr	r3, [r3, #8]
 800cdd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d13d      	bne.n	800ce5c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800cde0:	e036      	b.n	800ce50 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	68db      	ldr	r3, [r3, #12]
 800cde6:	2b0f      	cmp	r3, #15
 800cde8:	d90b      	bls.n	800ce02 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681a      	ldr	r2, [r3, #0]
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cdf2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cdf4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cdfa:	1d1a      	adds	r2, r3, #4
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	665a      	str	r2, [r3, #100]	; 0x64
 800ce00:	e01d      	b.n	800ce3e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	68db      	ldr	r3, [r3, #12]
 800ce06:	2b07      	cmp	r3, #7
 800ce08:	d90b      	bls.n	800ce22 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce0e:	68fa      	ldr	r2, [r7, #12]
 800ce10:	8812      	ldrh	r2, [r2, #0]
 800ce12:	b292      	uxth	r2, r2
 800ce14:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce1a:	1c9a      	adds	r2, r3, #2
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	665a      	str	r2, [r3, #100]	; 0x64
 800ce20:	e00d      	b.n	800ce3e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce2e:	7812      	ldrb	r2, [r2, #0]
 800ce30:	b2d2      	uxtb	r2, r2
 800ce32:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce38:	1c5a      	adds	r2, r3, #1
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ce44:	b29b      	uxth	r3, r3
 800ce46:	3b01      	subs	r3, #1
 800ce48:	b29a      	uxth	r2, r3
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ce56:	b29b      	uxth	r3, r3
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d1c2      	bne.n	800cde2 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f000 f9bd 	bl	800d1dc <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2201      	movs	r2, #1
 800ce66:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d003      	beq.n	800ce7c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f000 f8f7 	bl	800d068 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ce7a:	e0d0      	b.n	800d01e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800ce7c:	7cfb      	ldrb	r3, [r7, #19]
 800ce7e:	2b05      	cmp	r3, #5
 800ce80:	d103      	bne.n	800ce8a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f000 f8e6 	bl	800d054 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800ce88:	e0c6      	b.n	800d018 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800ce8a:	7cfb      	ldrb	r3, [r7, #19]
 800ce8c:	2b04      	cmp	r3, #4
 800ce8e:	d103      	bne.n	800ce98 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800ce90:	6878      	ldr	r0, [r7, #4]
 800ce92:	f000 f8d5 	bl	800d040 <HAL_SPI_RxCpltCallback>
    return;
 800ce96:	e0bf      	b.n	800d018 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800ce98:	7cfb      	ldrb	r3, [r7, #19]
 800ce9a:	2b03      	cmp	r3, #3
 800ce9c:	f040 80bc 	bne.w	800d018 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f000 f8c3 	bl	800d02c <HAL_SPI_TxCpltCallback>
    return;
 800cea6:	e0b7      	b.n	800d018 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800cea8:	69bb      	ldr	r3, [r7, #24]
 800ceaa:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	f000 80b5 	beq.w	800d01e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800ceb4:	69bb      	ldr	r3, [r7, #24]
 800ceb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d00f      	beq.n	800cede <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cec4:	f043 0204 	orr.w	r2, r3, #4
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	699a      	ldr	r2, [r3, #24]
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cedc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800cede:	69bb      	ldr	r3, [r7, #24]
 800cee0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d00f      	beq.n	800cf08 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ceee:	f043 0201 	orr.w	r2, r3, #1
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	699a      	ldr	r2, [r3, #24]
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf06:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800cf08:	69bb      	ldr	r3, [r7, #24]
 800cf0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d00f      	beq.n	800cf32 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf18:	f043 0208 	orr.w	r2, r3, #8
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	699a      	ldr	r2, [r3, #24]
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cf30:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800cf32:	69bb      	ldr	r3, [r7, #24]
 800cf34:	f003 0320 	and.w	r3, r3, #32
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d00f      	beq.n	800cf5c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf42:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	699a      	ldr	r2, [r3, #24]
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f042 0220 	orr.w	r2, r2, #32
 800cf5a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d05a      	beq.n	800d01c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	681a      	ldr	r2, [r3, #0]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f022 0201 	bic.w	r2, r2, #1
 800cf74:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	6919      	ldr	r1, [r3, #16]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681a      	ldr	r2, [r3, #0]
 800cf80:	4b28      	ldr	r3, [pc, #160]	; (800d024 <HAL_SPI_IRQHandler+0x394>)
 800cf82:	400b      	ands	r3, r1
 800cf84:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800cf8c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800cf90:	d138      	bne.n	800d004 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	689a      	ldr	r2, [r3, #8]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800cfa0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d013      	beq.n	800cfd2 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfae:	4a1e      	ldr	r2, [pc, #120]	; (800d028 <HAL_SPI_IRQHandler+0x398>)
 800cfb0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f7f9 f9b2 	bl	8006320 <HAL_DMA_Abort_IT>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d007      	beq.n	800cfd2 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cfc8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d020      	beq.n	800d01c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cfde:	4a12      	ldr	r2, [pc, #72]	; (800d028 <HAL_SPI_IRQHandler+0x398>)
 800cfe0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f7f9 f99a 	bl	8006320 <HAL_DMA_Abort_IT>
 800cfec:	4603      	mov	r3, r0
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d014      	beq.n	800d01c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cff8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800d002:	e00b      	b.n	800d01c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2201      	movs	r2, #1
 800d008:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f000 f82b 	bl	800d068 <HAL_SPI_ErrorCallback>
    return;
 800d012:	e003      	b.n	800d01c <HAL_SPI_IRQHandler+0x38c>
    return;
 800d014:	bf00      	nop
 800d016:	e002      	b.n	800d01e <HAL_SPI_IRQHandler+0x38e>
    return;
 800d018:	bf00      	nop
 800d01a:	e000      	b.n	800d01e <HAL_SPI_IRQHandler+0x38e>
    return;
 800d01c:	bf00      	nop
  }
}
 800d01e:	3728      	adds	r7, #40	; 0x28
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}
 800d024:	fffffc94 	.word	0xfffffc94
 800d028:	0800d091 	.word	0x0800d091

0800d02c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d02c:	b480      	push	{r7}
 800d02e:	b083      	sub	sp, #12
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800d034:	bf00      	nop
 800d036:	370c      	adds	r7, #12
 800d038:	46bd      	mov	sp, r7
 800d03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03e:	4770      	bx	lr

0800d040 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d040:	b480      	push	{r7}
 800d042:	b083      	sub	sp, #12
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800d048:	bf00      	nop
 800d04a:	370c      	adds	r7, #12
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr

0800d054 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d054:	b480      	push	{r7}
 800d056:	b083      	sub	sp, #12
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800d05c:	bf00      	nop
 800d05e:	370c      	adds	r7, #12
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr

0800d068 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d068:	b480      	push	{r7}
 800d06a:	b083      	sub	sp, #12
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d070:	bf00      	nop
 800d072:	370c      	adds	r7, #12
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr

0800d07c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi)
{
 800d07c:	b480      	push	{r7}
 800d07e:	b083      	sub	sp, #12
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800d084:	bf00      	nop
 800d086:	370c      	adds	r7, #12
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr

0800d090 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b084      	sub	sp, #16
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d09c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	2201      	movs	r2, #1
 800d0b2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d0b6:	68f8      	ldr	r0, [r7, #12]
 800d0b8:	f7ff ffd6 	bl	800d068 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d0bc:	bf00      	nop
 800d0be:	3710      	adds	r7, #16
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <SPI_RxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 800d0c4:	b480      	push	{r7}
 800d0c6:	b083      	sub	sp, #12
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0d8:	7812      	ldrb	r2, [r2, #0]
 800d0da:	b2d2      	uxtb	r2, r2
 800d0dc:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0e2:	1c5a      	adds	r2, r3, #1
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount--;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d0ee:	b29b      	uxth	r3, r3
 800d0f0:	3b01      	subs	r3, #1
 800d0f2:	b29a      	uxth	r2, r3
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d100:	b29b      	uxth	r3, r3
 800d102:	2b00      	cmp	r3, #0
 800d104:	d107      	bne.n	800d116 <SPI_RxISR_8BIT+0x52>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	691a      	ldr	r2, [r3, #16]
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	f022 0201 	bic.w	r2, r2, #1
 800d114:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800d116:	bf00      	nop
 800d118:	370c      	adds	r7, #12
 800d11a:	46bd      	mov	sp, r7
 800d11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d120:	4770      	bx	lr

0800d122 <SPI_RxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 800d122:	b480      	push	{r7}
 800d124:	b085      	sub	sp, #20
 800d126:	af00      	add	r7, sp, #0
 800d128:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	3330      	adds	r3, #48	; 0x30
 800d130:	60fb      	str	r3, [r7, #12]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d136:	68fa      	ldr	r2, [r7, #12]
 800d138:	8812      	ldrh	r2, [r2, #0]
 800d13a:	b292      	uxth	r2, r2
 800d13c:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d142:	1c9a      	adds	r2, r3, #2
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount--;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d14e:	b29b      	uxth	r3, r3
 800d150:	3b01      	subs	r3, #1
 800d152:	b29a      	uxth	r2, r3
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d160:	b29b      	uxth	r3, r3
 800d162:	2b00      	cmp	r3, #0
 800d164:	d107      	bne.n	800d176 <SPI_RxISR_16BIT+0x54>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	691a      	ldr	r2, [r3, #16]
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f022 0201 	bic.w	r2, r2, #1
 800d174:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800d176:	bf00      	nop
 800d178:	3714      	adds	r7, #20
 800d17a:	46bd      	mov	sp, r7
 800d17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d180:	4770      	bx	lr

0800d182 <SPI_RxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 800d182:	b480      	push	{r7}
 800d184:	b083      	sub	sp, #12
 800d186:	af00      	add	r7, sp, #0
 800d188:	6078      	str	r0, [r7, #4]
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681a      	ldr	r2, [r3, #0]
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d192:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d194:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d19a:	1d1a      	adds	r2, r3, #4
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount--;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d1a6:	b29b      	uxth	r3, r3
 800d1a8:	3b01      	subs	r3, #1
 800d1aa:	b29a      	uxth	r2, r3
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d1b8:	b29b      	uxth	r3, r3
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d107      	bne.n	800d1ce <SPI_RxISR_32BIT+0x4c>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	691a      	ldr	r2, [r3, #16]
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	f022 0201 	bic.w	r2, r2, #1
 800d1cc:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800d1ce:	bf00      	nop
 800d1d0:	370c      	adds	r7, #12
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d8:	4770      	bx	lr
	...

0800d1dc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d1dc:	b480      	push	{r7}
 800d1de:	b085      	sub	sp, #20
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	695b      	ldr	r3, [r3, #20]
 800d1ea:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	699a      	ldr	r2, [r3, #24]
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	f042 0208 	orr.w	r2, r2, #8
 800d1fa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	699a      	ldr	r2, [r3, #24]
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	f042 0210 	orr.w	r2, r2, #16
 800d20a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	681a      	ldr	r2, [r3, #0]
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f022 0201 	bic.w	r2, r2, #1
 800d21a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	6919      	ldr	r1, [r3, #16]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681a      	ldr	r2, [r3, #0]
 800d226:	4b3c      	ldr	r3, [pc, #240]	; (800d318 <SPI_CloseTransfer+0x13c>)
 800d228:	400b      	ands	r3, r1
 800d22a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	689a      	ldr	r2, [r3, #8]
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d23a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d242:	b2db      	uxtb	r3, r3
 800d244:	2b04      	cmp	r3, #4
 800d246:	d014      	beq.n	800d272 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	f003 0320 	and.w	r3, r3, #32
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d00f      	beq.n	800d272 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d258:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	699a      	ldr	r2, [r3, #24]
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f042 0220 	orr.w	r2, r2, #32
 800d270:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d278:	b2db      	uxtb	r3, r3
 800d27a:	2b03      	cmp	r3, #3
 800d27c:	d014      	beq.n	800d2a8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d284:	2b00      	cmp	r3, #0
 800d286:	d00f      	beq.n	800d2a8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d28e:	f043 0204 	orr.w	r2, r3, #4
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	699a      	ldr	r2, [r3, #24]
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d2a6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d00f      	beq.n	800d2d2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2b8:	f043 0201 	orr.w	r2, r3, #1
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	699a      	ldr	r2, [r3, #24]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d2d0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d00f      	beq.n	800d2fc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2e2:	f043 0208 	orr.w	r2, r3, #8
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	699a      	ldr	r2, [r3, #24]
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d2fa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2200      	movs	r2, #0
 800d300:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2200      	movs	r2, #0
 800d308:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800d30c:	bf00      	nop
 800d30e:	3714      	adds	r7, #20
 800d310:	46bd      	mov	sp, r7
 800d312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d316:	4770      	bx	lr
 800d318:	fffffc90 	.word	0xfffffc90

0800d31c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b084      	sub	sp, #16
 800d320:	af00      	add	r7, sp, #0
 800d322:	60f8      	str	r0, [r7, #12]
 800d324:	60b9      	str	r1, [r7, #8]
 800d326:	603b      	str	r3, [r7, #0]
 800d328:	4613      	mov	r3, r2
 800d32a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d32c:	e010      	b.n	800d350 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d32e:	f7f5 ff33 	bl	8003198 <HAL_GetTick>
 800d332:	4602      	mov	r2, r0
 800d334:	69bb      	ldr	r3, [r7, #24]
 800d336:	1ad3      	subs	r3, r2, r3
 800d338:	683a      	ldr	r2, [r7, #0]
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d803      	bhi.n	800d346 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d344:	d102      	bne.n	800d34c <SPI_WaitOnFlagUntilTimeout+0x30>
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d101      	bne.n	800d350 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d34c:	2303      	movs	r3, #3
 800d34e:	e00f      	b.n	800d370 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	695a      	ldr	r2, [r3, #20]
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	4013      	ands	r3, r2
 800d35a:	68ba      	ldr	r2, [r7, #8]
 800d35c:	429a      	cmp	r2, r3
 800d35e:	bf0c      	ite	eq
 800d360:	2301      	moveq	r3, #1
 800d362:	2300      	movne	r3, #0
 800d364:	b2db      	uxtb	r3, r3
 800d366:	461a      	mov	r2, r3
 800d368:	79fb      	ldrb	r3, [r7, #7]
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d0df      	beq.n	800d32e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d36e:	2300      	movs	r3, #0
}
 800d370:	4618      	mov	r0, r3
 800d372:	3710      	adds	r7, #16
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}

0800d378 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800d378:	b480      	push	{r7}
 800d37a:	b085      	sub	sp, #20
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d384:	095b      	lsrs	r3, r3, #5
 800d386:	3301      	adds	r3, #1
 800d388:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	68db      	ldr	r3, [r3, #12]
 800d38e:	3301      	adds	r3, #1
 800d390:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	3307      	adds	r3, #7
 800d396:	08db      	lsrs	r3, r3, #3
 800d398:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	68fa      	ldr	r2, [r7, #12]
 800d39e:	fb02 f303 	mul.w	r3, r2, r3
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	3714      	adds	r7, #20
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ac:	4770      	bx	lr

0800d3ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d3ae:	b580      	push	{r7, lr}
 800d3b0:	b082      	sub	sp, #8
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d101      	bne.n	800d3c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d3bc:	2301      	movs	r3, #1
 800d3be:	e049      	b.n	800d454 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d3c6:	b2db      	uxtb	r3, r3
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d106      	bne.n	800d3da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	f7f5 fb0b 	bl	80029f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2202      	movs	r2, #2
 800d3de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681a      	ldr	r2, [r3, #0]
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	3304      	adds	r3, #4
 800d3ea:	4619      	mov	r1, r3
 800d3ec:	4610      	mov	r0, r2
 800d3ee:	f000 fd11 	bl	800de14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2201      	movs	r2, #1
 800d3f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2201      	movs	r2, #1
 800d406:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2201      	movs	r2, #1
 800d40e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2201      	movs	r2, #1
 800d416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2201      	movs	r2, #1
 800d41e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2201      	movs	r2, #1
 800d426:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2201      	movs	r2, #1
 800d42e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2201      	movs	r2, #1
 800d436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2201      	movs	r2, #1
 800d43e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2201      	movs	r2, #1
 800d446:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2201      	movs	r2, #1
 800d44e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d452:	2300      	movs	r3, #0
}
 800d454:	4618      	mov	r0, r3
 800d456:	3708      	adds	r7, #8
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}

0800d45c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b082      	sub	sp, #8
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d101      	bne.n	800d46e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d46a:	2301      	movs	r3, #1
 800d46c:	e049      	b.n	800d502 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d474:	b2db      	uxtb	r3, r3
 800d476:	2b00      	cmp	r3, #0
 800d478:	d106      	bne.n	800d488 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2200      	movs	r2, #0
 800d47e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f000 f841 	bl	800d50a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2202      	movs	r2, #2
 800d48c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681a      	ldr	r2, [r3, #0]
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	3304      	adds	r3, #4
 800d498:	4619      	mov	r1, r3
 800d49a:	4610      	mov	r0, r2
 800d49c:	f000 fcba 	bl	800de14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2201      	movs	r2, #1
 800d4a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2201      	movs	r2, #1
 800d4ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2201      	movs	r2, #1
 800d4b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2201      	movs	r2, #1
 800d4bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2201      	movs	r2, #1
 800d4c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2201      	movs	r2, #1
 800d4cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2201      	movs	r2, #1
 800d4d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2201      	movs	r2, #1
 800d4dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2201      	movs	r2, #1
 800d4e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2201      	movs	r2, #1
 800d4ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2201      	movs	r2, #1
 800d4f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d500:	2300      	movs	r3, #0
}
 800d502:	4618      	mov	r0, r3
 800d504:	3708      	adds	r7, #8
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}

0800d50a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d50a:	b480      	push	{r7}
 800d50c:	b083      	sub	sp, #12
 800d50e:	af00      	add	r7, sp, #0
 800d510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d512:	bf00      	nop
 800d514:	370c      	adds	r7, #12
 800d516:	46bd      	mov	sp, r7
 800d518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51c:	4770      	bx	lr
	...

0800d520 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b084      	sub	sp, #16
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
 800d528:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d109      	bne.n	800d544 <HAL_TIM_PWM_Start+0x24>
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d536:	b2db      	uxtb	r3, r3
 800d538:	2b01      	cmp	r3, #1
 800d53a:	bf14      	ite	ne
 800d53c:	2301      	movne	r3, #1
 800d53e:	2300      	moveq	r3, #0
 800d540:	b2db      	uxtb	r3, r3
 800d542:	e03c      	b.n	800d5be <HAL_TIM_PWM_Start+0x9e>
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	2b04      	cmp	r3, #4
 800d548:	d109      	bne.n	800d55e <HAL_TIM_PWM_Start+0x3e>
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d550:	b2db      	uxtb	r3, r3
 800d552:	2b01      	cmp	r3, #1
 800d554:	bf14      	ite	ne
 800d556:	2301      	movne	r3, #1
 800d558:	2300      	moveq	r3, #0
 800d55a:	b2db      	uxtb	r3, r3
 800d55c:	e02f      	b.n	800d5be <HAL_TIM_PWM_Start+0x9e>
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	2b08      	cmp	r3, #8
 800d562:	d109      	bne.n	800d578 <HAL_TIM_PWM_Start+0x58>
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d56a:	b2db      	uxtb	r3, r3
 800d56c:	2b01      	cmp	r3, #1
 800d56e:	bf14      	ite	ne
 800d570:	2301      	movne	r3, #1
 800d572:	2300      	moveq	r3, #0
 800d574:	b2db      	uxtb	r3, r3
 800d576:	e022      	b.n	800d5be <HAL_TIM_PWM_Start+0x9e>
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	2b0c      	cmp	r3, #12
 800d57c:	d109      	bne.n	800d592 <HAL_TIM_PWM_Start+0x72>
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d584:	b2db      	uxtb	r3, r3
 800d586:	2b01      	cmp	r3, #1
 800d588:	bf14      	ite	ne
 800d58a:	2301      	movne	r3, #1
 800d58c:	2300      	moveq	r3, #0
 800d58e:	b2db      	uxtb	r3, r3
 800d590:	e015      	b.n	800d5be <HAL_TIM_PWM_Start+0x9e>
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	2b10      	cmp	r3, #16
 800d596:	d109      	bne.n	800d5ac <HAL_TIM_PWM_Start+0x8c>
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d59e:	b2db      	uxtb	r3, r3
 800d5a0:	2b01      	cmp	r3, #1
 800d5a2:	bf14      	ite	ne
 800d5a4:	2301      	movne	r3, #1
 800d5a6:	2300      	moveq	r3, #0
 800d5a8:	b2db      	uxtb	r3, r3
 800d5aa:	e008      	b.n	800d5be <HAL_TIM_PWM_Start+0x9e>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d5b2:	b2db      	uxtb	r3, r3
 800d5b4:	2b01      	cmp	r3, #1
 800d5b6:	bf14      	ite	ne
 800d5b8:	2301      	movne	r3, #1
 800d5ba:	2300      	moveq	r3, #0
 800d5bc:	b2db      	uxtb	r3, r3
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d001      	beq.n	800d5c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	e0ab      	b.n	800d71e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d104      	bne.n	800d5d6 <HAL_TIM_PWM_Start+0xb6>
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2202      	movs	r2, #2
 800d5d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d5d4:	e023      	b.n	800d61e <HAL_TIM_PWM_Start+0xfe>
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	2b04      	cmp	r3, #4
 800d5da:	d104      	bne.n	800d5e6 <HAL_TIM_PWM_Start+0xc6>
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2202      	movs	r2, #2
 800d5e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d5e4:	e01b      	b.n	800d61e <HAL_TIM_PWM_Start+0xfe>
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	2b08      	cmp	r3, #8
 800d5ea:	d104      	bne.n	800d5f6 <HAL_TIM_PWM_Start+0xd6>
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2202      	movs	r2, #2
 800d5f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d5f4:	e013      	b.n	800d61e <HAL_TIM_PWM_Start+0xfe>
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	2b0c      	cmp	r3, #12
 800d5fa:	d104      	bne.n	800d606 <HAL_TIM_PWM_Start+0xe6>
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2202      	movs	r2, #2
 800d600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d604:	e00b      	b.n	800d61e <HAL_TIM_PWM_Start+0xfe>
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	2b10      	cmp	r3, #16
 800d60a:	d104      	bne.n	800d616 <HAL_TIM_PWM_Start+0xf6>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2202      	movs	r2, #2
 800d610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d614:	e003      	b.n	800d61e <HAL_TIM_PWM_Start+0xfe>
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2202      	movs	r2, #2
 800d61a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	2201      	movs	r2, #1
 800d624:	6839      	ldr	r1, [r7, #0]
 800d626:	4618      	mov	r0, r3
 800d628:	f001 f80e 	bl	800e648 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	4a3d      	ldr	r2, [pc, #244]	; (800d728 <HAL_TIM_PWM_Start+0x208>)
 800d632:	4293      	cmp	r3, r2
 800d634:	d013      	beq.n	800d65e <HAL_TIM_PWM_Start+0x13e>
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	4a3c      	ldr	r2, [pc, #240]	; (800d72c <HAL_TIM_PWM_Start+0x20c>)
 800d63c:	4293      	cmp	r3, r2
 800d63e:	d00e      	beq.n	800d65e <HAL_TIM_PWM_Start+0x13e>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	4a3a      	ldr	r2, [pc, #232]	; (800d730 <HAL_TIM_PWM_Start+0x210>)
 800d646:	4293      	cmp	r3, r2
 800d648:	d009      	beq.n	800d65e <HAL_TIM_PWM_Start+0x13e>
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	4a39      	ldr	r2, [pc, #228]	; (800d734 <HAL_TIM_PWM_Start+0x214>)
 800d650:	4293      	cmp	r3, r2
 800d652:	d004      	beq.n	800d65e <HAL_TIM_PWM_Start+0x13e>
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	4a37      	ldr	r2, [pc, #220]	; (800d738 <HAL_TIM_PWM_Start+0x218>)
 800d65a:	4293      	cmp	r3, r2
 800d65c:	d101      	bne.n	800d662 <HAL_TIM_PWM_Start+0x142>
 800d65e:	2301      	movs	r3, #1
 800d660:	e000      	b.n	800d664 <HAL_TIM_PWM_Start+0x144>
 800d662:	2300      	movs	r3, #0
 800d664:	2b00      	cmp	r3, #0
 800d666:	d007      	beq.n	800d678 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d676:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	4a2a      	ldr	r2, [pc, #168]	; (800d728 <HAL_TIM_PWM_Start+0x208>)
 800d67e:	4293      	cmp	r3, r2
 800d680:	d02c      	beq.n	800d6dc <HAL_TIM_PWM_Start+0x1bc>
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d68a:	d027      	beq.n	800d6dc <HAL_TIM_PWM_Start+0x1bc>
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	4a2a      	ldr	r2, [pc, #168]	; (800d73c <HAL_TIM_PWM_Start+0x21c>)
 800d692:	4293      	cmp	r3, r2
 800d694:	d022      	beq.n	800d6dc <HAL_TIM_PWM_Start+0x1bc>
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	4a29      	ldr	r2, [pc, #164]	; (800d740 <HAL_TIM_PWM_Start+0x220>)
 800d69c:	4293      	cmp	r3, r2
 800d69e:	d01d      	beq.n	800d6dc <HAL_TIM_PWM_Start+0x1bc>
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	4a27      	ldr	r2, [pc, #156]	; (800d744 <HAL_TIM_PWM_Start+0x224>)
 800d6a6:	4293      	cmp	r3, r2
 800d6a8:	d018      	beq.n	800d6dc <HAL_TIM_PWM_Start+0x1bc>
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	4a1f      	ldr	r2, [pc, #124]	; (800d72c <HAL_TIM_PWM_Start+0x20c>)
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d013      	beq.n	800d6dc <HAL_TIM_PWM_Start+0x1bc>
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	4a23      	ldr	r2, [pc, #140]	; (800d748 <HAL_TIM_PWM_Start+0x228>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d00e      	beq.n	800d6dc <HAL_TIM_PWM_Start+0x1bc>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	4a1b      	ldr	r2, [pc, #108]	; (800d730 <HAL_TIM_PWM_Start+0x210>)
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	d009      	beq.n	800d6dc <HAL_TIM_PWM_Start+0x1bc>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	4a1f      	ldr	r2, [pc, #124]	; (800d74c <HAL_TIM_PWM_Start+0x22c>)
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d004      	beq.n	800d6dc <HAL_TIM_PWM_Start+0x1bc>
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	4a1e      	ldr	r2, [pc, #120]	; (800d750 <HAL_TIM_PWM_Start+0x230>)
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d115      	bne.n	800d708 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	689a      	ldr	r2, [r3, #8]
 800d6e2:	4b1c      	ldr	r3, [pc, #112]	; (800d754 <HAL_TIM_PWM_Start+0x234>)
 800d6e4:	4013      	ands	r3, r2
 800d6e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	2b06      	cmp	r3, #6
 800d6ec:	d015      	beq.n	800d71a <HAL_TIM_PWM_Start+0x1fa>
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6f4:	d011      	beq.n	800d71a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	681a      	ldr	r2, [r3, #0]
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	f042 0201 	orr.w	r2, r2, #1
 800d704:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d706:	e008      	b.n	800d71a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	681a      	ldr	r2, [r3, #0]
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	f042 0201 	orr.w	r2, r2, #1
 800d716:	601a      	str	r2, [r3, #0]
 800d718:	e000      	b.n	800d71c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d71a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d71c:	2300      	movs	r3, #0
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3710      	adds	r7, #16
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
 800d726:	bf00      	nop
 800d728:	40010000 	.word	0x40010000
 800d72c:	40010400 	.word	0x40010400
 800d730:	40014000 	.word	0x40014000
 800d734:	40014400 	.word	0x40014400
 800d738:	40014800 	.word	0x40014800
 800d73c:	40000400 	.word	0x40000400
 800d740:	40000800 	.word	0x40000800
 800d744:	40000c00 	.word	0x40000c00
 800d748:	40001800 	.word	0x40001800
 800d74c:	4000e000 	.word	0x4000e000
 800d750:	4000e400 	.word	0x4000e400
 800d754:	00010007 	.word	0x00010007

0800d758 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b082      	sub	sp, #8
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	691b      	ldr	r3, [r3, #16]
 800d766:	f003 0302 	and.w	r3, r3, #2
 800d76a:	2b02      	cmp	r3, #2
 800d76c:	d122      	bne.n	800d7b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	68db      	ldr	r3, [r3, #12]
 800d774:	f003 0302 	and.w	r3, r3, #2
 800d778:	2b02      	cmp	r3, #2
 800d77a:	d11b      	bne.n	800d7b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	f06f 0202 	mvn.w	r2, #2
 800d784:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2201      	movs	r2, #1
 800d78a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	699b      	ldr	r3, [r3, #24]
 800d792:	f003 0303 	and.w	r3, r3, #3
 800d796:	2b00      	cmp	r3, #0
 800d798:	d003      	beq.n	800d7a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f000 fb1c 	bl	800ddd8 <HAL_TIM_IC_CaptureCallback>
 800d7a0:	e005      	b.n	800d7ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f000 fb0e 	bl	800ddc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f000 fb1f 	bl	800ddec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	691b      	ldr	r3, [r3, #16]
 800d7ba:	f003 0304 	and.w	r3, r3, #4
 800d7be:	2b04      	cmp	r3, #4
 800d7c0:	d122      	bne.n	800d808 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	68db      	ldr	r3, [r3, #12]
 800d7c8:	f003 0304 	and.w	r3, r3, #4
 800d7cc:	2b04      	cmp	r3, #4
 800d7ce:	d11b      	bne.n	800d808 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	f06f 0204 	mvn.w	r2, #4
 800d7d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	2202      	movs	r2, #2
 800d7de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	699b      	ldr	r3, [r3, #24]
 800d7e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d003      	beq.n	800d7f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f000 faf2 	bl	800ddd8 <HAL_TIM_IC_CaptureCallback>
 800d7f4:	e005      	b.n	800d802 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f000 fae4 	bl	800ddc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d7fc:	6878      	ldr	r0, [r7, #4]
 800d7fe:	f000 faf5 	bl	800ddec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2200      	movs	r2, #0
 800d806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	691b      	ldr	r3, [r3, #16]
 800d80e:	f003 0308 	and.w	r3, r3, #8
 800d812:	2b08      	cmp	r3, #8
 800d814:	d122      	bne.n	800d85c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	68db      	ldr	r3, [r3, #12]
 800d81c:	f003 0308 	and.w	r3, r3, #8
 800d820:	2b08      	cmp	r3, #8
 800d822:	d11b      	bne.n	800d85c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	f06f 0208 	mvn.w	r2, #8
 800d82c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2204      	movs	r2, #4
 800d832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	69db      	ldr	r3, [r3, #28]
 800d83a:	f003 0303 	and.w	r3, r3, #3
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d003      	beq.n	800d84a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f000 fac8 	bl	800ddd8 <HAL_TIM_IC_CaptureCallback>
 800d848:	e005      	b.n	800d856 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f000 faba 	bl	800ddc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d850:	6878      	ldr	r0, [r7, #4]
 800d852:	f000 facb 	bl	800ddec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2200      	movs	r2, #0
 800d85a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	691b      	ldr	r3, [r3, #16]
 800d862:	f003 0310 	and.w	r3, r3, #16
 800d866:	2b10      	cmp	r3, #16
 800d868:	d122      	bne.n	800d8b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	68db      	ldr	r3, [r3, #12]
 800d870:	f003 0310 	and.w	r3, r3, #16
 800d874:	2b10      	cmp	r3, #16
 800d876:	d11b      	bne.n	800d8b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	f06f 0210 	mvn.w	r2, #16
 800d880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2208      	movs	r2, #8
 800d886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	69db      	ldr	r3, [r3, #28]
 800d88e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d892:	2b00      	cmp	r3, #0
 800d894:	d003      	beq.n	800d89e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f000 fa9e 	bl	800ddd8 <HAL_TIM_IC_CaptureCallback>
 800d89c:	e005      	b.n	800d8aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f000 fa90 	bl	800ddc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	f000 faa1 	bl	800ddec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	691b      	ldr	r3, [r3, #16]
 800d8b6:	f003 0301 	and.w	r3, r3, #1
 800d8ba:	2b01      	cmp	r3, #1
 800d8bc:	d10e      	bne.n	800d8dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	68db      	ldr	r3, [r3, #12]
 800d8c4:	f003 0301 	and.w	r3, r3, #1
 800d8c8:	2b01      	cmp	r3, #1
 800d8ca:	d107      	bne.n	800d8dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	f06f 0201 	mvn.w	r2, #1
 800d8d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f000 fa6a 	bl	800ddb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	691b      	ldr	r3, [r3, #16]
 800d8e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8e6:	2b80      	cmp	r3, #128	; 0x80
 800d8e8:	d10e      	bne.n	800d908 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	68db      	ldr	r3, [r3, #12]
 800d8f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8f4:	2b80      	cmp	r3, #128	; 0x80
 800d8f6:	d107      	bne.n	800d908 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f001 f9a2 	bl	800ec4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	691b      	ldr	r3, [r3, #16]
 800d90e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d916:	d10e      	bne.n	800d936 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	68db      	ldr	r3, [r3, #12]
 800d91e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d922:	2b80      	cmp	r3, #128	; 0x80
 800d924:	d107      	bne.n	800d936 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d92e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f001 f995 	bl	800ec60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	691b      	ldr	r3, [r3, #16]
 800d93c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d940:	2b40      	cmp	r3, #64	; 0x40
 800d942:	d10e      	bne.n	800d962 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	68db      	ldr	r3, [r3, #12]
 800d94a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d94e:	2b40      	cmp	r3, #64	; 0x40
 800d950:	d107      	bne.n	800d962 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d95a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f000 fa4f 	bl	800de00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	691b      	ldr	r3, [r3, #16]
 800d968:	f003 0320 	and.w	r3, r3, #32
 800d96c:	2b20      	cmp	r3, #32
 800d96e:	d10e      	bne.n	800d98e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	68db      	ldr	r3, [r3, #12]
 800d976:	f003 0320 	and.w	r3, r3, #32
 800d97a:	2b20      	cmp	r3, #32
 800d97c:	d107      	bne.n	800d98e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f06f 0220 	mvn.w	r2, #32
 800d986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f001 f955 	bl	800ec38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d98e:	bf00      	nop
 800d990:	3708      	adds	r7, #8
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}
	...

0800d998 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b086      	sub	sp, #24
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	60f8      	str	r0, [r7, #12]
 800d9a0:	60b9      	str	r1, [r7, #8]
 800d9a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d9ae:	2b01      	cmp	r3, #1
 800d9b0:	d101      	bne.n	800d9b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d9b2:	2302      	movs	r3, #2
 800d9b4:	e0ff      	b.n	800dbb6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	2201      	movs	r2, #1
 800d9ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2b14      	cmp	r3, #20
 800d9c2:	f200 80f0 	bhi.w	800dba6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d9c6:	a201      	add	r2, pc, #4	; (adr r2, 800d9cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d9c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9cc:	0800da21 	.word	0x0800da21
 800d9d0:	0800dba7 	.word	0x0800dba7
 800d9d4:	0800dba7 	.word	0x0800dba7
 800d9d8:	0800dba7 	.word	0x0800dba7
 800d9dc:	0800da61 	.word	0x0800da61
 800d9e0:	0800dba7 	.word	0x0800dba7
 800d9e4:	0800dba7 	.word	0x0800dba7
 800d9e8:	0800dba7 	.word	0x0800dba7
 800d9ec:	0800daa3 	.word	0x0800daa3
 800d9f0:	0800dba7 	.word	0x0800dba7
 800d9f4:	0800dba7 	.word	0x0800dba7
 800d9f8:	0800dba7 	.word	0x0800dba7
 800d9fc:	0800dae3 	.word	0x0800dae3
 800da00:	0800dba7 	.word	0x0800dba7
 800da04:	0800dba7 	.word	0x0800dba7
 800da08:	0800dba7 	.word	0x0800dba7
 800da0c:	0800db25 	.word	0x0800db25
 800da10:	0800dba7 	.word	0x0800dba7
 800da14:	0800dba7 	.word	0x0800dba7
 800da18:	0800dba7 	.word	0x0800dba7
 800da1c:	0800db65 	.word	0x0800db65
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	68b9      	ldr	r1, [r7, #8]
 800da26:	4618      	mov	r0, r3
 800da28:	f000 fa9a 	bl	800df60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	699a      	ldr	r2, [r3, #24]
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	f042 0208 	orr.w	r2, r2, #8
 800da3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	699a      	ldr	r2, [r3, #24]
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	f022 0204 	bic.w	r2, r2, #4
 800da4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	6999      	ldr	r1, [r3, #24]
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	691a      	ldr	r2, [r3, #16]
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	430a      	orrs	r2, r1
 800da5c:	619a      	str	r2, [r3, #24]
      break;
 800da5e:	e0a5      	b.n	800dbac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	68b9      	ldr	r1, [r7, #8]
 800da66:	4618      	mov	r0, r3
 800da68:	f000 fb0a 	bl	800e080 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	699a      	ldr	r2, [r3, #24]
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	699a      	ldr	r2, [r3, #24]
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800da8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	6999      	ldr	r1, [r3, #24]
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	691b      	ldr	r3, [r3, #16]
 800da96:	021a      	lsls	r2, r3, #8
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	430a      	orrs	r2, r1
 800da9e:	619a      	str	r2, [r3, #24]
      break;
 800daa0:	e084      	b.n	800dbac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	68b9      	ldr	r1, [r7, #8]
 800daa8:	4618      	mov	r0, r3
 800daaa:	f000 fb73 	bl	800e194 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	69da      	ldr	r2, [r3, #28]
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f042 0208 	orr.w	r2, r2, #8
 800dabc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	69da      	ldr	r2, [r3, #28]
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	f022 0204 	bic.w	r2, r2, #4
 800dacc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	69d9      	ldr	r1, [r3, #28]
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	691a      	ldr	r2, [r3, #16]
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	430a      	orrs	r2, r1
 800dade:	61da      	str	r2, [r3, #28]
      break;
 800dae0:	e064      	b.n	800dbac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	68b9      	ldr	r1, [r7, #8]
 800dae8:	4618      	mov	r0, r3
 800daea:	f000 fbdb 	bl	800e2a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	69da      	ldr	r2, [r3, #28]
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dafc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	69da      	ldr	r2, [r3, #28]
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800db0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	69d9      	ldr	r1, [r3, #28]
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	691b      	ldr	r3, [r3, #16]
 800db18:	021a      	lsls	r2, r3, #8
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	430a      	orrs	r2, r1
 800db20:	61da      	str	r2, [r3, #28]
      break;
 800db22:	e043      	b.n	800dbac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	68b9      	ldr	r1, [r7, #8]
 800db2a:	4618      	mov	r0, r3
 800db2c:	f000 fc24 	bl	800e378 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f042 0208 	orr.w	r2, r2, #8
 800db3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	f022 0204 	bic.w	r2, r2, #4
 800db4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	691a      	ldr	r2, [r3, #16]
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	430a      	orrs	r2, r1
 800db60:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800db62:	e023      	b.n	800dbac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	68b9      	ldr	r1, [r7, #8]
 800db6a:	4618      	mov	r0, r3
 800db6c:	f000 fc68 	bl	800e440 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800db7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800db8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	691b      	ldr	r3, [r3, #16]
 800db9a:	021a      	lsls	r2, r3, #8
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	430a      	orrs	r2, r1
 800dba2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800dba4:	e002      	b.n	800dbac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800dba6:	2301      	movs	r3, #1
 800dba8:	75fb      	strb	r3, [r7, #23]
      break;
 800dbaa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	2200      	movs	r2, #0
 800dbb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dbb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	3718      	adds	r7, #24
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}
 800dbbe:	bf00      	nop

0800dbc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b084      	sub	sp, #16
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
 800dbc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dbd4:	2b01      	cmp	r3, #1
 800dbd6:	d101      	bne.n	800dbdc <HAL_TIM_ConfigClockSource+0x1c>
 800dbd8:	2302      	movs	r3, #2
 800dbda:	e0dc      	b.n	800dd96 <HAL_TIM_ConfigClockSource+0x1d6>
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2201      	movs	r2, #1
 800dbe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2202      	movs	r2, #2
 800dbe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	689b      	ldr	r3, [r3, #8]
 800dbf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dbf4:	68ba      	ldr	r2, [r7, #8]
 800dbf6:	4b6a      	ldr	r3, [pc, #424]	; (800dda0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800dbf8:	4013      	ands	r3, r2
 800dbfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dc02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	68ba      	ldr	r2, [r7, #8]
 800dc0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	4a64      	ldr	r2, [pc, #400]	; (800dda4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800dc12:	4293      	cmp	r3, r2
 800dc14:	f000 80a9 	beq.w	800dd6a <HAL_TIM_ConfigClockSource+0x1aa>
 800dc18:	4a62      	ldr	r2, [pc, #392]	; (800dda4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800dc1a:	4293      	cmp	r3, r2
 800dc1c:	f200 80ae 	bhi.w	800dd7c <HAL_TIM_ConfigClockSource+0x1bc>
 800dc20:	4a61      	ldr	r2, [pc, #388]	; (800dda8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800dc22:	4293      	cmp	r3, r2
 800dc24:	f000 80a1 	beq.w	800dd6a <HAL_TIM_ConfigClockSource+0x1aa>
 800dc28:	4a5f      	ldr	r2, [pc, #380]	; (800dda8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800dc2a:	4293      	cmp	r3, r2
 800dc2c:	f200 80a6 	bhi.w	800dd7c <HAL_TIM_ConfigClockSource+0x1bc>
 800dc30:	4a5e      	ldr	r2, [pc, #376]	; (800ddac <HAL_TIM_ConfigClockSource+0x1ec>)
 800dc32:	4293      	cmp	r3, r2
 800dc34:	f000 8099 	beq.w	800dd6a <HAL_TIM_ConfigClockSource+0x1aa>
 800dc38:	4a5c      	ldr	r2, [pc, #368]	; (800ddac <HAL_TIM_ConfigClockSource+0x1ec>)
 800dc3a:	4293      	cmp	r3, r2
 800dc3c:	f200 809e 	bhi.w	800dd7c <HAL_TIM_ConfigClockSource+0x1bc>
 800dc40:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800dc44:	f000 8091 	beq.w	800dd6a <HAL_TIM_ConfigClockSource+0x1aa>
 800dc48:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800dc4c:	f200 8096 	bhi.w	800dd7c <HAL_TIM_ConfigClockSource+0x1bc>
 800dc50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dc54:	f000 8089 	beq.w	800dd6a <HAL_TIM_ConfigClockSource+0x1aa>
 800dc58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dc5c:	f200 808e 	bhi.w	800dd7c <HAL_TIM_ConfigClockSource+0x1bc>
 800dc60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dc64:	d03e      	beq.n	800dce4 <HAL_TIM_ConfigClockSource+0x124>
 800dc66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dc6a:	f200 8087 	bhi.w	800dd7c <HAL_TIM_ConfigClockSource+0x1bc>
 800dc6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc72:	f000 8086 	beq.w	800dd82 <HAL_TIM_ConfigClockSource+0x1c2>
 800dc76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc7a:	d87f      	bhi.n	800dd7c <HAL_TIM_ConfigClockSource+0x1bc>
 800dc7c:	2b70      	cmp	r3, #112	; 0x70
 800dc7e:	d01a      	beq.n	800dcb6 <HAL_TIM_ConfigClockSource+0xf6>
 800dc80:	2b70      	cmp	r3, #112	; 0x70
 800dc82:	d87b      	bhi.n	800dd7c <HAL_TIM_ConfigClockSource+0x1bc>
 800dc84:	2b60      	cmp	r3, #96	; 0x60
 800dc86:	d050      	beq.n	800dd2a <HAL_TIM_ConfigClockSource+0x16a>
 800dc88:	2b60      	cmp	r3, #96	; 0x60
 800dc8a:	d877      	bhi.n	800dd7c <HAL_TIM_ConfigClockSource+0x1bc>
 800dc8c:	2b50      	cmp	r3, #80	; 0x50
 800dc8e:	d03c      	beq.n	800dd0a <HAL_TIM_ConfigClockSource+0x14a>
 800dc90:	2b50      	cmp	r3, #80	; 0x50
 800dc92:	d873      	bhi.n	800dd7c <HAL_TIM_ConfigClockSource+0x1bc>
 800dc94:	2b40      	cmp	r3, #64	; 0x40
 800dc96:	d058      	beq.n	800dd4a <HAL_TIM_ConfigClockSource+0x18a>
 800dc98:	2b40      	cmp	r3, #64	; 0x40
 800dc9a:	d86f      	bhi.n	800dd7c <HAL_TIM_ConfigClockSource+0x1bc>
 800dc9c:	2b30      	cmp	r3, #48	; 0x30
 800dc9e:	d064      	beq.n	800dd6a <HAL_TIM_ConfigClockSource+0x1aa>
 800dca0:	2b30      	cmp	r3, #48	; 0x30
 800dca2:	d86b      	bhi.n	800dd7c <HAL_TIM_ConfigClockSource+0x1bc>
 800dca4:	2b20      	cmp	r3, #32
 800dca6:	d060      	beq.n	800dd6a <HAL_TIM_ConfigClockSource+0x1aa>
 800dca8:	2b20      	cmp	r3, #32
 800dcaa:	d867      	bhi.n	800dd7c <HAL_TIM_ConfigClockSource+0x1bc>
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d05c      	beq.n	800dd6a <HAL_TIM_ConfigClockSource+0x1aa>
 800dcb0:	2b10      	cmp	r3, #16
 800dcb2:	d05a      	beq.n	800dd6a <HAL_TIM_ConfigClockSource+0x1aa>
 800dcb4:	e062      	b.n	800dd7c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800dcc6:	f000 fc9f 	bl	800e608 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	689b      	ldr	r3, [r3, #8]
 800dcd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800dcd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	68ba      	ldr	r2, [r7, #8]
 800dce0:	609a      	str	r2, [r3, #8]
      break;
 800dce2:	e04f      	b.n	800dd84 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800dcf4:	f000 fc88 	bl	800e608 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	689a      	ldr	r2, [r3, #8]
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dd06:	609a      	str	r2, [r3, #8]
      break;
 800dd08:	e03c      	b.n	800dd84 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dd16:	461a      	mov	r2, r3
 800dd18:	f000 fbf8 	bl	800e50c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	2150      	movs	r1, #80	; 0x50
 800dd22:	4618      	mov	r0, r3
 800dd24:	f000 fc52 	bl	800e5cc <TIM_ITRx_SetConfig>
      break;
 800dd28:	e02c      	b.n	800dd84 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dd36:	461a      	mov	r2, r3
 800dd38:	f000 fc17 	bl	800e56a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	2160      	movs	r1, #96	; 0x60
 800dd42:	4618      	mov	r0, r3
 800dd44:	f000 fc42 	bl	800e5cc <TIM_ITRx_SetConfig>
      break;
 800dd48:	e01c      	b.n	800dd84 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dd56:	461a      	mov	r2, r3
 800dd58:	f000 fbd8 	bl	800e50c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	2140      	movs	r1, #64	; 0x40
 800dd62:	4618      	mov	r0, r3
 800dd64:	f000 fc32 	bl	800e5cc <TIM_ITRx_SetConfig>
      break;
 800dd68:	e00c      	b.n	800dd84 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681a      	ldr	r2, [r3, #0]
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	4619      	mov	r1, r3
 800dd74:	4610      	mov	r0, r2
 800dd76:	f000 fc29 	bl	800e5cc <TIM_ITRx_SetConfig>
      break;
 800dd7a:	e003      	b.n	800dd84 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	73fb      	strb	r3, [r7, #15]
      break;
 800dd80:	e000      	b.n	800dd84 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800dd82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2201      	movs	r2, #1
 800dd88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2200      	movs	r2, #0
 800dd90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dd94:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd96:	4618      	mov	r0, r3
 800dd98:	3710      	adds	r7, #16
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd80      	pop	{r7, pc}
 800dd9e:	bf00      	nop
 800dda0:	ffceff88 	.word	0xffceff88
 800dda4:	00100040 	.word	0x00100040
 800dda8:	00100030 	.word	0x00100030
 800ddac:	00100020 	.word	0x00100020

0800ddb0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ddb0:	b480      	push	{r7}
 800ddb2:	b083      	sub	sp, #12
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ddb8:	bf00      	nop
 800ddba:	370c      	adds	r7, #12
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc2:	4770      	bx	lr

0800ddc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ddc4:	b480      	push	{r7}
 800ddc6:	b083      	sub	sp, #12
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ddcc:	bf00      	nop
 800ddce:	370c      	adds	r7, #12
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd6:	4770      	bx	lr

0800ddd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ddd8:	b480      	push	{r7}
 800ddda:	b083      	sub	sp, #12
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dde0:	bf00      	nop
 800dde2:	370c      	adds	r7, #12
 800dde4:	46bd      	mov	sp, r7
 800dde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddea:	4770      	bx	lr

0800ddec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ddec:	b480      	push	{r7}
 800ddee:	b083      	sub	sp, #12
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ddf4:	bf00      	nop
 800ddf6:	370c      	adds	r7, #12
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfe:	4770      	bx	lr

0800de00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800de00:	b480      	push	{r7}
 800de02:	b083      	sub	sp, #12
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800de08:	bf00      	nop
 800de0a:	370c      	adds	r7, #12
 800de0c:	46bd      	mov	sp, r7
 800de0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de12:	4770      	bx	lr

0800de14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800de14:	b480      	push	{r7}
 800de16:	b085      	sub	sp, #20
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
 800de1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	4a44      	ldr	r2, [pc, #272]	; (800df38 <TIM_Base_SetConfig+0x124>)
 800de28:	4293      	cmp	r3, r2
 800de2a:	d013      	beq.n	800de54 <TIM_Base_SetConfig+0x40>
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de32:	d00f      	beq.n	800de54 <TIM_Base_SetConfig+0x40>
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	4a41      	ldr	r2, [pc, #260]	; (800df3c <TIM_Base_SetConfig+0x128>)
 800de38:	4293      	cmp	r3, r2
 800de3a:	d00b      	beq.n	800de54 <TIM_Base_SetConfig+0x40>
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	4a40      	ldr	r2, [pc, #256]	; (800df40 <TIM_Base_SetConfig+0x12c>)
 800de40:	4293      	cmp	r3, r2
 800de42:	d007      	beq.n	800de54 <TIM_Base_SetConfig+0x40>
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	4a3f      	ldr	r2, [pc, #252]	; (800df44 <TIM_Base_SetConfig+0x130>)
 800de48:	4293      	cmp	r3, r2
 800de4a:	d003      	beq.n	800de54 <TIM_Base_SetConfig+0x40>
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	4a3e      	ldr	r2, [pc, #248]	; (800df48 <TIM_Base_SetConfig+0x134>)
 800de50:	4293      	cmp	r3, r2
 800de52:	d108      	bne.n	800de66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	685b      	ldr	r3, [r3, #4]
 800de60:	68fa      	ldr	r2, [r7, #12]
 800de62:	4313      	orrs	r3, r2
 800de64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	4a33      	ldr	r2, [pc, #204]	; (800df38 <TIM_Base_SetConfig+0x124>)
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d027      	beq.n	800debe <TIM_Base_SetConfig+0xaa>
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de74:	d023      	beq.n	800debe <TIM_Base_SetConfig+0xaa>
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	4a30      	ldr	r2, [pc, #192]	; (800df3c <TIM_Base_SetConfig+0x128>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d01f      	beq.n	800debe <TIM_Base_SetConfig+0xaa>
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	4a2f      	ldr	r2, [pc, #188]	; (800df40 <TIM_Base_SetConfig+0x12c>)
 800de82:	4293      	cmp	r3, r2
 800de84:	d01b      	beq.n	800debe <TIM_Base_SetConfig+0xaa>
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	4a2e      	ldr	r2, [pc, #184]	; (800df44 <TIM_Base_SetConfig+0x130>)
 800de8a:	4293      	cmp	r3, r2
 800de8c:	d017      	beq.n	800debe <TIM_Base_SetConfig+0xaa>
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	4a2d      	ldr	r2, [pc, #180]	; (800df48 <TIM_Base_SetConfig+0x134>)
 800de92:	4293      	cmp	r3, r2
 800de94:	d013      	beq.n	800debe <TIM_Base_SetConfig+0xaa>
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	4a2c      	ldr	r2, [pc, #176]	; (800df4c <TIM_Base_SetConfig+0x138>)
 800de9a:	4293      	cmp	r3, r2
 800de9c:	d00f      	beq.n	800debe <TIM_Base_SetConfig+0xaa>
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	4a2b      	ldr	r2, [pc, #172]	; (800df50 <TIM_Base_SetConfig+0x13c>)
 800dea2:	4293      	cmp	r3, r2
 800dea4:	d00b      	beq.n	800debe <TIM_Base_SetConfig+0xaa>
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	4a2a      	ldr	r2, [pc, #168]	; (800df54 <TIM_Base_SetConfig+0x140>)
 800deaa:	4293      	cmp	r3, r2
 800deac:	d007      	beq.n	800debe <TIM_Base_SetConfig+0xaa>
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	4a29      	ldr	r2, [pc, #164]	; (800df58 <TIM_Base_SetConfig+0x144>)
 800deb2:	4293      	cmp	r3, r2
 800deb4:	d003      	beq.n	800debe <TIM_Base_SetConfig+0xaa>
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	4a28      	ldr	r2, [pc, #160]	; (800df5c <TIM_Base_SetConfig+0x148>)
 800deba:	4293      	cmp	r3, r2
 800debc:	d108      	bne.n	800ded0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	68db      	ldr	r3, [r3, #12]
 800deca:	68fa      	ldr	r2, [r7, #12]
 800decc:	4313      	orrs	r3, r2
 800dece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	695b      	ldr	r3, [r3, #20]
 800deda:	4313      	orrs	r3, r2
 800dedc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	68fa      	ldr	r2, [r7, #12]
 800dee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	689a      	ldr	r2, [r3, #8]
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	681a      	ldr	r2, [r3, #0]
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	4a10      	ldr	r2, [pc, #64]	; (800df38 <TIM_Base_SetConfig+0x124>)
 800def8:	4293      	cmp	r3, r2
 800defa:	d00f      	beq.n	800df1c <TIM_Base_SetConfig+0x108>
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	4a12      	ldr	r2, [pc, #72]	; (800df48 <TIM_Base_SetConfig+0x134>)
 800df00:	4293      	cmp	r3, r2
 800df02:	d00b      	beq.n	800df1c <TIM_Base_SetConfig+0x108>
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	4a11      	ldr	r2, [pc, #68]	; (800df4c <TIM_Base_SetConfig+0x138>)
 800df08:	4293      	cmp	r3, r2
 800df0a:	d007      	beq.n	800df1c <TIM_Base_SetConfig+0x108>
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	4a10      	ldr	r2, [pc, #64]	; (800df50 <TIM_Base_SetConfig+0x13c>)
 800df10:	4293      	cmp	r3, r2
 800df12:	d003      	beq.n	800df1c <TIM_Base_SetConfig+0x108>
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	4a0f      	ldr	r2, [pc, #60]	; (800df54 <TIM_Base_SetConfig+0x140>)
 800df18:	4293      	cmp	r3, r2
 800df1a:	d103      	bne.n	800df24 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	691a      	ldr	r2, [r3, #16]
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2201      	movs	r2, #1
 800df28:	615a      	str	r2, [r3, #20]
}
 800df2a:	bf00      	nop
 800df2c:	3714      	adds	r7, #20
 800df2e:	46bd      	mov	sp, r7
 800df30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df34:	4770      	bx	lr
 800df36:	bf00      	nop
 800df38:	40010000 	.word	0x40010000
 800df3c:	40000400 	.word	0x40000400
 800df40:	40000800 	.word	0x40000800
 800df44:	40000c00 	.word	0x40000c00
 800df48:	40010400 	.word	0x40010400
 800df4c:	40014000 	.word	0x40014000
 800df50:	40014400 	.word	0x40014400
 800df54:	40014800 	.word	0x40014800
 800df58:	4000e000 	.word	0x4000e000
 800df5c:	4000e400 	.word	0x4000e400

0800df60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800df60:	b480      	push	{r7}
 800df62:	b087      	sub	sp, #28
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
 800df68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6a1b      	ldr	r3, [r3, #32]
 800df6e:	f023 0201 	bic.w	r2, r3, #1
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	6a1b      	ldr	r3, [r3, #32]
 800df7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	685b      	ldr	r3, [r3, #4]
 800df80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	699b      	ldr	r3, [r3, #24]
 800df86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800df88:	68fa      	ldr	r2, [r7, #12]
 800df8a:	4b37      	ldr	r3, [pc, #220]	; (800e068 <TIM_OC1_SetConfig+0x108>)
 800df8c:	4013      	ands	r3, r2
 800df8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	f023 0303 	bic.w	r3, r3, #3
 800df96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	68fa      	ldr	r2, [r7, #12]
 800df9e:	4313      	orrs	r3, r2
 800dfa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dfa2:	697b      	ldr	r3, [r7, #20]
 800dfa4:	f023 0302 	bic.w	r3, r3, #2
 800dfa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	689b      	ldr	r3, [r3, #8]
 800dfae:	697a      	ldr	r2, [r7, #20]
 800dfb0:	4313      	orrs	r3, r2
 800dfb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	4a2d      	ldr	r2, [pc, #180]	; (800e06c <TIM_OC1_SetConfig+0x10c>)
 800dfb8:	4293      	cmp	r3, r2
 800dfba:	d00f      	beq.n	800dfdc <TIM_OC1_SetConfig+0x7c>
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	4a2c      	ldr	r2, [pc, #176]	; (800e070 <TIM_OC1_SetConfig+0x110>)
 800dfc0:	4293      	cmp	r3, r2
 800dfc2:	d00b      	beq.n	800dfdc <TIM_OC1_SetConfig+0x7c>
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	4a2b      	ldr	r2, [pc, #172]	; (800e074 <TIM_OC1_SetConfig+0x114>)
 800dfc8:	4293      	cmp	r3, r2
 800dfca:	d007      	beq.n	800dfdc <TIM_OC1_SetConfig+0x7c>
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	4a2a      	ldr	r2, [pc, #168]	; (800e078 <TIM_OC1_SetConfig+0x118>)
 800dfd0:	4293      	cmp	r3, r2
 800dfd2:	d003      	beq.n	800dfdc <TIM_OC1_SetConfig+0x7c>
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	4a29      	ldr	r2, [pc, #164]	; (800e07c <TIM_OC1_SetConfig+0x11c>)
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	d10c      	bne.n	800dff6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	f023 0308 	bic.w	r3, r3, #8
 800dfe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	68db      	ldr	r3, [r3, #12]
 800dfe8:	697a      	ldr	r2, [r7, #20]
 800dfea:	4313      	orrs	r3, r2
 800dfec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dfee:	697b      	ldr	r3, [r7, #20]
 800dff0:	f023 0304 	bic.w	r3, r3, #4
 800dff4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	4a1c      	ldr	r2, [pc, #112]	; (800e06c <TIM_OC1_SetConfig+0x10c>)
 800dffa:	4293      	cmp	r3, r2
 800dffc:	d00f      	beq.n	800e01e <TIM_OC1_SetConfig+0xbe>
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	4a1b      	ldr	r2, [pc, #108]	; (800e070 <TIM_OC1_SetConfig+0x110>)
 800e002:	4293      	cmp	r3, r2
 800e004:	d00b      	beq.n	800e01e <TIM_OC1_SetConfig+0xbe>
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	4a1a      	ldr	r2, [pc, #104]	; (800e074 <TIM_OC1_SetConfig+0x114>)
 800e00a:	4293      	cmp	r3, r2
 800e00c:	d007      	beq.n	800e01e <TIM_OC1_SetConfig+0xbe>
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	4a19      	ldr	r2, [pc, #100]	; (800e078 <TIM_OC1_SetConfig+0x118>)
 800e012:	4293      	cmp	r3, r2
 800e014:	d003      	beq.n	800e01e <TIM_OC1_SetConfig+0xbe>
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	4a18      	ldr	r2, [pc, #96]	; (800e07c <TIM_OC1_SetConfig+0x11c>)
 800e01a:	4293      	cmp	r3, r2
 800e01c:	d111      	bne.n	800e042 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e01e:	693b      	ldr	r3, [r7, #16]
 800e020:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e024:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e02c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	695b      	ldr	r3, [r3, #20]
 800e032:	693a      	ldr	r2, [r7, #16]
 800e034:	4313      	orrs	r3, r2
 800e036:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	699b      	ldr	r3, [r3, #24]
 800e03c:	693a      	ldr	r2, [r7, #16]
 800e03e:	4313      	orrs	r3, r2
 800e040:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	693a      	ldr	r2, [r7, #16]
 800e046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	68fa      	ldr	r2, [r7, #12]
 800e04c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	685a      	ldr	r2, [r3, #4]
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	697a      	ldr	r2, [r7, #20]
 800e05a:	621a      	str	r2, [r3, #32]
}
 800e05c:	bf00      	nop
 800e05e:	371c      	adds	r7, #28
 800e060:	46bd      	mov	sp, r7
 800e062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e066:	4770      	bx	lr
 800e068:	fffeff8f 	.word	0xfffeff8f
 800e06c:	40010000 	.word	0x40010000
 800e070:	40010400 	.word	0x40010400
 800e074:	40014000 	.word	0x40014000
 800e078:	40014400 	.word	0x40014400
 800e07c:	40014800 	.word	0x40014800

0800e080 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e080:	b480      	push	{r7}
 800e082:	b087      	sub	sp, #28
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6a1b      	ldr	r3, [r3, #32]
 800e08e:	f023 0210 	bic.w	r2, r3, #16
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	6a1b      	ldr	r3, [r3, #32]
 800e09a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	685b      	ldr	r3, [r3, #4]
 800e0a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	699b      	ldr	r3, [r3, #24]
 800e0a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e0a8:	68fa      	ldr	r2, [r7, #12]
 800e0aa:	4b34      	ldr	r3, [pc, #208]	; (800e17c <TIM_OC2_SetConfig+0xfc>)
 800e0ac:	4013      	ands	r3, r2
 800e0ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e0b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	021b      	lsls	r3, r3, #8
 800e0be:	68fa      	ldr	r2, [r7, #12]
 800e0c0:	4313      	orrs	r3, r2
 800e0c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e0c4:	697b      	ldr	r3, [r7, #20]
 800e0c6:	f023 0320 	bic.w	r3, r3, #32
 800e0ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	689b      	ldr	r3, [r3, #8]
 800e0d0:	011b      	lsls	r3, r3, #4
 800e0d2:	697a      	ldr	r2, [r7, #20]
 800e0d4:	4313      	orrs	r3, r2
 800e0d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	4a29      	ldr	r2, [pc, #164]	; (800e180 <TIM_OC2_SetConfig+0x100>)
 800e0dc:	4293      	cmp	r3, r2
 800e0de:	d003      	beq.n	800e0e8 <TIM_OC2_SetConfig+0x68>
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	4a28      	ldr	r2, [pc, #160]	; (800e184 <TIM_OC2_SetConfig+0x104>)
 800e0e4:	4293      	cmp	r3, r2
 800e0e6:	d10d      	bne.n	800e104 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e0e8:	697b      	ldr	r3, [r7, #20]
 800e0ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e0ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	68db      	ldr	r3, [r3, #12]
 800e0f4:	011b      	lsls	r3, r3, #4
 800e0f6:	697a      	ldr	r2, [r7, #20]
 800e0f8:	4313      	orrs	r3, r2
 800e0fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e102:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	4a1e      	ldr	r2, [pc, #120]	; (800e180 <TIM_OC2_SetConfig+0x100>)
 800e108:	4293      	cmp	r3, r2
 800e10a:	d00f      	beq.n	800e12c <TIM_OC2_SetConfig+0xac>
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	4a1d      	ldr	r2, [pc, #116]	; (800e184 <TIM_OC2_SetConfig+0x104>)
 800e110:	4293      	cmp	r3, r2
 800e112:	d00b      	beq.n	800e12c <TIM_OC2_SetConfig+0xac>
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	4a1c      	ldr	r2, [pc, #112]	; (800e188 <TIM_OC2_SetConfig+0x108>)
 800e118:	4293      	cmp	r3, r2
 800e11a:	d007      	beq.n	800e12c <TIM_OC2_SetConfig+0xac>
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	4a1b      	ldr	r2, [pc, #108]	; (800e18c <TIM_OC2_SetConfig+0x10c>)
 800e120:	4293      	cmp	r3, r2
 800e122:	d003      	beq.n	800e12c <TIM_OC2_SetConfig+0xac>
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	4a1a      	ldr	r2, [pc, #104]	; (800e190 <TIM_OC2_SetConfig+0x110>)
 800e128:	4293      	cmp	r3, r2
 800e12a:	d113      	bne.n	800e154 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e12c:	693b      	ldr	r3, [r7, #16]
 800e12e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e132:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e134:	693b      	ldr	r3, [r7, #16]
 800e136:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e13a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	695b      	ldr	r3, [r3, #20]
 800e140:	009b      	lsls	r3, r3, #2
 800e142:	693a      	ldr	r2, [r7, #16]
 800e144:	4313      	orrs	r3, r2
 800e146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	699b      	ldr	r3, [r3, #24]
 800e14c:	009b      	lsls	r3, r3, #2
 800e14e:	693a      	ldr	r2, [r7, #16]
 800e150:	4313      	orrs	r3, r2
 800e152:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	693a      	ldr	r2, [r7, #16]
 800e158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	68fa      	ldr	r2, [r7, #12]
 800e15e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	685a      	ldr	r2, [r3, #4]
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	697a      	ldr	r2, [r7, #20]
 800e16c:	621a      	str	r2, [r3, #32]
}
 800e16e:	bf00      	nop
 800e170:	371c      	adds	r7, #28
 800e172:	46bd      	mov	sp, r7
 800e174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e178:	4770      	bx	lr
 800e17a:	bf00      	nop
 800e17c:	feff8fff 	.word	0xfeff8fff
 800e180:	40010000 	.word	0x40010000
 800e184:	40010400 	.word	0x40010400
 800e188:	40014000 	.word	0x40014000
 800e18c:	40014400 	.word	0x40014400
 800e190:	40014800 	.word	0x40014800

0800e194 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e194:	b480      	push	{r7}
 800e196:	b087      	sub	sp, #28
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
 800e19c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	6a1b      	ldr	r3, [r3, #32]
 800e1a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	6a1b      	ldr	r3, [r3, #32]
 800e1ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	685b      	ldr	r3, [r3, #4]
 800e1b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	69db      	ldr	r3, [r3, #28]
 800e1ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e1bc:	68fa      	ldr	r2, [r7, #12]
 800e1be:	4b33      	ldr	r3, [pc, #204]	; (800e28c <TIM_OC3_SetConfig+0xf8>)
 800e1c0:	4013      	ands	r3, r2
 800e1c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	f023 0303 	bic.w	r3, r3, #3
 800e1ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	68fa      	ldr	r2, [r7, #12]
 800e1d2:	4313      	orrs	r3, r2
 800e1d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e1d6:	697b      	ldr	r3, [r7, #20]
 800e1d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e1dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	689b      	ldr	r3, [r3, #8]
 800e1e2:	021b      	lsls	r3, r3, #8
 800e1e4:	697a      	ldr	r2, [r7, #20]
 800e1e6:	4313      	orrs	r3, r2
 800e1e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	4a28      	ldr	r2, [pc, #160]	; (800e290 <TIM_OC3_SetConfig+0xfc>)
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	d003      	beq.n	800e1fa <TIM_OC3_SetConfig+0x66>
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	4a27      	ldr	r2, [pc, #156]	; (800e294 <TIM_OC3_SetConfig+0x100>)
 800e1f6:	4293      	cmp	r3, r2
 800e1f8:	d10d      	bne.n	800e216 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e200:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	68db      	ldr	r3, [r3, #12]
 800e206:	021b      	lsls	r3, r3, #8
 800e208:	697a      	ldr	r2, [r7, #20]
 800e20a:	4313      	orrs	r3, r2
 800e20c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e214:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	4a1d      	ldr	r2, [pc, #116]	; (800e290 <TIM_OC3_SetConfig+0xfc>)
 800e21a:	4293      	cmp	r3, r2
 800e21c:	d00f      	beq.n	800e23e <TIM_OC3_SetConfig+0xaa>
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	4a1c      	ldr	r2, [pc, #112]	; (800e294 <TIM_OC3_SetConfig+0x100>)
 800e222:	4293      	cmp	r3, r2
 800e224:	d00b      	beq.n	800e23e <TIM_OC3_SetConfig+0xaa>
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	4a1b      	ldr	r2, [pc, #108]	; (800e298 <TIM_OC3_SetConfig+0x104>)
 800e22a:	4293      	cmp	r3, r2
 800e22c:	d007      	beq.n	800e23e <TIM_OC3_SetConfig+0xaa>
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	4a1a      	ldr	r2, [pc, #104]	; (800e29c <TIM_OC3_SetConfig+0x108>)
 800e232:	4293      	cmp	r3, r2
 800e234:	d003      	beq.n	800e23e <TIM_OC3_SetConfig+0xaa>
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	4a19      	ldr	r2, [pc, #100]	; (800e2a0 <TIM_OC3_SetConfig+0x10c>)
 800e23a:	4293      	cmp	r3, r2
 800e23c:	d113      	bne.n	800e266 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e244:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e246:	693b      	ldr	r3, [r7, #16]
 800e248:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e24c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	695b      	ldr	r3, [r3, #20]
 800e252:	011b      	lsls	r3, r3, #4
 800e254:	693a      	ldr	r2, [r7, #16]
 800e256:	4313      	orrs	r3, r2
 800e258:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	699b      	ldr	r3, [r3, #24]
 800e25e:	011b      	lsls	r3, r3, #4
 800e260:	693a      	ldr	r2, [r7, #16]
 800e262:	4313      	orrs	r3, r2
 800e264:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	693a      	ldr	r2, [r7, #16]
 800e26a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	68fa      	ldr	r2, [r7, #12]
 800e270:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	685a      	ldr	r2, [r3, #4]
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	697a      	ldr	r2, [r7, #20]
 800e27e:	621a      	str	r2, [r3, #32]
}
 800e280:	bf00      	nop
 800e282:	371c      	adds	r7, #28
 800e284:	46bd      	mov	sp, r7
 800e286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28a:	4770      	bx	lr
 800e28c:	fffeff8f 	.word	0xfffeff8f
 800e290:	40010000 	.word	0x40010000
 800e294:	40010400 	.word	0x40010400
 800e298:	40014000 	.word	0x40014000
 800e29c:	40014400 	.word	0x40014400
 800e2a0:	40014800 	.word	0x40014800

0800e2a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e2a4:	b480      	push	{r7}
 800e2a6:	b087      	sub	sp, #28
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
 800e2ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6a1b      	ldr	r3, [r3, #32]
 800e2b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	6a1b      	ldr	r3, [r3, #32]
 800e2be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	685b      	ldr	r3, [r3, #4]
 800e2c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	69db      	ldr	r3, [r3, #28]
 800e2ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e2cc:	68fa      	ldr	r2, [r7, #12]
 800e2ce:	4b24      	ldr	r3, [pc, #144]	; (800e360 <TIM_OC4_SetConfig+0xbc>)
 800e2d0:	4013      	ands	r3, r2
 800e2d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e2da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	021b      	lsls	r3, r3, #8
 800e2e2:	68fa      	ldr	r2, [r7, #12]
 800e2e4:	4313      	orrs	r3, r2
 800e2e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e2e8:	693b      	ldr	r3, [r7, #16]
 800e2ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e2ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	689b      	ldr	r3, [r3, #8]
 800e2f4:	031b      	lsls	r3, r3, #12
 800e2f6:	693a      	ldr	r2, [r7, #16]
 800e2f8:	4313      	orrs	r3, r2
 800e2fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	4a19      	ldr	r2, [pc, #100]	; (800e364 <TIM_OC4_SetConfig+0xc0>)
 800e300:	4293      	cmp	r3, r2
 800e302:	d00f      	beq.n	800e324 <TIM_OC4_SetConfig+0x80>
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	4a18      	ldr	r2, [pc, #96]	; (800e368 <TIM_OC4_SetConfig+0xc4>)
 800e308:	4293      	cmp	r3, r2
 800e30a:	d00b      	beq.n	800e324 <TIM_OC4_SetConfig+0x80>
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	4a17      	ldr	r2, [pc, #92]	; (800e36c <TIM_OC4_SetConfig+0xc8>)
 800e310:	4293      	cmp	r3, r2
 800e312:	d007      	beq.n	800e324 <TIM_OC4_SetConfig+0x80>
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	4a16      	ldr	r2, [pc, #88]	; (800e370 <TIM_OC4_SetConfig+0xcc>)
 800e318:	4293      	cmp	r3, r2
 800e31a:	d003      	beq.n	800e324 <TIM_OC4_SetConfig+0x80>
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	4a15      	ldr	r2, [pc, #84]	; (800e374 <TIM_OC4_SetConfig+0xd0>)
 800e320:	4293      	cmp	r3, r2
 800e322:	d109      	bne.n	800e338 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e324:	697b      	ldr	r3, [r7, #20]
 800e326:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e32a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	695b      	ldr	r3, [r3, #20]
 800e330:	019b      	lsls	r3, r3, #6
 800e332:	697a      	ldr	r2, [r7, #20]
 800e334:	4313      	orrs	r3, r2
 800e336:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	697a      	ldr	r2, [r7, #20]
 800e33c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	68fa      	ldr	r2, [r7, #12]
 800e342:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	685a      	ldr	r2, [r3, #4]
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	693a      	ldr	r2, [r7, #16]
 800e350:	621a      	str	r2, [r3, #32]
}
 800e352:	bf00      	nop
 800e354:	371c      	adds	r7, #28
 800e356:	46bd      	mov	sp, r7
 800e358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35c:	4770      	bx	lr
 800e35e:	bf00      	nop
 800e360:	feff8fff 	.word	0xfeff8fff
 800e364:	40010000 	.word	0x40010000
 800e368:	40010400 	.word	0x40010400
 800e36c:	40014000 	.word	0x40014000
 800e370:	40014400 	.word	0x40014400
 800e374:	40014800 	.word	0x40014800

0800e378 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e378:	b480      	push	{r7}
 800e37a:	b087      	sub	sp, #28
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
 800e380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6a1b      	ldr	r3, [r3, #32]
 800e386:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6a1b      	ldr	r3, [r3, #32]
 800e392:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	685b      	ldr	r3, [r3, #4]
 800e398:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e39e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e3a0:	68fa      	ldr	r2, [r7, #12]
 800e3a2:	4b21      	ldr	r3, [pc, #132]	; (800e428 <TIM_OC5_SetConfig+0xb0>)
 800e3a4:	4013      	ands	r3, r2
 800e3a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	68fa      	ldr	r2, [r7, #12]
 800e3ae:	4313      	orrs	r3, r2
 800e3b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e3b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	689b      	ldr	r3, [r3, #8]
 800e3be:	041b      	lsls	r3, r3, #16
 800e3c0:	693a      	ldr	r2, [r7, #16]
 800e3c2:	4313      	orrs	r3, r2
 800e3c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	4a18      	ldr	r2, [pc, #96]	; (800e42c <TIM_OC5_SetConfig+0xb4>)
 800e3ca:	4293      	cmp	r3, r2
 800e3cc:	d00f      	beq.n	800e3ee <TIM_OC5_SetConfig+0x76>
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	4a17      	ldr	r2, [pc, #92]	; (800e430 <TIM_OC5_SetConfig+0xb8>)
 800e3d2:	4293      	cmp	r3, r2
 800e3d4:	d00b      	beq.n	800e3ee <TIM_OC5_SetConfig+0x76>
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	4a16      	ldr	r2, [pc, #88]	; (800e434 <TIM_OC5_SetConfig+0xbc>)
 800e3da:	4293      	cmp	r3, r2
 800e3dc:	d007      	beq.n	800e3ee <TIM_OC5_SetConfig+0x76>
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	4a15      	ldr	r2, [pc, #84]	; (800e438 <TIM_OC5_SetConfig+0xc0>)
 800e3e2:	4293      	cmp	r3, r2
 800e3e4:	d003      	beq.n	800e3ee <TIM_OC5_SetConfig+0x76>
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	4a14      	ldr	r2, [pc, #80]	; (800e43c <TIM_OC5_SetConfig+0xc4>)
 800e3ea:	4293      	cmp	r3, r2
 800e3ec:	d109      	bne.n	800e402 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e3ee:	697b      	ldr	r3, [r7, #20]
 800e3f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e3f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	695b      	ldr	r3, [r3, #20]
 800e3fa:	021b      	lsls	r3, r3, #8
 800e3fc:	697a      	ldr	r2, [r7, #20]
 800e3fe:	4313      	orrs	r3, r2
 800e400:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	697a      	ldr	r2, [r7, #20]
 800e406:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	68fa      	ldr	r2, [r7, #12]
 800e40c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	685a      	ldr	r2, [r3, #4]
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	693a      	ldr	r2, [r7, #16]
 800e41a:	621a      	str	r2, [r3, #32]
}
 800e41c:	bf00      	nop
 800e41e:	371c      	adds	r7, #28
 800e420:	46bd      	mov	sp, r7
 800e422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e426:	4770      	bx	lr
 800e428:	fffeff8f 	.word	0xfffeff8f
 800e42c:	40010000 	.word	0x40010000
 800e430:	40010400 	.word	0x40010400
 800e434:	40014000 	.word	0x40014000
 800e438:	40014400 	.word	0x40014400
 800e43c:	40014800 	.word	0x40014800

0800e440 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e440:	b480      	push	{r7}
 800e442:	b087      	sub	sp, #28
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
 800e448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	6a1b      	ldr	r3, [r3, #32]
 800e44e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6a1b      	ldr	r3, [r3, #32]
 800e45a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	685b      	ldr	r3, [r3, #4]
 800e460:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e468:	68fa      	ldr	r2, [r7, #12]
 800e46a:	4b22      	ldr	r3, [pc, #136]	; (800e4f4 <TIM_OC6_SetConfig+0xb4>)
 800e46c:	4013      	ands	r3, r2
 800e46e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	021b      	lsls	r3, r3, #8
 800e476:	68fa      	ldr	r2, [r7, #12]
 800e478:	4313      	orrs	r3, r2
 800e47a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e482:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	689b      	ldr	r3, [r3, #8]
 800e488:	051b      	lsls	r3, r3, #20
 800e48a:	693a      	ldr	r2, [r7, #16]
 800e48c:	4313      	orrs	r3, r2
 800e48e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	4a19      	ldr	r2, [pc, #100]	; (800e4f8 <TIM_OC6_SetConfig+0xb8>)
 800e494:	4293      	cmp	r3, r2
 800e496:	d00f      	beq.n	800e4b8 <TIM_OC6_SetConfig+0x78>
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	4a18      	ldr	r2, [pc, #96]	; (800e4fc <TIM_OC6_SetConfig+0xbc>)
 800e49c:	4293      	cmp	r3, r2
 800e49e:	d00b      	beq.n	800e4b8 <TIM_OC6_SetConfig+0x78>
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	4a17      	ldr	r2, [pc, #92]	; (800e500 <TIM_OC6_SetConfig+0xc0>)
 800e4a4:	4293      	cmp	r3, r2
 800e4a6:	d007      	beq.n	800e4b8 <TIM_OC6_SetConfig+0x78>
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	4a16      	ldr	r2, [pc, #88]	; (800e504 <TIM_OC6_SetConfig+0xc4>)
 800e4ac:	4293      	cmp	r3, r2
 800e4ae:	d003      	beq.n	800e4b8 <TIM_OC6_SetConfig+0x78>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	4a15      	ldr	r2, [pc, #84]	; (800e508 <TIM_OC6_SetConfig+0xc8>)
 800e4b4:	4293      	cmp	r3, r2
 800e4b6:	d109      	bne.n	800e4cc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e4b8:	697b      	ldr	r3, [r7, #20]
 800e4ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e4be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	695b      	ldr	r3, [r3, #20]
 800e4c4:	029b      	lsls	r3, r3, #10
 800e4c6:	697a      	ldr	r2, [r7, #20]
 800e4c8:	4313      	orrs	r3, r2
 800e4ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	697a      	ldr	r2, [r7, #20]
 800e4d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	68fa      	ldr	r2, [r7, #12]
 800e4d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	685a      	ldr	r2, [r3, #4]
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	693a      	ldr	r2, [r7, #16]
 800e4e4:	621a      	str	r2, [r3, #32]
}
 800e4e6:	bf00      	nop
 800e4e8:	371c      	adds	r7, #28
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f0:	4770      	bx	lr
 800e4f2:	bf00      	nop
 800e4f4:	feff8fff 	.word	0xfeff8fff
 800e4f8:	40010000 	.word	0x40010000
 800e4fc:	40010400 	.word	0x40010400
 800e500:	40014000 	.word	0x40014000
 800e504:	40014400 	.word	0x40014400
 800e508:	40014800 	.word	0x40014800

0800e50c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e50c:	b480      	push	{r7}
 800e50e:	b087      	sub	sp, #28
 800e510:	af00      	add	r7, sp, #0
 800e512:	60f8      	str	r0, [r7, #12]
 800e514:	60b9      	str	r1, [r7, #8]
 800e516:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	6a1b      	ldr	r3, [r3, #32]
 800e51c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	6a1b      	ldr	r3, [r3, #32]
 800e522:	f023 0201 	bic.w	r2, r3, #1
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	699b      	ldr	r3, [r3, #24]
 800e52e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e530:	693b      	ldr	r3, [r7, #16]
 800e532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	011b      	lsls	r3, r3, #4
 800e53c:	693a      	ldr	r2, [r7, #16]
 800e53e:	4313      	orrs	r3, r2
 800e540:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e542:	697b      	ldr	r3, [r7, #20]
 800e544:	f023 030a 	bic.w	r3, r3, #10
 800e548:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e54a:	697a      	ldr	r2, [r7, #20]
 800e54c:	68bb      	ldr	r3, [r7, #8]
 800e54e:	4313      	orrs	r3, r2
 800e550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	693a      	ldr	r2, [r7, #16]
 800e556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	697a      	ldr	r2, [r7, #20]
 800e55c:	621a      	str	r2, [r3, #32]
}
 800e55e:	bf00      	nop
 800e560:	371c      	adds	r7, #28
 800e562:	46bd      	mov	sp, r7
 800e564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e568:	4770      	bx	lr

0800e56a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e56a:	b480      	push	{r7}
 800e56c:	b087      	sub	sp, #28
 800e56e:	af00      	add	r7, sp, #0
 800e570:	60f8      	str	r0, [r7, #12]
 800e572:	60b9      	str	r1, [r7, #8]
 800e574:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	6a1b      	ldr	r3, [r3, #32]
 800e57a:	f023 0210 	bic.w	r2, r3, #16
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	699b      	ldr	r3, [r3, #24]
 800e586:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	6a1b      	ldr	r3, [r3, #32]
 800e58c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e58e:	697b      	ldr	r3, [r7, #20]
 800e590:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e594:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	031b      	lsls	r3, r3, #12
 800e59a:	697a      	ldr	r2, [r7, #20]
 800e59c:	4313      	orrs	r3, r2
 800e59e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e5a0:	693b      	ldr	r3, [r7, #16]
 800e5a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e5a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e5a8:	68bb      	ldr	r3, [r7, #8]
 800e5aa:	011b      	lsls	r3, r3, #4
 800e5ac:	693a      	ldr	r2, [r7, #16]
 800e5ae:	4313      	orrs	r3, r2
 800e5b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	697a      	ldr	r2, [r7, #20]
 800e5b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	693a      	ldr	r2, [r7, #16]
 800e5bc:	621a      	str	r2, [r3, #32]
}
 800e5be:	bf00      	nop
 800e5c0:	371c      	adds	r7, #28
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c8:	4770      	bx	lr
	...

0800e5cc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e5cc:	b480      	push	{r7}
 800e5ce:	b085      	sub	sp, #20
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	689b      	ldr	r3, [r3, #8]
 800e5da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e5dc:	68fa      	ldr	r2, [r7, #12]
 800e5de:	4b09      	ldr	r3, [pc, #36]	; (800e604 <TIM_ITRx_SetConfig+0x38>)
 800e5e0:	4013      	ands	r3, r2
 800e5e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e5e4:	683a      	ldr	r2, [r7, #0]
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	4313      	orrs	r3, r2
 800e5ea:	f043 0307 	orr.w	r3, r3, #7
 800e5ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	68fa      	ldr	r2, [r7, #12]
 800e5f4:	609a      	str	r2, [r3, #8]
}
 800e5f6:	bf00      	nop
 800e5f8:	3714      	adds	r7, #20
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e600:	4770      	bx	lr
 800e602:	bf00      	nop
 800e604:	ffcfff8f 	.word	0xffcfff8f

0800e608 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e608:	b480      	push	{r7}
 800e60a:	b087      	sub	sp, #28
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	60f8      	str	r0, [r7, #12]
 800e610:	60b9      	str	r1, [r7, #8]
 800e612:	607a      	str	r2, [r7, #4]
 800e614:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	689b      	ldr	r3, [r3, #8]
 800e61a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e61c:	697b      	ldr	r3, [r7, #20]
 800e61e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e622:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	021a      	lsls	r2, r3, #8
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	431a      	orrs	r2, r3
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	4313      	orrs	r3, r2
 800e630:	697a      	ldr	r2, [r7, #20]
 800e632:	4313      	orrs	r3, r2
 800e634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	697a      	ldr	r2, [r7, #20]
 800e63a:	609a      	str	r2, [r3, #8]
}
 800e63c:	bf00      	nop
 800e63e:	371c      	adds	r7, #28
 800e640:	46bd      	mov	sp, r7
 800e642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e646:	4770      	bx	lr

0800e648 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e648:	b480      	push	{r7}
 800e64a:	b087      	sub	sp, #28
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	60f8      	str	r0, [r7, #12]
 800e650:	60b9      	str	r1, [r7, #8]
 800e652:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e654:	68bb      	ldr	r3, [r7, #8]
 800e656:	f003 031f 	and.w	r3, r3, #31
 800e65a:	2201      	movs	r2, #1
 800e65c:	fa02 f303 	lsl.w	r3, r2, r3
 800e660:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	6a1a      	ldr	r2, [r3, #32]
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	43db      	mvns	r3, r3
 800e66a:	401a      	ands	r2, r3
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	6a1a      	ldr	r2, [r3, #32]
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	f003 031f 	and.w	r3, r3, #31
 800e67a:	6879      	ldr	r1, [r7, #4]
 800e67c:	fa01 f303 	lsl.w	r3, r1, r3
 800e680:	431a      	orrs	r2, r3
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	621a      	str	r2, [r3, #32]
}
 800e686:	bf00      	nop
 800e688:	371c      	adds	r7, #28
 800e68a:	46bd      	mov	sp, r7
 800e68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e690:	4770      	bx	lr
	...

0800e694 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b084      	sub	sp, #16
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
 800e69c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d109      	bne.n	800e6b8 <HAL_TIMEx_PWMN_Start+0x24>
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e6aa:	b2db      	uxtb	r3, r3
 800e6ac:	2b01      	cmp	r3, #1
 800e6ae:	bf14      	ite	ne
 800e6b0:	2301      	movne	r3, #1
 800e6b2:	2300      	moveq	r3, #0
 800e6b4:	b2db      	uxtb	r3, r3
 800e6b6:	e022      	b.n	800e6fe <HAL_TIMEx_PWMN_Start+0x6a>
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	2b04      	cmp	r3, #4
 800e6bc:	d109      	bne.n	800e6d2 <HAL_TIMEx_PWMN_Start+0x3e>
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e6c4:	b2db      	uxtb	r3, r3
 800e6c6:	2b01      	cmp	r3, #1
 800e6c8:	bf14      	ite	ne
 800e6ca:	2301      	movne	r3, #1
 800e6cc:	2300      	moveq	r3, #0
 800e6ce:	b2db      	uxtb	r3, r3
 800e6d0:	e015      	b.n	800e6fe <HAL_TIMEx_PWMN_Start+0x6a>
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	2b08      	cmp	r3, #8
 800e6d6:	d109      	bne.n	800e6ec <HAL_TIMEx_PWMN_Start+0x58>
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e6de:	b2db      	uxtb	r3, r3
 800e6e0:	2b01      	cmp	r3, #1
 800e6e2:	bf14      	ite	ne
 800e6e4:	2301      	movne	r3, #1
 800e6e6:	2300      	moveq	r3, #0
 800e6e8:	b2db      	uxtb	r3, r3
 800e6ea:	e008      	b.n	800e6fe <HAL_TIMEx_PWMN_Start+0x6a>
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800e6f2:	b2db      	uxtb	r3, r3
 800e6f4:	2b01      	cmp	r3, #1
 800e6f6:	bf14      	ite	ne
 800e6f8:	2301      	movne	r3, #1
 800e6fa:	2300      	moveq	r3, #0
 800e6fc:	b2db      	uxtb	r3, r3
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d001      	beq.n	800e706 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800e702:	2301      	movs	r3, #1
 800e704:	e07d      	b.n	800e802 <HAL_TIMEx_PWMN_Start+0x16e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d104      	bne.n	800e716 <HAL_TIMEx_PWMN_Start+0x82>
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2202      	movs	r2, #2
 800e710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e714:	e013      	b.n	800e73e <HAL_TIMEx_PWMN_Start+0xaa>
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	2b04      	cmp	r3, #4
 800e71a:	d104      	bne.n	800e726 <HAL_TIMEx_PWMN_Start+0x92>
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	2202      	movs	r2, #2
 800e720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e724:	e00b      	b.n	800e73e <HAL_TIMEx_PWMN_Start+0xaa>
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	2b08      	cmp	r3, #8
 800e72a:	d104      	bne.n	800e736 <HAL_TIMEx_PWMN_Start+0xa2>
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2202      	movs	r2, #2
 800e730:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e734:	e003      	b.n	800e73e <HAL_TIMEx_PWMN_Start+0xaa>
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2202      	movs	r2, #2
 800e73a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	2204      	movs	r2, #4
 800e744:	6839      	ldr	r1, [r7, #0]
 800e746:	4618      	mov	r0, r3
 800e748:	f000 fa94 	bl	800ec74 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e75a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	4a2a      	ldr	r2, [pc, #168]	; (800e80c <HAL_TIMEx_PWMN_Start+0x178>)
 800e762:	4293      	cmp	r3, r2
 800e764:	d02c      	beq.n	800e7c0 <HAL_TIMEx_PWMN_Start+0x12c>
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e76e:	d027      	beq.n	800e7c0 <HAL_TIMEx_PWMN_Start+0x12c>
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	4a26      	ldr	r2, [pc, #152]	; (800e810 <HAL_TIMEx_PWMN_Start+0x17c>)
 800e776:	4293      	cmp	r3, r2
 800e778:	d022      	beq.n	800e7c0 <HAL_TIMEx_PWMN_Start+0x12c>
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	4a25      	ldr	r2, [pc, #148]	; (800e814 <HAL_TIMEx_PWMN_Start+0x180>)
 800e780:	4293      	cmp	r3, r2
 800e782:	d01d      	beq.n	800e7c0 <HAL_TIMEx_PWMN_Start+0x12c>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	4a23      	ldr	r2, [pc, #140]	; (800e818 <HAL_TIMEx_PWMN_Start+0x184>)
 800e78a:	4293      	cmp	r3, r2
 800e78c:	d018      	beq.n	800e7c0 <HAL_TIMEx_PWMN_Start+0x12c>
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	4a22      	ldr	r2, [pc, #136]	; (800e81c <HAL_TIMEx_PWMN_Start+0x188>)
 800e794:	4293      	cmp	r3, r2
 800e796:	d013      	beq.n	800e7c0 <HAL_TIMEx_PWMN_Start+0x12c>
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	4a20      	ldr	r2, [pc, #128]	; (800e820 <HAL_TIMEx_PWMN_Start+0x18c>)
 800e79e:	4293      	cmp	r3, r2
 800e7a0:	d00e      	beq.n	800e7c0 <HAL_TIMEx_PWMN_Start+0x12c>
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	4a1f      	ldr	r2, [pc, #124]	; (800e824 <HAL_TIMEx_PWMN_Start+0x190>)
 800e7a8:	4293      	cmp	r3, r2
 800e7aa:	d009      	beq.n	800e7c0 <HAL_TIMEx_PWMN_Start+0x12c>
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	4a1d      	ldr	r2, [pc, #116]	; (800e828 <HAL_TIMEx_PWMN_Start+0x194>)
 800e7b2:	4293      	cmp	r3, r2
 800e7b4:	d004      	beq.n	800e7c0 <HAL_TIMEx_PWMN_Start+0x12c>
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	4a1c      	ldr	r2, [pc, #112]	; (800e82c <HAL_TIMEx_PWMN_Start+0x198>)
 800e7bc:	4293      	cmp	r3, r2
 800e7be:	d115      	bne.n	800e7ec <HAL_TIMEx_PWMN_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	689a      	ldr	r2, [r3, #8]
 800e7c6:	4b1a      	ldr	r3, [pc, #104]	; (800e830 <HAL_TIMEx_PWMN_Start+0x19c>)
 800e7c8:	4013      	ands	r3, r2
 800e7ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	2b06      	cmp	r3, #6
 800e7d0:	d015      	beq.n	800e7fe <HAL_TIMEx_PWMN_Start+0x16a>
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e7d8:	d011      	beq.n	800e7fe <HAL_TIMEx_PWMN_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	681a      	ldr	r2, [r3, #0]
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	f042 0201 	orr.w	r2, r2, #1
 800e7e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7ea:	e008      	b.n	800e7fe <HAL_TIMEx_PWMN_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	681a      	ldr	r2, [r3, #0]
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	f042 0201 	orr.w	r2, r2, #1
 800e7fa:	601a      	str	r2, [r3, #0]
 800e7fc:	e000      	b.n	800e800 <HAL_TIMEx_PWMN_Start+0x16c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e800:	2300      	movs	r3, #0
}
 800e802:	4618      	mov	r0, r3
 800e804:	3710      	adds	r7, #16
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}
 800e80a:	bf00      	nop
 800e80c:	40010000 	.word	0x40010000
 800e810:	40000400 	.word	0x40000400
 800e814:	40000800 	.word	0x40000800
 800e818:	40000c00 	.word	0x40000c00
 800e81c:	40010400 	.word	0x40010400
 800e820:	40001800 	.word	0x40001800
 800e824:	40014000 	.word	0x40014000
 800e828:	4000e000 	.word	0x4000e000
 800e82c:	4000e400 	.word	0x4000e400
 800e830:	00010007 	.word	0x00010007

0800e834 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e834:	b480      	push	{r7}
 800e836:	b085      	sub	sp, #20
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
 800e83c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e844:	2b01      	cmp	r3, #1
 800e846:	d101      	bne.n	800e84c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e848:	2302      	movs	r3, #2
 800e84a:	e077      	b.n	800e93c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2201      	movs	r2, #1
 800e850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	2202      	movs	r2, #2
 800e858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	685b      	ldr	r3, [r3, #4]
 800e862:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	689b      	ldr	r3, [r3, #8]
 800e86a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4a35      	ldr	r2, [pc, #212]	; (800e948 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e872:	4293      	cmp	r3, r2
 800e874:	d004      	beq.n	800e880 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	4a34      	ldr	r2, [pc, #208]	; (800e94c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e87c:	4293      	cmp	r3, r2
 800e87e:	d108      	bne.n	800e892 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e886:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	685b      	ldr	r3, [r3, #4]
 800e88c:	68fa      	ldr	r2, [r7, #12]
 800e88e:	4313      	orrs	r3, r2
 800e890:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e898:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	68fa      	ldr	r2, [r7, #12]
 800e8a0:	4313      	orrs	r3, r2
 800e8a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	68fa      	ldr	r2, [r7, #12]
 800e8aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	4a25      	ldr	r2, [pc, #148]	; (800e948 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e8b2:	4293      	cmp	r3, r2
 800e8b4:	d02c      	beq.n	800e910 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e8be:	d027      	beq.n	800e910 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	4a22      	ldr	r2, [pc, #136]	; (800e950 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800e8c6:	4293      	cmp	r3, r2
 800e8c8:	d022      	beq.n	800e910 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	4a21      	ldr	r2, [pc, #132]	; (800e954 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800e8d0:	4293      	cmp	r3, r2
 800e8d2:	d01d      	beq.n	800e910 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	4a1f      	ldr	r2, [pc, #124]	; (800e958 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800e8da:	4293      	cmp	r3, r2
 800e8dc:	d018      	beq.n	800e910 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	4a1a      	ldr	r2, [pc, #104]	; (800e94c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e8e4:	4293      	cmp	r3, r2
 800e8e6:	d013      	beq.n	800e910 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	4a1b      	ldr	r2, [pc, #108]	; (800e95c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800e8ee:	4293      	cmp	r3, r2
 800e8f0:	d00e      	beq.n	800e910 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	4a1a      	ldr	r2, [pc, #104]	; (800e960 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800e8f8:	4293      	cmp	r3, r2
 800e8fa:	d009      	beq.n	800e910 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	4a18      	ldr	r2, [pc, #96]	; (800e964 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800e902:	4293      	cmp	r3, r2
 800e904:	d004      	beq.n	800e910 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	4a17      	ldr	r2, [pc, #92]	; (800e968 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800e90c:	4293      	cmp	r3, r2
 800e90e:	d10c      	bne.n	800e92a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e916:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	689b      	ldr	r3, [r3, #8]
 800e91c:	68ba      	ldr	r2, [r7, #8]
 800e91e:	4313      	orrs	r3, r2
 800e920:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	68ba      	ldr	r2, [r7, #8]
 800e928:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2201      	movs	r2, #1
 800e92e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	2200      	movs	r2, #0
 800e936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e93a:	2300      	movs	r3, #0
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	3714      	adds	r7, #20
 800e940:	46bd      	mov	sp, r7
 800e942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e946:	4770      	bx	lr
 800e948:	40010000 	.word	0x40010000
 800e94c:	40010400 	.word	0x40010400
 800e950:	40000400 	.word	0x40000400
 800e954:	40000800 	.word	0x40000800
 800e958:	40000c00 	.word	0x40000c00
 800e95c:	40001800 	.word	0x40001800
 800e960:	40014000 	.word	0x40014000
 800e964:	4000e000 	.word	0x4000e000
 800e968:	4000e400 	.word	0x4000e400

0800e96c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e96c:	b480      	push	{r7}
 800e96e:	b085      	sub	sp, #20
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
 800e974:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e976:	2300      	movs	r3, #0
 800e978:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e980:	2b01      	cmp	r3, #1
 800e982:	d101      	bne.n	800e988 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e984:	2302      	movs	r3, #2
 800e986:	e087      	b.n	800ea98 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2201      	movs	r2, #1
 800e98c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	68db      	ldr	r3, [r3, #12]
 800e99a:	4313      	orrs	r3, r2
 800e99c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	689b      	ldr	r3, [r3, #8]
 800e9a8:	4313      	orrs	r3, r2
 800e9aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	685b      	ldr	r3, [r3, #4]
 800e9b6:	4313      	orrs	r3, r2
 800e9b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	4313      	orrs	r3, r2
 800e9c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	691b      	ldr	r3, [r3, #16]
 800e9d2:	4313      	orrs	r3, r2
 800e9d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	695b      	ldr	r3, [r3, #20]
 800e9e0:	4313      	orrs	r3, r2
 800e9e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9ee:	4313      	orrs	r3, r2
 800e9f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	699b      	ldr	r3, [r3, #24]
 800e9fc:	041b      	lsls	r3, r3, #16
 800e9fe:	4313      	orrs	r3, r2
 800ea00:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	4a27      	ldr	r2, [pc, #156]	; (800eaa4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ea08:	4293      	cmp	r3, r2
 800ea0a:	d004      	beq.n	800ea16 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	4a25      	ldr	r2, [pc, #148]	; (800eaa8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ea12:	4293      	cmp	r3, r2
 800ea14:	d106      	bne.n	800ea24 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	69db      	ldr	r3, [r3, #28]
 800ea20:	4313      	orrs	r3, r2
 800ea22:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	4a1e      	ldr	r2, [pc, #120]	; (800eaa4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ea2a:	4293      	cmp	r3, r2
 800ea2c:	d004      	beq.n	800ea38 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	4a1d      	ldr	r2, [pc, #116]	; (800eaa8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ea34:	4293      	cmp	r3, r2
 800ea36:	d126      	bne.n	800ea86 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea42:	051b      	lsls	r3, r3, #20
 800ea44:	4313      	orrs	r3, r2
 800ea46:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	6a1b      	ldr	r3, [r3, #32]
 800ea52:	4313      	orrs	r3, r2
 800ea54:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea60:	4313      	orrs	r3, r2
 800ea62:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	4a0e      	ldr	r2, [pc, #56]	; (800eaa4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ea6a:	4293      	cmp	r3, r2
 800ea6c:	d004      	beq.n	800ea78 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	4a0d      	ldr	r2, [pc, #52]	; (800eaa8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ea74:	4293      	cmp	r3, r2
 800ea76:	d106      	bne.n	800ea86 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea82:	4313      	orrs	r3, r2
 800ea84:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	68fa      	ldr	r2, [r7, #12]
 800ea8c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	2200      	movs	r2, #0
 800ea92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ea96:	2300      	movs	r3, #0
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3714      	adds	r7, #20
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa2:	4770      	bx	lr
 800eaa4:	40010000 	.word	0x40010000
 800eaa8:	40010400 	.word	0x40010400

0800eaac <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800eaac:	b480      	push	{r7}
 800eaae:	b08b      	sub	sp, #44	; 0x2c
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	60f8      	str	r0, [r7, #12]
 800eab4:	60b9      	str	r1, [r7, #8]
 800eab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eab8:	2300      	movs	r3, #0
 800eaba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  {
    assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
  }

  /* Check input state */
  __HAL_LOCK(htim);
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eac4:	2b01      	cmp	r3, #1
 800eac6:	d101      	bne.n	800eacc <HAL_TIMEx_ConfigBreakInput+0x20>
 800eac8:	2302      	movs	r3, #2
 800eaca:	e0af      	b.n	800ec2c <HAL_TIMEx_ConfigBreakInput+0x180>
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	2201      	movs	r2, #1
 800ead0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	3b01      	subs	r3, #1
 800eada:	2b07      	cmp	r3, #7
 800eadc:	d83a      	bhi.n	800eb54 <HAL_TIMEx_ConfigBreakInput+0xa8>
 800eade:	a201      	add	r2, pc, #4	; (adr r2, 800eae4 <HAL_TIMEx_ConfigBreakInput+0x38>)
 800eae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eae4:	0800eb05 	.word	0x0800eb05
 800eae8:	0800eb19 	.word	0x0800eb19
 800eaec:	0800eb55 	.word	0x0800eb55
 800eaf0:	0800eb2d 	.word	0x0800eb2d
 800eaf4:	0800eb55 	.word	0x0800eb55
 800eaf8:	0800eb55 	.word	0x0800eb55
 800eafc:	0800eb55 	.word	0x0800eb55
 800eb00:	0800eb41 	.word	0x0800eb41
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800eb04:	2301      	movs	r3, #1
 800eb06:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800eb08:	2300      	movs	r3, #0
 800eb0a:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800eb0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eb10:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800eb12:	2309      	movs	r3, #9
 800eb14:	613b      	str	r3, [r7, #16]
      break;
 800eb16:	e026      	b.n	800eb66 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800eb18:	2302      	movs	r3, #2
 800eb1a:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800eb1c:	2301      	movs	r3, #1
 800eb1e:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800eb20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb24:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800eb26:	230a      	movs	r3, #10
 800eb28:	613b      	str	r3, [r7, #16]
      break;
 800eb2a:	e01c      	b.n	800eb66 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800eb2c:	2304      	movs	r3, #4
 800eb2e:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800eb30:	2302      	movs	r3, #2
 800eb32:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800eb34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eb38:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800eb3a:	230b      	movs	r3, #11
 800eb3c:	613b      	str	r3, [r7, #16]
      break;
 800eb3e:	e012      	b.n	800eb66 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_AF1_BKDF1BK0E;
 800eb40:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eb44:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_AF1_BKDF1BK0E_Pos;
 800eb46:	2308      	movs	r3, #8
 800eb48:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800eb4e:	2300      	movs	r3, #0
 800eb50:	613b      	str	r3, [r7, #16]
      break;
 800eb52:	e008      	b.n	800eb66 <HAL_TIMEx_ConfigBreakInput+0xba>
    }

    default:
    {
      bkin_enable_mask = 0U;
 800eb54:	2300      	movs	r3, #0
 800eb56:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 800eb60:	2300      	movs	r3, #0
 800eb62:	613b      	str	r3, [r7, #16]
      break;
 800eb64:	bf00      	nop
    }
  }

  switch (BreakInput)
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	2b01      	cmp	r3, #1
 800eb6a:	d003      	beq.n	800eb74 <HAL_TIMEx_ConfigBreakInput+0xc8>
 800eb6c:	68bb      	ldr	r3, [r7, #8]
 800eb6e:	2b02      	cmp	r3, #2
 800eb70:	d029      	beq.n	800ebc6 <HAL_TIMEx_ConfigBreakInput+0x11a>
 800eb72:	e051      	b.n	800ec18 <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eb7a:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800eb7c:	69fb      	ldr	r3, [r7, #28]
 800eb7e:	43db      	mvns	r3, r3
 800eb80:	6a3a      	ldr	r2, [r7, #32]
 800eb82:	4013      	ands	r3, r2
 800eb84:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	685a      	ldr	r2, [r3, #4]
 800eb8a:	697b      	ldr	r3, [r7, #20]
 800eb8c:	409a      	lsls	r2, r3
 800eb8e:	69fb      	ldr	r3, [r7, #28]
 800eb90:	4013      	ands	r3, r2
 800eb92:	6a3a      	ldr	r2, [r7, #32]
 800eb94:	4313      	orrs	r3, r2
 800eb96:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	2b08      	cmp	r3, #8
 800eb9e:	d00d      	beq.n	800ebbc <HAL_TIMEx_ConfigBreakInput+0x110>
      {
        tmporx &= ~bkin_polarity_mask;
 800eba0:	69bb      	ldr	r3, [r7, #24]
 800eba2:	43db      	mvns	r3, r3
 800eba4:	6a3a      	ldr	r2, [r7, #32]
 800eba6:	4013      	ands	r3, r2
 800eba8:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	689a      	ldr	r2, [r3, #8]
 800ebae:	693b      	ldr	r3, [r7, #16]
 800ebb0:	409a      	lsls	r2, r3
 800ebb2:	69bb      	ldr	r3, [r7, #24]
 800ebb4:	4013      	ands	r3, r2
 800ebb6:	6a3a      	ldr	r2, [r7, #32]
 800ebb8:	4313      	orrs	r3, r2
 800ebba:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	6a3a      	ldr	r2, [r7, #32]
 800ebc2:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800ebc4:	e02c      	b.n	800ec20 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ebcc:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800ebce:	69fb      	ldr	r3, [r7, #28]
 800ebd0:	43db      	mvns	r3, r3
 800ebd2:	6a3a      	ldr	r2, [r7, #32]
 800ebd4:	4013      	ands	r3, r2
 800ebd6:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	685a      	ldr	r2, [r3, #4]
 800ebdc:	697b      	ldr	r3, [r7, #20]
 800ebde:	409a      	lsls	r2, r3
 800ebe0:	69fb      	ldr	r3, [r7, #28]
 800ebe2:	4013      	ands	r3, r2
 800ebe4:	6a3a      	ldr	r2, [r7, #32]
 800ebe6:	4313      	orrs	r3, r2
 800ebe8:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	2b08      	cmp	r3, #8
 800ebf0:	d00d      	beq.n	800ec0e <HAL_TIMEx_ConfigBreakInput+0x162>
      {
        tmporx &= ~bkin_polarity_mask;
 800ebf2:	69bb      	ldr	r3, [r7, #24]
 800ebf4:	43db      	mvns	r3, r3
 800ebf6:	6a3a      	ldr	r2, [r7, #32]
 800ebf8:	4013      	ands	r3, r2
 800ebfa:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	689a      	ldr	r2, [r3, #8]
 800ec00:	693b      	ldr	r3, [r7, #16]
 800ec02:	409a      	lsls	r2, r3
 800ec04:	69bb      	ldr	r3, [r7, #24]
 800ec06:	4013      	ands	r3, r2
 800ec08:	6a3a      	ldr	r2, [r7, #32]
 800ec0a:	4313      	orrs	r3, r2
 800ec0c:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	6a3a      	ldr	r2, [r7, #32]
 800ec14:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800ec16:	e003      	b.n	800ec20 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 800ec18:	2301      	movs	r3, #1
 800ec1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800ec1e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	2200      	movs	r2, #0
 800ec24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ec28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	372c      	adds	r7, #44	; 0x2c
 800ec30:	46bd      	mov	sp, r7
 800ec32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec36:	4770      	bx	lr

0800ec38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ec38:	b480      	push	{r7}
 800ec3a:	b083      	sub	sp, #12
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ec40:	bf00      	nop
 800ec42:	370c      	adds	r7, #12
 800ec44:	46bd      	mov	sp, r7
 800ec46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4a:	4770      	bx	lr

0800ec4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b083      	sub	sp, #12
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ec54:	bf00      	nop
 800ec56:	370c      	adds	r7, #12
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5e:	4770      	bx	lr

0800ec60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ec60:	b480      	push	{r7}
 800ec62:	b083      	sub	sp, #12
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ec68:	bf00      	nop
 800ec6a:	370c      	adds	r7, #12
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec72:	4770      	bx	lr

0800ec74 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800ec74:	b480      	push	{r7}
 800ec76:	b087      	sub	sp, #28
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	60f8      	str	r0, [r7, #12]
 800ec7c:	60b9      	str	r1, [r7, #8]
 800ec7e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	f003 031f 	and.w	r3, r3, #31
 800ec86:	2204      	movs	r2, #4
 800ec88:	fa02 f303 	lsl.w	r3, r2, r3
 800ec8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	6a1a      	ldr	r2, [r3, #32]
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	43db      	mvns	r3, r3
 800ec96:	401a      	ands	r2, r3
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	6a1a      	ldr	r2, [r3, #32]
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	f003 031f 	and.w	r3, r3, #31
 800eca6:	6879      	ldr	r1, [r7, #4]
 800eca8:	fa01 f303 	lsl.w	r3, r1, r3
 800ecac:	431a      	orrs	r2, r3
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	621a      	str	r2, [r3, #32]
}
 800ecb2:	bf00      	nop
 800ecb4:	371c      	adds	r7, #28
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbc:	4770      	bx	lr

0800ecbe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ecbe:	b580      	push	{r7, lr}
 800ecc0:	b082      	sub	sp, #8
 800ecc2:	af00      	add	r7, sp, #0
 800ecc4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d101      	bne.n	800ecd0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800eccc:	2301      	movs	r3, #1
 800ecce:	e042      	b.n	800ed56 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d106      	bne.n	800ece8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	2200      	movs	r2, #0
 800ecde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ece2:	6878      	ldr	r0, [r7, #4]
 800ece4:	f7f3 fd0c 	bl	8002700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2224      	movs	r2, #36	; 0x24
 800ecec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	681a      	ldr	r2, [r3, #0]
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	f022 0201 	bic.w	r2, r2, #1
 800ecfe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	f000 f8bb 	bl	800ee7c <UART_SetConfig>
 800ed06:	4603      	mov	r3, r0
 800ed08:	2b01      	cmp	r3, #1
 800ed0a:	d101      	bne.n	800ed10 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ed0c:	2301      	movs	r3, #1
 800ed0e:	e022      	b.n	800ed56 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d002      	beq.n	800ed1e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ed18:	6878      	ldr	r0, [r7, #4]
 800ed1a:	f000 ff1b 	bl	800fb54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	685a      	ldr	r2, [r3, #4]
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ed2c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	689a      	ldr	r2, [r3, #8]
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ed3c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	681a      	ldr	r2, [r3, #0]
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	f042 0201 	orr.w	r2, r2, #1
 800ed4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f000 ffa2 	bl	800fc98 <UART_CheckIdleState>
 800ed54:	4603      	mov	r3, r0
}
 800ed56:	4618      	mov	r0, r3
 800ed58:	3708      	adds	r7, #8
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}

0800ed5e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ed5e:	b580      	push	{r7, lr}
 800ed60:	b08a      	sub	sp, #40	; 0x28
 800ed62:	af02      	add	r7, sp, #8
 800ed64:	60f8      	str	r0, [r7, #12]
 800ed66:	60b9      	str	r1, [r7, #8]
 800ed68:	603b      	str	r3, [r7, #0]
 800ed6a:	4613      	mov	r3, r2
 800ed6c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed74:	2b20      	cmp	r3, #32
 800ed76:	d17b      	bne.n	800ee70 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ed78:	68bb      	ldr	r3, [r7, #8]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d002      	beq.n	800ed84 <HAL_UART_Transmit+0x26>
 800ed7e:	88fb      	ldrh	r3, [r7, #6]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d101      	bne.n	800ed88 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ed84:	2301      	movs	r3, #1
 800ed86:	e074      	b.n	800ee72 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	2221      	movs	r2, #33	; 0x21
 800ed94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ed98:	f7f4 f9fe 	bl	8003198 <HAL_GetTick>
 800ed9c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	88fa      	ldrh	r2, [r7, #6]
 800eda2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	88fa      	ldrh	r2, [r7, #6]
 800edaa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	689b      	ldr	r3, [r3, #8]
 800edb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800edb6:	d108      	bne.n	800edca <HAL_UART_Transmit+0x6c>
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	691b      	ldr	r3, [r3, #16]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d104      	bne.n	800edca <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800edc0:	2300      	movs	r3, #0
 800edc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	61bb      	str	r3, [r7, #24]
 800edc8:	e003      	b.n	800edd2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800edce:	2300      	movs	r3, #0
 800edd0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800edd2:	e030      	b.n	800ee36 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	9300      	str	r3, [sp, #0]
 800edd8:	697b      	ldr	r3, [r7, #20]
 800edda:	2200      	movs	r2, #0
 800eddc:	2180      	movs	r1, #128	; 0x80
 800edde:	68f8      	ldr	r0, [r7, #12]
 800ede0:	f001 f804 	bl	800fdec <UART_WaitOnFlagUntilTimeout>
 800ede4:	4603      	mov	r3, r0
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d005      	beq.n	800edf6 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	2220      	movs	r2, #32
 800edee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800edf2:	2303      	movs	r3, #3
 800edf4:	e03d      	b.n	800ee72 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800edf6:	69fb      	ldr	r3, [r7, #28]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d10b      	bne.n	800ee14 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800edfc:	69bb      	ldr	r3, [r7, #24]
 800edfe:	881b      	ldrh	r3, [r3, #0]
 800ee00:	461a      	mov	r2, r3
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ee0a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ee0c:	69bb      	ldr	r3, [r7, #24]
 800ee0e:	3302      	adds	r3, #2
 800ee10:	61bb      	str	r3, [r7, #24]
 800ee12:	e007      	b.n	800ee24 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ee14:	69fb      	ldr	r3, [r7, #28]
 800ee16:	781a      	ldrb	r2, [r3, #0]
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ee1e:	69fb      	ldr	r3, [r7, #28]
 800ee20:	3301      	adds	r3, #1
 800ee22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ee2a:	b29b      	uxth	r3, r3
 800ee2c:	3b01      	subs	r3, #1
 800ee2e:	b29a      	uxth	r2, r3
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ee3c:	b29b      	uxth	r3, r3
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d1c8      	bne.n	800edd4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	9300      	str	r3, [sp, #0]
 800ee46:	697b      	ldr	r3, [r7, #20]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	2140      	movs	r1, #64	; 0x40
 800ee4c:	68f8      	ldr	r0, [r7, #12]
 800ee4e:	f000 ffcd 	bl	800fdec <UART_WaitOnFlagUntilTimeout>
 800ee52:	4603      	mov	r3, r0
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d005      	beq.n	800ee64 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	2220      	movs	r2, #32
 800ee5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800ee60:	2303      	movs	r3, #3
 800ee62:	e006      	b.n	800ee72 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	2220      	movs	r2, #32
 800ee68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	e000      	b.n	800ee72 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ee70:	2302      	movs	r3, #2
  }
}
 800ee72:	4618      	mov	r0, r3
 800ee74:	3720      	adds	r7, #32
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}
	...

0800ee7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ee7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ee80:	b092      	sub	sp, #72	; 0x48
 800ee82:	af00      	add	r7, sp, #0
 800ee84:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ee86:	2300      	movs	r3, #0
 800ee88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ee8c:	697b      	ldr	r3, [r7, #20]
 800ee8e:	689a      	ldr	r2, [r3, #8]
 800ee90:	697b      	ldr	r3, [r7, #20]
 800ee92:	691b      	ldr	r3, [r3, #16]
 800ee94:	431a      	orrs	r2, r3
 800ee96:	697b      	ldr	r3, [r7, #20]
 800ee98:	695b      	ldr	r3, [r3, #20]
 800ee9a:	431a      	orrs	r2, r3
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	69db      	ldr	r3, [r3, #28]
 800eea0:	4313      	orrs	r3, r2
 800eea2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800eea4:	697b      	ldr	r3, [r7, #20]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	681a      	ldr	r2, [r3, #0]
 800eeaa:	4bbe      	ldr	r3, [pc, #760]	; (800f1a4 <UART_SetConfig+0x328>)
 800eeac:	4013      	ands	r3, r2
 800eeae:	697a      	ldr	r2, [r7, #20]
 800eeb0:	6812      	ldr	r2, [r2, #0]
 800eeb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eeb4:	430b      	orrs	r3, r1
 800eeb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800eeb8:	697b      	ldr	r3, [r7, #20]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	685b      	ldr	r3, [r3, #4]
 800eebe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800eec2:	697b      	ldr	r3, [r7, #20]
 800eec4:	68da      	ldr	r2, [r3, #12]
 800eec6:	697b      	ldr	r3, [r7, #20]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	430a      	orrs	r2, r1
 800eecc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800eece:	697b      	ldr	r3, [r7, #20]
 800eed0:	699b      	ldr	r3, [r3, #24]
 800eed2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800eed4:	697b      	ldr	r3, [r7, #20]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	4ab3      	ldr	r2, [pc, #716]	; (800f1a8 <UART_SetConfig+0x32c>)
 800eeda:	4293      	cmp	r3, r2
 800eedc:	d004      	beq.n	800eee8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800eede:	697b      	ldr	r3, [r7, #20]
 800eee0:	6a1b      	ldr	r3, [r3, #32]
 800eee2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eee4:	4313      	orrs	r3, r2
 800eee6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	689a      	ldr	r2, [r3, #8]
 800eeee:	4baf      	ldr	r3, [pc, #700]	; (800f1ac <UART_SetConfig+0x330>)
 800eef0:	4013      	ands	r3, r2
 800eef2:	697a      	ldr	r2, [r7, #20]
 800eef4:	6812      	ldr	r2, [r2, #0]
 800eef6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eef8:	430b      	orrs	r3, r1
 800eefa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800eefc:	697b      	ldr	r3, [r7, #20]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef02:	f023 010f 	bic.w	r1, r3, #15
 800ef06:	697b      	ldr	r3, [r7, #20]
 800ef08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef0a:	697b      	ldr	r3, [r7, #20]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	430a      	orrs	r2, r1
 800ef10:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	4aa6      	ldr	r2, [pc, #664]	; (800f1b0 <UART_SetConfig+0x334>)
 800ef18:	4293      	cmp	r3, r2
 800ef1a:	d177      	bne.n	800f00c <UART_SetConfig+0x190>
 800ef1c:	4ba5      	ldr	r3, [pc, #660]	; (800f1b4 <UART_SetConfig+0x338>)
 800ef1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ef24:	2b28      	cmp	r3, #40	; 0x28
 800ef26:	d86d      	bhi.n	800f004 <UART_SetConfig+0x188>
 800ef28:	a201      	add	r2, pc, #4	; (adr r2, 800ef30 <UART_SetConfig+0xb4>)
 800ef2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef2e:	bf00      	nop
 800ef30:	0800efd5 	.word	0x0800efd5
 800ef34:	0800f005 	.word	0x0800f005
 800ef38:	0800f005 	.word	0x0800f005
 800ef3c:	0800f005 	.word	0x0800f005
 800ef40:	0800f005 	.word	0x0800f005
 800ef44:	0800f005 	.word	0x0800f005
 800ef48:	0800f005 	.word	0x0800f005
 800ef4c:	0800f005 	.word	0x0800f005
 800ef50:	0800efdd 	.word	0x0800efdd
 800ef54:	0800f005 	.word	0x0800f005
 800ef58:	0800f005 	.word	0x0800f005
 800ef5c:	0800f005 	.word	0x0800f005
 800ef60:	0800f005 	.word	0x0800f005
 800ef64:	0800f005 	.word	0x0800f005
 800ef68:	0800f005 	.word	0x0800f005
 800ef6c:	0800f005 	.word	0x0800f005
 800ef70:	0800efe5 	.word	0x0800efe5
 800ef74:	0800f005 	.word	0x0800f005
 800ef78:	0800f005 	.word	0x0800f005
 800ef7c:	0800f005 	.word	0x0800f005
 800ef80:	0800f005 	.word	0x0800f005
 800ef84:	0800f005 	.word	0x0800f005
 800ef88:	0800f005 	.word	0x0800f005
 800ef8c:	0800f005 	.word	0x0800f005
 800ef90:	0800efed 	.word	0x0800efed
 800ef94:	0800f005 	.word	0x0800f005
 800ef98:	0800f005 	.word	0x0800f005
 800ef9c:	0800f005 	.word	0x0800f005
 800efa0:	0800f005 	.word	0x0800f005
 800efa4:	0800f005 	.word	0x0800f005
 800efa8:	0800f005 	.word	0x0800f005
 800efac:	0800f005 	.word	0x0800f005
 800efb0:	0800eff5 	.word	0x0800eff5
 800efb4:	0800f005 	.word	0x0800f005
 800efb8:	0800f005 	.word	0x0800f005
 800efbc:	0800f005 	.word	0x0800f005
 800efc0:	0800f005 	.word	0x0800f005
 800efc4:	0800f005 	.word	0x0800f005
 800efc8:	0800f005 	.word	0x0800f005
 800efcc:	0800f005 	.word	0x0800f005
 800efd0:	0800effd 	.word	0x0800effd
 800efd4:	2301      	movs	r3, #1
 800efd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efda:	e326      	b.n	800f62a <UART_SetConfig+0x7ae>
 800efdc:	2304      	movs	r3, #4
 800efde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efe2:	e322      	b.n	800f62a <UART_SetConfig+0x7ae>
 800efe4:	2308      	movs	r3, #8
 800efe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efea:	e31e      	b.n	800f62a <UART_SetConfig+0x7ae>
 800efec:	2310      	movs	r3, #16
 800efee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eff2:	e31a      	b.n	800f62a <UART_SetConfig+0x7ae>
 800eff4:	2320      	movs	r3, #32
 800eff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800effa:	e316      	b.n	800f62a <UART_SetConfig+0x7ae>
 800effc:	2340      	movs	r3, #64	; 0x40
 800effe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f002:	e312      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f004:	2380      	movs	r3, #128	; 0x80
 800f006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f00a:	e30e      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	4a69      	ldr	r2, [pc, #420]	; (800f1b8 <UART_SetConfig+0x33c>)
 800f012:	4293      	cmp	r3, r2
 800f014:	d130      	bne.n	800f078 <UART_SetConfig+0x1fc>
 800f016:	4b67      	ldr	r3, [pc, #412]	; (800f1b4 <UART_SetConfig+0x338>)
 800f018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f01a:	f003 0307 	and.w	r3, r3, #7
 800f01e:	2b05      	cmp	r3, #5
 800f020:	d826      	bhi.n	800f070 <UART_SetConfig+0x1f4>
 800f022:	a201      	add	r2, pc, #4	; (adr r2, 800f028 <UART_SetConfig+0x1ac>)
 800f024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f028:	0800f041 	.word	0x0800f041
 800f02c:	0800f049 	.word	0x0800f049
 800f030:	0800f051 	.word	0x0800f051
 800f034:	0800f059 	.word	0x0800f059
 800f038:	0800f061 	.word	0x0800f061
 800f03c:	0800f069 	.word	0x0800f069
 800f040:	2300      	movs	r3, #0
 800f042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f046:	e2f0      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f048:	2304      	movs	r3, #4
 800f04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f04e:	e2ec      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f050:	2308      	movs	r3, #8
 800f052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f056:	e2e8      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f058:	2310      	movs	r3, #16
 800f05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f05e:	e2e4      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f060:	2320      	movs	r3, #32
 800f062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f066:	e2e0      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f068:	2340      	movs	r3, #64	; 0x40
 800f06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f06e:	e2dc      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f070:	2380      	movs	r3, #128	; 0x80
 800f072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f076:	e2d8      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f078:	697b      	ldr	r3, [r7, #20]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	4a4f      	ldr	r2, [pc, #316]	; (800f1bc <UART_SetConfig+0x340>)
 800f07e:	4293      	cmp	r3, r2
 800f080:	d130      	bne.n	800f0e4 <UART_SetConfig+0x268>
 800f082:	4b4c      	ldr	r3, [pc, #304]	; (800f1b4 <UART_SetConfig+0x338>)
 800f084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f086:	f003 0307 	and.w	r3, r3, #7
 800f08a:	2b05      	cmp	r3, #5
 800f08c:	d826      	bhi.n	800f0dc <UART_SetConfig+0x260>
 800f08e:	a201      	add	r2, pc, #4	; (adr r2, 800f094 <UART_SetConfig+0x218>)
 800f090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f094:	0800f0ad 	.word	0x0800f0ad
 800f098:	0800f0b5 	.word	0x0800f0b5
 800f09c:	0800f0bd 	.word	0x0800f0bd
 800f0a0:	0800f0c5 	.word	0x0800f0c5
 800f0a4:	0800f0cd 	.word	0x0800f0cd
 800f0a8:	0800f0d5 	.word	0x0800f0d5
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0b2:	e2ba      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f0b4:	2304      	movs	r3, #4
 800f0b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ba:	e2b6      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f0bc:	2308      	movs	r3, #8
 800f0be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0c2:	e2b2      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f0c4:	2310      	movs	r3, #16
 800f0c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ca:	e2ae      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f0cc:	2320      	movs	r3, #32
 800f0ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0d2:	e2aa      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f0d4:	2340      	movs	r3, #64	; 0x40
 800f0d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0da:	e2a6      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f0dc:	2380      	movs	r3, #128	; 0x80
 800f0de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0e2:	e2a2      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f0e4:	697b      	ldr	r3, [r7, #20]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	4a35      	ldr	r2, [pc, #212]	; (800f1c0 <UART_SetConfig+0x344>)
 800f0ea:	4293      	cmp	r3, r2
 800f0ec:	d130      	bne.n	800f150 <UART_SetConfig+0x2d4>
 800f0ee:	4b31      	ldr	r3, [pc, #196]	; (800f1b4 <UART_SetConfig+0x338>)
 800f0f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0f2:	f003 0307 	and.w	r3, r3, #7
 800f0f6:	2b05      	cmp	r3, #5
 800f0f8:	d826      	bhi.n	800f148 <UART_SetConfig+0x2cc>
 800f0fa:	a201      	add	r2, pc, #4	; (adr r2, 800f100 <UART_SetConfig+0x284>)
 800f0fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f100:	0800f119 	.word	0x0800f119
 800f104:	0800f121 	.word	0x0800f121
 800f108:	0800f129 	.word	0x0800f129
 800f10c:	0800f131 	.word	0x0800f131
 800f110:	0800f139 	.word	0x0800f139
 800f114:	0800f141 	.word	0x0800f141
 800f118:	2300      	movs	r3, #0
 800f11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f11e:	e284      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f120:	2304      	movs	r3, #4
 800f122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f126:	e280      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f128:	2308      	movs	r3, #8
 800f12a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f12e:	e27c      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f130:	2310      	movs	r3, #16
 800f132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f136:	e278      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f138:	2320      	movs	r3, #32
 800f13a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f13e:	e274      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f140:	2340      	movs	r3, #64	; 0x40
 800f142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f146:	e270      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f148:	2380      	movs	r3, #128	; 0x80
 800f14a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f14e:	e26c      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	4a1b      	ldr	r2, [pc, #108]	; (800f1c4 <UART_SetConfig+0x348>)
 800f156:	4293      	cmp	r3, r2
 800f158:	d142      	bne.n	800f1e0 <UART_SetConfig+0x364>
 800f15a:	4b16      	ldr	r3, [pc, #88]	; (800f1b4 <UART_SetConfig+0x338>)
 800f15c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f15e:	f003 0307 	and.w	r3, r3, #7
 800f162:	2b05      	cmp	r3, #5
 800f164:	d838      	bhi.n	800f1d8 <UART_SetConfig+0x35c>
 800f166:	a201      	add	r2, pc, #4	; (adr r2, 800f16c <UART_SetConfig+0x2f0>)
 800f168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f16c:	0800f185 	.word	0x0800f185
 800f170:	0800f18d 	.word	0x0800f18d
 800f174:	0800f195 	.word	0x0800f195
 800f178:	0800f19d 	.word	0x0800f19d
 800f17c:	0800f1c9 	.word	0x0800f1c9
 800f180:	0800f1d1 	.word	0x0800f1d1
 800f184:	2300      	movs	r3, #0
 800f186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f18a:	e24e      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f18c:	2304      	movs	r3, #4
 800f18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f192:	e24a      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f194:	2308      	movs	r3, #8
 800f196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f19a:	e246      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f19c:	2310      	movs	r3, #16
 800f19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1a2:	e242      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f1a4:	cfff69f3 	.word	0xcfff69f3
 800f1a8:	58000c00 	.word	0x58000c00
 800f1ac:	11fff4ff 	.word	0x11fff4ff
 800f1b0:	40011000 	.word	0x40011000
 800f1b4:	58024400 	.word	0x58024400
 800f1b8:	40004400 	.word	0x40004400
 800f1bc:	40004800 	.word	0x40004800
 800f1c0:	40004c00 	.word	0x40004c00
 800f1c4:	40005000 	.word	0x40005000
 800f1c8:	2320      	movs	r3, #32
 800f1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1ce:	e22c      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f1d0:	2340      	movs	r3, #64	; 0x40
 800f1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1d6:	e228      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f1d8:	2380      	movs	r3, #128	; 0x80
 800f1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1de:	e224      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f1e0:	697b      	ldr	r3, [r7, #20]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	4ab1      	ldr	r2, [pc, #708]	; (800f4ac <UART_SetConfig+0x630>)
 800f1e6:	4293      	cmp	r3, r2
 800f1e8:	d176      	bne.n	800f2d8 <UART_SetConfig+0x45c>
 800f1ea:	4bb1      	ldr	r3, [pc, #708]	; (800f4b0 <UART_SetConfig+0x634>)
 800f1ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f1f2:	2b28      	cmp	r3, #40	; 0x28
 800f1f4:	d86c      	bhi.n	800f2d0 <UART_SetConfig+0x454>
 800f1f6:	a201      	add	r2, pc, #4	; (adr r2, 800f1fc <UART_SetConfig+0x380>)
 800f1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1fc:	0800f2a1 	.word	0x0800f2a1
 800f200:	0800f2d1 	.word	0x0800f2d1
 800f204:	0800f2d1 	.word	0x0800f2d1
 800f208:	0800f2d1 	.word	0x0800f2d1
 800f20c:	0800f2d1 	.word	0x0800f2d1
 800f210:	0800f2d1 	.word	0x0800f2d1
 800f214:	0800f2d1 	.word	0x0800f2d1
 800f218:	0800f2d1 	.word	0x0800f2d1
 800f21c:	0800f2a9 	.word	0x0800f2a9
 800f220:	0800f2d1 	.word	0x0800f2d1
 800f224:	0800f2d1 	.word	0x0800f2d1
 800f228:	0800f2d1 	.word	0x0800f2d1
 800f22c:	0800f2d1 	.word	0x0800f2d1
 800f230:	0800f2d1 	.word	0x0800f2d1
 800f234:	0800f2d1 	.word	0x0800f2d1
 800f238:	0800f2d1 	.word	0x0800f2d1
 800f23c:	0800f2b1 	.word	0x0800f2b1
 800f240:	0800f2d1 	.word	0x0800f2d1
 800f244:	0800f2d1 	.word	0x0800f2d1
 800f248:	0800f2d1 	.word	0x0800f2d1
 800f24c:	0800f2d1 	.word	0x0800f2d1
 800f250:	0800f2d1 	.word	0x0800f2d1
 800f254:	0800f2d1 	.word	0x0800f2d1
 800f258:	0800f2d1 	.word	0x0800f2d1
 800f25c:	0800f2b9 	.word	0x0800f2b9
 800f260:	0800f2d1 	.word	0x0800f2d1
 800f264:	0800f2d1 	.word	0x0800f2d1
 800f268:	0800f2d1 	.word	0x0800f2d1
 800f26c:	0800f2d1 	.word	0x0800f2d1
 800f270:	0800f2d1 	.word	0x0800f2d1
 800f274:	0800f2d1 	.word	0x0800f2d1
 800f278:	0800f2d1 	.word	0x0800f2d1
 800f27c:	0800f2c1 	.word	0x0800f2c1
 800f280:	0800f2d1 	.word	0x0800f2d1
 800f284:	0800f2d1 	.word	0x0800f2d1
 800f288:	0800f2d1 	.word	0x0800f2d1
 800f28c:	0800f2d1 	.word	0x0800f2d1
 800f290:	0800f2d1 	.word	0x0800f2d1
 800f294:	0800f2d1 	.word	0x0800f2d1
 800f298:	0800f2d1 	.word	0x0800f2d1
 800f29c:	0800f2c9 	.word	0x0800f2c9
 800f2a0:	2301      	movs	r3, #1
 800f2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2a6:	e1c0      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f2a8:	2304      	movs	r3, #4
 800f2aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2ae:	e1bc      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f2b0:	2308      	movs	r3, #8
 800f2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2b6:	e1b8      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f2b8:	2310      	movs	r3, #16
 800f2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2be:	e1b4      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f2c0:	2320      	movs	r3, #32
 800f2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2c6:	e1b0      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f2c8:	2340      	movs	r3, #64	; 0x40
 800f2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2ce:	e1ac      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f2d0:	2380      	movs	r3, #128	; 0x80
 800f2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2d6:	e1a8      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f2d8:	697b      	ldr	r3, [r7, #20]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	4a75      	ldr	r2, [pc, #468]	; (800f4b4 <UART_SetConfig+0x638>)
 800f2de:	4293      	cmp	r3, r2
 800f2e0:	d130      	bne.n	800f344 <UART_SetConfig+0x4c8>
 800f2e2:	4b73      	ldr	r3, [pc, #460]	; (800f4b0 <UART_SetConfig+0x634>)
 800f2e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2e6:	f003 0307 	and.w	r3, r3, #7
 800f2ea:	2b05      	cmp	r3, #5
 800f2ec:	d826      	bhi.n	800f33c <UART_SetConfig+0x4c0>
 800f2ee:	a201      	add	r2, pc, #4	; (adr r2, 800f2f4 <UART_SetConfig+0x478>)
 800f2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2f4:	0800f30d 	.word	0x0800f30d
 800f2f8:	0800f315 	.word	0x0800f315
 800f2fc:	0800f31d 	.word	0x0800f31d
 800f300:	0800f325 	.word	0x0800f325
 800f304:	0800f32d 	.word	0x0800f32d
 800f308:	0800f335 	.word	0x0800f335
 800f30c:	2300      	movs	r3, #0
 800f30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f312:	e18a      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f314:	2304      	movs	r3, #4
 800f316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f31a:	e186      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f31c:	2308      	movs	r3, #8
 800f31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f322:	e182      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f324:	2310      	movs	r3, #16
 800f326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f32a:	e17e      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f32c:	2320      	movs	r3, #32
 800f32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f332:	e17a      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f334:	2340      	movs	r3, #64	; 0x40
 800f336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f33a:	e176      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f33c:	2380      	movs	r3, #128	; 0x80
 800f33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f342:	e172      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	4a5b      	ldr	r2, [pc, #364]	; (800f4b8 <UART_SetConfig+0x63c>)
 800f34a:	4293      	cmp	r3, r2
 800f34c:	d130      	bne.n	800f3b0 <UART_SetConfig+0x534>
 800f34e:	4b58      	ldr	r3, [pc, #352]	; (800f4b0 <UART_SetConfig+0x634>)
 800f350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f352:	f003 0307 	and.w	r3, r3, #7
 800f356:	2b05      	cmp	r3, #5
 800f358:	d826      	bhi.n	800f3a8 <UART_SetConfig+0x52c>
 800f35a:	a201      	add	r2, pc, #4	; (adr r2, 800f360 <UART_SetConfig+0x4e4>)
 800f35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f360:	0800f379 	.word	0x0800f379
 800f364:	0800f381 	.word	0x0800f381
 800f368:	0800f389 	.word	0x0800f389
 800f36c:	0800f391 	.word	0x0800f391
 800f370:	0800f399 	.word	0x0800f399
 800f374:	0800f3a1 	.word	0x0800f3a1
 800f378:	2300      	movs	r3, #0
 800f37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f37e:	e154      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f380:	2304      	movs	r3, #4
 800f382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f386:	e150      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f388:	2308      	movs	r3, #8
 800f38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f38e:	e14c      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f390:	2310      	movs	r3, #16
 800f392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f396:	e148      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f398:	2320      	movs	r3, #32
 800f39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f39e:	e144      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f3a0:	2340      	movs	r3, #64	; 0x40
 800f3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3a6:	e140      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f3a8:	2380      	movs	r3, #128	; 0x80
 800f3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3ae:	e13c      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f3b0:	697b      	ldr	r3, [r7, #20]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	4a41      	ldr	r2, [pc, #260]	; (800f4bc <UART_SetConfig+0x640>)
 800f3b6:	4293      	cmp	r3, r2
 800f3b8:	f040 8082 	bne.w	800f4c0 <UART_SetConfig+0x644>
 800f3bc:	4b3c      	ldr	r3, [pc, #240]	; (800f4b0 <UART_SetConfig+0x634>)
 800f3be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f3c4:	2b28      	cmp	r3, #40	; 0x28
 800f3c6:	d86d      	bhi.n	800f4a4 <UART_SetConfig+0x628>
 800f3c8:	a201      	add	r2, pc, #4	; (adr r2, 800f3d0 <UART_SetConfig+0x554>)
 800f3ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3ce:	bf00      	nop
 800f3d0:	0800f475 	.word	0x0800f475
 800f3d4:	0800f4a5 	.word	0x0800f4a5
 800f3d8:	0800f4a5 	.word	0x0800f4a5
 800f3dc:	0800f4a5 	.word	0x0800f4a5
 800f3e0:	0800f4a5 	.word	0x0800f4a5
 800f3e4:	0800f4a5 	.word	0x0800f4a5
 800f3e8:	0800f4a5 	.word	0x0800f4a5
 800f3ec:	0800f4a5 	.word	0x0800f4a5
 800f3f0:	0800f47d 	.word	0x0800f47d
 800f3f4:	0800f4a5 	.word	0x0800f4a5
 800f3f8:	0800f4a5 	.word	0x0800f4a5
 800f3fc:	0800f4a5 	.word	0x0800f4a5
 800f400:	0800f4a5 	.word	0x0800f4a5
 800f404:	0800f4a5 	.word	0x0800f4a5
 800f408:	0800f4a5 	.word	0x0800f4a5
 800f40c:	0800f4a5 	.word	0x0800f4a5
 800f410:	0800f485 	.word	0x0800f485
 800f414:	0800f4a5 	.word	0x0800f4a5
 800f418:	0800f4a5 	.word	0x0800f4a5
 800f41c:	0800f4a5 	.word	0x0800f4a5
 800f420:	0800f4a5 	.word	0x0800f4a5
 800f424:	0800f4a5 	.word	0x0800f4a5
 800f428:	0800f4a5 	.word	0x0800f4a5
 800f42c:	0800f4a5 	.word	0x0800f4a5
 800f430:	0800f48d 	.word	0x0800f48d
 800f434:	0800f4a5 	.word	0x0800f4a5
 800f438:	0800f4a5 	.word	0x0800f4a5
 800f43c:	0800f4a5 	.word	0x0800f4a5
 800f440:	0800f4a5 	.word	0x0800f4a5
 800f444:	0800f4a5 	.word	0x0800f4a5
 800f448:	0800f4a5 	.word	0x0800f4a5
 800f44c:	0800f4a5 	.word	0x0800f4a5
 800f450:	0800f495 	.word	0x0800f495
 800f454:	0800f4a5 	.word	0x0800f4a5
 800f458:	0800f4a5 	.word	0x0800f4a5
 800f45c:	0800f4a5 	.word	0x0800f4a5
 800f460:	0800f4a5 	.word	0x0800f4a5
 800f464:	0800f4a5 	.word	0x0800f4a5
 800f468:	0800f4a5 	.word	0x0800f4a5
 800f46c:	0800f4a5 	.word	0x0800f4a5
 800f470:	0800f49d 	.word	0x0800f49d
 800f474:	2301      	movs	r3, #1
 800f476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f47a:	e0d6      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f47c:	2304      	movs	r3, #4
 800f47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f482:	e0d2      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f484:	2308      	movs	r3, #8
 800f486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f48a:	e0ce      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f48c:	2310      	movs	r3, #16
 800f48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f492:	e0ca      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f494:	2320      	movs	r3, #32
 800f496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f49a:	e0c6      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f49c:	2340      	movs	r3, #64	; 0x40
 800f49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4a2:	e0c2      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f4a4:	2380      	movs	r3, #128	; 0x80
 800f4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4aa:	e0be      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f4ac:	40011400 	.word	0x40011400
 800f4b0:	58024400 	.word	0x58024400
 800f4b4:	40007800 	.word	0x40007800
 800f4b8:	40007c00 	.word	0x40007c00
 800f4bc:	40011800 	.word	0x40011800
 800f4c0:	697b      	ldr	r3, [r7, #20]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	4aad      	ldr	r2, [pc, #692]	; (800f77c <UART_SetConfig+0x900>)
 800f4c6:	4293      	cmp	r3, r2
 800f4c8:	d176      	bne.n	800f5b8 <UART_SetConfig+0x73c>
 800f4ca:	4bad      	ldr	r3, [pc, #692]	; (800f780 <UART_SetConfig+0x904>)
 800f4cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f4d2:	2b28      	cmp	r3, #40	; 0x28
 800f4d4:	d86c      	bhi.n	800f5b0 <UART_SetConfig+0x734>
 800f4d6:	a201      	add	r2, pc, #4	; (adr r2, 800f4dc <UART_SetConfig+0x660>)
 800f4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4dc:	0800f581 	.word	0x0800f581
 800f4e0:	0800f5b1 	.word	0x0800f5b1
 800f4e4:	0800f5b1 	.word	0x0800f5b1
 800f4e8:	0800f5b1 	.word	0x0800f5b1
 800f4ec:	0800f5b1 	.word	0x0800f5b1
 800f4f0:	0800f5b1 	.word	0x0800f5b1
 800f4f4:	0800f5b1 	.word	0x0800f5b1
 800f4f8:	0800f5b1 	.word	0x0800f5b1
 800f4fc:	0800f589 	.word	0x0800f589
 800f500:	0800f5b1 	.word	0x0800f5b1
 800f504:	0800f5b1 	.word	0x0800f5b1
 800f508:	0800f5b1 	.word	0x0800f5b1
 800f50c:	0800f5b1 	.word	0x0800f5b1
 800f510:	0800f5b1 	.word	0x0800f5b1
 800f514:	0800f5b1 	.word	0x0800f5b1
 800f518:	0800f5b1 	.word	0x0800f5b1
 800f51c:	0800f591 	.word	0x0800f591
 800f520:	0800f5b1 	.word	0x0800f5b1
 800f524:	0800f5b1 	.word	0x0800f5b1
 800f528:	0800f5b1 	.word	0x0800f5b1
 800f52c:	0800f5b1 	.word	0x0800f5b1
 800f530:	0800f5b1 	.word	0x0800f5b1
 800f534:	0800f5b1 	.word	0x0800f5b1
 800f538:	0800f5b1 	.word	0x0800f5b1
 800f53c:	0800f599 	.word	0x0800f599
 800f540:	0800f5b1 	.word	0x0800f5b1
 800f544:	0800f5b1 	.word	0x0800f5b1
 800f548:	0800f5b1 	.word	0x0800f5b1
 800f54c:	0800f5b1 	.word	0x0800f5b1
 800f550:	0800f5b1 	.word	0x0800f5b1
 800f554:	0800f5b1 	.word	0x0800f5b1
 800f558:	0800f5b1 	.word	0x0800f5b1
 800f55c:	0800f5a1 	.word	0x0800f5a1
 800f560:	0800f5b1 	.word	0x0800f5b1
 800f564:	0800f5b1 	.word	0x0800f5b1
 800f568:	0800f5b1 	.word	0x0800f5b1
 800f56c:	0800f5b1 	.word	0x0800f5b1
 800f570:	0800f5b1 	.word	0x0800f5b1
 800f574:	0800f5b1 	.word	0x0800f5b1
 800f578:	0800f5b1 	.word	0x0800f5b1
 800f57c:	0800f5a9 	.word	0x0800f5a9
 800f580:	2301      	movs	r3, #1
 800f582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f586:	e050      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f588:	2304      	movs	r3, #4
 800f58a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f58e:	e04c      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f590:	2308      	movs	r3, #8
 800f592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f596:	e048      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f598:	2310      	movs	r3, #16
 800f59a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f59e:	e044      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f5a0:	2320      	movs	r3, #32
 800f5a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5a6:	e040      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f5a8:	2340      	movs	r3, #64	; 0x40
 800f5aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5ae:	e03c      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f5b0:	2380      	movs	r3, #128	; 0x80
 800f5b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5b6:	e038      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	4a71      	ldr	r2, [pc, #452]	; (800f784 <UART_SetConfig+0x908>)
 800f5be:	4293      	cmp	r3, r2
 800f5c0:	d130      	bne.n	800f624 <UART_SetConfig+0x7a8>
 800f5c2:	4b6f      	ldr	r3, [pc, #444]	; (800f780 <UART_SetConfig+0x904>)
 800f5c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5c6:	f003 0307 	and.w	r3, r3, #7
 800f5ca:	2b05      	cmp	r3, #5
 800f5cc:	d826      	bhi.n	800f61c <UART_SetConfig+0x7a0>
 800f5ce:	a201      	add	r2, pc, #4	; (adr r2, 800f5d4 <UART_SetConfig+0x758>)
 800f5d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5d4:	0800f5ed 	.word	0x0800f5ed
 800f5d8:	0800f5f5 	.word	0x0800f5f5
 800f5dc:	0800f5fd 	.word	0x0800f5fd
 800f5e0:	0800f605 	.word	0x0800f605
 800f5e4:	0800f60d 	.word	0x0800f60d
 800f5e8:	0800f615 	.word	0x0800f615
 800f5ec:	2302      	movs	r3, #2
 800f5ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5f2:	e01a      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f5f4:	2304      	movs	r3, #4
 800f5f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5fa:	e016      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f5fc:	2308      	movs	r3, #8
 800f5fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f602:	e012      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f604:	2310      	movs	r3, #16
 800f606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f60a:	e00e      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f60c:	2320      	movs	r3, #32
 800f60e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f612:	e00a      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f614:	2340      	movs	r3, #64	; 0x40
 800f616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f61a:	e006      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f61c:	2380      	movs	r3, #128	; 0x80
 800f61e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f622:	e002      	b.n	800f62a <UART_SetConfig+0x7ae>
 800f624:	2380      	movs	r3, #128	; 0x80
 800f626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	4a55      	ldr	r2, [pc, #340]	; (800f784 <UART_SetConfig+0x908>)
 800f630:	4293      	cmp	r3, r2
 800f632:	f040 80f8 	bne.w	800f826 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f636:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f63a:	2b20      	cmp	r3, #32
 800f63c:	dc46      	bgt.n	800f6cc <UART_SetConfig+0x850>
 800f63e:	2b02      	cmp	r3, #2
 800f640:	db75      	blt.n	800f72e <UART_SetConfig+0x8b2>
 800f642:	3b02      	subs	r3, #2
 800f644:	2b1e      	cmp	r3, #30
 800f646:	d872      	bhi.n	800f72e <UART_SetConfig+0x8b2>
 800f648:	a201      	add	r2, pc, #4	; (adr r2, 800f650 <UART_SetConfig+0x7d4>)
 800f64a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f64e:	bf00      	nop
 800f650:	0800f6d3 	.word	0x0800f6d3
 800f654:	0800f72f 	.word	0x0800f72f
 800f658:	0800f6db 	.word	0x0800f6db
 800f65c:	0800f72f 	.word	0x0800f72f
 800f660:	0800f72f 	.word	0x0800f72f
 800f664:	0800f72f 	.word	0x0800f72f
 800f668:	0800f6eb 	.word	0x0800f6eb
 800f66c:	0800f72f 	.word	0x0800f72f
 800f670:	0800f72f 	.word	0x0800f72f
 800f674:	0800f72f 	.word	0x0800f72f
 800f678:	0800f72f 	.word	0x0800f72f
 800f67c:	0800f72f 	.word	0x0800f72f
 800f680:	0800f72f 	.word	0x0800f72f
 800f684:	0800f72f 	.word	0x0800f72f
 800f688:	0800f6fb 	.word	0x0800f6fb
 800f68c:	0800f72f 	.word	0x0800f72f
 800f690:	0800f72f 	.word	0x0800f72f
 800f694:	0800f72f 	.word	0x0800f72f
 800f698:	0800f72f 	.word	0x0800f72f
 800f69c:	0800f72f 	.word	0x0800f72f
 800f6a0:	0800f72f 	.word	0x0800f72f
 800f6a4:	0800f72f 	.word	0x0800f72f
 800f6a8:	0800f72f 	.word	0x0800f72f
 800f6ac:	0800f72f 	.word	0x0800f72f
 800f6b0:	0800f72f 	.word	0x0800f72f
 800f6b4:	0800f72f 	.word	0x0800f72f
 800f6b8:	0800f72f 	.word	0x0800f72f
 800f6bc:	0800f72f 	.word	0x0800f72f
 800f6c0:	0800f72f 	.word	0x0800f72f
 800f6c4:	0800f72f 	.word	0x0800f72f
 800f6c8:	0800f721 	.word	0x0800f721
 800f6cc:	2b40      	cmp	r3, #64	; 0x40
 800f6ce:	d02a      	beq.n	800f726 <UART_SetConfig+0x8aa>
 800f6d0:	e02d      	b.n	800f72e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f6d2:	f7fc f971 	bl	800b9b8 <HAL_RCCEx_GetD3PCLK1Freq>
 800f6d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f6d8:	e02f      	b.n	800f73a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f6da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f7fc f980 	bl	800b9e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6e8:	e027      	b.n	800f73a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f6ea:	f107 0318 	add.w	r3, r7, #24
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	f7fc facc 	bl	800bc8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f6f4:	69fb      	ldr	r3, [r7, #28]
 800f6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6f8:	e01f      	b.n	800f73a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f6fa:	4b21      	ldr	r3, [pc, #132]	; (800f780 <UART_SetConfig+0x904>)
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	f003 0320 	and.w	r3, r3, #32
 800f702:	2b00      	cmp	r3, #0
 800f704:	d009      	beq.n	800f71a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f706:	4b1e      	ldr	r3, [pc, #120]	; (800f780 <UART_SetConfig+0x904>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	08db      	lsrs	r3, r3, #3
 800f70c:	f003 0303 	and.w	r3, r3, #3
 800f710:	4a1d      	ldr	r2, [pc, #116]	; (800f788 <UART_SetConfig+0x90c>)
 800f712:	fa22 f303 	lsr.w	r3, r2, r3
 800f716:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f718:	e00f      	b.n	800f73a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f71a:	4b1b      	ldr	r3, [pc, #108]	; (800f788 <UART_SetConfig+0x90c>)
 800f71c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f71e:	e00c      	b.n	800f73a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f720:	4b1a      	ldr	r3, [pc, #104]	; (800f78c <UART_SetConfig+0x910>)
 800f722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f724:	e009      	b.n	800f73a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f72a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f72c:	e005      	b.n	800f73a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f72e:	2300      	movs	r3, #0
 800f730:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f732:	2301      	movs	r3, #1
 800f734:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f738:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f73a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	f000 81ee 	beq.w	800fb1e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f742:	697b      	ldr	r3, [r7, #20]
 800f744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f746:	4a12      	ldr	r2, [pc, #72]	; (800f790 <UART_SetConfig+0x914>)
 800f748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f74c:	461a      	mov	r2, r3
 800f74e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f750:	fbb3 f3f2 	udiv	r3, r3, r2
 800f754:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f756:	697b      	ldr	r3, [r7, #20]
 800f758:	685a      	ldr	r2, [r3, #4]
 800f75a:	4613      	mov	r3, r2
 800f75c:	005b      	lsls	r3, r3, #1
 800f75e:	4413      	add	r3, r2
 800f760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f762:	429a      	cmp	r2, r3
 800f764:	d305      	bcc.n	800f772 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f766:	697b      	ldr	r3, [r7, #20]
 800f768:	685b      	ldr	r3, [r3, #4]
 800f76a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f76c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f76e:	429a      	cmp	r2, r3
 800f770:	d910      	bls.n	800f794 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800f772:	2301      	movs	r3, #1
 800f774:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f778:	e1d1      	b.n	800fb1e <UART_SetConfig+0xca2>
 800f77a:	bf00      	nop
 800f77c:	40011c00 	.word	0x40011c00
 800f780:	58024400 	.word	0x58024400
 800f784:	58000c00 	.word	0x58000c00
 800f788:	03d09000 	.word	0x03d09000
 800f78c:	003d0900 	.word	0x003d0900
 800f790:	08014ea8 	.word	0x08014ea8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f796:	2200      	movs	r2, #0
 800f798:	60bb      	str	r3, [r7, #8]
 800f79a:	60fa      	str	r2, [r7, #12]
 800f79c:	697b      	ldr	r3, [r7, #20]
 800f79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7a0:	4ac0      	ldr	r2, [pc, #768]	; (800faa4 <UART_SetConfig+0xc28>)
 800f7a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f7a6:	b29b      	uxth	r3, r3
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	603b      	str	r3, [r7, #0]
 800f7ac:	607a      	str	r2, [r7, #4]
 800f7ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f7b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f7b6:	f7f0 ffbf 	bl	8000738 <__aeabi_uldivmod>
 800f7ba:	4602      	mov	r2, r0
 800f7bc:	460b      	mov	r3, r1
 800f7be:	4610      	mov	r0, r2
 800f7c0:	4619      	mov	r1, r3
 800f7c2:	f04f 0200 	mov.w	r2, #0
 800f7c6:	f04f 0300 	mov.w	r3, #0
 800f7ca:	020b      	lsls	r3, r1, #8
 800f7cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f7d0:	0202      	lsls	r2, r0, #8
 800f7d2:	6979      	ldr	r1, [r7, #20]
 800f7d4:	6849      	ldr	r1, [r1, #4]
 800f7d6:	0849      	lsrs	r1, r1, #1
 800f7d8:	2000      	movs	r0, #0
 800f7da:	460c      	mov	r4, r1
 800f7dc:	4605      	mov	r5, r0
 800f7de:	eb12 0804 	adds.w	r8, r2, r4
 800f7e2:	eb43 0905 	adc.w	r9, r3, r5
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	685b      	ldr	r3, [r3, #4]
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	469a      	mov	sl, r3
 800f7ee:	4693      	mov	fp, r2
 800f7f0:	4652      	mov	r2, sl
 800f7f2:	465b      	mov	r3, fp
 800f7f4:	4640      	mov	r0, r8
 800f7f6:	4649      	mov	r1, r9
 800f7f8:	f7f0 ff9e 	bl	8000738 <__aeabi_uldivmod>
 800f7fc:	4602      	mov	r2, r0
 800f7fe:	460b      	mov	r3, r1
 800f800:	4613      	mov	r3, r2
 800f802:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f806:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f80a:	d308      	bcc.n	800f81e <UART_SetConfig+0x9a2>
 800f80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f80e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f812:	d204      	bcs.n	800f81e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f814:	697b      	ldr	r3, [r7, #20]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f81a:	60da      	str	r2, [r3, #12]
 800f81c:	e17f      	b.n	800fb1e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f81e:	2301      	movs	r3, #1
 800f820:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f824:	e17b      	b.n	800fb1e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	69db      	ldr	r3, [r3, #28]
 800f82a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f82e:	f040 80bd 	bne.w	800f9ac <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f832:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f836:	2b20      	cmp	r3, #32
 800f838:	dc48      	bgt.n	800f8cc <UART_SetConfig+0xa50>
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	db7b      	blt.n	800f936 <UART_SetConfig+0xaba>
 800f83e:	2b20      	cmp	r3, #32
 800f840:	d879      	bhi.n	800f936 <UART_SetConfig+0xaba>
 800f842:	a201      	add	r2, pc, #4	; (adr r2, 800f848 <UART_SetConfig+0x9cc>)
 800f844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f848:	0800f8d3 	.word	0x0800f8d3
 800f84c:	0800f8db 	.word	0x0800f8db
 800f850:	0800f937 	.word	0x0800f937
 800f854:	0800f937 	.word	0x0800f937
 800f858:	0800f8e3 	.word	0x0800f8e3
 800f85c:	0800f937 	.word	0x0800f937
 800f860:	0800f937 	.word	0x0800f937
 800f864:	0800f937 	.word	0x0800f937
 800f868:	0800f8f3 	.word	0x0800f8f3
 800f86c:	0800f937 	.word	0x0800f937
 800f870:	0800f937 	.word	0x0800f937
 800f874:	0800f937 	.word	0x0800f937
 800f878:	0800f937 	.word	0x0800f937
 800f87c:	0800f937 	.word	0x0800f937
 800f880:	0800f937 	.word	0x0800f937
 800f884:	0800f937 	.word	0x0800f937
 800f888:	0800f903 	.word	0x0800f903
 800f88c:	0800f937 	.word	0x0800f937
 800f890:	0800f937 	.word	0x0800f937
 800f894:	0800f937 	.word	0x0800f937
 800f898:	0800f937 	.word	0x0800f937
 800f89c:	0800f937 	.word	0x0800f937
 800f8a0:	0800f937 	.word	0x0800f937
 800f8a4:	0800f937 	.word	0x0800f937
 800f8a8:	0800f937 	.word	0x0800f937
 800f8ac:	0800f937 	.word	0x0800f937
 800f8b0:	0800f937 	.word	0x0800f937
 800f8b4:	0800f937 	.word	0x0800f937
 800f8b8:	0800f937 	.word	0x0800f937
 800f8bc:	0800f937 	.word	0x0800f937
 800f8c0:	0800f937 	.word	0x0800f937
 800f8c4:	0800f937 	.word	0x0800f937
 800f8c8:	0800f929 	.word	0x0800f929
 800f8cc:	2b40      	cmp	r3, #64	; 0x40
 800f8ce:	d02e      	beq.n	800f92e <UART_SetConfig+0xab2>
 800f8d0:	e031      	b.n	800f936 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f8d2:	f7fa f9d3 	bl	8009c7c <HAL_RCC_GetPCLK1Freq>
 800f8d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f8d8:	e033      	b.n	800f942 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f8da:	f7fa f9e5 	bl	8009ca8 <HAL_RCC_GetPCLK2Freq>
 800f8de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f8e0:	e02f      	b.n	800f942 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f8e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f7fc f87c 	bl	800b9e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f8f0:	e027      	b.n	800f942 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f8f2:	f107 0318 	add.w	r3, r7, #24
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f7fc f9c8 	bl	800bc8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f8fc:	69fb      	ldr	r3, [r7, #28]
 800f8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f900:	e01f      	b.n	800f942 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f902:	4b69      	ldr	r3, [pc, #420]	; (800faa8 <UART_SetConfig+0xc2c>)
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	f003 0320 	and.w	r3, r3, #32
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d009      	beq.n	800f922 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f90e:	4b66      	ldr	r3, [pc, #408]	; (800faa8 <UART_SetConfig+0xc2c>)
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	08db      	lsrs	r3, r3, #3
 800f914:	f003 0303 	and.w	r3, r3, #3
 800f918:	4a64      	ldr	r2, [pc, #400]	; (800faac <UART_SetConfig+0xc30>)
 800f91a:	fa22 f303 	lsr.w	r3, r2, r3
 800f91e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f920:	e00f      	b.n	800f942 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f922:	4b62      	ldr	r3, [pc, #392]	; (800faac <UART_SetConfig+0xc30>)
 800f924:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f926:	e00c      	b.n	800f942 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f928:	4b61      	ldr	r3, [pc, #388]	; (800fab0 <UART_SetConfig+0xc34>)
 800f92a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f92c:	e009      	b.n	800f942 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f92e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f932:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f934:	e005      	b.n	800f942 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f936:	2300      	movs	r3, #0
 800f938:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f93a:	2301      	movs	r3, #1
 800f93c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f940:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f944:	2b00      	cmp	r3, #0
 800f946:	f000 80ea 	beq.w	800fb1e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f94e:	4a55      	ldr	r2, [pc, #340]	; (800faa4 <UART_SetConfig+0xc28>)
 800f950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f954:	461a      	mov	r2, r3
 800f956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f958:	fbb3 f3f2 	udiv	r3, r3, r2
 800f95c:	005a      	lsls	r2, r3, #1
 800f95e:	697b      	ldr	r3, [r7, #20]
 800f960:	685b      	ldr	r3, [r3, #4]
 800f962:	085b      	lsrs	r3, r3, #1
 800f964:	441a      	add	r2, r3
 800f966:	697b      	ldr	r3, [r7, #20]
 800f968:	685b      	ldr	r3, [r3, #4]
 800f96a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f96e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f972:	2b0f      	cmp	r3, #15
 800f974:	d916      	bls.n	800f9a4 <UART_SetConfig+0xb28>
 800f976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f97c:	d212      	bcs.n	800f9a4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f980:	b29b      	uxth	r3, r3
 800f982:	f023 030f 	bic.w	r3, r3, #15
 800f986:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f98a:	085b      	lsrs	r3, r3, #1
 800f98c:	b29b      	uxth	r3, r3
 800f98e:	f003 0307 	and.w	r3, r3, #7
 800f992:	b29a      	uxth	r2, r3
 800f994:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f996:	4313      	orrs	r3, r2
 800f998:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f99a:	697b      	ldr	r3, [r7, #20]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f9a0:	60da      	str	r2, [r3, #12]
 800f9a2:	e0bc      	b.n	800fb1e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f9a4:	2301      	movs	r3, #1
 800f9a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f9aa:	e0b8      	b.n	800fb1e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f9ac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f9b0:	2b20      	cmp	r3, #32
 800f9b2:	dc4b      	bgt.n	800fa4c <UART_SetConfig+0xbd0>
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	f2c0 8087 	blt.w	800fac8 <UART_SetConfig+0xc4c>
 800f9ba:	2b20      	cmp	r3, #32
 800f9bc:	f200 8084 	bhi.w	800fac8 <UART_SetConfig+0xc4c>
 800f9c0:	a201      	add	r2, pc, #4	; (adr r2, 800f9c8 <UART_SetConfig+0xb4c>)
 800f9c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9c6:	bf00      	nop
 800f9c8:	0800fa53 	.word	0x0800fa53
 800f9cc:	0800fa5b 	.word	0x0800fa5b
 800f9d0:	0800fac9 	.word	0x0800fac9
 800f9d4:	0800fac9 	.word	0x0800fac9
 800f9d8:	0800fa63 	.word	0x0800fa63
 800f9dc:	0800fac9 	.word	0x0800fac9
 800f9e0:	0800fac9 	.word	0x0800fac9
 800f9e4:	0800fac9 	.word	0x0800fac9
 800f9e8:	0800fa73 	.word	0x0800fa73
 800f9ec:	0800fac9 	.word	0x0800fac9
 800f9f0:	0800fac9 	.word	0x0800fac9
 800f9f4:	0800fac9 	.word	0x0800fac9
 800f9f8:	0800fac9 	.word	0x0800fac9
 800f9fc:	0800fac9 	.word	0x0800fac9
 800fa00:	0800fac9 	.word	0x0800fac9
 800fa04:	0800fac9 	.word	0x0800fac9
 800fa08:	0800fa83 	.word	0x0800fa83
 800fa0c:	0800fac9 	.word	0x0800fac9
 800fa10:	0800fac9 	.word	0x0800fac9
 800fa14:	0800fac9 	.word	0x0800fac9
 800fa18:	0800fac9 	.word	0x0800fac9
 800fa1c:	0800fac9 	.word	0x0800fac9
 800fa20:	0800fac9 	.word	0x0800fac9
 800fa24:	0800fac9 	.word	0x0800fac9
 800fa28:	0800fac9 	.word	0x0800fac9
 800fa2c:	0800fac9 	.word	0x0800fac9
 800fa30:	0800fac9 	.word	0x0800fac9
 800fa34:	0800fac9 	.word	0x0800fac9
 800fa38:	0800fac9 	.word	0x0800fac9
 800fa3c:	0800fac9 	.word	0x0800fac9
 800fa40:	0800fac9 	.word	0x0800fac9
 800fa44:	0800fac9 	.word	0x0800fac9
 800fa48:	0800fabb 	.word	0x0800fabb
 800fa4c:	2b40      	cmp	r3, #64	; 0x40
 800fa4e:	d037      	beq.n	800fac0 <UART_SetConfig+0xc44>
 800fa50:	e03a      	b.n	800fac8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fa52:	f7fa f913 	bl	8009c7c <HAL_RCC_GetPCLK1Freq>
 800fa56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fa58:	e03c      	b.n	800fad4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fa5a:	f7fa f925 	bl	8009ca8 <HAL_RCC_GetPCLK2Freq>
 800fa5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fa60:	e038      	b.n	800fad4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fa62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fa66:	4618      	mov	r0, r3
 800fa68:	f7fb ffbc 	bl	800b9e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fa6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa70:	e030      	b.n	800fad4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fa72:	f107 0318 	add.w	r3, r7, #24
 800fa76:	4618      	mov	r0, r3
 800fa78:	f7fc f908 	bl	800bc8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fa7c:	69fb      	ldr	r3, [r7, #28]
 800fa7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa80:	e028      	b.n	800fad4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fa82:	4b09      	ldr	r3, [pc, #36]	; (800faa8 <UART_SetConfig+0xc2c>)
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	f003 0320 	and.w	r3, r3, #32
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d012      	beq.n	800fab4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fa8e:	4b06      	ldr	r3, [pc, #24]	; (800faa8 <UART_SetConfig+0xc2c>)
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	08db      	lsrs	r3, r3, #3
 800fa94:	f003 0303 	and.w	r3, r3, #3
 800fa98:	4a04      	ldr	r2, [pc, #16]	; (800faac <UART_SetConfig+0xc30>)
 800fa9a:	fa22 f303 	lsr.w	r3, r2, r3
 800fa9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800faa0:	e018      	b.n	800fad4 <UART_SetConfig+0xc58>
 800faa2:	bf00      	nop
 800faa4:	08014ea8 	.word	0x08014ea8
 800faa8:	58024400 	.word	0x58024400
 800faac:	03d09000 	.word	0x03d09000
 800fab0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800fab4:	4b24      	ldr	r3, [pc, #144]	; (800fb48 <UART_SetConfig+0xccc>)
 800fab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fab8:	e00c      	b.n	800fad4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800faba:	4b24      	ldr	r3, [pc, #144]	; (800fb4c <UART_SetConfig+0xcd0>)
 800fabc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fabe:	e009      	b.n	800fad4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fac0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fac4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fac6:	e005      	b.n	800fad4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800fac8:	2300      	movs	r3, #0
 800faca:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800facc:	2301      	movs	r3, #1
 800face:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fad2:	bf00      	nop
    }

    if (pclk != 0U)
 800fad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d021      	beq.n	800fb1e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fada:	697b      	ldr	r3, [r7, #20]
 800fadc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fade:	4a1c      	ldr	r2, [pc, #112]	; (800fb50 <UART_SetConfig+0xcd4>)
 800fae0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fae4:	461a      	mov	r2, r3
 800fae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fae8:	fbb3 f2f2 	udiv	r2, r3, r2
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	685b      	ldr	r3, [r3, #4]
 800faf0:	085b      	lsrs	r3, r3, #1
 800faf2:	441a      	add	r2, r3
 800faf4:	697b      	ldr	r3, [r7, #20]
 800faf6:	685b      	ldr	r3, [r3, #4]
 800faf8:	fbb2 f3f3 	udiv	r3, r2, r3
 800fafc:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb00:	2b0f      	cmp	r3, #15
 800fb02:	d909      	bls.n	800fb18 <UART_SetConfig+0xc9c>
 800fb04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb0a:	d205      	bcs.n	800fb18 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fb0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb0e:	b29a      	uxth	r2, r3
 800fb10:	697b      	ldr	r3, [r7, #20]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	60da      	str	r2, [r3, #12]
 800fb16:	e002      	b.n	800fb1e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800fb18:	2301      	movs	r3, #1
 800fb1a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fb1e:	697b      	ldr	r3, [r7, #20]
 800fb20:	2201      	movs	r2, #1
 800fb22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800fb26:	697b      	ldr	r3, [r7, #20]
 800fb28:	2201      	movs	r2, #1
 800fb2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fb2e:	697b      	ldr	r3, [r7, #20]
 800fb30:	2200      	movs	r2, #0
 800fb32:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800fb34:	697b      	ldr	r3, [r7, #20]
 800fb36:	2200      	movs	r2, #0
 800fb38:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800fb3a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800fb3e:	4618      	mov	r0, r3
 800fb40:	3748      	adds	r7, #72	; 0x48
 800fb42:	46bd      	mov	sp, r7
 800fb44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fb48:	03d09000 	.word	0x03d09000
 800fb4c:	003d0900 	.word	0x003d0900
 800fb50:	08014ea8 	.word	0x08014ea8

0800fb54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fb54:	b480      	push	{r7}
 800fb56:	b083      	sub	sp, #12
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb60:	f003 0301 	and.w	r3, r3, #1
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d00a      	beq.n	800fb7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	685b      	ldr	r3, [r3, #4]
 800fb6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	430a      	orrs	r2, r1
 800fb7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb82:	f003 0302 	and.w	r3, r3, #2
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d00a      	beq.n	800fba0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	685b      	ldr	r3, [r3, #4]
 800fb90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	430a      	orrs	r2, r1
 800fb9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fba4:	f003 0304 	and.w	r3, r3, #4
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d00a      	beq.n	800fbc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	685b      	ldr	r3, [r3, #4]
 800fbb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	430a      	orrs	r2, r1
 800fbc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbc6:	f003 0308 	and.w	r3, r3, #8
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d00a      	beq.n	800fbe4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	685b      	ldr	r3, [r3, #4]
 800fbd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	430a      	orrs	r2, r1
 800fbe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbe8:	f003 0310 	and.w	r3, r3, #16
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d00a      	beq.n	800fc06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	689b      	ldr	r3, [r3, #8]
 800fbf6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	430a      	orrs	r2, r1
 800fc04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc0a:	f003 0320 	and.w	r3, r3, #32
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d00a      	beq.n	800fc28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	689b      	ldr	r3, [r3, #8]
 800fc18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	430a      	orrs	r2, r1
 800fc26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d01a      	beq.n	800fc6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	685b      	ldr	r3, [r3, #4]
 800fc3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	430a      	orrs	r2, r1
 800fc48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fc52:	d10a      	bne.n	800fc6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	685b      	ldr	r3, [r3, #4]
 800fc5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	430a      	orrs	r2, r1
 800fc68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d00a      	beq.n	800fc8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	685b      	ldr	r3, [r3, #4]
 800fc7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	430a      	orrs	r2, r1
 800fc8a:	605a      	str	r2, [r3, #4]
  }
}
 800fc8c:	bf00      	nop
 800fc8e:	370c      	adds	r7, #12
 800fc90:	46bd      	mov	sp, r7
 800fc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc96:	4770      	bx	lr

0800fc98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b098      	sub	sp, #96	; 0x60
 800fc9c:	af02      	add	r7, sp, #8
 800fc9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2200      	movs	r2, #0
 800fca4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fca8:	f7f3 fa76 	bl	8003198 <HAL_GetTick>
 800fcac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	f003 0308 	and.w	r3, r3, #8
 800fcb8:	2b08      	cmp	r3, #8
 800fcba:	d12f      	bne.n	800fd1c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fcbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fcc0:	9300      	str	r3, [sp, #0]
 800fcc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fcca:	6878      	ldr	r0, [r7, #4]
 800fccc:	f000 f88e 	bl	800fdec <UART_WaitOnFlagUntilTimeout>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d022      	beq.n	800fd1c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcde:	e853 3f00 	ldrex	r3, [r3]
 800fce2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fce6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fcea:	653b      	str	r3, [r7, #80]	; 0x50
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	461a      	mov	r2, r3
 800fcf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcf4:	647b      	str	r3, [r7, #68]	; 0x44
 800fcf6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcf8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fcfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fcfc:	e841 2300 	strex	r3, r2, [r1]
 800fd00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fd02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d1e6      	bne.n	800fcd6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	2220      	movs	r2, #32
 800fd0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	2200      	movs	r2, #0
 800fd14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fd18:	2303      	movs	r3, #3
 800fd1a:	e063      	b.n	800fde4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	f003 0304 	and.w	r3, r3, #4
 800fd26:	2b04      	cmp	r3, #4
 800fd28:	d149      	bne.n	800fdbe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fd2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fd2e:	9300      	str	r3, [sp, #0]
 800fd30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd32:	2200      	movs	r2, #0
 800fd34:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f000 f857 	bl	800fdec <UART_WaitOnFlagUntilTimeout>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d03c      	beq.n	800fdbe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd4c:	e853 3f00 	ldrex	r3, [r3]
 800fd50:	623b      	str	r3, [r7, #32]
   return(result);
 800fd52:	6a3b      	ldr	r3, [r7, #32]
 800fd54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fd58:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	461a      	mov	r2, r3
 800fd60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd62:	633b      	str	r3, [r7, #48]	; 0x30
 800fd64:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd6a:	e841 2300 	strex	r3, r2, [r1]
 800fd6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d1e6      	bne.n	800fd44 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	3308      	adds	r3, #8
 800fd7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd7e:	693b      	ldr	r3, [r7, #16]
 800fd80:	e853 3f00 	ldrex	r3, [r3]
 800fd84:	60fb      	str	r3, [r7, #12]
   return(result);
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	f023 0301 	bic.w	r3, r3, #1
 800fd8c:	64bb      	str	r3, [r7, #72]	; 0x48
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	3308      	adds	r3, #8
 800fd94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd96:	61fa      	str	r2, [r7, #28]
 800fd98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd9a:	69b9      	ldr	r1, [r7, #24]
 800fd9c:	69fa      	ldr	r2, [r7, #28]
 800fd9e:	e841 2300 	strex	r3, r2, [r1]
 800fda2:	617b      	str	r3, [r7, #20]
   return(result);
 800fda4:	697b      	ldr	r3, [r7, #20]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d1e5      	bne.n	800fd76 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	2220      	movs	r2, #32
 800fdae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fdba:	2303      	movs	r3, #3
 800fdbc:	e012      	b.n	800fde4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	2220      	movs	r2, #32
 800fdc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	2220      	movs	r2, #32
 800fdca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	2200      	movs	r2, #0
 800fdde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fde2:	2300      	movs	r3, #0
}
 800fde4:	4618      	mov	r0, r3
 800fde6:	3758      	adds	r7, #88	; 0x58
 800fde8:	46bd      	mov	sp, r7
 800fdea:	bd80      	pop	{r7, pc}

0800fdec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b084      	sub	sp, #16
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	60f8      	str	r0, [r7, #12]
 800fdf4:	60b9      	str	r1, [r7, #8]
 800fdf6:	603b      	str	r3, [r7, #0]
 800fdf8:	4613      	mov	r3, r2
 800fdfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fdfc:	e049      	b.n	800fe92 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fdfe:	69bb      	ldr	r3, [r7, #24]
 800fe00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe04:	d045      	beq.n	800fe92 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fe06:	f7f3 f9c7 	bl	8003198 <HAL_GetTick>
 800fe0a:	4602      	mov	r2, r0
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	1ad3      	subs	r3, r2, r3
 800fe10:	69ba      	ldr	r2, [r7, #24]
 800fe12:	429a      	cmp	r2, r3
 800fe14:	d302      	bcc.n	800fe1c <UART_WaitOnFlagUntilTimeout+0x30>
 800fe16:	69bb      	ldr	r3, [r7, #24]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d101      	bne.n	800fe20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fe1c:	2303      	movs	r3, #3
 800fe1e:	e048      	b.n	800feb2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	f003 0304 	and.w	r3, r3, #4
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d031      	beq.n	800fe92 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	69db      	ldr	r3, [r3, #28]
 800fe34:	f003 0308 	and.w	r3, r3, #8
 800fe38:	2b08      	cmp	r3, #8
 800fe3a:	d110      	bne.n	800fe5e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	2208      	movs	r2, #8
 800fe42:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800fe44:	68f8      	ldr	r0, [r7, #12]
 800fe46:	f000 f839 	bl	800febc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	2208      	movs	r2, #8
 800fe4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	2200      	movs	r2, #0
 800fe56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800fe5a:	2301      	movs	r3, #1
 800fe5c:	e029      	b.n	800feb2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	69db      	ldr	r3, [r3, #28]
 800fe64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fe68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fe6c:	d111      	bne.n	800fe92 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fe76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fe78:	68f8      	ldr	r0, [r7, #12]
 800fe7a:	f000 f81f 	bl	800febc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	2220      	movs	r2, #32
 800fe82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	2200      	movs	r2, #0
 800fe8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800fe8e:	2303      	movs	r3, #3
 800fe90:	e00f      	b.n	800feb2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	69da      	ldr	r2, [r3, #28]
 800fe98:	68bb      	ldr	r3, [r7, #8]
 800fe9a:	4013      	ands	r3, r2
 800fe9c:	68ba      	ldr	r2, [r7, #8]
 800fe9e:	429a      	cmp	r2, r3
 800fea0:	bf0c      	ite	eq
 800fea2:	2301      	moveq	r3, #1
 800fea4:	2300      	movne	r3, #0
 800fea6:	b2db      	uxtb	r3, r3
 800fea8:	461a      	mov	r2, r3
 800feaa:	79fb      	ldrb	r3, [r7, #7]
 800feac:	429a      	cmp	r2, r3
 800feae:	d0a6      	beq.n	800fdfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800feb0:	2300      	movs	r3, #0
}
 800feb2:	4618      	mov	r0, r3
 800feb4:	3710      	adds	r7, #16
 800feb6:	46bd      	mov	sp, r7
 800feb8:	bd80      	pop	{r7, pc}
	...

0800febc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800febc:	b480      	push	{r7}
 800febe:	b095      	sub	sp, #84	; 0x54
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800feca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fecc:	e853 3f00 	ldrex	r3, [r3]
 800fed0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fed4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fed8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	461a      	mov	r2, r3
 800fee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fee2:	643b      	str	r3, [r7, #64]	; 0x40
 800fee4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fee6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fee8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800feea:	e841 2300 	strex	r3, r2, [r1]
 800feee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d1e6      	bne.n	800fec4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	3308      	adds	r3, #8
 800fefc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fefe:	6a3b      	ldr	r3, [r7, #32]
 800ff00:	e853 3f00 	ldrex	r3, [r3]
 800ff04:	61fb      	str	r3, [r7, #28]
   return(result);
 800ff06:	69fa      	ldr	r2, [r7, #28]
 800ff08:	4b1e      	ldr	r3, [pc, #120]	; (800ff84 <UART_EndRxTransfer+0xc8>)
 800ff0a:	4013      	ands	r3, r2
 800ff0c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	3308      	adds	r3, #8
 800ff14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ff16:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ff18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ff1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff1e:	e841 2300 	strex	r3, r2, [r1]
 800ff22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ff24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d1e5      	bne.n	800fef6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff2e:	2b01      	cmp	r3, #1
 800ff30:	d118      	bne.n	800ff64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	e853 3f00 	ldrex	r3, [r3]
 800ff3e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ff40:	68bb      	ldr	r3, [r7, #8]
 800ff42:	f023 0310 	bic.w	r3, r3, #16
 800ff46:	647b      	str	r3, [r7, #68]	; 0x44
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	461a      	mov	r2, r3
 800ff4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff50:	61bb      	str	r3, [r7, #24]
 800ff52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff54:	6979      	ldr	r1, [r7, #20]
 800ff56:	69ba      	ldr	r2, [r7, #24]
 800ff58:	e841 2300 	strex	r3, r2, [r1]
 800ff5c:	613b      	str	r3, [r7, #16]
   return(result);
 800ff5e:	693b      	ldr	r3, [r7, #16]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d1e6      	bne.n	800ff32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	2220      	movs	r2, #32
 800ff68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2200      	movs	r2, #0
 800ff70:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	2200      	movs	r2, #0
 800ff76:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ff78:	bf00      	nop
 800ff7a:	3754      	adds	r7, #84	; 0x54
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff82:	4770      	bx	lr
 800ff84:	effffffe 	.word	0xeffffffe

0800ff88 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ff88:	b480      	push	{r7}
 800ff8a:	b085      	sub	sp, #20
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ff96:	2b01      	cmp	r3, #1
 800ff98:	d101      	bne.n	800ff9e <HAL_UARTEx_DisableFifoMode+0x16>
 800ff9a:	2302      	movs	r3, #2
 800ff9c:	e027      	b.n	800ffee <HAL_UARTEx_DisableFifoMode+0x66>
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	2201      	movs	r2, #1
 800ffa2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	2224      	movs	r2, #36	; 0x24
 800ffaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	681a      	ldr	r2, [r3, #0]
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	f022 0201 	bic.w	r2, r2, #1
 800ffc4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ffcc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	68fa      	ldr	r2, [r7, #12]
 800ffda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	2220      	movs	r2, #32
 800ffe0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ffec:	2300      	movs	r3, #0
}
 800ffee:	4618      	mov	r0, r3
 800fff0:	3714      	adds	r7, #20
 800fff2:	46bd      	mov	sp, r7
 800fff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff8:	4770      	bx	lr

0800fffa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fffa:	b580      	push	{r7, lr}
 800fffc:	b084      	sub	sp, #16
 800fffe:	af00      	add	r7, sp, #0
 8010000:	6078      	str	r0, [r7, #4]
 8010002:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801000a:	2b01      	cmp	r3, #1
 801000c:	d101      	bne.n	8010012 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801000e:	2302      	movs	r3, #2
 8010010:	e02d      	b.n	801006e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	2201      	movs	r2, #1
 8010016:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	2224      	movs	r2, #36	; 0x24
 801001e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	681a      	ldr	r2, [r3, #0]
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	f022 0201 	bic.w	r2, r2, #1
 8010038:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	689b      	ldr	r3, [r3, #8]
 8010040:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	683a      	ldr	r2, [r7, #0]
 801004a:	430a      	orrs	r2, r1
 801004c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801004e:	6878      	ldr	r0, [r7, #4]
 8010050:	f000 f850 	bl	80100f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	68fa      	ldr	r2, [r7, #12]
 801005a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2220      	movs	r2, #32
 8010060:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	2200      	movs	r2, #0
 8010068:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801006c:	2300      	movs	r3, #0
}
 801006e:	4618      	mov	r0, r3
 8010070:	3710      	adds	r7, #16
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}

08010076 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010076:	b580      	push	{r7, lr}
 8010078:	b084      	sub	sp, #16
 801007a:	af00      	add	r7, sp, #0
 801007c:	6078      	str	r0, [r7, #4]
 801007e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010086:	2b01      	cmp	r3, #1
 8010088:	d101      	bne.n	801008e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801008a:	2302      	movs	r3, #2
 801008c:	e02d      	b.n	80100ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	2201      	movs	r2, #1
 8010092:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2224      	movs	r2, #36	; 0x24
 801009a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	681a      	ldr	r2, [r3, #0]
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	f022 0201 	bic.w	r2, r2, #1
 80100b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	689b      	ldr	r3, [r3, #8]
 80100bc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	683a      	ldr	r2, [r7, #0]
 80100c6:	430a      	orrs	r2, r1
 80100c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80100ca:	6878      	ldr	r0, [r7, #4]
 80100cc:	f000 f812 	bl	80100f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	68fa      	ldr	r2, [r7, #12]
 80100d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	2220      	movs	r2, #32
 80100dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	2200      	movs	r2, #0
 80100e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80100e8:	2300      	movs	r3, #0
}
 80100ea:	4618      	mov	r0, r3
 80100ec:	3710      	adds	r7, #16
 80100ee:	46bd      	mov	sp, r7
 80100f0:	bd80      	pop	{r7, pc}
	...

080100f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80100f4:	b480      	push	{r7}
 80100f6:	b085      	sub	sp, #20
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010100:	2b00      	cmp	r3, #0
 8010102:	d108      	bne.n	8010116 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2201      	movs	r2, #1
 8010108:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	2201      	movs	r2, #1
 8010110:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010114:	e031      	b.n	801017a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010116:	2310      	movs	r3, #16
 8010118:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801011a:	2310      	movs	r3, #16
 801011c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	689b      	ldr	r3, [r3, #8]
 8010124:	0e5b      	lsrs	r3, r3, #25
 8010126:	b2db      	uxtb	r3, r3
 8010128:	f003 0307 	and.w	r3, r3, #7
 801012c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	689b      	ldr	r3, [r3, #8]
 8010134:	0f5b      	lsrs	r3, r3, #29
 8010136:	b2db      	uxtb	r3, r3
 8010138:	f003 0307 	and.w	r3, r3, #7
 801013c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801013e:	7bbb      	ldrb	r3, [r7, #14]
 8010140:	7b3a      	ldrb	r2, [r7, #12]
 8010142:	4911      	ldr	r1, [pc, #68]	; (8010188 <UARTEx_SetNbDataToProcess+0x94>)
 8010144:	5c8a      	ldrb	r2, [r1, r2]
 8010146:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801014a:	7b3a      	ldrb	r2, [r7, #12]
 801014c:	490f      	ldr	r1, [pc, #60]	; (801018c <UARTEx_SetNbDataToProcess+0x98>)
 801014e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010150:	fb93 f3f2 	sdiv	r3, r3, r2
 8010154:	b29a      	uxth	r2, r3
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801015c:	7bfb      	ldrb	r3, [r7, #15]
 801015e:	7b7a      	ldrb	r2, [r7, #13]
 8010160:	4909      	ldr	r1, [pc, #36]	; (8010188 <UARTEx_SetNbDataToProcess+0x94>)
 8010162:	5c8a      	ldrb	r2, [r1, r2]
 8010164:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010168:	7b7a      	ldrb	r2, [r7, #13]
 801016a:	4908      	ldr	r1, [pc, #32]	; (801018c <UARTEx_SetNbDataToProcess+0x98>)
 801016c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801016e:	fb93 f3f2 	sdiv	r3, r3, r2
 8010172:	b29a      	uxth	r2, r3
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801017a:	bf00      	nop
 801017c:	3714      	adds	r7, #20
 801017e:	46bd      	mov	sp, r7
 8010180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010184:	4770      	bx	lr
 8010186:	bf00      	nop
 8010188:	08014ec0 	.word	0x08014ec0
 801018c:	08014ec8 	.word	0x08014ec8

08010190 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010190:	b084      	sub	sp, #16
 8010192:	b580      	push	{r7, lr}
 8010194:	b084      	sub	sp, #16
 8010196:	af00      	add	r7, sp, #0
 8010198:	6078      	str	r0, [r7, #4]
 801019a:	f107 001c 	add.w	r0, r7, #28
 801019e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80101a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101a4:	2b01      	cmp	r3, #1
 80101a6:	d120      	bne.n	80101ea <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	68da      	ldr	r2, [r3, #12]
 80101b8:	4b2a      	ldr	r3, [pc, #168]	; (8010264 <USB_CoreInit+0xd4>)
 80101ba:	4013      	ands	r3, r2
 80101bc:	687a      	ldr	r2, [r7, #4]
 80101be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	68db      	ldr	r3, [r3, #12]
 80101c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80101cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101ce:	2b01      	cmp	r3, #1
 80101d0:	d105      	bne.n	80101de <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	68db      	ldr	r3, [r3, #12]
 80101d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80101de:	6878      	ldr	r0, [r7, #4]
 80101e0:	f000 faac 	bl	801073c <USB_CoreReset>
 80101e4:	4603      	mov	r3, r0
 80101e6:	73fb      	strb	r3, [r7, #15]
 80101e8:	e01a      	b.n	8010220 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	68db      	ldr	r3, [r3, #12]
 80101ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80101f6:	6878      	ldr	r0, [r7, #4]
 80101f8:	f000 faa0 	bl	801073c <USB_CoreReset>
 80101fc:	4603      	mov	r3, r0
 80101fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8010200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010202:	2b00      	cmp	r3, #0
 8010204:	d106      	bne.n	8010214 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801020a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	639a      	str	r2, [r3, #56]	; 0x38
 8010212:	e005      	b.n	8010220 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010218:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8010220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010222:	2b01      	cmp	r3, #1
 8010224:	d116      	bne.n	8010254 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801022a:	b29a      	uxth	r2, r3
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010234:	4b0c      	ldr	r3, [pc, #48]	; (8010268 <USB_CoreInit+0xd8>)
 8010236:	4313      	orrs	r3, r2
 8010238:	687a      	ldr	r2, [r7, #4]
 801023a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	689b      	ldr	r3, [r3, #8]
 8010240:	f043 0206 	orr.w	r2, r3, #6
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	689b      	ldr	r3, [r3, #8]
 801024c:	f043 0220 	orr.w	r2, r3, #32
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8010254:	7bfb      	ldrb	r3, [r7, #15]
}
 8010256:	4618      	mov	r0, r3
 8010258:	3710      	adds	r7, #16
 801025a:	46bd      	mov	sp, r7
 801025c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010260:	b004      	add	sp, #16
 8010262:	4770      	bx	lr
 8010264:	ffbdffbf 	.word	0xffbdffbf
 8010268:	03ee0000 	.word	0x03ee0000

0801026c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801026c:	b480      	push	{r7}
 801026e:	b083      	sub	sp, #12
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	689b      	ldr	r3, [r3, #8]
 8010278:	f023 0201 	bic.w	r2, r3, #1
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010280:	2300      	movs	r3, #0
}
 8010282:	4618      	mov	r0, r3
 8010284:	370c      	adds	r7, #12
 8010286:	46bd      	mov	sp, r7
 8010288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028c:	4770      	bx	lr

0801028e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801028e:	b580      	push	{r7, lr}
 8010290:	b084      	sub	sp, #16
 8010292:	af00      	add	r7, sp, #0
 8010294:	6078      	str	r0, [r7, #4]
 8010296:	460b      	mov	r3, r1
 8010298:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801029a:	2300      	movs	r3, #0
 801029c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	68db      	ldr	r3, [r3, #12]
 80102a2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80102aa:	78fb      	ldrb	r3, [r7, #3]
 80102ac:	2b01      	cmp	r3, #1
 80102ae:	d115      	bne.n	80102dc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	68db      	ldr	r3, [r3, #12]
 80102b4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80102bc:	2001      	movs	r0, #1
 80102be:	f7f2 ff77 	bl	80031b0 <HAL_Delay>
      ms++;
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	3301      	adds	r3, #1
 80102c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80102c8:	6878      	ldr	r0, [r7, #4]
 80102ca:	f000 fa29 	bl	8010720 <USB_GetMode>
 80102ce:	4603      	mov	r3, r0
 80102d0:	2b01      	cmp	r3, #1
 80102d2:	d01e      	beq.n	8010312 <USB_SetCurrentMode+0x84>
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	2b31      	cmp	r3, #49	; 0x31
 80102d8:	d9f0      	bls.n	80102bc <USB_SetCurrentMode+0x2e>
 80102da:	e01a      	b.n	8010312 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80102dc:	78fb      	ldrb	r3, [r7, #3]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d115      	bne.n	801030e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	68db      	ldr	r3, [r3, #12]
 80102e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80102ee:	2001      	movs	r0, #1
 80102f0:	f7f2 ff5e 	bl	80031b0 <HAL_Delay>
      ms++;
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	3301      	adds	r3, #1
 80102f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80102fa:	6878      	ldr	r0, [r7, #4]
 80102fc:	f000 fa10 	bl	8010720 <USB_GetMode>
 8010300:	4603      	mov	r3, r0
 8010302:	2b00      	cmp	r3, #0
 8010304:	d005      	beq.n	8010312 <USB_SetCurrentMode+0x84>
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	2b31      	cmp	r3, #49	; 0x31
 801030a:	d9f0      	bls.n	80102ee <USB_SetCurrentMode+0x60>
 801030c:	e001      	b.n	8010312 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801030e:	2301      	movs	r3, #1
 8010310:	e005      	b.n	801031e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	2b32      	cmp	r3, #50	; 0x32
 8010316:	d101      	bne.n	801031c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8010318:	2301      	movs	r3, #1
 801031a:	e000      	b.n	801031e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801031c:	2300      	movs	r3, #0
}
 801031e:	4618      	mov	r0, r3
 8010320:	3710      	adds	r7, #16
 8010322:	46bd      	mov	sp, r7
 8010324:	bd80      	pop	{r7, pc}
	...

08010328 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010328:	b084      	sub	sp, #16
 801032a:	b580      	push	{r7, lr}
 801032c:	b086      	sub	sp, #24
 801032e:	af00      	add	r7, sp, #0
 8010330:	6078      	str	r0, [r7, #4]
 8010332:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010336:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801033a:	2300      	movs	r3, #0
 801033c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010342:	2300      	movs	r3, #0
 8010344:	613b      	str	r3, [r7, #16]
 8010346:	e009      	b.n	801035c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010348:	687a      	ldr	r2, [r7, #4]
 801034a:	693b      	ldr	r3, [r7, #16]
 801034c:	3340      	adds	r3, #64	; 0x40
 801034e:	009b      	lsls	r3, r3, #2
 8010350:	4413      	add	r3, r2
 8010352:	2200      	movs	r2, #0
 8010354:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010356:	693b      	ldr	r3, [r7, #16]
 8010358:	3301      	adds	r3, #1
 801035a:	613b      	str	r3, [r7, #16]
 801035c:	693b      	ldr	r3, [r7, #16]
 801035e:	2b0e      	cmp	r3, #14
 8010360:	d9f2      	bls.n	8010348 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010364:	2b00      	cmp	r3, #0
 8010366:	d11c      	bne.n	80103a2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801036e:	685b      	ldr	r3, [r3, #4]
 8010370:	68fa      	ldr	r2, [r7, #12]
 8010372:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010376:	f043 0302 	orr.w	r3, r3, #2
 801037a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010380:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	601a      	str	r2, [r3, #0]
 80103a0:	e005      	b.n	80103ae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80103b4:	461a      	mov	r2, r3
 80103b6:	2300      	movs	r3, #0
 80103b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103c0:	4619      	mov	r1, r3
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103c8:	461a      	mov	r2, r3
 80103ca:	680b      	ldr	r3, [r1, #0]
 80103cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80103ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103d0:	2b01      	cmp	r3, #1
 80103d2:	d10c      	bne.n	80103ee <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80103d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d104      	bne.n	80103e4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80103da:	2100      	movs	r1, #0
 80103dc:	6878      	ldr	r0, [r7, #4]
 80103de:	f000 f965 	bl	80106ac <USB_SetDevSpeed>
 80103e2:	e008      	b.n	80103f6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80103e4:	2101      	movs	r1, #1
 80103e6:	6878      	ldr	r0, [r7, #4]
 80103e8:	f000 f960 	bl	80106ac <USB_SetDevSpeed>
 80103ec:	e003      	b.n	80103f6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80103ee:	2103      	movs	r1, #3
 80103f0:	6878      	ldr	r0, [r7, #4]
 80103f2:	f000 f95b 	bl	80106ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80103f6:	2110      	movs	r1, #16
 80103f8:	6878      	ldr	r0, [r7, #4]
 80103fa:	f000 f8f3 	bl	80105e4 <USB_FlushTxFifo>
 80103fe:	4603      	mov	r3, r0
 8010400:	2b00      	cmp	r3, #0
 8010402:	d001      	beq.n	8010408 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8010404:	2301      	movs	r3, #1
 8010406:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010408:	6878      	ldr	r0, [r7, #4]
 801040a:	f000 f91f 	bl	801064c <USB_FlushRxFifo>
 801040e:	4603      	mov	r3, r0
 8010410:	2b00      	cmp	r3, #0
 8010412:	d001      	beq.n	8010418 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8010414:	2301      	movs	r3, #1
 8010416:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801041e:	461a      	mov	r2, r3
 8010420:	2300      	movs	r3, #0
 8010422:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801042a:	461a      	mov	r2, r3
 801042c:	2300      	movs	r3, #0
 801042e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010436:	461a      	mov	r2, r3
 8010438:	2300      	movs	r3, #0
 801043a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801043c:	2300      	movs	r3, #0
 801043e:	613b      	str	r3, [r7, #16]
 8010440:	e043      	b.n	80104ca <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010442:	693b      	ldr	r3, [r7, #16]
 8010444:	015a      	lsls	r2, r3, #5
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	4413      	add	r3, r2
 801044a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010454:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010458:	d118      	bne.n	801048c <USB_DevInit+0x164>
    {
      if (i == 0U)
 801045a:	693b      	ldr	r3, [r7, #16]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d10a      	bne.n	8010476 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010460:	693b      	ldr	r3, [r7, #16]
 8010462:	015a      	lsls	r2, r3, #5
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	4413      	add	r3, r2
 8010468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801046c:	461a      	mov	r2, r3
 801046e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010472:	6013      	str	r3, [r2, #0]
 8010474:	e013      	b.n	801049e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010476:	693b      	ldr	r3, [r7, #16]
 8010478:	015a      	lsls	r2, r3, #5
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	4413      	add	r3, r2
 801047e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010482:	461a      	mov	r2, r3
 8010484:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010488:	6013      	str	r3, [r2, #0]
 801048a:	e008      	b.n	801049e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801048c:	693b      	ldr	r3, [r7, #16]
 801048e:	015a      	lsls	r2, r3, #5
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	4413      	add	r3, r2
 8010494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010498:	461a      	mov	r2, r3
 801049a:	2300      	movs	r3, #0
 801049c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801049e:	693b      	ldr	r3, [r7, #16]
 80104a0:	015a      	lsls	r2, r3, #5
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	4413      	add	r3, r2
 80104a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104aa:	461a      	mov	r2, r3
 80104ac:	2300      	movs	r3, #0
 80104ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80104b0:	693b      	ldr	r3, [r7, #16]
 80104b2:	015a      	lsls	r2, r3, #5
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	4413      	add	r3, r2
 80104b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104bc:	461a      	mov	r2, r3
 80104be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80104c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80104c4:	693b      	ldr	r3, [r7, #16]
 80104c6:	3301      	adds	r3, #1
 80104c8:	613b      	str	r3, [r7, #16]
 80104ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104cc:	693a      	ldr	r2, [r7, #16]
 80104ce:	429a      	cmp	r2, r3
 80104d0:	d3b7      	bcc.n	8010442 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80104d2:	2300      	movs	r3, #0
 80104d4:	613b      	str	r3, [r7, #16]
 80104d6:	e043      	b.n	8010560 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80104d8:	693b      	ldr	r3, [r7, #16]
 80104da:	015a      	lsls	r2, r3, #5
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	4413      	add	r3, r2
 80104e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80104ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80104ee:	d118      	bne.n	8010522 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80104f0:	693b      	ldr	r3, [r7, #16]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d10a      	bne.n	801050c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80104f6:	693b      	ldr	r3, [r7, #16]
 80104f8:	015a      	lsls	r2, r3, #5
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	4413      	add	r3, r2
 80104fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010502:	461a      	mov	r2, r3
 8010504:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010508:	6013      	str	r3, [r2, #0]
 801050a:	e013      	b.n	8010534 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801050c:	693b      	ldr	r3, [r7, #16]
 801050e:	015a      	lsls	r2, r3, #5
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	4413      	add	r3, r2
 8010514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010518:	461a      	mov	r2, r3
 801051a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801051e:	6013      	str	r3, [r2, #0]
 8010520:	e008      	b.n	8010534 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010522:	693b      	ldr	r3, [r7, #16]
 8010524:	015a      	lsls	r2, r3, #5
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	4413      	add	r3, r2
 801052a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801052e:	461a      	mov	r2, r3
 8010530:	2300      	movs	r3, #0
 8010532:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010534:	693b      	ldr	r3, [r7, #16]
 8010536:	015a      	lsls	r2, r3, #5
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	4413      	add	r3, r2
 801053c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010540:	461a      	mov	r2, r3
 8010542:	2300      	movs	r3, #0
 8010544:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010546:	693b      	ldr	r3, [r7, #16]
 8010548:	015a      	lsls	r2, r3, #5
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	4413      	add	r3, r2
 801054e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010552:	461a      	mov	r2, r3
 8010554:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010558:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801055a:	693b      	ldr	r3, [r7, #16]
 801055c:	3301      	adds	r3, #1
 801055e:	613b      	str	r3, [r7, #16]
 8010560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010562:	693a      	ldr	r2, [r7, #16]
 8010564:	429a      	cmp	r2, r3
 8010566:	d3b7      	bcc.n	80104d8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801056e:	691b      	ldr	r3, [r3, #16]
 8010570:	68fa      	ldr	r2, [r7, #12]
 8010572:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010576:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801057a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	2200      	movs	r2, #0
 8010580:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8010588:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801058a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801058c:	2b00      	cmp	r3, #0
 801058e:	d105      	bne.n	801059c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	699b      	ldr	r3, [r3, #24]
 8010594:	f043 0210 	orr.w	r2, r3, #16
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	699a      	ldr	r2, [r3, #24]
 80105a0:	4b0e      	ldr	r3, [pc, #56]	; (80105dc <USB_DevInit+0x2b4>)
 80105a2:	4313      	orrs	r3, r2
 80105a4:	687a      	ldr	r2, [r7, #4]
 80105a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80105a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d005      	beq.n	80105ba <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	699b      	ldr	r3, [r3, #24]
 80105b2:	f043 0208 	orr.w	r2, r3, #8
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80105ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105bc:	2b01      	cmp	r3, #1
 80105be:	d105      	bne.n	80105cc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	699a      	ldr	r2, [r3, #24]
 80105c4:	4b06      	ldr	r3, [pc, #24]	; (80105e0 <USB_DevInit+0x2b8>)
 80105c6:	4313      	orrs	r3, r2
 80105c8:	687a      	ldr	r2, [r7, #4]
 80105ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80105cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80105ce:	4618      	mov	r0, r3
 80105d0:	3718      	adds	r7, #24
 80105d2:	46bd      	mov	sp, r7
 80105d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80105d8:	b004      	add	sp, #16
 80105da:	4770      	bx	lr
 80105dc:	803c3800 	.word	0x803c3800
 80105e0:	40000004 	.word	0x40000004

080105e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80105e4:	b480      	push	{r7}
 80105e6:	b085      	sub	sp, #20
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
 80105ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80105ee:	2300      	movs	r3, #0
 80105f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	3301      	adds	r3, #1
 80105f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	4a13      	ldr	r2, [pc, #76]	; (8010648 <USB_FlushTxFifo+0x64>)
 80105fc:	4293      	cmp	r3, r2
 80105fe:	d901      	bls.n	8010604 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010600:	2303      	movs	r3, #3
 8010602:	e01b      	b.n	801063c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	691b      	ldr	r3, [r3, #16]
 8010608:	2b00      	cmp	r3, #0
 801060a:	daf2      	bge.n	80105f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801060c:	2300      	movs	r3, #0
 801060e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	019b      	lsls	r3, r3, #6
 8010614:	f043 0220 	orr.w	r2, r3, #32
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	3301      	adds	r3, #1
 8010620:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	4a08      	ldr	r2, [pc, #32]	; (8010648 <USB_FlushTxFifo+0x64>)
 8010626:	4293      	cmp	r3, r2
 8010628:	d901      	bls.n	801062e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801062a:	2303      	movs	r3, #3
 801062c:	e006      	b.n	801063c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	691b      	ldr	r3, [r3, #16]
 8010632:	f003 0320 	and.w	r3, r3, #32
 8010636:	2b20      	cmp	r3, #32
 8010638:	d0f0      	beq.n	801061c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801063a:	2300      	movs	r3, #0
}
 801063c:	4618      	mov	r0, r3
 801063e:	3714      	adds	r7, #20
 8010640:	46bd      	mov	sp, r7
 8010642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010646:	4770      	bx	lr
 8010648:	00030d40 	.word	0x00030d40

0801064c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801064c:	b480      	push	{r7}
 801064e:	b085      	sub	sp, #20
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010654:	2300      	movs	r3, #0
 8010656:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	3301      	adds	r3, #1
 801065c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	4a11      	ldr	r2, [pc, #68]	; (80106a8 <USB_FlushRxFifo+0x5c>)
 8010662:	4293      	cmp	r3, r2
 8010664:	d901      	bls.n	801066a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8010666:	2303      	movs	r3, #3
 8010668:	e018      	b.n	801069c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	691b      	ldr	r3, [r3, #16]
 801066e:	2b00      	cmp	r3, #0
 8010670:	daf2      	bge.n	8010658 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8010672:	2300      	movs	r3, #0
 8010674:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	2210      	movs	r2, #16
 801067a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	3301      	adds	r3, #1
 8010680:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	4a08      	ldr	r2, [pc, #32]	; (80106a8 <USB_FlushRxFifo+0x5c>)
 8010686:	4293      	cmp	r3, r2
 8010688:	d901      	bls.n	801068e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801068a:	2303      	movs	r3, #3
 801068c:	e006      	b.n	801069c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	691b      	ldr	r3, [r3, #16]
 8010692:	f003 0310 	and.w	r3, r3, #16
 8010696:	2b10      	cmp	r3, #16
 8010698:	d0f0      	beq.n	801067c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801069a:	2300      	movs	r3, #0
}
 801069c:	4618      	mov	r0, r3
 801069e:	3714      	adds	r7, #20
 80106a0:	46bd      	mov	sp, r7
 80106a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a6:	4770      	bx	lr
 80106a8:	00030d40 	.word	0x00030d40

080106ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80106ac:	b480      	push	{r7}
 80106ae:	b085      	sub	sp, #20
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
 80106b4:	460b      	mov	r3, r1
 80106b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80106c2:	681a      	ldr	r2, [r3, #0]
 80106c4:	78fb      	ldrb	r3, [r7, #3]
 80106c6:	68f9      	ldr	r1, [r7, #12]
 80106c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80106cc:	4313      	orrs	r3, r2
 80106ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80106d0:	2300      	movs	r3, #0
}
 80106d2:	4618      	mov	r0, r3
 80106d4:	3714      	adds	r7, #20
 80106d6:	46bd      	mov	sp, r7
 80106d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106dc:	4770      	bx	lr

080106de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80106de:	b480      	push	{r7}
 80106e0:	b085      	sub	sp, #20
 80106e2:	af00      	add	r7, sp, #0
 80106e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	68fa      	ldr	r2, [r7, #12]
 80106f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80106f8:	f023 0303 	bic.w	r3, r3, #3
 80106fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010704:	685b      	ldr	r3, [r3, #4]
 8010706:	68fa      	ldr	r2, [r7, #12]
 8010708:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801070c:	f043 0302 	orr.w	r3, r3, #2
 8010710:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010712:	2300      	movs	r3, #0
}
 8010714:	4618      	mov	r0, r3
 8010716:	3714      	adds	r7, #20
 8010718:	46bd      	mov	sp, r7
 801071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071e:	4770      	bx	lr

08010720 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010720:	b480      	push	{r7}
 8010722:	b083      	sub	sp, #12
 8010724:	af00      	add	r7, sp, #0
 8010726:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	695b      	ldr	r3, [r3, #20]
 801072c:	f003 0301 	and.w	r3, r3, #1
}
 8010730:	4618      	mov	r0, r3
 8010732:	370c      	adds	r7, #12
 8010734:	46bd      	mov	sp, r7
 8010736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073a:	4770      	bx	lr

0801073c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801073c:	b480      	push	{r7}
 801073e:	b085      	sub	sp, #20
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010744:	2300      	movs	r3, #0
 8010746:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	3301      	adds	r3, #1
 801074c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	4a13      	ldr	r2, [pc, #76]	; (80107a0 <USB_CoreReset+0x64>)
 8010752:	4293      	cmp	r3, r2
 8010754:	d901      	bls.n	801075a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010756:	2303      	movs	r3, #3
 8010758:	e01b      	b.n	8010792 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	691b      	ldr	r3, [r3, #16]
 801075e:	2b00      	cmp	r3, #0
 8010760:	daf2      	bge.n	8010748 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010762:	2300      	movs	r3, #0
 8010764:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	691b      	ldr	r3, [r3, #16]
 801076a:	f043 0201 	orr.w	r2, r3, #1
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	3301      	adds	r3, #1
 8010776:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	4a09      	ldr	r2, [pc, #36]	; (80107a0 <USB_CoreReset+0x64>)
 801077c:	4293      	cmp	r3, r2
 801077e:	d901      	bls.n	8010784 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010780:	2303      	movs	r3, #3
 8010782:	e006      	b.n	8010792 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	691b      	ldr	r3, [r3, #16]
 8010788:	f003 0301 	and.w	r3, r3, #1
 801078c:	2b01      	cmp	r3, #1
 801078e:	d0f0      	beq.n	8010772 <USB_CoreReset+0x36>

  return HAL_OK;
 8010790:	2300      	movs	r3, #0
}
 8010792:	4618      	mov	r0, r3
 8010794:	3714      	adds	r7, #20
 8010796:	46bd      	mov	sp, r7
 8010798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079c:	4770      	bx	lr
 801079e:	bf00      	nop
 80107a0:	00030d40 	.word	0x00030d40

080107a4 <__cvt>:
 80107a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107a6:	ed2d 8b02 	vpush	{d8}
 80107aa:	eeb0 8b40 	vmov.f64	d8, d0
 80107ae:	b085      	sub	sp, #20
 80107b0:	4617      	mov	r7, r2
 80107b2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80107b4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80107b6:	ee18 2a90 	vmov	r2, s17
 80107ba:	f025 0520 	bic.w	r5, r5, #32
 80107be:	2a00      	cmp	r2, #0
 80107c0:	bfb6      	itet	lt
 80107c2:	222d      	movlt	r2, #45	; 0x2d
 80107c4:	2200      	movge	r2, #0
 80107c6:	eeb1 8b40 	vneglt.f64	d8, d0
 80107ca:	2d46      	cmp	r5, #70	; 0x46
 80107cc:	460c      	mov	r4, r1
 80107ce:	701a      	strb	r2, [r3, #0]
 80107d0:	d004      	beq.n	80107dc <__cvt+0x38>
 80107d2:	2d45      	cmp	r5, #69	; 0x45
 80107d4:	d100      	bne.n	80107d8 <__cvt+0x34>
 80107d6:	3401      	adds	r4, #1
 80107d8:	2102      	movs	r1, #2
 80107da:	e000      	b.n	80107de <__cvt+0x3a>
 80107dc:	2103      	movs	r1, #3
 80107de:	ab03      	add	r3, sp, #12
 80107e0:	9301      	str	r3, [sp, #4]
 80107e2:	ab02      	add	r3, sp, #8
 80107e4:	9300      	str	r3, [sp, #0]
 80107e6:	4622      	mov	r2, r4
 80107e8:	4633      	mov	r3, r6
 80107ea:	eeb0 0b48 	vmov.f64	d0, d8
 80107ee:	f001 f847 	bl	8011880 <_dtoa_r>
 80107f2:	2d47      	cmp	r5, #71	; 0x47
 80107f4:	d101      	bne.n	80107fa <__cvt+0x56>
 80107f6:	07fb      	lsls	r3, r7, #31
 80107f8:	d51a      	bpl.n	8010830 <__cvt+0x8c>
 80107fa:	2d46      	cmp	r5, #70	; 0x46
 80107fc:	eb00 0204 	add.w	r2, r0, r4
 8010800:	d10c      	bne.n	801081c <__cvt+0x78>
 8010802:	7803      	ldrb	r3, [r0, #0]
 8010804:	2b30      	cmp	r3, #48	; 0x30
 8010806:	d107      	bne.n	8010818 <__cvt+0x74>
 8010808:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801080c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010810:	bf1c      	itt	ne
 8010812:	f1c4 0401 	rsbne	r4, r4, #1
 8010816:	6034      	strne	r4, [r6, #0]
 8010818:	6833      	ldr	r3, [r6, #0]
 801081a:	441a      	add	r2, r3
 801081c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010824:	bf08      	it	eq
 8010826:	9203      	streq	r2, [sp, #12]
 8010828:	2130      	movs	r1, #48	; 0x30
 801082a:	9b03      	ldr	r3, [sp, #12]
 801082c:	4293      	cmp	r3, r2
 801082e:	d307      	bcc.n	8010840 <__cvt+0x9c>
 8010830:	9b03      	ldr	r3, [sp, #12]
 8010832:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010834:	1a1b      	subs	r3, r3, r0
 8010836:	6013      	str	r3, [r2, #0]
 8010838:	b005      	add	sp, #20
 801083a:	ecbd 8b02 	vpop	{d8}
 801083e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010840:	1c5c      	adds	r4, r3, #1
 8010842:	9403      	str	r4, [sp, #12]
 8010844:	7019      	strb	r1, [r3, #0]
 8010846:	e7f0      	b.n	801082a <__cvt+0x86>

08010848 <__exponent>:
 8010848:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801084a:	4603      	mov	r3, r0
 801084c:	2900      	cmp	r1, #0
 801084e:	bfb8      	it	lt
 8010850:	4249      	neglt	r1, r1
 8010852:	f803 2b02 	strb.w	r2, [r3], #2
 8010856:	bfb4      	ite	lt
 8010858:	222d      	movlt	r2, #45	; 0x2d
 801085a:	222b      	movge	r2, #43	; 0x2b
 801085c:	2909      	cmp	r1, #9
 801085e:	7042      	strb	r2, [r0, #1]
 8010860:	dd2a      	ble.n	80108b8 <__exponent+0x70>
 8010862:	f10d 0207 	add.w	r2, sp, #7
 8010866:	4617      	mov	r7, r2
 8010868:	260a      	movs	r6, #10
 801086a:	4694      	mov	ip, r2
 801086c:	fb91 f5f6 	sdiv	r5, r1, r6
 8010870:	fb06 1415 	mls	r4, r6, r5, r1
 8010874:	3430      	adds	r4, #48	; 0x30
 8010876:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801087a:	460c      	mov	r4, r1
 801087c:	2c63      	cmp	r4, #99	; 0x63
 801087e:	f102 32ff 	add.w	r2, r2, #4294967295
 8010882:	4629      	mov	r1, r5
 8010884:	dcf1      	bgt.n	801086a <__exponent+0x22>
 8010886:	3130      	adds	r1, #48	; 0x30
 8010888:	f1ac 0402 	sub.w	r4, ip, #2
 801088c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010890:	1c41      	adds	r1, r0, #1
 8010892:	4622      	mov	r2, r4
 8010894:	42ba      	cmp	r2, r7
 8010896:	d30a      	bcc.n	80108ae <__exponent+0x66>
 8010898:	f10d 0209 	add.w	r2, sp, #9
 801089c:	eba2 020c 	sub.w	r2, r2, ip
 80108a0:	42bc      	cmp	r4, r7
 80108a2:	bf88      	it	hi
 80108a4:	2200      	movhi	r2, #0
 80108a6:	4413      	add	r3, r2
 80108a8:	1a18      	subs	r0, r3, r0
 80108aa:	b003      	add	sp, #12
 80108ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108ae:	f812 5b01 	ldrb.w	r5, [r2], #1
 80108b2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80108b6:	e7ed      	b.n	8010894 <__exponent+0x4c>
 80108b8:	2330      	movs	r3, #48	; 0x30
 80108ba:	3130      	adds	r1, #48	; 0x30
 80108bc:	7083      	strb	r3, [r0, #2]
 80108be:	70c1      	strb	r1, [r0, #3]
 80108c0:	1d03      	adds	r3, r0, #4
 80108c2:	e7f1      	b.n	80108a8 <__exponent+0x60>
 80108c4:	0000      	movs	r0, r0
	...

080108c8 <_printf_float>:
 80108c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108cc:	b08b      	sub	sp, #44	; 0x2c
 80108ce:	460c      	mov	r4, r1
 80108d0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80108d4:	4616      	mov	r6, r2
 80108d6:	461f      	mov	r7, r3
 80108d8:	4605      	mov	r5, r0
 80108da:	f000 febf 	bl	801165c <_localeconv_r>
 80108de:	f8d0 b000 	ldr.w	fp, [r0]
 80108e2:	4658      	mov	r0, fp
 80108e4:	f7ef fd64 	bl	80003b0 <strlen>
 80108e8:	2300      	movs	r3, #0
 80108ea:	9308      	str	r3, [sp, #32]
 80108ec:	f8d8 3000 	ldr.w	r3, [r8]
 80108f0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80108f4:	6822      	ldr	r2, [r4, #0]
 80108f6:	3307      	adds	r3, #7
 80108f8:	f023 0307 	bic.w	r3, r3, #7
 80108fc:	f103 0108 	add.w	r1, r3, #8
 8010900:	f8c8 1000 	str.w	r1, [r8]
 8010904:	ed93 0b00 	vldr	d0, [r3]
 8010908:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8010b68 <_printf_float+0x2a0>
 801090c:	eeb0 7bc0 	vabs.f64	d7, d0
 8010910:	eeb4 7b46 	vcmp.f64	d7, d6
 8010914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010918:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801091c:	4682      	mov	sl, r0
 801091e:	dd24      	ble.n	801096a <_printf_float+0xa2>
 8010920:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010928:	d502      	bpl.n	8010930 <_printf_float+0x68>
 801092a:	232d      	movs	r3, #45	; 0x2d
 801092c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010930:	498f      	ldr	r1, [pc, #572]	; (8010b70 <_printf_float+0x2a8>)
 8010932:	4b90      	ldr	r3, [pc, #576]	; (8010b74 <_printf_float+0x2ac>)
 8010934:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010938:	bf94      	ite	ls
 801093a:	4688      	movls	r8, r1
 801093c:	4698      	movhi	r8, r3
 801093e:	2303      	movs	r3, #3
 8010940:	6123      	str	r3, [r4, #16]
 8010942:	f022 0204 	bic.w	r2, r2, #4
 8010946:	2300      	movs	r3, #0
 8010948:	6022      	str	r2, [r4, #0]
 801094a:	9304      	str	r3, [sp, #16]
 801094c:	9700      	str	r7, [sp, #0]
 801094e:	4633      	mov	r3, r6
 8010950:	aa09      	add	r2, sp, #36	; 0x24
 8010952:	4621      	mov	r1, r4
 8010954:	4628      	mov	r0, r5
 8010956:	f000 f9d1 	bl	8010cfc <_printf_common>
 801095a:	3001      	adds	r0, #1
 801095c:	f040 808a 	bne.w	8010a74 <_printf_float+0x1ac>
 8010960:	f04f 30ff 	mov.w	r0, #4294967295
 8010964:	b00b      	add	sp, #44	; 0x2c
 8010966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801096a:	eeb4 0b40 	vcmp.f64	d0, d0
 801096e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010972:	d709      	bvc.n	8010988 <_printf_float+0xc0>
 8010974:	ee10 3a90 	vmov	r3, s1
 8010978:	2b00      	cmp	r3, #0
 801097a:	bfbc      	itt	lt
 801097c:	232d      	movlt	r3, #45	; 0x2d
 801097e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010982:	497d      	ldr	r1, [pc, #500]	; (8010b78 <_printf_float+0x2b0>)
 8010984:	4b7d      	ldr	r3, [pc, #500]	; (8010b7c <_printf_float+0x2b4>)
 8010986:	e7d5      	b.n	8010934 <_printf_float+0x6c>
 8010988:	6863      	ldr	r3, [r4, #4]
 801098a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801098e:	9104      	str	r1, [sp, #16]
 8010990:	1c59      	adds	r1, r3, #1
 8010992:	d13c      	bne.n	8010a0e <_printf_float+0x146>
 8010994:	2306      	movs	r3, #6
 8010996:	6063      	str	r3, [r4, #4]
 8010998:	2300      	movs	r3, #0
 801099a:	9303      	str	r3, [sp, #12]
 801099c:	ab08      	add	r3, sp, #32
 801099e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80109a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80109a6:	ab07      	add	r3, sp, #28
 80109a8:	6861      	ldr	r1, [r4, #4]
 80109aa:	9300      	str	r3, [sp, #0]
 80109ac:	6022      	str	r2, [r4, #0]
 80109ae:	f10d 031b 	add.w	r3, sp, #27
 80109b2:	4628      	mov	r0, r5
 80109b4:	f7ff fef6 	bl	80107a4 <__cvt>
 80109b8:	9b04      	ldr	r3, [sp, #16]
 80109ba:	9907      	ldr	r1, [sp, #28]
 80109bc:	2b47      	cmp	r3, #71	; 0x47
 80109be:	4680      	mov	r8, r0
 80109c0:	d108      	bne.n	80109d4 <_printf_float+0x10c>
 80109c2:	1cc8      	adds	r0, r1, #3
 80109c4:	db02      	blt.n	80109cc <_printf_float+0x104>
 80109c6:	6863      	ldr	r3, [r4, #4]
 80109c8:	4299      	cmp	r1, r3
 80109ca:	dd41      	ble.n	8010a50 <_printf_float+0x188>
 80109cc:	f1a9 0902 	sub.w	r9, r9, #2
 80109d0:	fa5f f989 	uxtb.w	r9, r9
 80109d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80109d8:	d820      	bhi.n	8010a1c <_printf_float+0x154>
 80109da:	3901      	subs	r1, #1
 80109dc:	464a      	mov	r2, r9
 80109de:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80109e2:	9107      	str	r1, [sp, #28]
 80109e4:	f7ff ff30 	bl	8010848 <__exponent>
 80109e8:	9a08      	ldr	r2, [sp, #32]
 80109ea:	9004      	str	r0, [sp, #16]
 80109ec:	1813      	adds	r3, r2, r0
 80109ee:	2a01      	cmp	r2, #1
 80109f0:	6123      	str	r3, [r4, #16]
 80109f2:	dc02      	bgt.n	80109fa <_printf_float+0x132>
 80109f4:	6822      	ldr	r2, [r4, #0]
 80109f6:	07d2      	lsls	r2, r2, #31
 80109f8:	d501      	bpl.n	80109fe <_printf_float+0x136>
 80109fa:	3301      	adds	r3, #1
 80109fc:	6123      	str	r3, [r4, #16]
 80109fe:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d0a2      	beq.n	801094c <_printf_float+0x84>
 8010a06:	232d      	movs	r3, #45	; 0x2d
 8010a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a0c:	e79e      	b.n	801094c <_printf_float+0x84>
 8010a0e:	9904      	ldr	r1, [sp, #16]
 8010a10:	2947      	cmp	r1, #71	; 0x47
 8010a12:	d1c1      	bne.n	8010998 <_printf_float+0xd0>
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d1bf      	bne.n	8010998 <_printf_float+0xd0>
 8010a18:	2301      	movs	r3, #1
 8010a1a:	e7bc      	b.n	8010996 <_printf_float+0xce>
 8010a1c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8010a20:	d118      	bne.n	8010a54 <_printf_float+0x18c>
 8010a22:	2900      	cmp	r1, #0
 8010a24:	6863      	ldr	r3, [r4, #4]
 8010a26:	dd0b      	ble.n	8010a40 <_printf_float+0x178>
 8010a28:	6121      	str	r1, [r4, #16]
 8010a2a:	b913      	cbnz	r3, 8010a32 <_printf_float+0x16a>
 8010a2c:	6822      	ldr	r2, [r4, #0]
 8010a2e:	07d0      	lsls	r0, r2, #31
 8010a30:	d502      	bpl.n	8010a38 <_printf_float+0x170>
 8010a32:	3301      	adds	r3, #1
 8010a34:	440b      	add	r3, r1
 8010a36:	6123      	str	r3, [r4, #16]
 8010a38:	2300      	movs	r3, #0
 8010a3a:	65a1      	str	r1, [r4, #88]	; 0x58
 8010a3c:	9304      	str	r3, [sp, #16]
 8010a3e:	e7de      	b.n	80109fe <_printf_float+0x136>
 8010a40:	b913      	cbnz	r3, 8010a48 <_printf_float+0x180>
 8010a42:	6822      	ldr	r2, [r4, #0]
 8010a44:	07d2      	lsls	r2, r2, #31
 8010a46:	d501      	bpl.n	8010a4c <_printf_float+0x184>
 8010a48:	3302      	adds	r3, #2
 8010a4a:	e7f4      	b.n	8010a36 <_printf_float+0x16e>
 8010a4c:	2301      	movs	r3, #1
 8010a4e:	e7f2      	b.n	8010a36 <_printf_float+0x16e>
 8010a50:	f04f 0967 	mov.w	r9, #103	; 0x67
 8010a54:	9b08      	ldr	r3, [sp, #32]
 8010a56:	4299      	cmp	r1, r3
 8010a58:	db05      	blt.n	8010a66 <_printf_float+0x19e>
 8010a5a:	6823      	ldr	r3, [r4, #0]
 8010a5c:	6121      	str	r1, [r4, #16]
 8010a5e:	07d8      	lsls	r0, r3, #31
 8010a60:	d5ea      	bpl.n	8010a38 <_printf_float+0x170>
 8010a62:	1c4b      	adds	r3, r1, #1
 8010a64:	e7e7      	b.n	8010a36 <_printf_float+0x16e>
 8010a66:	2900      	cmp	r1, #0
 8010a68:	bfd4      	ite	le
 8010a6a:	f1c1 0202 	rsble	r2, r1, #2
 8010a6e:	2201      	movgt	r2, #1
 8010a70:	4413      	add	r3, r2
 8010a72:	e7e0      	b.n	8010a36 <_printf_float+0x16e>
 8010a74:	6823      	ldr	r3, [r4, #0]
 8010a76:	055a      	lsls	r2, r3, #21
 8010a78:	d407      	bmi.n	8010a8a <_printf_float+0x1c2>
 8010a7a:	6923      	ldr	r3, [r4, #16]
 8010a7c:	4642      	mov	r2, r8
 8010a7e:	4631      	mov	r1, r6
 8010a80:	4628      	mov	r0, r5
 8010a82:	47b8      	blx	r7
 8010a84:	3001      	adds	r0, #1
 8010a86:	d12a      	bne.n	8010ade <_printf_float+0x216>
 8010a88:	e76a      	b.n	8010960 <_printf_float+0x98>
 8010a8a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010a8e:	f240 80e0 	bls.w	8010c52 <_printf_float+0x38a>
 8010a92:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010a96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a9e:	d133      	bne.n	8010b08 <_printf_float+0x240>
 8010aa0:	4a37      	ldr	r2, [pc, #220]	; (8010b80 <_printf_float+0x2b8>)
 8010aa2:	2301      	movs	r3, #1
 8010aa4:	4631      	mov	r1, r6
 8010aa6:	4628      	mov	r0, r5
 8010aa8:	47b8      	blx	r7
 8010aaa:	3001      	adds	r0, #1
 8010aac:	f43f af58 	beq.w	8010960 <_printf_float+0x98>
 8010ab0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010ab4:	429a      	cmp	r2, r3
 8010ab6:	db02      	blt.n	8010abe <_printf_float+0x1f6>
 8010ab8:	6823      	ldr	r3, [r4, #0]
 8010aba:	07d8      	lsls	r0, r3, #31
 8010abc:	d50f      	bpl.n	8010ade <_printf_float+0x216>
 8010abe:	4653      	mov	r3, sl
 8010ac0:	465a      	mov	r2, fp
 8010ac2:	4631      	mov	r1, r6
 8010ac4:	4628      	mov	r0, r5
 8010ac6:	47b8      	blx	r7
 8010ac8:	3001      	adds	r0, #1
 8010aca:	f43f af49 	beq.w	8010960 <_printf_float+0x98>
 8010ace:	f04f 0800 	mov.w	r8, #0
 8010ad2:	f104 091a 	add.w	r9, r4, #26
 8010ad6:	9b08      	ldr	r3, [sp, #32]
 8010ad8:	3b01      	subs	r3, #1
 8010ada:	4543      	cmp	r3, r8
 8010adc:	dc09      	bgt.n	8010af2 <_printf_float+0x22a>
 8010ade:	6823      	ldr	r3, [r4, #0]
 8010ae0:	079b      	lsls	r3, r3, #30
 8010ae2:	f100 8106 	bmi.w	8010cf2 <_printf_float+0x42a>
 8010ae6:	68e0      	ldr	r0, [r4, #12]
 8010ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010aea:	4298      	cmp	r0, r3
 8010aec:	bfb8      	it	lt
 8010aee:	4618      	movlt	r0, r3
 8010af0:	e738      	b.n	8010964 <_printf_float+0x9c>
 8010af2:	2301      	movs	r3, #1
 8010af4:	464a      	mov	r2, r9
 8010af6:	4631      	mov	r1, r6
 8010af8:	4628      	mov	r0, r5
 8010afa:	47b8      	blx	r7
 8010afc:	3001      	adds	r0, #1
 8010afe:	f43f af2f 	beq.w	8010960 <_printf_float+0x98>
 8010b02:	f108 0801 	add.w	r8, r8, #1
 8010b06:	e7e6      	b.n	8010ad6 <_printf_float+0x20e>
 8010b08:	9b07      	ldr	r3, [sp, #28]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	dc3a      	bgt.n	8010b84 <_printf_float+0x2bc>
 8010b0e:	4a1c      	ldr	r2, [pc, #112]	; (8010b80 <_printf_float+0x2b8>)
 8010b10:	2301      	movs	r3, #1
 8010b12:	4631      	mov	r1, r6
 8010b14:	4628      	mov	r0, r5
 8010b16:	47b8      	blx	r7
 8010b18:	3001      	adds	r0, #1
 8010b1a:	f43f af21 	beq.w	8010960 <_printf_float+0x98>
 8010b1e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8010b22:	4313      	orrs	r3, r2
 8010b24:	d102      	bne.n	8010b2c <_printf_float+0x264>
 8010b26:	6823      	ldr	r3, [r4, #0]
 8010b28:	07d9      	lsls	r1, r3, #31
 8010b2a:	d5d8      	bpl.n	8010ade <_printf_float+0x216>
 8010b2c:	4653      	mov	r3, sl
 8010b2e:	465a      	mov	r2, fp
 8010b30:	4631      	mov	r1, r6
 8010b32:	4628      	mov	r0, r5
 8010b34:	47b8      	blx	r7
 8010b36:	3001      	adds	r0, #1
 8010b38:	f43f af12 	beq.w	8010960 <_printf_float+0x98>
 8010b3c:	f04f 0900 	mov.w	r9, #0
 8010b40:	f104 0a1a 	add.w	sl, r4, #26
 8010b44:	9b07      	ldr	r3, [sp, #28]
 8010b46:	425b      	negs	r3, r3
 8010b48:	454b      	cmp	r3, r9
 8010b4a:	dc01      	bgt.n	8010b50 <_printf_float+0x288>
 8010b4c:	9b08      	ldr	r3, [sp, #32]
 8010b4e:	e795      	b.n	8010a7c <_printf_float+0x1b4>
 8010b50:	2301      	movs	r3, #1
 8010b52:	4652      	mov	r2, sl
 8010b54:	4631      	mov	r1, r6
 8010b56:	4628      	mov	r0, r5
 8010b58:	47b8      	blx	r7
 8010b5a:	3001      	adds	r0, #1
 8010b5c:	f43f af00 	beq.w	8010960 <_printf_float+0x98>
 8010b60:	f109 0901 	add.w	r9, r9, #1
 8010b64:	e7ee      	b.n	8010b44 <_printf_float+0x27c>
 8010b66:	bf00      	nop
 8010b68:	ffffffff 	.word	0xffffffff
 8010b6c:	7fefffff 	.word	0x7fefffff
 8010b70:	08014ed0 	.word	0x08014ed0
 8010b74:	08014ed4 	.word	0x08014ed4
 8010b78:	08014ed8 	.word	0x08014ed8
 8010b7c:	08014edc 	.word	0x08014edc
 8010b80:	08014ee0 	.word	0x08014ee0
 8010b84:	9a08      	ldr	r2, [sp, #32]
 8010b86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010b88:	429a      	cmp	r2, r3
 8010b8a:	bfa8      	it	ge
 8010b8c:	461a      	movge	r2, r3
 8010b8e:	2a00      	cmp	r2, #0
 8010b90:	4691      	mov	r9, r2
 8010b92:	dc38      	bgt.n	8010c06 <_printf_float+0x33e>
 8010b94:	2300      	movs	r3, #0
 8010b96:	9305      	str	r3, [sp, #20]
 8010b98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010b9c:	f104 021a 	add.w	r2, r4, #26
 8010ba0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010ba2:	9905      	ldr	r1, [sp, #20]
 8010ba4:	9304      	str	r3, [sp, #16]
 8010ba6:	eba3 0309 	sub.w	r3, r3, r9
 8010baa:	428b      	cmp	r3, r1
 8010bac:	dc33      	bgt.n	8010c16 <_printf_float+0x34e>
 8010bae:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010bb2:	429a      	cmp	r2, r3
 8010bb4:	db3c      	blt.n	8010c30 <_printf_float+0x368>
 8010bb6:	6823      	ldr	r3, [r4, #0]
 8010bb8:	07da      	lsls	r2, r3, #31
 8010bba:	d439      	bmi.n	8010c30 <_printf_float+0x368>
 8010bbc:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8010bc0:	eba2 0903 	sub.w	r9, r2, r3
 8010bc4:	9b04      	ldr	r3, [sp, #16]
 8010bc6:	1ad2      	subs	r2, r2, r3
 8010bc8:	4591      	cmp	r9, r2
 8010bca:	bfa8      	it	ge
 8010bcc:	4691      	movge	r9, r2
 8010bce:	f1b9 0f00 	cmp.w	r9, #0
 8010bd2:	dc35      	bgt.n	8010c40 <_printf_float+0x378>
 8010bd4:	f04f 0800 	mov.w	r8, #0
 8010bd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010bdc:	f104 0a1a 	add.w	sl, r4, #26
 8010be0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010be4:	1a9b      	subs	r3, r3, r2
 8010be6:	eba3 0309 	sub.w	r3, r3, r9
 8010bea:	4543      	cmp	r3, r8
 8010bec:	f77f af77 	ble.w	8010ade <_printf_float+0x216>
 8010bf0:	2301      	movs	r3, #1
 8010bf2:	4652      	mov	r2, sl
 8010bf4:	4631      	mov	r1, r6
 8010bf6:	4628      	mov	r0, r5
 8010bf8:	47b8      	blx	r7
 8010bfa:	3001      	adds	r0, #1
 8010bfc:	f43f aeb0 	beq.w	8010960 <_printf_float+0x98>
 8010c00:	f108 0801 	add.w	r8, r8, #1
 8010c04:	e7ec      	b.n	8010be0 <_printf_float+0x318>
 8010c06:	4613      	mov	r3, r2
 8010c08:	4631      	mov	r1, r6
 8010c0a:	4642      	mov	r2, r8
 8010c0c:	4628      	mov	r0, r5
 8010c0e:	47b8      	blx	r7
 8010c10:	3001      	adds	r0, #1
 8010c12:	d1bf      	bne.n	8010b94 <_printf_float+0x2cc>
 8010c14:	e6a4      	b.n	8010960 <_printf_float+0x98>
 8010c16:	2301      	movs	r3, #1
 8010c18:	4631      	mov	r1, r6
 8010c1a:	4628      	mov	r0, r5
 8010c1c:	9204      	str	r2, [sp, #16]
 8010c1e:	47b8      	blx	r7
 8010c20:	3001      	adds	r0, #1
 8010c22:	f43f ae9d 	beq.w	8010960 <_printf_float+0x98>
 8010c26:	9b05      	ldr	r3, [sp, #20]
 8010c28:	9a04      	ldr	r2, [sp, #16]
 8010c2a:	3301      	adds	r3, #1
 8010c2c:	9305      	str	r3, [sp, #20]
 8010c2e:	e7b7      	b.n	8010ba0 <_printf_float+0x2d8>
 8010c30:	4653      	mov	r3, sl
 8010c32:	465a      	mov	r2, fp
 8010c34:	4631      	mov	r1, r6
 8010c36:	4628      	mov	r0, r5
 8010c38:	47b8      	blx	r7
 8010c3a:	3001      	adds	r0, #1
 8010c3c:	d1be      	bne.n	8010bbc <_printf_float+0x2f4>
 8010c3e:	e68f      	b.n	8010960 <_printf_float+0x98>
 8010c40:	9a04      	ldr	r2, [sp, #16]
 8010c42:	464b      	mov	r3, r9
 8010c44:	4442      	add	r2, r8
 8010c46:	4631      	mov	r1, r6
 8010c48:	4628      	mov	r0, r5
 8010c4a:	47b8      	blx	r7
 8010c4c:	3001      	adds	r0, #1
 8010c4e:	d1c1      	bne.n	8010bd4 <_printf_float+0x30c>
 8010c50:	e686      	b.n	8010960 <_printf_float+0x98>
 8010c52:	9a08      	ldr	r2, [sp, #32]
 8010c54:	2a01      	cmp	r2, #1
 8010c56:	dc01      	bgt.n	8010c5c <_printf_float+0x394>
 8010c58:	07db      	lsls	r3, r3, #31
 8010c5a:	d537      	bpl.n	8010ccc <_printf_float+0x404>
 8010c5c:	2301      	movs	r3, #1
 8010c5e:	4642      	mov	r2, r8
 8010c60:	4631      	mov	r1, r6
 8010c62:	4628      	mov	r0, r5
 8010c64:	47b8      	blx	r7
 8010c66:	3001      	adds	r0, #1
 8010c68:	f43f ae7a 	beq.w	8010960 <_printf_float+0x98>
 8010c6c:	4653      	mov	r3, sl
 8010c6e:	465a      	mov	r2, fp
 8010c70:	4631      	mov	r1, r6
 8010c72:	4628      	mov	r0, r5
 8010c74:	47b8      	blx	r7
 8010c76:	3001      	adds	r0, #1
 8010c78:	f43f ae72 	beq.w	8010960 <_printf_float+0x98>
 8010c7c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010c80:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c88:	9b08      	ldr	r3, [sp, #32]
 8010c8a:	d01a      	beq.n	8010cc2 <_printf_float+0x3fa>
 8010c8c:	3b01      	subs	r3, #1
 8010c8e:	f108 0201 	add.w	r2, r8, #1
 8010c92:	4631      	mov	r1, r6
 8010c94:	4628      	mov	r0, r5
 8010c96:	47b8      	blx	r7
 8010c98:	3001      	adds	r0, #1
 8010c9a:	d10e      	bne.n	8010cba <_printf_float+0x3f2>
 8010c9c:	e660      	b.n	8010960 <_printf_float+0x98>
 8010c9e:	2301      	movs	r3, #1
 8010ca0:	464a      	mov	r2, r9
 8010ca2:	4631      	mov	r1, r6
 8010ca4:	4628      	mov	r0, r5
 8010ca6:	47b8      	blx	r7
 8010ca8:	3001      	adds	r0, #1
 8010caa:	f43f ae59 	beq.w	8010960 <_printf_float+0x98>
 8010cae:	f108 0801 	add.w	r8, r8, #1
 8010cb2:	9b08      	ldr	r3, [sp, #32]
 8010cb4:	3b01      	subs	r3, #1
 8010cb6:	4543      	cmp	r3, r8
 8010cb8:	dcf1      	bgt.n	8010c9e <_printf_float+0x3d6>
 8010cba:	9b04      	ldr	r3, [sp, #16]
 8010cbc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010cc0:	e6dd      	b.n	8010a7e <_printf_float+0x1b6>
 8010cc2:	f04f 0800 	mov.w	r8, #0
 8010cc6:	f104 091a 	add.w	r9, r4, #26
 8010cca:	e7f2      	b.n	8010cb2 <_printf_float+0x3ea>
 8010ccc:	2301      	movs	r3, #1
 8010cce:	4642      	mov	r2, r8
 8010cd0:	e7df      	b.n	8010c92 <_printf_float+0x3ca>
 8010cd2:	2301      	movs	r3, #1
 8010cd4:	464a      	mov	r2, r9
 8010cd6:	4631      	mov	r1, r6
 8010cd8:	4628      	mov	r0, r5
 8010cda:	47b8      	blx	r7
 8010cdc:	3001      	adds	r0, #1
 8010cde:	f43f ae3f 	beq.w	8010960 <_printf_float+0x98>
 8010ce2:	f108 0801 	add.w	r8, r8, #1
 8010ce6:	68e3      	ldr	r3, [r4, #12]
 8010ce8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010cea:	1a5b      	subs	r3, r3, r1
 8010cec:	4543      	cmp	r3, r8
 8010cee:	dcf0      	bgt.n	8010cd2 <_printf_float+0x40a>
 8010cf0:	e6f9      	b.n	8010ae6 <_printf_float+0x21e>
 8010cf2:	f04f 0800 	mov.w	r8, #0
 8010cf6:	f104 0919 	add.w	r9, r4, #25
 8010cfa:	e7f4      	b.n	8010ce6 <_printf_float+0x41e>

08010cfc <_printf_common>:
 8010cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d00:	4616      	mov	r6, r2
 8010d02:	4699      	mov	r9, r3
 8010d04:	688a      	ldr	r2, [r1, #8]
 8010d06:	690b      	ldr	r3, [r1, #16]
 8010d08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010d0c:	4293      	cmp	r3, r2
 8010d0e:	bfb8      	it	lt
 8010d10:	4613      	movlt	r3, r2
 8010d12:	6033      	str	r3, [r6, #0]
 8010d14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010d18:	4607      	mov	r7, r0
 8010d1a:	460c      	mov	r4, r1
 8010d1c:	b10a      	cbz	r2, 8010d22 <_printf_common+0x26>
 8010d1e:	3301      	adds	r3, #1
 8010d20:	6033      	str	r3, [r6, #0]
 8010d22:	6823      	ldr	r3, [r4, #0]
 8010d24:	0699      	lsls	r1, r3, #26
 8010d26:	bf42      	ittt	mi
 8010d28:	6833      	ldrmi	r3, [r6, #0]
 8010d2a:	3302      	addmi	r3, #2
 8010d2c:	6033      	strmi	r3, [r6, #0]
 8010d2e:	6825      	ldr	r5, [r4, #0]
 8010d30:	f015 0506 	ands.w	r5, r5, #6
 8010d34:	d106      	bne.n	8010d44 <_printf_common+0x48>
 8010d36:	f104 0a19 	add.w	sl, r4, #25
 8010d3a:	68e3      	ldr	r3, [r4, #12]
 8010d3c:	6832      	ldr	r2, [r6, #0]
 8010d3e:	1a9b      	subs	r3, r3, r2
 8010d40:	42ab      	cmp	r3, r5
 8010d42:	dc26      	bgt.n	8010d92 <_printf_common+0x96>
 8010d44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010d48:	1e13      	subs	r3, r2, #0
 8010d4a:	6822      	ldr	r2, [r4, #0]
 8010d4c:	bf18      	it	ne
 8010d4e:	2301      	movne	r3, #1
 8010d50:	0692      	lsls	r2, r2, #26
 8010d52:	d42b      	bmi.n	8010dac <_printf_common+0xb0>
 8010d54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010d58:	4649      	mov	r1, r9
 8010d5a:	4638      	mov	r0, r7
 8010d5c:	47c0      	blx	r8
 8010d5e:	3001      	adds	r0, #1
 8010d60:	d01e      	beq.n	8010da0 <_printf_common+0xa4>
 8010d62:	6823      	ldr	r3, [r4, #0]
 8010d64:	6922      	ldr	r2, [r4, #16]
 8010d66:	f003 0306 	and.w	r3, r3, #6
 8010d6a:	2b04      	cmp	r3, #4
 8010d6c:	bf02      	ittt	eq
 8010d6e:	68e5      	ldreq	r5, [r4, #12]
 8010d70:	6833      	ldreq	r3, [r6, #0]
 8010d72:	1aed      	subeq	r5, r5, r3
 8010d74:	68a3      	ldr	r3, [r4, #8]
 8010d76:	bf0c      	ite	eq
 8010d78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010d7c:	2500      	movne	r5, #0
 8010d7e:	4293      	cmp	r3, r2
 8010d80:	bfc4      	itt	gt
 8010d82:	1a9b      	subgt	r3, r3, r2
 8010d84:	18ed      	addgt	r5, r5, r3
 8010d86:	2600      	movs	r6, #0
 8010d88:	341a      	adds	r4, #26
 8010d8a:	42b5      	cmp	r5, r6
 8010d8c:	d11a      	bne.n	8010dc4 <_printf_common+0xc8>
 8010d8e:	2000      	movs	r0, #0
 8010d90:	e008      	b.n	8010da4 <_printf_common+0xa8>
 8010d92:	2301      	movs	r3, #1
 8010d94:	4652      	mov	r2, sl
 8010d96:	4649      	mov	r1, r9
 8010d98:	4638      	mov	r0, r7
 8010d9a:	47c0      	blx	r8
 8010d9c:	3001      	adds	r0, #1
 8010d9e:	d103      	bne.n	8010da8 <_printf_common+0xac>
 8010da0:	f04f 30ff 	mov.w	r0, #4294967295
 8010da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010da8:	3501      	adds	r5, #1
 8010daa:	e7c6      	b.n	8010d3a <_printf_common+0x3e>
 8010dac:	18e1      	adds	r1, r4, r3
 8010dae:	1c5a      	adds	r2, r3, #1
 8010db0:	2030      	movs	r0, #48	; 0x30
 8010db2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010db6:	4422      	add	r2, r4
 8010db8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010dbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010dc0:	3302      	adds	r3, #2
 8010dc2:	e7c7      	b.n	8010d54 <_printf_common+0x58>
 8010dc4:	2301      	movs	r3, #1
 8010dc6:	4622      	mov	r2, r4
 8010dc8:	4649      	mov	r1, r9
 8010dca:	4638      	mov	r0, r7
 8010dcc:	47c0      	blx	r8
 8010dce:	3001      	adds	r0, #1
 8010dd0:	d0e6      	beq.n	8010da0 <_printf_common+0xa4>
 8010dd2:	3601      	adds	r6, #1
 8010dd4:	e7d9      	b.n	8010d8a <_printf_common+0x8e>
	...

08010dd8 <_printf_i>:
 8010dd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010ddc:	7e0f      	ldrb	r7, [r1, #24]
 8010dde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010de0:	2f78      	cmp	r7, #120	; 0x78
 8010de2:	4691      	mov	r9, r2
 8010de4:	4680      	mov	r8, r0
 8010de6:	460c      	mov	r4, r1
 8010de8:	469a      	mov	sl, r3
 8010dea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010dee:	d807      	bhi.n	8010e00 <_printf_i+0x28>
 8010df0:	2f62      	cmp	r7, #98	; 0x62
 8010df2:	d80a      	bhi.n	8010e0a <_printf_i+0x32>
 8010df4:	2f00      	cmp	r7, #0
 8010df6:	f000 80d4 	beq.w	8010fa2 <_printf_i+0x1ca>
 8010dfa:	2f58      	cmp	r7, #88	; 0x58
 8010dfc:	f000 80c0 	beq.w	8010f80 <_printf_i+0x1a8>
 8010e00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010e04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010e08:	e03a      	b.n	8010e80 <_printf_i+0xa8>
 8010e0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010e0e:	2b15      	cmp	r3, #21
 8010e10:	d8f6      	bhi.n	8010e00 <_printf_i+0x28>
 8010e12:	a101      	add	r1, pc, #4	; (adr r1, 8010e18 <_printf_i+0x40>)
 8010e14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010e18:	08010e71 	.word	0x08010e71
 8010e1c:	08010e85 	.word	0x08010e85
 8010e20:	08010e01 	.word	0x08010e01
 8010e24:	08010e01 	.word	0x08010e01
 8010e28:	08010e01 	.word	0x08010e01
 8010e2c:	08010e01 	.word	0x08010e01
 8010e30:	08010e85 	.word	0x08010e85
 8010e34:	08010e01 	.word	0x08010e01
 8010e38:	08010e01 	.word	0x08010e01
 8010e3c:	08010e01 	.word	0x08010e01
 8010e40:	08010e01 	.word	0x08010e01
 8010e44:	08010f89 	.word	0x08010f89
 8010e48:	08010eb1 	.word	0x08010eb1
 8010e4c:	08010f43 	.word	0x08010f43
 8010e50:	08010e01 	.word	0x08010e01
 8010e54:	08010e01 	.word	0x08010e01
 8010e58:	08010fab 	.word	0x08010fab
 8010e5c:	08010e01 	.word	0x08010e01
 8010e60:	08010eb1 	.word	0x08010eb1
 8010e64:	08010e01 	.word	0x08010e01
 8010e68:	08010e01 	.word	0x08010e01
 8010e6c:	08010f4b 	.word	0x08010f4b
 8010e70:	682b      	ldr	r3, [r5, #0]
 8010e72:	1d1a      	adds	r2, r3, #4
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	602a      	str	r2, [r5, #0]
 8010e78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010e7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010e80:	2301      	movs	r3, #1
 8010e82:	e09f      	b.n	8010fc4 <_printf_i+0x1ec>
 8010e84:	6820      	ldr	r0, [r4, #0]
 8010e86:	682b      	ldr	r3, [r5, #0]
 8010e88:	0607      	lsls	r7, r0, #24
 8010e8a:	f103 0104 	add.w	r1, r3, #4
 8010e8e:	6029      	str	r1, [r5, #0]
 8010e90:	d501      	bpl.n	8010e96 <_printf_i+0xbe>
 8010e92:	681e      	ldr	r6, [r3, #0]
 8010e94:	e003      	b.n	8010e9e <_printf_i+0xc6>
 8010e96:	0646      	lsls	r6, r0, #25
 8010e98:	d5fb      	bpl.n	8010e92 <_printf_i+0xba>
 8010e9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010e9e:	2e00      	cmp	r6, #0
 8010ea0:	da03      	bge.n	8010eaa <_printf_i+0xd2>
 8010ea2:	232d      	movs	r3, #45	; 0x2d
 8010ea4:	4276      	negs	r6, r6
 8010ea6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010eaa:	485a      	ldr	r0, [pc, #360]	; (8011014 <_printf_i+0x23c>)
 8010eac:	230a      	movs	r3, #10
 8010eae:	e012      	b.n	8010ed6 <_printf_i+0xfe>
 8010eb0:	682b      	ldr	r3, [r5, #0]
 8010eb2:	6820      	ldr	r0, [r4, #0]
 8010eb4:	1d19      	adds	r1, r3, #4
 8010eb6:	6029      	str	r1, [r5, #0]
 8010eb8:	0605      	lsls	r5, r0, #24
 8010eba:	d501      	bpl.n	8010ec0 <_printf_i+0xe8>
 8010ebc:	681e      	ldr	r6, [r3, #0]
 8010ebe:	e002      	b.n	8010ec6 <_printf_i+0xee>
 8010ec0:	0641      	lsls	r1, r0, #25
 8010ec2:	d5fb      	bpl.n	8010ebc <_printf_i+0xe4>
 8010ec4:	881e      	ldrh	r6, [r3, #0]
 8010ec6:	4853      	ldr	r0, [pc, #332]	; (8011014 <_printf_i+0x23c>)
 8010ec8:	2f6f      	cmp	r7, #111	; 0x6f
 8010eca:	bf0c      	ite	eq
 8010ecc:	2308      	moveq	r3, #8
 8010ece:	230a      	movne	r3, #10
 8010ed0:	2100      	movs	r1, #0
 8010ed2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010ed6:	6865      	ldr	r5, [r4, #4]
 8010ed8:	60a5      	str	r5, [r4, #8]
 8010eda:	2d00      	cmp	r5, #0
 8010edc:	bfa2      	ittt	ge
 8010ede:	6821      	ldrge	r1, [r4, #0]
 8010ee0:	f021 0104 	bicge.w	r1, r1, #4
 8010ee4:	6021      	strge	r1, [r4, #0]
 8010ee6:	b90e      	cbnz	r6, 8010eec <_printf_i+0x114>
 8010ee8:	2d00      	cmp	r5, #0
 8010eea:	d04b      	beq.n	8010f84 <_printf_i+0x1ac>
 8010eec:	4615      	mov	r5, r2
 8010eee:	fbb6 f1f3 	udiv	r1, r6, r3
 8010ef2:	fb03 6711 	mls	r7, r3, r1, r6
 8010ef6:	5dc7      	ldrb	r7, [r0, r7]
 8010ef8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010efc:	4637      	mov	r7, r6
 8010efe:	42bb      	cmp	r3, r7
 8010f00:	460e      	mov	r6, r1
 8010f02:	d9f4      	bls.n	8010eee <_printf_i+0x116>
 8010f04:	2b08      	cmp	r3, #8
 8010f06:	d10b      	bne.n	8010f20 <_printf_i+0x148>
 8010f08:	6823      	ldr	r3, [r4, #0]
 8010f0a:	07de      	lsls	r6, r3, #31
 8010f0c:	d508      	bpl.n	8010f20 <_printf_i+0x148>
 8010f0e:	6923      	ldr	r3, [r4, #16]
 8010f10:	6861      	ldr	r1, [r4, #4]
 8010f12:	4299      	cmp	r1, r3
 8010f14:	bfde      	ittt	le
 8010f16:	2330      	movle	r3, #48	; 0x30
 8010f18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010f1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010f20:	1b52      	subs	r2, r2, r5
 8010f22:	6122      	str	r2, [r4, #16]
 8010f24:	f8cd a000 	str.w	sl, [sp]
 8010f28:	464b      	mov	r3, r9
 8010f2a:	aa03      	add	r2, sp, #12
 8010f2c:	4621      	mov	r1, r4
 8010f2e:	4640      	mov	r0, r8
 8010f30:	f7ff fee4 	bl	8010cfc <_printf_common>
 8010f34:	3001      	adds	r0, #1
 8010f36:	d14a      	bne.n	8010fce <_printf_i+0x1f6>
 8010f38:	f04f 30ff 	mov.w	r0, #4294967295
 8010f3c:	b004      	add	sp, #16
 8010f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f42:	6823      	ldr	r3, [r4, #0]
 8010f44:	f043 0320 	orr.w	r3, r3, #32
 8010f48:	6023      	str	r3, [r4, #0]
 8010f4a:	4833      	ldr	r0, [pc, #204]	; (8011018 <_printf_i+0x240>)
 8010f4c:	2778      	movs	r7, #120	; 0x78
 8010f4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010f52:	6823      	ldr	r3, [r4, #0]
 8010f54:	6829      	ldr	r1, [r5, #0]
 8010f56:	061f      	lsls	r7, r3, #24
 8010f58:	f851 6b04 	ldr.w	r6, [r1], #4
 8010f5c:	d402      	bmi.n	8010f64 <_printf_i+0x18c>
 8010f5e:	065f      	lsls	r7, r3, #25
 8010f60:	bf48      	it	mi
 8010f62:	b2b6      	uxthmi	r6, r6
 8010f64:	07df      	lsls	r7, r3, #31
 8010f66:	bf48      	it	mi
 8010f68:	f043 0320 	orrmi.w	r3, r3, #32
 8010f6c:	6029      	str	r1, [r5, #0]
 8010f6e:	bf48      	it	mi
 8010f70:	6023      	strmi	r3, [r4, #0]
 8010f72:	b91e      	cbnz	r6, 8010f7c <_printf_i+0x1a4>
 8010f74:	6823      	ldr	r3, [r4, #0]
 8010f76:	f023 0320 	bic.w	r3, r3, #32
 8010f7a:	6023      	str	r3, [r4, #0]
 8010f7c:	2310      	movs	r3, #16
 8010f7e:	e7a7      	b.n	8010ed0 <_printf_i+0xf8>
 8010f80:	4824      	ldr	r0, [pc, #144]	; (8011014 <_printf_i+0x23c>)
 8010f82:	e7e4      	b.n	8010f4e <_printf_i+0x176>
 8010f84:	4615      	mov	r5, r2
 8010f86:	e7bd      	b.n	8010f04 <_printf_i+0x12c>
 8010f88:	682b      	ldr	r3, [r5, #0]
 8010f8a:	6826      	ldr	r6, [r4, #0]
 8010f8c:	6961      	ldr	r1, [r4, #20]
 8010f8e:	1d18      	adds	r0, r3, #4
 8010f90:	6028      	str	r0, [r5, #0]
 8010f92:	0635      	lsls	r5, r6, #24
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	d501      	bpl.n	8010f9c <_printf_i+0x1c4>
 8010f98:	6019      	str	r1, [r3, #0]
 8010f9a:	e002      	b.n	8010fa2 <_printf_i+0x1ca>
 8010f9c:	0670      	lsls	r0, r6, #25
 8010f9e:	d5fb      	bpl.n	8010f98 <_printf_i+0x1c0>
 8010fa0:	8019      	strh	r1, [r3, #0]
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	6123      	str	r3, [r4, #16]
 8010fa6:	4615      	mov	r5, r2
 8010fa8:	e7bc      	b.n	8010f24 <_printf_i+0x14c>
 8010faa:	682b      	ldr	r3, [r5, #0]
 8010fac:	1d1a      	adds	r2, r3, #4
 8010fae:	602a      	str	r2, [r5, #0]
 8010fb0:	681d      	ldr	r5, [r3, #0]
 8010fb2:	6862      	ldr	r2, [r4, #4]
 8010fb4:	2100      	movs	r1, #0
 8010fb6:	4628      	mov	r0, r5
 8010fb8:	f7ef f9aa 	bl	8000310 <memchr>
 8010fbc:	b108      	cbz	r0, 8010fc2 <_printf_i+0x1ea>
 8010fbe:	1b40      	subs	r0, r0, r5
 8010fc0:	6060      	str	r0, [r4, #4]
 8010fc2:	6863      	ldr	r3, [r4, #4]
 8010fc4:	6123      	str	r3, [r4, #16]
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010fcc:	e7aa      	b.n	8010f24 <_printf_i+0x14c>
 8010fce:	6923      	ldr	r3, [r4, #16]
 8010fd0:	462a      	mov	r2, r5
 8010fd2:	4649      	mov	r1, r9
 8010fd4:	4640      	mov	r0, r8
 8010fd6:	47d0      	blx	sl
 8010fd8:	3001      	adds	r0, #1
 8010fda:	d0ad      	beq.n	8010f38 <_printf_i+0x160>
 8010fdc:	6823      	ldr	r3, [r4, #0]
 8010fde:	079b      	lsls	r3, r3, #30
 8010fe0:	d413      	bmi.n	801100a <_printf_i+0x232>
 8010fe2:	68e0      	ldr	r0, [r4, #12]
 8010fe4:	9b03      	ldr	r3, [sp, #12]
 8010fe6:	4298      	cmp	r0, r3
 8010fe8:	bfb8      	it	lt
 8010fea:	4618      	movlt	r0, r3
 8010fec:	e7a6      	b.n	8010f3c <_printf_i+0x164>
 8010fee:	2301      	movs	r3, #1
 8010ff0:	4632      	mov	r2, r6
 8010ff2:	4649      	mov	r1, r9
 8010ff4:	4640      	mov	r0, r8
 8010ff6:	47d0      	blx	sl
 8010ff8:	3001      	adds	r0, #1
 8010ffa:	d09d      	beq.n	8010f38 <_printf_i+0x160>
 8010ffc:	3501      	adds	r5, #1
 8010ffe:	68e3      	ldr	r3, [r4, #12]
 8011000:	9903      	ldr	r1, [sp, #12]
 8011002:	1a5b      	subs	r3, r3, r1
 8011004:	42ab      	cmp	r3, r5
 8011006:	dcf2      	bgt.n	8010fee <_printf_i+0x216>
 8011008:	e7eb      	b.n	8010fe2 <_printf_i+0x20a>
 801100a:	2500      	movs	r5, #0
 801100c:	f104 0619 	add.w	r6, r4, #25
 8011010:	e7f5      	b.n	8010ffe <_printf_i+0x226>
 8011012:	bf00      	nop
 8011014:	08014ee2 	.word	0x08014ee2
 8011018:	08014ef3 	.word	0x08014ef3

0801101c <_scanf_float>:
 801101c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011020:	b087      	sub	sp, #28
 8011022:	4617      	mov	r7, r2
 8011024:	9303      	str	r3, [sp, #12]
 8011026:	688b      	ldr	r3, [r1, #8]
 8011028:	1e5a      	subs	r2, r3, #1
 801102a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801102e:	bf83      	ittte	hi
 8011030:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011034:	195b      	addhi	r3, r3, r5
 8011036:	9302      	strhi	r3, [sp, #8]
 8011038:	2300      	movls	r3, #0
 801103a:	bf86      	itte	hi
 801103c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011040:	608b      	strhi	r3, [r1, #8]
 8011042:	9302      	strls	r3, [sp, #8]
 8011044:	680b      	ldr	r3, [r1, #0]
 8011046:	468b      	mov	fp, r1
 8011048:	2500      	movs	r5, #0
 801104a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801104e:	f84b 3b1c 	str.w	r3, [fp], #28
 8011052:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011056:	4680      	mov	r8, r0
 8011058:	460c      	mov	r4, r1
 801105a:	465e      	mov	r6, fp
 801105c:	46aa      	mov	sl, r5
 801105e:	46a9      	mov	r9, r5
 8011060:	9501      	str	r5, [sp, #4]
 8011062:	68a2      	ldr	r2, [r4, #8]
 8011064:	b152      	cbz	r2, 801107c <_scanf_float+0x60>
 8011066:	683b      	ldr	r3, [r7, #0]
 8011068:	781b      	ldrb	r3, [r3, #0]
 801106a:	2b4e      	cmp	r3, #78	; 0x4e
 801106c:	d864      	bhi.n	8011138 <_scanf_float+0x11c>
 801106e:	2b40      	cmp	r3, #64	; 0x40
 8011070:	d83c      	bhi.n	80110ec <_scanf_float+0xd0>
 8011072:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8011076:	b2c8      	uxtb	r0, r1
 8011078:	280e      	cmp	r0, #14
 801107a:	d93a      	bls.n	80110f2 <_scanf_float+0xd6>
 801107c:	f1b9 0f00 	cmp.w	r9, #0
 8011080:	d003      	beq.n	801108a <_scanf_float+0x6e>
 8011082:	6823      	ldr	r3, [r4, #0]
 8011084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011088:	6023      	str	r3, [r4, #0]
 801108a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801108e:	f1ba 0f01 	cmp.w	sl, #1
 8011092:	f200 8113 	bhi.w	80112bc <_scanf_float+0x2a0>
 8011096:	455e      	cmp	r6, fp
 8011098:	f200 8105 	bhi.w	80112a6 <_scanf_float+0x28a>
 801109c:	2501      	movs	r5, #1
 801109e:	4628      	mov	r0, r5
 80110a0:	b007      	add	sp, #28
 80110a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110a6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80110aa:	2a0d      	cmp	r2, #13
 80110ac:	d8e6      	bhi.n	801107c <_scanf_float+0x60>
 80110ae:	a101      	add	r1, pc, #4	; (adr r1, 80110b4 <_scanf_float+0x98>)
 80110b0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80110b4:	080111f3 	.word	0x080111f3
 80110b8:	0801107d 	.word	0x0801107d
 80110bc:	0801107d 	.word	0x0801107d
 80110c0:	0801107d 	.word	0x0801107d
 80110c4:	08011253 	.word	0x08011253
 80110c8:	0801122b 	.word	0x0801122b
 80110cc:	0801107d 	.word	0x0801107d
 80110d0:	0801107d 	.word	0x0801107d
 80110d4:	08011201 	.word	0x08011201
 80110d8:	0801107d 	.word	0x0801107d
 80110dc:	0801107d 	.word	0x0801107d
 80110e0:	0801107d 	.word	0x0801107d
 80110e4:	0801107d 	.word	0x0801107d
 80110e8:	080111b9 	.word	0x080111b9
 80110ec:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80110f0:	e7db      	b.n	80110aa <_scanf_float+0x8e>
 80110f2:	290e      	cmp	r1, #14
 80110f4:	d8c2      	bhi.n	801107c <_scanf_float+0x60>
 80110f6:	a001      	add	r0, pc, #4	; (adr r0, 80110fc <_scanf_float+0xe0>)
 80110f8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80110fc:	080111ab 	.word	0x080111ab
 8011100:	0801107d 	.word	0x0801107d
 8011104:	080111ab 	.word	0x080111ab
 8011108:	0801123f 	.word	0x0801123f
 801110c:	0801107d 	.word	0x0801107d
 8011110:	08011159 	.word	0x08011159
 8011114:	08011195 	.word	0x08011195
 8011118:	08011195 	.word	0x08011195
 801111c:	08011195 	.word	0x08011195
 8011120:	08011195 	.word	0x08011195
 8011124:	08011195 	.word	0x08011195
 8011128:	08011195 	.word	0x08011195
 801112c:	08011195 	.word	0x08011195
 8011130:	08011195 	.word	0x08011195
 8011134:	08011195 	.word	0x08011195
 8011138:	2b6e      	cmp	r3, #110	; 0x6e
 801113a:	d809      	bhi.n	8011150 <_scanf_float+0x134>
 801113c:	2b60      	cmp	r3, #96	; 0x60
 801113e:	d8b2      	bhi.n	80110a6 <_scanf_float+0x8a>
 8011140:	2b54      	cmp	r3, #84	; 0x54
 8011142:	d077      	beq.n	8011234 <_scanf_float+0x218>
 8011144:	2b59      	cmp	r3, #89	; 0x59
 8011146:	d199      	bne.n	801107c <_scanf_float+0x60>
 8011148:	2d07      	cmp	r5, #7
 801114a:	d197      	bne.n	801107c <_scanf_float+0x60>
 801114c:	2508      	movs	r5, #8
 801114e:	e029      	b.n	80111a4 <_scanf_float+0x188>
 8011150:	2b74      	cmp	r3, #116	; 0x74
 8011152:	d06f      	beq.n	8011234 <_scanf_float+0x218>
 8011154:	2b79      	cmp	r3, #121	; 0x79
 8011156:	e7f6      	b.n	8011146 <_scanf_float+0x12a>
 8011158:	6821      	ldr	r1, [r4, #0]
 801115a:	05c8      	lsls	r0, r1, #23
 801115c:	d51a      	bpl.n	8011194 <_scanf_float+0x178>
 801115e:	9b02      	ldr	r3, [sp, #8]
 8011160:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8011164:	6021      	str	r1, [r4, #0]
 8011166:	f109 0901 	add.w	r9, r9, #1
 801116a:	b11b      	cbz	r3, 8011174 <_scanf_float+0x158>
 801116c:	3b01      	subs	r3, #1
 801116e:	3201      	adds	r2, #1
 8011170:	9302      	str	r3, [sp, #8]
 8011172:	60a2      	str	r2, [r4, #8]
 8011174:	68a3      	ldr	r3, [r4, #8]
 8011176:	3b01      	subs	r3, #1
 8011178:	60a3      	str	r3, [r4, #8]
 801117a:	6923      	ldr	r3, [r4, #16]
 801117c:	3301      	adds	r3, #1
 801117e:	6123      	str	r3, [r4, #16]
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	3b01      	subs	r3, #1
 8011184:	2b00      	cmp	r3, #0
 8011186:	607b      	str	r3, [r7, #4]
 8011188:	f340 8084 	ble.w	8011294 <_scanf_float+0x278>
 801118c:	683b      	ldr	r3, [r7, #0]
 801118e:	3301      	adds	r3, #1
 8011190:	603b      	str	r3, [r7, #0]
 8011192:	e766      	b.n	8011062 <_scanf_float+0x46>
 8011194:	eb1a 0f05 	cmn.w	sl, r5
 8011198:	f47f af70 	bne.w	801107c <_scanf_float+0x60>
 801119c:	6822      	ldr	r2, [r4, #0]
 801119e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80111a2:	6022      	str	r2, [r4, #0]
 80111a4:	f806 3b01 	strb.w	r3, [r6], #1
 80111a8:	e7e4      	b.n	8011174 <_scanf_float+0x158>
 80111aa:	6822      	ldr	r2, [r4, #0]
 80111ac:	0610      	lsls	r0, r2, #24
 80111ae:	f57f af65 	bpl.w	801107c <_scanf_float+0x60>
 80111b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80111b6:	e7f4      	b.n	80111a2 <_scanf_float+0x186>
 80111b8:	f1ba 0f00 	cmp.w	sl, #0
 80111bc:	d10e      	bne.n	80111dc <_scanf_float+0x1c0>
 80111be:	f1b9 0f00 	cmp.w	r9, #0
 80111c2:	d10e      	bne.n	80111e2 <_scanf_float+0x1c6>
 80111c4:	6822      	ldr	r2, [r4, #0]
 80111c6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80111ca:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80111ce:	d108      	bne.n	80111e2 <_scanf_float+0x1c6>
 80111d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80111d4:	6022      	str	r2, [r4, #0]
 80111d6:	f04f 0a01 	mov.w	sl, #1
 80111da:	e7e3      	b.n	80111a4 <_scanf_float+0x188>
 80111dc:	f1ba 0f02 	cmp.w	sl, #2
 80111e0:	d055      	beq.n	801128e <_scanf_float+0x272>
 80111e2:	2d01      	cmp	r5, #1
 80111e4:	d002      	beq.n	80111ec <_scanf_float+0x1d0>
 80111e6:	2d04      	cmp	r5, #4
 80111e8:	f47f af48 	bne.w	801107c <_scanf_float+0x60>
 80111ec:	3501      	adds	r5, #1
 80111ee:	b2ed      	uxtb	r5, r5
 80111f0:	e7d8      	b.n	80111a4 <_scanf_float+0x188>
 80111f2:	f1ba 0f01 	cmp.w	sl, #1
 80111f6:	f47f af41 	bne.w	801107c <_scanf_float+0x60>
 80111fa:	f04f 0a02 	mov.w	sl, #2
 80111fe:	e7d1      	b.n	80111a4 <_scanf_float+0x188>
 8011200:	b97d      	cbnz	r5, 8011222 <_scanf_float+0x206>
 8011202:	f1b9 0f00 	cmp.w	r9, #0
 8011206:	f47f af3c 	bne.w	8011082 <_scanf_float+0x66>
 801120a:	6822      	ldr	r2, [r4, #0]
 801120c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011210:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011214:	f47f af39 	bne.w	801108a <_scanf_float+0x6e>
 8011218:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801121c:	6022      	str	r2, [r4, #0]
 801121e:	2501      	movs	r5, #1
 8011220:	e7c0      	b.n	80111a4 <_scanf_float+0x188>
 8011222:	2d03      	cmp	r5, #3
 8011224:	d0e2      	beq.n	80111ec <_scanf_float+0x1d0>
 8011226:	2d05      	cmp	r5, #5
 8011228:	e7de      	b.n	80111e8 <_scanf_float+0x1cc>
 801122a:	2d02      	cmp	r5, #2
 801122c:	f47f af26 	bne.w	801107c <_scanf_float+0x60>
 8011230:	2503      	movs	r5, #3
 8011232:	e7b7      	b.n	80111a4 <_scanf_float+0x188>
 8011234:	2d06      	cmp	r5, #6
 8011236:	f47f af21 	bne.w	801107c <_scanf_float+0x60>
 801123a:	2507      	movs	r5, #7
 801123c:	e7b2      	b.n	80111a4 <_scanf_float+0x188>
 801123e:	6822      	ldr	r2, [r4, #0]
 8011240:	0591      	lsls	r1, r2, #22
 8011242:	f57f af1b 	bpl.w	801107c <_scanf_float+0x60>
 8011246:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801124a:	6022      	str	r2, [r4, #0]
 801124c:	f8cd 9004 	str.w	r9, [sp, #4]
 8011250:	e7a8      	b.n	80111a4 <_scanf_float+0x188>
 8011252:	6822      	ldr	r2, [r4, #0]
 8011254:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8011258:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801125c:	d006      	beq.n	801126c <_scanf_float+0x250>
 801125e:	0550      	lsls	r0, r2, #21
 8011260:	f57f af0c 	bpl.w	801107c <_scanf_float+0x60>
 8011264:	f1b9 0f00 	cmp.w	r9, #0
 8011268:	f43f af0f 	beq.w	801108a <_scanf_float+0x6e>
 801126c:	0591      	lsls	r1, r2, #22
 801126e:	bf58      	it	pl
 8011270:	9901      	ldrpl	r1, [sp, #4]
 8011272:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011276:	bf58      	it	pl
 8011278:	eba9 0101 	subpl.w	r1, r9, r1
 801127c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8011280:	bf58      	it	pl
 8011282:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8011286:	6022      	str	r2, [r4, #0]
 8011288:	f04f 0900 	mov.w	r9, #0
 801128c:	e78a      	b.n	80111a4 <_scanf_float+0x188>
 801128e:	f04f 0a03 	mov.w	sl, #3
 8011292:	e787      	b.n	80111a4 <_scanf_float+0x188>
 8011294:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011298:	4639      	mov	r1, r7
 801129a:	4640      	mov	r0, r8
 801129c:	4798      	blx	r3
 801129e:	2800      	cmp	r0, #0
 80112a0:	f43f aedf 	beq.w	8011062 <_scanf_float+0x46>
 80112a4:	e6ea      	b.n	801107c <_scanf_float+0x60>
 80112a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80112aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80112ae:	463a      	mov	r2, r7
 80112b0:	4640      	mov	r0, r8
 80112b2:	4798      	blx	r3
 80112b4:	6923      	ldr	r3, [r4, #16]
 80112b6:	3b01      	subs	r3, #1
 80112b8:	6123      	str	r3, [r4, #16]
 80112ba:	e6ec      	b.n	8011096 <_scanf_float+0x7a>
 80112bc:	1e6b      	subs	r3, r5, #1
 80112be:	2b06      	cmp	r3, #6
 80112c0:	d825      	bhi.n	801130e <_scanf_float+0x2f2>
 80112c2:	2d02      	cmp	r5, #2
 80112c4:	d836      	bhi.n	8011334 <_scanf_float+0x318>
 80112c6:	455e      	cmp	r6, fp
 80112c8:	f67f aee8 	bls.w	801109c <_scanf_float+0x80>
 80112cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80112d0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80112d4:	463a      	mov	r2, r7
 80112d6:	4640      	mov	r0, r8
 80112d8:	4798      	blx	r3
 80112da:	6923      	ldr	r3, [r4, #16]
 80112dc:	3b01      	subs	r3, #1
 80112de:	6123      	str	r3, [r4, #16]
 80112e0:	e7f1      	b.n	80112c6 <_scanf_float+0x2aa>
 80112e2:	9802      	ldr	r0, [sp, #8]
 80112e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80112e8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80112ec:	9002      	str	r0, [sp, #8]
 80112ee:	463a      	mov	r2, r7
 80112f0:	4640      	mov	r0, r8
 80112f2:	4798      	blx	r3
 80112f4:	6923      	ldr	r3, [r4, #16]
 80112f6:	3b01      	subs	r3, #1
 80112f8:	6123      	str	r3, [r4, #16]
 80112fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80112fe:	fa5f fa8a 	uxtb.w	sl, sl
 8011302:	f1ba 0f02 	cmp.w	sl, #2
 8011306:	d1ec      	bne.n	80112e2 <_scanf_float+0x2c6>
 8011308:	3d03      	subs	r5, #3
 801130a:	b2ed      	uxtb	r5, r5
 801130c:	1b76      	subs	r6, r6, r5
 801130e:	6823      	ldr	r3, [r4, #0]
 8011310:	05da      	lsls	r2, r3, #23
 8011312:	d52f      	bpl.n	8011374 <_scanf_float+0x358>
 8011314:	055b      	lsls	r3, r3, #21
 8011316:	d510      	bpl.n	801133a <_scanf_float+0x31e>
 8011318:	455e      	cmp	r6, fp
 801131a:	f67f aebf 	bls.w	801109c <_scanf_float+0x80>
 801131e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011322:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011326:	463a      	mov	r2, r7
 8011328:	4640      	mov	r0, r8
 801132a:	4798      	blx	r3
 801132c:	6923      	ldr	r3, [r4, #16]
 801132e:	3b01      	subs	r3, #1
 8011330:	6123      	str	r3, [r4, #16]
 8011332:	e7f1      	b.n	8011318 <_scanf_float+0x2fc>
 8011334:	46aa      	mov	sl, r5
 8011336:	9602      	str	r6, [sp, #8]
 8011338:	e7df      	b.n	80112fa <_scanf_float+0x2de>
 801133a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801133e:	6923      	ldr	r3, [r4, #16]
 8011340:	2965      	cmp	r1, #101	; 0x65
 8011342:	f103 33ff 	add.w	r3, r3, #4294967295
 8011346:	f106 35ff 	add.w	r5, r6, #4294967295
 801134a:	6123      	str	r3, [r4, #16]
 801134c:	d00c      	beq.n	8011368 <_scanf_float+0x34c>
 801134e:	2945      	cmp	r1, #69	; 0x45
 8011350:	d00a      	beq.n	8011368 <_scanf_float+0x34c>
 8011352:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011356:	463a      	mov	r2, r7
 8011358:	4640      	mov	r0, r8
 801135a:	4798      	blx	r3
 801135c:	6923      	ldr	r3, [r4, #16]
 801135e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011362:	3b01      	subs	r3, #1
 8011364:	1eb5      	subs	r5, r6, #2
 8011366:	6123      	str	r3, [r4, #16]
 8011368:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801136c:	463a      	mov	r2, r7
 801136e:	4640      	mov	r0, r8
 8011370:	4798      	blx	r3
 8011372:	462e      	mov	r6, r5
 8011374:	6825      	ldr	r5, [r4, #0]
 8011376:	f015 0510 	ands.w	r5, r5, #16
 801137a:	d14d      	bne.n	8011418 <_scanf_float+0x3fc>
 801137c:	7035      	strb	r5, [r6, #0]
 801137e:	6823      	ldr	r3, [r4, #0]
 8011380:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011388:	d11a      	bne.n	80113c0 <_scanf_float+0x3a4>
 801138a:	9b01      	ldr	r3, [sp, #4]
 801138c:	454b      	cmp	r3, r9
 801138e:	eba3 0209 	sub.w	r2, r3, r9
 8011392:	d122      	bne.n	80113da <_scanf_float+0x3be>
 8011394:	2200      	movs	r2, #0
 8011396:	4659      	mov	r1, fp
 8011398:	4640      	mov	r0, r8
 801139a:	f002 fb53 	bl	8013a44 <_strtod_r>
 801139e:	9b03      	ldr	r3, [sp, #12]
 80113a0:	6821      	ldr	r1, [r4, #0]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	f011 0f02 	tst.w	r1, #2
 80113a8:	f103 0204 	add.w	r2, r3, #4
 80113ac:	d020      	beq.n	80113f0 <_scanf_float+0x3d4>
 80113ae:	9903      	ldr	r1, [sp, #12]
 80113b0:	600a      	str	r2, [r1, #0]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	ed83 0b00 	vstr	d0, [r3]
 80113b8:	68e3      	ldr	r3, [r4, #12]
 80113ba:	3301      	adds	r3, #1
 80113bc:	60e3      	str	r3, [r4, #12]
 80113be:	e66e      	b.n	801109e <_scanf_float+0x82>
 80113c0:	9b04      	ldr	r3, [sp, #16]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d0e6      	beq.n	8011394 <_scanf_float+0x378>
 80113c6:	9905      	ldr	r1, [sp, #20]
 80113c8:	230a      	movs	r3, #10
 80113ca:	462a      	mov	r2, r5
 80113cc:	3101      	adds	r1, #1
 80113ce:	4640      	mov	r0, r8
 80113d0:	f002 fbc0 	bl	8013b54 <_strtol_r>
 80113d4:	9b04      	ldr	r3, [sp, #16]
 80113d6:	9e05      	ldr	r6, [sp, #20]
 80113d8:	1ac2      	subs	r2, r0, r3
 80113da:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80113de:	429e      	cmp	r6, r3
 80113e0:	bf28      	it	cs
 80113e2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80113e6:	490d      	ldr	r1, [pc, #52]	; (801141c <_scanf_float+0x400>)
 80113e8:	4630      	mov	r0, r6
 80113ea:	f000 f8cb 	bl	8011584 <siprintf>
 80113ee:	e7d1      	b.n	8011394 <_scanf_float+0x378>
 80113f0:	f011 0f04 	tst.w	r1, #4
 80113f4:	9903      	ldr	r1, [sp, #12]
 80113f6:	600a      	str	r2, [r1, #0]
 80113f8:	d1db      	bne.n	80113b2 <_scanf_float+0x396>
 80113fa:	eeb4 0b40 	vcmp.f64	d0, d0
 80113fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011402:	681e      	ldr	r6, [r3, #0]
 8011404:	d705      	bvc.n	8011412 <_scanf_float+0x3f6>
 8011406:	4806      	ldr	r0, [pc, #24]	; (8011420 <_scanf_float+0x404>)
 8011408:	f000 f9ac 	bl	8011764 <nanf>
 801140c:	ed86 0a00 	vstr	s0, [r6]
 8011410:	e7d2      	b.n	80113b8 <_scanf_float+0x39c>
 8011412:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8011416:	e7f9      	b.n	801140c <_scanf_float+0x3f0>
 8011418:	2500      	movs	r5, #0
 801141a:	e640      	b.n	801109e <_scanf_float+0x82>
 801141c:	08014f04 	.word	0x08014f04
 8011420:	08015295 	.word	0x08015295

08011424 <std>:
 8011424:	2300      	movs	r3, #0
 8011426:	b510      	push	{r4, lr}
 8011428:	4604      	mov	r4, r0
 801142a:	e9c0 3300 	strd	r3, r3, [r0]
 801142e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011432:	6083      	str	r3, [r0, #8]
 8011434:	8181      	strh	r1, [r0, #12]
 8011436:	6643      	str	r3, [r0, #100]	; 0x64
 8011438:	81c2      	strh	r2, [r0, #14]
 801143a:	6183      	str	r3, [r0, #24]
 801143c:	4619      	mov	r1, r3
 801143e:	2208      	movs	r2, #8
 8011440:	305c      	adds	r0, #92	; 0x5c
 8011442:	f000 f902 	bl	801164a <memset>
 8011446:	4b05      	ldr	r3, [pc, #20]	; (801145c <std+0x38>)
 8011448:	6263      	str	r3, [r4, #36]	; 0x24
 801144a:	4b05      	ldr	r3, [pc, #20]	; (8011460 <std+0x3c>)
 801144c:	62a3      	str	r3, [r4, #40]	; 0x28
 801144e:	4b05      	ldr	r3, [pc, #20]	; (8011464 <std+0x40>)
 8011450:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011452:	4b05      	ldr	r3, [pc, #20]	; (8011468 <std+0x44>)
 8011454:	6224      	str	r4, [r4, #32]
 8011456:	6323      	str	r3, [r4, #48]	; 0x30
 8011458:	bd10      	pop	{r4, pc}
 801145a:	bf00      	nop
 801145c:	080115c5 	.word	0x080115c5
 8011460:	080115e7 	.word	0x080115e7
 8011464:	0801161f 	.word	0x0801161f
 8011468:	08011643 	.word	0x08011643

0801146c <stdio_exit_handler>:
 801146c:	4a02      	ldr	r2, [pc, #8]	; (8011478 <stdio_exit_handler+0xc>)
 801146e:	4903      	ldr	r1, [pc, #12]	; (801147c <stdio_exit_handler+0x10>)
 8011470:	4803      	ldr	r0, [pc, #12]	; (8011480 <stdio_exit_handler+0x14>)
 8011472:	f000 b869 	b.w	8011548 <_fwalk_sglue>
 8011476:	bf00      	nop
 8011478:	24000010 	.word	0x24000010
 801147c:	08013f15 	.word	0x08013f15
 8011480:	2400001c 	.word	0x2400001c

08011484 <cleanup_stdio>:
 8011484:	6841      	ldr	r1, [r0, #4]
 8011486:	4b0c      	ldr	r3, [pc, #48]	; (80114b8 <cleanup_stdio+0x34>)
 8011488:	4299      	cmp	r1, r3
 801148a:	b510      	push	{r4, lr}
 801148c:	4604      	mov	r4, r0
 801148e:	d001      	beq.n	8011494 <cleanup_stdio+0x10>
 8011490:	f002 fd40 	bl	8013f14 <_fflush_r>
 8011494:	68a1      	ldr	r1, [r4, #8]
 8011496:	4b09      	ldr	r3, [pc, #36]	; (80114bc <cleanup_stdio+0x38>)
 8011498:	4299      	cmp	r1, r3
 801149a:	d002      	beq.n	80114a2 <cleanup_stdio+0x1e>
 801149c:	4620      	mov	r0, r4
 801149e:	f002 fd39 	bl	8013f14 <_fflush_r>
 80114a2:	68e1      	ldr	r1, [r4, #12]
 80114a4:	4b06      	ldr	r3, [pc, #24]	; (80114c0 <cleanup_stdio+0x3c>)
 80114a6:	4299      	cmp	r1, r3
 80114a8:	d004      	beq.n	80114b4 <cleanup_stdio+0x30>
 80114aa:	4620      	mov	r0, r4
 80114ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114b0:	f002 bd30 	b.w	8013f14 <_fflush_r>
 80114b4:	bd10      	pop	{r4, pc}
 80114b6:	bf00      	nop
 80114b8:	24000e00 	.word	0x24000e00
 80114bc:	24000e68 	.word	0x24000e68
 80114c0:	24000ed0 	.word	0x24000ed0

080114c4 <global_stdio_init.part.0>:
 80114c4:	b510      	push	{r4, lr}
 80114c6:	4b0b      	ldr	r3, [pc, #44]	; (80114f4 <global_stdio_init.part.0+0x30>)
 80114c8:	4c0b      	ldr	r4, [pc, #44]	; (80114f8 <global_stdio_init.part.0+0x34>)
 80114ca:	4a0c      	ldr	r2, [pc, #48]	; (80114fc <global_stdio_init.part.0+0x38>)
 80114cc:	601a      	str	r2, [r3, #0]
 80114ce:	4620      	mov	r0, r4
 80114d0:	2200      	movs	r2, #0
 80114d2:	2104      	movs	r1, #4
 80114d4:	f7ff ffa6 	bl	8011424 <std>
 80114d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80114dc:	2201      	movs	r2, #1
 80114de:	2109      	movs	r1, #9
 80114e0:	f7ff ffa0 	bl	8011424 <std>
 80114e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80114e8:	2202      	movs	r2, #2
 80114ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114ee:	2112      	movs	r1, #18
 80114f0:	f7ff bf98 	b.w	8011424 <std>
 80114f4:	24000f38 	.word	0x24000f38
 80114f8:	24000e00 	.word	0x24000e00
 80114fc:	0801146d 	.word	0x0801146d

08011500 <__sfp_lock_acquire>:
 8011500:	4801      	ldr	r0, [pc, #4]	; (8011508 <__sfp_lock_acquire+0x8>)
 8011502:	f000 b91f 	b.w	8011744 <__retarget_lock_acquire_recursive>
 8011506:	bf00      	nop
 8011508:	24000f41 	.word	0x24000f41

0801150c <__sfp_lock_release>:
 801150c:	4801      	ldr	r0, [pc, #4]	; (8011514 <__sfp_lock_release+0x8>)
 801150e:	f000 b91a 	b.w	8011746 <__retarget_lock_release_recursive>
 8011512:	bf00      	nop
 8011514:	24000f41 	.word	0x24000f41

08011518 <__sinit>:
 8011518:	b510      	push	{r4, lr}
 801151a:	4604      	mov	r4, r0
 801151c:	f7ff fff0 	bl	8011500 <__sfp_lock_acquire>
 8011520:	6a23      	ldr	r3, [r4, #32]
 8011522:	b11b      	cbz	r3, 801152c <__sinit+0x14>
 8011524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011528:	f7ff bff0 	b.w	801150c <__sfp_lock_release>
 801152c:	4b04      	ldr	r3, [pc, #16]	; (8011540 <__sinit+0x28>)
 801152e:	6223      	str	r3, [r4, #32]
 8011530:	4b04      	ldr	r3, [pc, #16]	; (8011544 <__sinit+0x2c>)
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d1f5      	bne.n	8011524 <__sinit+0xc>
 8011538:	f7ff ffc4 	bl	80114c4 <global_stdio_init.part.0>
 801153c:	e7f2      	b.n	8011524 <__sinit+0xc>
 801153e:	bf00      	nop
 8011540:	08011485 	.word	0x08011485
 8011544:	24000f38 	.word	0x24000f38

08011548 <_fwalk_sglue>:
 8011548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801154c:	4607      	mov	r7, r0
 801154e:	4688      	mov	r8, r1
 8011550:	4614      	mov	r4, r2
 8011552:	2600      	movs	r6, #0
 8011554:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011558:	f1b9 0901 	subs.w	r9, r9, #1
 801155c:	d505      	bpl.n	801156a <_fwalk_sglue+0x22>
 801155e:	6824      	ldr	r4, [r4, #0]
 8011560:	2c00      	cmp	r4, #0
 8011562:	d1f7      	bne.n	8011554 <_fwalk_sglue+0xc>
 8011564:	4630      	mov	r0, r6
 8011566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801156a:	89ab      	ldrh	r3, [r5, #12]
 801156c:	2b01      	cmp	r3, #1
 801156e:	d907      	bls.n	8011580 <_fwalk_sglue+0x38>
 8011570:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011574:	3301      	adds	r3, #1
 8011576:	d003      	beq.n	8011580 <_fwalk_sglue+0x38>
 8011578:	4629      	mov	r1, r5
 801157a:	4638      	mov	r0, r7
 801157c:	47c0      	blx	r8
 801157e:	4306      	orrs	r6, r0
 8011580:	3568      	adds	r5, #104	; 0x68
 8011582:	e7e9      	b.n	8011558 <_fwalk_sglue+0x10>

08011584 <siprintf>:
 8011584:	b40e      	push	{r1, r2, r3}
 8011586:	b500      	push	{lr}
 8011588:	b09c      	sub	sp, #112	; 0x70
 801158a:	ab1d      	add	r3, sp, #116	; 0x74
 801158c:	9002      	str	r0, [sp, #8]
 801158e:	9006      	str	r0, [sp, #24]
 8011590:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011594:	4809      	ldr	r0, [pc, #36]	; (80115bc <siprintf+0x38>)
 8011596:	9107      	str	r1, [sp, #28]
 8011598:	9104      	str	r1, [sp, #16]
 801159a:	4909      	ldr	r1, [pc, #36]	; (80115c0 <siprintf+0x3c>)
 801159c:	f853 2b04 	ldr.w	r2, [r3], #4
 80115a0:	9105      	str	r1, [sp, #20]
 80115a2:	6800      	ldr	r0, [r0, #0]
 80115a4:	9301      	str	r3, [sp, #4]
 80115a6:	a902      	add	r1, sp, #8
 80115a8:	f002 fb30 	bl	8013c0c <_svfiprintf_r>
 80115ac:	9b02      	ldr	r3, [sp, #8]
 80115ae:	2200      	movs	r2, #0
 80115b0:	701a      	strb	r2, [r3, #0]
 80115b2:	b01c      	add	sp, #112	; 0x70
 80115b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80115b8:	b003      	add	sp, #12
 80115ba:	4770      	bx	lr
 80115bc:	24000068 	.word	0x24000068
 80115c0:	ffff0208 	.word	0xffff0208

080115c4 <__sread>:
 80115c4:	b510      	push	{r4, lr}
 80115c6:	460c      	mov	r4, r1
 80115c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115cc:	f000 f86c 	bl	80116a8 <_read_r>
 80115d0:	2800      	cmp	r0, #0
 80115d2:	bfab      	itete	ge
 80115d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80115d6:	89a3      	ldrhlt	r3, [r4, #12]
 80115d8:	181b      	addge	r3, r3, r0
 80115da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80115de:	bfac      	ite	ge
 80115e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80115e2:	81a3      	strhlt	r3, [r4, #12]
 80115e4:	bd10      	pop	{r4, pc}

080115e6 <__swrite>:
 80115e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115ea:	461f      	mov	r7, r3
 80115ec:	898b      	ldrh	r3, [r1, #12]
 80115ee:	05db      	lsls	r3, r3, #23
 80115f0:	4605      	mov	r5, r0
 80115f2:	460c      	mov	r4, r1
 80115f4:	4616      	mov	r6, r2
 80115f6:	d505      	bpl.n	8011604 <__swrite+0x1e>
 80115f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115fc:	2302      	movs	r3, #2
 80115fe:	2200      	movs	r2, #0
 8011600:	f000 f840 	bl	8011684 <_lseek_r>
 8011604:	89a3      	ldrh	r3, [r4, #12]
 8011606:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801160a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801160e:	81a3      	strh	r3, [r4, #12]
 8011610:	4632      	mov	r2, r6
 8011612:	463b      	mov	r3, r7
 8011614:	4628      	mov	r0, r5
 8011616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801161a:	f000 b857 	b.w	80116cc <_write_r>

0801161e <__sseek>:
 801161e:	b510      	push	{r4, lr}
 8011620:	460c      	mov	r4, r1
 8011622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011626:	f000 f82d 	bl	8011684 <_lseek_r>
 801162a:	1c43      	adds	r3, r0, #1
 801162c:	89a3      	ldrh	r3, [r4, #12]
 801162e:	bf15      	itete	ne
 8011630:	6560      	strne	r0, [r4, #84]	; 0x54
 8011632:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011636:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801163a:	81a3      	strheq	r3, [r4, #12]
 801163c:	bf18      	it	ne
 801163e:	81a3      	strhne	r3, [r4, #12]
 8011640:	bd10      	pop	{r4, pc}

08011642 <__sclose>:
 8011642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011646:	f000 b80d 	b.w	8011664 <_close_r>

0801164a <memset>:
 801164a:	4402      	add	r2, r0
 801164c:	4603      	mov	r3, r0
 801164e:	4293      	cmp	r3, r2
 8011650:	d100      	bne.n	8011654 <memset+0xa>
 8011652:	4770      	bx	lr
 8011654:	f803 1b01 	strb.w	r1, [r3], #1
 8011658:	e7f9      	b.n	801164e <memset+0x4>
	...

0801165c <_localeconv_r>:
 801165c:	4800      	ldr	r0, [pc, #0]	; (8011660 <_localeconv_r+0x4>)
 801165e:	4770      	bx	lr
 8011660:	2400015c 	.word	0x2400015c

08011664 <_close_r>:
 8011664:	b538      	push	{r3, r4, r5, lr}
 8011666:	4d06      	ldr	r5, [pc, #24]	; (8011680 <_close_r+0x1c>)
 8011668:	2300      	movs	r3, #0
 801166a:	4604      	mov	r4, r0
 801166c:	4608      	mov	r0, r1
 801166e:	602b      	str	r3, [r5, #0]
 8011670:	f7f1 fbff 	bl	8002e72 <_close>
 8011674:	1c43      	adds	r3, r0, #1
 8011676:	d102      	bne.n	801167e <_close_r+0x1a>
 8011678:	682b      	ldr	r3, [r5, #0]
 801167a:	b103      	cbz	r3, 801167e <_close_r+0x1a>
 801167c:	6023      	str	r3, [r4, #0]
 801167e:	bd38      	pop	{r3, r4, r5, pc}
 8011680:	24000f3c 	.word	0x24000f3c

08011684 <_lseek_r>:
 8011684:	b538      	push	{r3, r4, r5, lr}
 8011686:	4d07      	ldr	r5, [pc, #28]	; (80116a4 <_lseek_r+0x20>)
 8011688:	4604      	mov	r4, r0
 801168a:	4608      	mov	r0, r1
 801168c:	4611      	mov	r1, r2
 801168e:	2200      	movs	r2, #0
 8011690:	602a      	str	r2, [r5, #0]
 8011692:	461a      	mov	r2, r3
 8011694:	f7f1 fc14 	bl	8002ec0 <_lseek>
 8011698:	1c43      	adds	r3, r0, #1
 801169a:	d102      	bne.n	80116a2 <_lseek_r+0x1e>
 801169c:	682b      	ldr	r3, [r5, #0]
 801169e:	b103      	cbz	r3, 80116a2 <_lseek_r+0x1e>
 80116a0:	6023      	str	r3, [r4, #0]
 80116a2:	bd38      	pop	{r3, r4, r5, pc}
 80116a4:	24000f3c 	.word	0x24000f3c

080116a8 <_read_r>:
 80116a8:	b538      	push	{r3, r4, r5, lr}
 80116aa:	4d07      	ldr	r5, [pc, #28]	; (80116c8 <_read_r+0x20>)
 80116ac:	4604      	mov	r4, r0
 80116ae:	4608      	mov	r0, r1
 80116b0:	4611      	mov	r1, r2
 80116b2:	2200      	movs	r2, #0
 80116b4:	602a      	str	r2, [r5, #0]
 80116b6:	461a      	mov	r2, r3
 80116b8:	f7f1 fba2 	bl	8002e00 <_read>
 80116bc:	1c43      	adds	r3, r0, #1
 80116be:	d102      	bne.n	80116c6 <_read_r+0x1e>
 80116c0:	682b      	ldr	r3, [r5, #0]
 80116c2:	b103      	cbz	r3, 80116c6 <_read_r+0x1e>
 80116c4:	6023      	str	r3, [r4, #0]
 80116c6:	bd38      	pop	{r3, r4, r5, pc}
 80116c8:	24000f3c 	.word	0x24000f3c

080116cc <_write_r>:
 80116cc:	b538      	push	{r3, r4, r5, lr}
 80116ce:	4d07      	ldr	r5, [pc, #28]	; (80116ec <_write_r+0x20>)
 80116d0:	4604      	mov	r4, r0
 80116d2:	4608      	mov	r0, r1
 80116d4:	4611      	mov	r1, r2
 80116d6:	2200      	movs	r2, #0
 80116d8:	602a      	str	r2, [r5, #0]
 80116da:	461a      	mov	r2, r3
 80116dc:	f7f1 fbad 	bl	8002e3a <_write>
 80116e0:	1c43      	adds	r3, r0, #1
 80116e2:	d102      	bne.n	80116ea <_write_r+0x1e>
 80116e4:	682b      	ldr	r3, [r5, #0]
 80116e6:	b103      	cbz	r3, 80116ea <_write_r+0x1e>
 80116e8:	6023      	str	r3, [r4, #0]
 80116ea:	bd38      	pop	{r3, r4, r5, pc}
 80116ec:	24000f3c 	.word	0x24000f3c

080116f0 <__errno>:
 80116f0:	4b01      	ldr	r3, [pc, #4]	; (80116f8 <__errno+0x8>)
 80116f2:	6818      	ldr	r0, [r3, #0]
 80116f4:	4770      	bx	lr
 80116f6:	bf00      	nop
 80116f8:	24000068 	.word	0x24000068

080116fc <__libc_init_array>:
 80116fc:	b570      	push	{r4, r5, r6, lr}
 80116fe:	4d0d      	ldr	r5, [pc, #52]	; (8011734 <__libc_init_array+0x38>)
 8011700:	4c0d      	ldr	r4, [pc, #52]	; (8011738 <__libc_init_array+0x3c>)
 8011702:	1b64      	subs	r4, r4, r5
 8011704:	10a4      	asrs	r4, r4, #2
 8011706:	2600      	movs	r6, #0
 8011708:	42a6      	cmp	r6, r4
 801170a:	d109      	bne.n	8011720 <__libc_init_array+0x24>
 801170c:	4d0b      	ldr	r5, [pc, #44]	; (801173c <__libc_init_array+0x40>)
 801170e:	4c0c      	ldr	r4, [pc, #48]	; (8011740 <__libc_init_array+0x44>)
 8011710:	f003 fb0a 	bl	8014d28 <_init>
 8011714:	1b64      	subs	r4, r4, r5
 8011716:	10a4      	asrs	r4, r4, #2
 8011718:	2600      	movs	r6, #0
 801171a:	42a6      	cmp	r6, r4
 801171c:	d105      	bne.n	801172a <__libc_init_array+0x2e>
 801171e:	bd70      	pop	{r4, r5, r6, pc}
 8011720:	f855 3b04 	ldr.w	r3, [r5], #4
 8011724:	4798      	blx	r3
 8011726:	3601      	adds	r6, #1
 8011728:	e7ee      	b.n	8011708 <__libc_init_array+0xc>
 801172a:	f855 3b04 	ldr.w	r3, [r5], #4
 801172e:	4798      	blx	r3
 8011730:	3601      	adds	r6, #1
 8011732:	e7f2      	b.n	801171a <__libc_init_array+0x1e>
 8011734:	08015300 	.word	0x08015300
 8011738:	08015300 	.word	0x08015300
 801173c:	08015300 	.word	0x08015300
 8011740:	08015304 	.word	0x08015304

08011744 <__retarget_lock_acquire_recursive>:
 8011744:	4770      	bx	lr

08011746 <__retarget_lock_release_recursive>:
 8011746:	4770      	bx	lr

08011748 <memcpy>:
 8011748:	440a      	add	r2, r1
 801174a:	4291      	cmp	r1, r2
 801174c:	f100 33ff 	add.w	r3, r0, #4294967295
 8011750:	d100      	bne.n	8011754 <memcpy+0xc>
 8011752:	4770      	bx	lr
 8011754:	b510      	push	{r4, lr}
 8011756:	f811 4b01 	ldrb.w	r4, [r1], #1
 801175a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801175e:	4291      	cmp	r1, r2
 8011760:	d1f9      	bne.n	8011756 <memcpy+0xe>
 8011762:	bd10      	pop	{r4, pc}

08011764 <nanf>:
 8011764:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801176c <nanf+0x8>
 8011768:	4770      	bx	lr
 801176a:	bf00      	nop
 801176c:	7fc00000 	.word	0x7fc00000

08011770 <quorem>:
 8011770:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011774:	6903      	ldr	r3, [r0, #16]
 8011776:	690c      	ldr	r4, [r1, #16]
 8011778:	42a3      	cmp	r3, r4
 801177a:	4607      	mov	r7, r0
 801177c:	db7e      	blt.n	801187c <quorem+0x10c>
 801177e:	3c01      	subs	r4, #1
 8011780:	f101 0814 	add.w	r8, r1, #20
 8011784:	f100 0514 	add.w	r5, r0, #20
 8011788:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801178c:	9301      	str	r3, [sp, #4]
 801178e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011792:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011796:	3301      	adds	r3, #1
 8011798:	429a      	cmp	r2, r3
 801179a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801179e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80117a2:	fbb2 f6f3 	udiv	r6, r2, r3
 80117a6:	d331      	bcc.n	801180c <quorem+0x9c>
 80117a8:	f04f 0e00 	mov.w	lr, #0
 80117ac:	4640      	mov	r0, r8
 80117ae:	46ac      	mov	ip, r5
 80117b0:	46f2      	mov	sl, lr
 80117b2:	f850 2b04 	ldr.w	r2, [r0], #4
 80117b6:	b293      	uxth	r3, r2
 80117b8:	fb06 e303 	mla	r3, r6, r3, lr
 80117bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80117c0:	0c1a      	lsrs	r2, r3, #16
 80117c2:	b29b      	uxth	r3, r3
 80117c4:	ebaa 0303 	sub.w	r3, sl, r3
 80117c8:	f8dc a000 	ldr.w	sl, [ip]
 80117cc:	fa13 f38a 	uxtah	r3, r3, sl
 80117d0:	fb06 220e 	mla	r2, r6, lr, r2
 80117d4:	9300      	str	r3, [sp, #0]
 80117d6:	9b00      	ldr	r3, [sp, #0]
 80117d8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80117dc:	b292      	uxth	r2, r2
 80117de:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80117e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80117e6:	f8bd 3000 	ldrh.w	r3, [sp]
 80117ea:	4581      	cmp	r9, r0
 80117ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80117f0:	f84c 3b04 	str.w	r3, [ip], #4
 80117f4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80117f8:	d2db      	bcs.n	80117b2 <quorem+0x42>
 80117fa:	f855 300b 	ldr.w	r3, [r5, fp]
 80117fe:	b92b      	cbnz	r3, 801180c <quorem+0x9c>
 8011800:	9b01      	ldr	r3, [sp, #4]
 8011802:	3b04      	subs	r3, #4
 8011804:	429d      	cmp	r5, r3
 8011806:	461a      	mov	r2, r3
 8011808:	d32c      	bcc.n	8011864 <quorem+0xf4>
 801180a:	613c      	str	r4, [r7, #16]
 801180c:	4638      	mov	r0, r7
 801180e:	f001 f969 	bl	8012ae4 <__mcmp>
 8011812:	2800      	cmp	r0, #0
 8011814:	db22      	blt.n	801185c <quorem+0xec>
 8011816:	3601      	adds	r6, #1
 8011818:	4629      	mov	r1, r5
 801181a:	2000      	movs	r0, #0
 801181c:	f858 2b04 	ldr.w	r2, [r8], #4
 8011820:	f8d1 c000 	ldr.w	ip, [r1]
 8011824:	b293      	uxth	r3, r2
 8011826:	1ac3      	subs	r3, r0, r3
 8011828:	0c12      	lsrs	r2, r2, #16
 801182a:	fa13 f38c 	uxtah	r3, r3, ip
 801182e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8011832:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011836:	b29b      	uxth	r3, r3
 8011838:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801183c:	45c1      	cmp	r9, r8
 801183e:	f841 3b04 	str.w	r3, [r1], #4
 8011842:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011846:	d2e9      	bcs.n	801181c <quorem+0xac>
 8011848:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801184c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011850:	b922      	cbnz	r2, 801185c <quorem+0xec>
 8011852:	3b04      	subs	r3, #4
 8011854:	429d      	cmp	r5, r3
 8011856:	461a      	mov	r2, r3
 8011858:	d30a      	bcc.n	8011870 <quorem+0x100>
 801185a:	613c      	str	r4, [r7, #16]
 801185c:	4630      	mov	r0, r6
 801185e:	b003      	add	sp, #12
 8011860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011864:	6812      	ldr	r2, [r2, #0]
 8011866:	3b04      	subs	r3, #4
 8011868:	2a00      	cmp	r2, #0
 801186a:	d1ce      	bne.n	801180a <quorem+0x9a>
 801186c:	3c01      	subs	r4, #1
 801186e:	e7c9      	b.n	8011804 <quorem+0x94>
 8011870:	6812      	ldr	r2, [r2, #0]
 8011872:	3b04      	subs	r3, #4
 8011874:	2a00      	cmp	r2, #0
 8011876:	d1f0      	bne.n	801185a <quorem+0xea>
 8011878:	3c01      	subs	r4, #1
 801187a:	e7eb      	b.n	8011854 <quorem+0xe4>
 801187c:	2000      	movs	r0, #0
 801187e:	e7ee      	b.n	801185e <quorem+0xee>

08011880 <_dtoa_r>:
 8011880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011884:	ed2d 8b02 	vpush	{d8}
 8011888:	69c5      	ldr	r5, [r0, #28]
 801188a:	b091      	sub	sp, #68	; 0x44
 801188c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011890:	ec59 8b10 	vmov	r8, r9, d0
 8011894:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8011896:	9106      	str	r1, [sp, #24]
 8011898:	4606      	mov	r6, r0
 801189a:	9208      	str	r2, [sp, #32]
 801189c:	930c      	str	r3, [sp, #48]	; 0x30
 801189e:	b975      	cbnz	r5, 80118be <_dtoa_r+0x3e>
 80118a0:	2010      	movs	r0, #16
 80118a2:	f000 fda5 	bl	80123f0 <malloc>
 80118a6:	4602      	mov	r2, r0
 80118a8:	61f0      	str	r0, [r6, #28]
 80118aa:	b920      	cbnz	r0, 80118b6 <_dtoa_r+0x36>
 80118ac:	4ba6      	ldr	r3, [pc, #664]	; (8011b48 <_dtoa_r+0x2c8>)
 80118ae:	21ef      	movs	r1, #239	; 0xef
 80118b0:	48a6      	ldr	r0, [pc, #664]	; (8011b4c <_dtoa_r+0x2cc>)
 80118b2:	f002 fb9d 	bl	8013ff0 <__assert_func>
 80118b6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80118ba:	6005      	str	r5, [r0, #0]
 80118bc:	60c5      	str	r5, [r0, #12]
 80118be:	69f3      	ldr	r3, [r6, #28]
 80118c0:	6819      	ldr	r1, [r3, #0]
 80118c2:	b151      	cbz	r1, 80118da <_dtoa_r+0x5a>
 80118c4:	685a      	ldr	r2, [r3, #4]
 80118c6:	604a      	str	r2, [r1, #4]
 80118c8:	2301      	movs	r3, #1
 80118ca:	4093      	lsls	r3, r2
 80118cc:	608b      	str	r3, [r1, #8]
 80118ce:	4630      	mov	r0, r6
 80118d0:	f000 fe82 	bl	80125d8 <_Bfree>
 80118d4:	69f3      	ldr	r3, [r6, #28]
 80118d6:	2200      	movs	r2, #0
 80118d8:	601a      	str	r2, [r3, #0]
 80118da:	f1b9 0300 	subs.w	r3, r9, #0
 80118de:	bfbb      	ittet	lt
 80118e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80118e4:	9303      	strlt	r3, [sp, #12]
 80118e6:	2300      	movge	r3, #0
 80118e8:	2201      	movlt	r2, #1
 80118ea:	bfac      	ite	ge
 80118ec:	6023      	strge	r3, [r4, #0]
 80118ee:	6022      	strlt	r2, [r4, #0]
 80118f0:	4b97      	ldr	r3, [pc, #604]	; (8011b50 <_dtoa_r+0x2d0>)
 80118f2:	9c03      	ldr	r4, [sp, #12]
 80118f4:	43a3      	bics	r3, r4
 80118f6:	d11c      	bne.n	8011932 <_dtoa_r+0xb2>
 80118f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80118fa:	f242 730f 	movw	r3, #9999	; 0x270f
 80118fe:	6013      	str	r3, [r2, #0]
 8011900:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8011904:	ea53 0308 	orrs.w	r3, r3, r8
 8011908:	f000 84fb 	beq.w	8012302 <_dtoa_r+0xa82>
 801190c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801190e:	b963      	cbnz	r3, 801192a <_dtoa_r+0xaa>
 8011910:	4b90      	ldr	r3, [pc, #576]	; (8011b54 <_dtoa_r+0x2d4>)
 8011912:	e020      	b.n	8011956 <_dtoa_r+0xd6>
 8011914:	4b90      	ldr	r3, [pc, #576]	; (8011b58 <_dtoa_r+0x2d8>)
 8011916:	9301      	str	r3, [sp, #4]
 8011918:	3308      	adds	r3, #8
 801191a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801191c:	6013      	str	r3, [r2, #0]
 801191e:	9801      	ldr	r0, [sp, #4]
 8011920:	b011      	add	sp, #68	; 0x44
 8011922:	ecbd 8b02 	vpop	{d8}
 8011926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801192a:	4b8a      	ldr	r3, [pc, #552]	; (8011b54 <_dtoa_r+0x2d4>)
 801192c:	9301      	str	r3, [sp, #4]
 801192e:	3303      	adds	r3, #3
 8011930:	e7f3      	b.n	801191a <_dtoa_r+0x9a>
 8011932:	ed9d 8b02 	vldr	d8, [sp, #8]
 8011936:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801193a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801193e:	d10c      	bne.n	801195a <_dtoa_r+0xda>
 8011940:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011942:	2301      	movs	r3, #1
 8011944:	6013      	str	r3, [r2, #0]
 8011946:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011948:	2b00      	cmp	r3, #0
 801194a:	f000 84d7 	beq.w	80122fc <_dtoa_r+0xa7c>
 801194e:	4b83      	ldr	r3, [pc, #524]	; (8011b5c <_dtoa_r+0x2dc>)
 8011950:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011952:	6013      	str	r3, [r2, #0]
 8011954:	3b01      	subs	r3, #1
 8011956:	9301      	str	r3, [sp, #4]
 8011958:	e7e1      	b.n	801191e <_dtoa_r+0x9e>
 801195a:	aa0e      	add	r2, sp, #56	; 0x38
 801195c:	a90f      	add	r1, sp, #60	; 0x3c
 801195e:	4630      	mov	r0, r6
 8011960:	eeb0 0b48 	vmov.f64	d0, d8
 8011964:	f001 f9d4 	bl	8012d10 <__d2b>
 8011968:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801196c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801196e:	4605      	mov	r5, r0
 8011970:	2b00      	cmp	r3, #0
 8011972:	d046      	beq.n	8011a02 <_dtoa_r+0x182>
 8011974:	eeb0 7b48 	vmov.f64	d7, d8
 8011978:	ee18 1a90 	vmov	r1, s17
 801197c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8011980:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8011984:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8011988:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801198c:	2000      	movs	r0, #0
 801198e:	ee07 1a90 	vmov	s15, r1
 8011992:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8011996:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8011b30 <_dtoa_r+0x2b0>
 801199a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801199e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8011b38 <_dtoa_r+0x2b8>
 80119a2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80119a6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8011b40 <_dtoa_r+0x2c0>
 80119aa:	ee07 3a90 	vmov	s15, r3
 80119ae:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80119b2:	eeb0 7b46 	vmov.f64	d7, d6
 80119b6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80119ba:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80119be:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80119c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119c6:	ee16 ba90 	vmov	fp, s13
 80119ca:	9009      	str	r0, [sp, #36]	; 0x24
 80119cc:	d508      	bpl.n	80119e0 <_dtoa_r+0x160>
 80119ce:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80119d2:	eeb4 6b47 	vcmp.f64	d6, d7
 80119d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119da:	bf18      	it	ne
 80119dc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80119e0:	f1bb 0f16 	cmp.w	fp, #22
 80119e4:	d82b      	bhi.n	8011a3e <_dtoa_r+0x1be>
 80119e6:	495e      	ldr	r1, [pc, #376]	; (8011b60 <_dtoa_r+0x2e0>)
 80119e8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80119ec:	ed91 7b00 	vldr	d7, [r1]
 80119f0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80119f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119f8:	d501      	bpl.n	80119fe <_dtoa_r+0x17e>
 80119fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80119fe:	2100      	movs	r1, #0
 8011a00:	e01e      	b.n	8011a40 <_dtoa_r+0x1c0>
 8011a02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011a04:	4413      	add	r3, r2
 8011a06:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8011a0a:	2920      	cmp	r1, #32
 8011a0c:	bfc1      	itttt	gt
 8011a0e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8011a12:	408c      	lslgt	r4, r1
 8011a14:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8011a18:	fa28 f101 	lsrgt.w	r1, r8, r1
 8011a1c:	bfd6      	itet	le
 8011a1e:	f1c1 0120 	rsble	r1, r1, #32
 8011a22:	4321      	orrgt	r1, r4
 8011a24:	fa08 f101 	lslle.w	r1, r8, r1
 8011a28:	ee07 1a90 	vmov	s15, r1
 8011a2c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011a30:	3b01      	subs	r3, #1
 8011a32:	ee17 1a90 	vmov	r1, s15
 8011a36:	2001      	movs	r0, #1
 8011a38:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8011a3c:	e7a7      	b.n	801198e <_dtoa_r+0x10e>
 8011a3e:	2101      	movs	r1, #1
 8011a40:	1ad2      	subs	r2, r2, r3
 8011a42:	1e53      	subs	r3, r2, #1
 8011a44:	9305      	str	r3, [sp, #20]
 8011a46:	bf45      	ittet	mi
 8011a48:	f1c2 0301 	rsbmi	r3, r2, #1
 8011a4c:	9304      	strmi	r3, [sp, #16]
 8011a4e:	2300      	movpl	r3, #0
 8011a50:	2300      	movmi	r3, #0
 8011a52:	bf4c      	ite	mi
 8011a54:	9305      	strmi	r3, [sp, #20]
 8011a56:	9304      	strpl	r3, [sp, #16]
 8011a58:	f1bb 0f00 	cmp.w	fp, #0
 8011a5c:	910b      	str	r1, [sp, #44]	; 0x2c
 8011a5e:	db18      	blt.n	8011a92 <_dtoa_r+0x212>
 8011a60:	9b05      	ldr	r3, [sp, #20]
 8011a62:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8011a66:	445b      	add	r3, fp
 8011a68:	9305      	str	r3, [sp, #20]
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	9a06      	ldr	r2, [sp, #24]
 8011a6e:	2a09      	cmp	r2, #9
 8011a70:	d848      	bhi.n	8011b04 <_dtoa_r+0x284>
 8011a72:	2a05      	cmp	r2, #5
 8011a74:	bfc4      	itt	gt
 8011a76:	3a04      	subgt	r2, #4
 8011a78:	9206      	strgt	r2, [sp, #24]
 8011a7a:	9a06      	ldr	r2, [sp, #24]
 8011a7c:	f1a2 0202 	sub.w	r2, r2, #2
 8011a80:	bfcc      	ite	gt
 8011a82:	2400      	movgt	r4, #0
 8011a84:	2401      	movle	r4, #1
 8011a86:	2a03      	cmp	r2, #3
 8011a88:	d847      	bhi.n	8011b1a <_dtoa_r+0x29a>
 8011a8a:	e8df f002 	tbb	[pc, r2]
 8011a8e:	2d0b      	.short	0x2d0b
 8011a90:	392b      	.short	0x392b
 8011a92:	9b04      	ldr	r3, [sp, #16]
 8011a94:	2200      	movs	r2, #0
 8011a96:	eba3 030b 	sub.w	r3, r3, fp
 8011a9a:	9304      	str	r3, [sp, #16]
 8011a9c:	920a      	str	r2, [sp, #40]	; 0x28
 8011a9e:	f1cb 0300 	rsb	r3, fp, #0
 8011aa2:	e7e3      	b.n	8011a6c <_dtoa_r+0x1ec>
 8011aa4:	2200      	movs	r2, #0
 8011aa6:	9207      	str	r2, [sp, #28]
 8011aa8:	9a08      	ldr	r2, [sp, #32]
 8011aaa:	2a00      	cmp	r2, #0
 8011aac:	dc38      	bgt.n	8011b20 <_dtoa_r+0x2a0>
 8011aae:	f04f 0a01 	mov.w	sl, #1
 8011ab2:	46d1      	mov	r9, sl
 8011ab4:	4652      	mov	r2, sl
 8011ab6:	f8cd a020 	str.w	sl, [sp, #32]
 8011aba:	69f7      	ldr	r7, [r6, #28]
 8011abc:	2100      	movs	r1, #0
 8011abe:	2004      	movs	r0, #4
 8011ac0:	f100 0c14 	add.w	ip, r0, #20
 8011ac4:	4594      	cmp	ip, r2
 8011ac6:	d930      	bls.n	8011b2a <_dtoa_r+0x2aa>
 8011ac8:	6079      	str	r1, [r7, #4]
 8011aca:	4630      	mov	r0, r6
 8011acc:	930d      	str	r3, [sp, #52]	; 0x34
 8011ace:	f000 fd43 	bl	8012558 <_Balloc>
 8011ad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011ad4:	9001      	str	r0, [sp, #4]
 8011ad6:	4602      	mov	r2, r0
 8011ad8:	2800      	cmp	r0, #0
 8011ada:	d145      	bne.n	8011b68 <_dtoa_r+0x2e8>
 8011adc:	4b21      	ldr	r3, [pc, #132]	; (8011b64 <_dtoa_r+0x2e4>)
 8011ade:	f240 11af 	movw	r1, #431	; 0x1af
 8011ae2:	e6e5      	b.n	80118b0 <_dtoa_r+0x30>
 8011ae4:	2201      	movs	r2, #1
 8011ae6:	e7de      	b.n	8011aa6 <_dtoa_r+0x226>
 8011ae8:	2200      	movs	r2, #0
 8011aea:	9207      	str	r2, [sp, #28]
 8011aec:	9a08      	ldr	r2, [sp, #32]
 8011aee:	eb0b 0a02 	add.w	sl, fp, r2
 8011af2:	f10a 0901 	add.w	r9, sl, #1
 8011af6:	464a      	mov	r2, r9
 8011af8:	2a01      	cmp	r2, #1
 8011afa:	bfb8      	it	lt
 8011afc:	2201      	movlt	r2, #1
 8011afe:	e7dc      	b.n	8011aba <_dtoa_r+0x23a>
 8011b00:	2201      	movs	r2, #1
 8011b02:	e7f2      	b.n	8011aea <_dtoa_r+0x26a>
 8011b04:	2401      	movs	r4, #1
 8011b06:	2200      	movs	r2, #0
 8011b08:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8011b0c:	f04f 3aff 	mov.w	sl, #4294967295
 8011b10:	2100      	movs	r1, #0
 8011b12:	46d1      	mov	r9, sl
 8011b14:	2212      	movs	r2, #18
 8011b16:	9108      	str	r1, [sp, #32]
 8011b18:	e7cf      	b.n	8011aba <_dtoa_r+0x23a>
 8011b1a:	2201      	movs	r2, #1
 8011b1c:	9207      	str	r2, [sp, #28]
 8011b1e:	e7f5      	b.n	8011b0c <_dtoa_r+0x28c>
 8011b20:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011b24:	46d1      	mov	r9, sl
 8011b26:	4652      	mov	r2, sl
 8011b28:	e7c7      	b.n	8011aba <_dtoa_r+0x23a>
 8011b2a:	3101      	adds	r1, #1
 8011b2c:	0040      	lsls	r0, r0, #1
 8011b2e:	e7c7      	b.n	8011ac0 <_dtoa_r+0x240>
 8011b30:	636f4361 	.word	0x636f4361
 8011b34:	3fd287a7 	.word	0x3fd287a7
 8011b38:	8b60c8b3 	.word	0x8b60c8b3
 8011b3c:	3fc68a28 	.word	0x3fc68a28
 8011b40:	509f79fb 	.word	0x509f79fb
 8011b44:	3fd34413 	.word	0x3fd34413
 8011b48:	08014f16 	.word	0x08014f16
 8011b4c:	08014f2d 	.word	0x08014f2d
 8011b50:	7ff00000 	.word	0x7ff00000
 8011b54:	08014f12 	.word	0x08014f12
 8011b58:	08014f09 	.word	0x08014f09
 8011b5c:	08014ee1 	.word	0x08014ee1
 8011b60:	08015018 	.word	0x08015018
 8011b64:	08014f85 	.word	0x08014f85
 8011b68:	69f2      	ldr	r2, [r6, #28]
 8011b6a:	9901      	ldr	r1, [sp, #4]
 8011b6c:	6011      	str	r1, [r2, #0]
 8011b6e:	f1b9 0f0e 	cmp.w	r9, #14
 8011b72:	d86c      	bhi.n	8011c4e <_dtoa_r+0x3ce>
 8011b74:	2c00      	cmp	r4, #0
 8011b76:	d06a      	beq.n	8011c4e <_dtoa_r+0x3ce>
 8011b78:	f1bb 0f00 	cmp.w	fp, #0
 8011b7c:	f340 80a0 	ble.w	8011cc0 <_dtoa_r+0x440>
 8011b80:	4ac1      	ldr	r2, [pc, #772]	; (8011e88 <_dtoa_r+0x608>)
 8011b82:	f00b 010f 	and.w	r1, fp, #15
 8011b86:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8011b8a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8011b8e:	ed92 7b00 	vldr	d7, [r2]
 8011b92:	ea4f 122b 	mov.w	r2, fp, asr #4
 8011b96:	f000 8087 	beq.w	8011ca8 <_dtoa_r+0x428>
 8011b9a:	49bc      	ldr	r1, [pc, #752]	; (8011e8c <_dtoa_r+0x60c>)
 8011b9c:	ed91 6b08 	vldr	d6, [r1, #32]
 8011ba0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8011ba4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011ba8:	f002 020f 	and.w	r2, r2, #15
 8011bac:	2103      	movs	r1, #3
 8011bae:	48b7      	ldr	r0, [pc, #732]	; (8011e8c <_dtoa_r+0x60c>)
 8011bb0:	2a00      	cmp	r2, #0
 8011bb2:	d17b      	bne.n	8011cac <_dtoa_r+0x42c>
 8011bb4:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011bb8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011bbc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011bc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011bc2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011bc6:	2a00      	cmp	r2, #0
 8011bc8:	f000 80a0 	beq.w	8011d0c <_dtoa_r+0x48c>
 8011bcc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011bd0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bd8:	f140 8098 	bpl.w	8011d0c <_dtoa_r+0x48c>
 8011bdc:	f1b9 0f00 	cmp.w	r9, #0
 8011be0:	f000 8094 	beq.w	8011d0c <_dtoa_r+0x48c>
 8011be4:	f1ba 0f00 	cmp.w	sl, #0
 8011be8:	dd2f      	ble.n	8011c4a <_dtoa_r+0x3ca>
 8011bea:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8011bee:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011bf2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011bf6:	f10b 32ff 	add.w	r2, fp, #4294967295
 8011bfa:	3101      	adds	r1, #1
 8011bfc:	4654      	mov	r4, sl
 8011bfe:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011c02:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8011c06:	ee07 1a90 	vmov	s15, r1
 8011c0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011c0e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8011c12:	ee15 7a90 	vmov	r7, s11
 8011c16:	ec51 0b15 	vmov	r0, r1, d5
 8011c1a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8011c1e:	2c00      	cmp	r4, #0
 8011c20:	d177      	bne.n	8011d12 <_dtoa_r+0x492>
 8011c22:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011c26:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011c2a:	ec41 0b17 	vmov	d7, r0, r1
 8011c2e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c36:	f300 826a 	bgt.w	801210e <_dtoa_r+0x88e>
 8011c3a:	eeb1 7b47 	vneg.f64	d7, d7
 8011c3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c46:	f100 8260 	bmi.w	801210a <_dtoa_r+0x88a>
 8011c4a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011c4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011c50:	2a00      	cmp	r2, #0
 8011c52:	f2c0 811d 	blt.w	8011e90 <_dtoa_r+0x610>
 8011c56:	f1bb 0f0e 	cmp.w	fp, #14
 8011c5a:	f300 8119 	bgt.w	8011e90 <_dtoa_r+0x610>
 8011c5e:	4b8a      	ldr	r3, [pc, #552]	; (8011e88 <_dtoa_r+0x608>)
 8011c60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011c64:	ed93 6b00 	vldr	d6, [r3]
 8011c68:	9b08      	ldr	r3, [sp, #32]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	f280 80b7 	bge.w	8011dde <_dtoa_r+0x55e>
 8011c70:	f1b9 0f00 	cmp.w	r9, #0
 8011c74:	f300 80b3 	bgt.w	8011dde <_dtoa_r+0x55e>
 8011c78:	f040 8246 	bne.w	8012108 <_dtoa_r+0x888>
 8011c7c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011c80:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011c84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011c88:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c90:	464c      	mov	r4, r9
 8011c92:	464f      	mov	r7, r9
 8011c94:	f280 821c 	bge.w	80120d0 <_dtoa_r+0x850>
 8011c98:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011c9c:	2331      	movs	r3, #49	; 0x31
 8011c9e:	f808 3b01 	strb.w	r3, [r8], #1
 8011ca2:	f10b 0b01 	add.w	fp, fp, #1
 8011ca6:	e218      	b.n	80120da <_dtoa_r+0x85a>
 8011ca8:	2102      	movs	r1, #2
 8011caa:	e780      	b.n	8011bae <_dtoa_r+0x32e>
 8011cac:	07d4      	lsls	r4, r2, #31
 8011cae:	d504      	bpl.n	8011cba <_dtoa_r+0x43a>
 8011cb0:	ed90 6b00 	vldr	d6, [r0]
 8011cb4:	3101      	adds	r1, #1
 8011cb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011cba:	1052      	asrs	r2, r2, #1
 8011cbc:	3008      	adds	r0, #8
 8011cbe:	e777      	b.n	8011bb0 <_dtoa_r+0x330>
 8011cc0:	d022      	beq.n	8011d08 <_dtoa_r+0x488>
 8011cc2:	f1cb 0200 	rsb	r2, fp, #0
 8011cc6:	4970      	ldr	r1, [pc, #448]	; (8011e88 <_dtoa_r+0x608>)
 8011cc8:	f002 000f 	and.w	r0, r2, #15
 8011ccc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8011cd0:	ed91 7b00 	vldr	d7, [r1]
 8011cd4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8011cd8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011cdc:	486b      	ldr	r0, [pc, #428]	; (8011e8c <_dtoa_r+0x60c>)
 8011cde:	1112      	asrs	r2, r2, #4
 8011ce0:	2400      	movs	r4, #0
 8011ce2:	2102      	movs	r1, #2
 8011ce4:	b92a      	cbnz	r2, 8011cf2 <_dtoa_r+0x472>
 8011ce6:	2c00      	cmp	r4, #0
 8011ce8:	f43f af6a 	beq.w	8011bc0 <_dtoa_r+0x340>
 8011cec:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011cf0:	e766      	b.n	8011bc0 <_dtoa_r+0x340>
 8011cf2:	07d7      	lsls	r7, r2, #31
 8011cf4:	d505      	bpl.n	8011d02 <_dtoa_r+0x482>
 8011cf6:	ed90 6b00 	vldr	d6, [r0]
 8011cfa:	3101      	adds	r1, #1
 8011cfc:	2401      	movs	r4, #1
 8011cfe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011d02:	1052      	asrs	r2, r2, #1
 8011d04:	3008      	adds	r0, #8
 8011d06:	e7ed      	b.n	8011ce4 <_dtoa_r+0x464>
 8011d08:	2102      	movs	r1, #2
 8011d0a:	e759      	b.n	8011bc0 <_dtoa_r+0x340>
 8011d0c:	465a      	mov	r2, fp
 8011d0e:	464c      	mov	r4, r9
 8011d10:	e775      	b.n	8011bfe <_dtoa_r+0x37e>
 8011d12:	ec41 0b17 	vmov	d7, r0, r1
 8011d16:	495c      	ldr	r1, [pc, #368]	; (8011e88 <_dtoa_r+0x608>)
 8011d18:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8011d1c:	ed11 4b02 	vldr	d4, [r1, #-8]
 8011d20:	9901      	ldr	r1, [sp, #4]
 8011d22:	440c      	add	r4, r1
 8011d24:	9907      	ldr	r1, [sp, #28]
 8011d26:	b351      	cbz	r1, 8011d7e <_dtoa_r+0x4fe>
 8011d28:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8011d2c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8011d30:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011d34:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8011d38:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011d3c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011d40:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011d44:	ee14 1a90 	vmov	r1, s9
 8011d48:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011d4c:	3130      	adds	r1, #48	; 0x30
 8011d4e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011d52:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d5a:	f808 1b01 	strb.w	r1, [r8], #1
 8011d5e:	d439      	bmi.n	8011dd4 <_dtoa_r+0x554>
 8011d60:	ee32 5b46 	vsub.f64	d5, d2, d6
 8011d64:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8011d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d6c:	d472      	bmi.n	8011e54 <_dtoa_r+0x5d4>
 8011d6e:	45a0      	cmp	r8, r4
 8011d70:	f43f af6b 	beq.w	8011c4a <_dtoa_r+0x3ca>
 8011d74:	ee27 7b03 	vmul.f64	d7, d7, d3
 8011d78:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011d7c:	e7e0      	b.n	8011d40 <_dtoa_r+0x4c0>
 8011d7e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011d82:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011d86:	4620      	mov	r0, r4
 8011d88:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011d8c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011d90:	ee14 1a90 	vmov	r1, s9
 8011d94:	3130      	adds	r1, #48	; 0x30
 8011d96:	f808 1b01 	strb.w	r1, [r8], #1
 8011d9a:	45a0      	cmp	r8, r4
 8011d9c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011da0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011da4:	d118      	bne.n	8011dd8 <_dtoa_r+0x558>
 8011da6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011daa:	ee37 4b05 	vadd.f64	d4, d7, d5
 8011dae:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8011db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011db6:	dc4d      	bgt.n	8011e54 <_dtoa_r+0x5d4>
 8011db8:	ee35 5b47 	vsub.f64	d5, d5, d7
 8011dbc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8011dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dc4:	f57f af41 	bpl.w	8011c4a <_dtoa_r+0x3ca>
 8011dc8:	4680      	mov	r8, r0
 8011dca:	3801      	subs	r0, #1
 8011dcc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8011dd0:	2b30      	cmp	r3, #48	; 0x30
 8011dd2:	d0f9      	beq.n	8011dc8 <_dtoa_r+0x548>
 8011dd4:	4693      	mov	fp, r2
 8011dd6:	e02a      	b.n	8011e2e <_dtoa_r+0x5ae>
 8011dd8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011ddc:	e7d6      	b.n	8011d8c <_dtoa_r+0x50c>
 8011dde:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011de2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8011de6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011dea:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8011dee:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8011df2:	ee15 3a10 	vmov	r3, s10
 8011df6:	3330      	adds	r3, #48	; 0x30
 8011df8:	f808 3b01 	strb.w	r3, [r8], #1
 8011dfc:	9b01      	ldr	r3, [sp, #4]
 8011dfe:	eba8 0303 	sub.w	r3, r8, r3
 8011e02:	4599      	cmp	r9, r3
 8011e04:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8011e08:	eea3 7b46 	vfms.f64	d7, d3, d6
 8011e0c:	d133      	bne.n	8011e76 <_dtoa_r+0x5f6>
 8011e0e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011e12:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e1a:	dc1a      	bgt.n	8011e52 <_dtoa_r+0x5d2>
 8011e1c:	eeb4 7b46 	vcmp.f64	d7, d6
 8011e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e24:	d103      	bne.n	8011e2e <_dtoa_r+0x5ae>
 8011e26:	ee15 3a10 	vmov	r3, s10
 8011e2a:	07d9      	lsls	r1, r3, #31
 8011e2c:	d411      	bmi.n	8011e52 <_dtoa_r+0x5d2>
 8011e2e:	4629      	mov	r1, r5
 8011e30:	4630      	mov	r0, r6
 8011e32:	f000 fbd1 	bl	80125d8 <_Bfree>
 8011e36:	2300      	movs	r3, #0
 8011e38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011e3a:	f888 3000 	strb.w	r3, [r8]
 8011e3e:	f10b 0301 	add.w	r3, fp, #1
 8011e42:	6013      	str	r3, [r2, #0]
 8011e44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	f43f ad69 	beq.w	801191e <_dtoa_r+0x9e>
 8011e4c:	f8c3 8000 	str.w	r8, [r3]
 8011e50:	e565      	b.n	801191e <_dtoa_r+0x9e>
 8011e52:	465a      	mov	r2, fp
 8011e54:	4643      	mov	r3, r8
 8011e56:	4698      	mov	r8, r3
 8011e58:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8011e5c:	2939      	cmp	r1, #57	; 0x39
 8011e5e:	d106      	bne.n	8011e6e <_dtoa_r+0x5ee>
 8011e60:	9901      	ldr	r1, [sp, #4]
 8011e62:	4299      	cmp	r1, r3
 8011e64:	d1f7      	bne.n	8011e56 <_dtoa_r+0x5d6>
 8011e66:	9801      	ldr	r0, [sp, #4]
 8011e68:	2130      	movs	r1, #48	; 0x30
 8011e6a:	3201      	adds	r2, #1
 8011e6c:	7001      	strb	r1, [r0, #0]
 8011e6e:	7819      	ldrb	r1, [r3, #0]
 8011e70:	3101      	adds	r1, #1
 8011e72:	7019      	strb	r1, [r3, #0]
 8011e74:	e7ae      	b.n	8011dd4 <_dtoa_r+0x554>
 8011e76:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011e7a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e82:	d1b2      	bne.n	8011dea <_dtoa_r+0x56a>
 8011e84:	e7d3      	b.n	8011e2e <_dtoa_r+0x5ae>
 8011e86:	bf00      	nop
 8011e88:	08015018 	.word	0x08015018
 8011e8c:	08014ff0 	.word	0x08014ff0
 8011e90:	9907      	ldr	r1, [sp, #28]
 8011e92:	2900      	cmp	r1, #0
 8011e94:	f000 80d0 	beq.w	8012038 <_dtoa_r+0x7b8>
 8011e98:	9906      	ldr	r1, [sp, #24]
 8011e9a:	2901      	cmp	r1, #1
 8011e9c:	f300 80b4 	bgt.w	8012008 <_dtoa_r+0x788>
 8011ea0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011ea2:	2900      	cmp	r1, #0
 8011ea4:	f000 80ac 	beq.w	8012000 <_dtoa_r+0x780>
 8011ea8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011eac:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011eb0:	461c      	mov	r4, r3
 8011eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8011eb4:	9b04      	ldr	r3, [sp, #16]
 8011eb6:	4413      	add	r3, r2
 8011eb8:	9304      	str	r3, [sp, #16]
 8011eba:	9b05      	ldr	r3, [sp, #20]
 8011ebc:	2101      	movs	r1, #1
 8011ebe:	4413      	add	r3, r2
 8011ec0:	4630      	mov	r0, r6
 8011ec2:	9305      	str	r3, [sp, #20]
 8011ec4:	f000 fc88 	bl	80127d8 <__i2b>
 8011ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011eca:	4607      	mov	r7, r0
 8011ecc:	f1b8 0f00 	cmp.w	r8, #0
 8011ed0:	d00d      	beq.n	8011eee <_dtoa_r+0x66e>
 8011ed2:	9a05      	ldr	r2, [sp, #20]
 8011ed4:	2a00      	cmp	r2, #0
 8011ed6:	dd0a      	ble.n	8011eee <_dtoa_r+0x66e>
 8011ed8:	4542      	cmp	r2, r8
 8011eda:	9904      	ldr	r1, [sp, #16]
 8011edc:	bfa8      	it	ge
 8011ede:	4642      	movge	r2, r8
 8011ee0:	1a89      	subs	r1, r1, r2
 8011ee2:	9104      	str	r1, [sp, #16]
 8011ee4:	9905      	ldr	r1, [sp, #20]
 8011ee6:	eba8 0802 	sub.w	r8, r8, r2
 8011eea:	1a8a      	subs	r2, r1, r2
 8011eec:	9205      	str	r2, [sp, #20]
 8011eee:	b303      	cbz	r3, 8011f32 <_dtoa_r+0x6b2>
 8011ef0:	9a07      	ldr	r2, [sp, #28]
 8011ef2:	2a00      	cmp	r2, #0
 8011ef4:	f000 80a5 	beq.w	8012042 <_dtoa_r+0x7c2>
 8011ef8:	2c00      	cmp	r4, #0
 8011efa:	dd13      	ble.n	8011f24 <_dtoa_r+0x6a4>
 8011efc:	4639      	mov	r1, r7
 8011efe:	4622      	mov	r2, r4
 8011f00:	4630      	mov	r0, r6
 8011f02:	930d      	str	r3, [sp, #52]	; 0x34
 8011f04:	f000 fd28 	bl	8012958 <__pow5mult>
 8011f08:	462a      	mov	r2, r5
 8011f0a:	4601      	mov	r1, r0
 8011f0c:	4607      	mov	r7, r0
 8011f0e:	4630      	mov	r0, r6
 8011f10:	f000 fc78 	bl	8012804 <__multiply>
 8011f14:	4629      	mov	r1, r5
 8011f16:	9009      	str	r0, [sp, #36]	; 0x24
 8011f18:	4630      	mov	r0, r6
 8011f1a:	f000 fb5d 	bl	80125d8 <_Bfree>
 8011f1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f22:	4615      	mov	r5, r2
 8011f24:	1b1a      	subs	r2, r3, r4
 8011f26:	d004      	beq.n	8011f32 <_dtoa_r+0x6b2>
 8011f28:	4629      	mov	r1, r5
 8011f2a:	4630      	mov	r0, r6
 8011f2c:	f000 fd14 	bl	8012958 <__pow5mult>
 8011f30:	4605      	mov	r5, r0
 8011f32:	2101      	movs	r1, #1
 8011f34:	4630      	mov	r0, r6
 8011f36:	f000 fc4f 	bl	80127d8 <__i2b>
 8011f3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	4604      	mov	r4, r0
 8011f40:	f340 8081 	ble.w	8012046 <_dtoa_r+0x7c6>
 8011f44:	461a      	mov	r2, r3
 8011f46:	4601      	mov	r1, r0
 8011f48:	4630      	mov	r0, r6
 8011f4a:	f000 fd05 	bl	8012958 <__pow5mult>
 8011f4e:	9b06      	ldr	r3, [sp, #24]
 8011f50:	2b01      	cmp	r3, #1
 8011f52:	4604      	mov	r4, r0
 8011f54:	dd7a      	ble.n	801204c <_dtoa_r+0x7cc>
 8011f56:	2300      	movs	r3, #0
 8011f58:	9309      	str	r3, [sp, #36]	; 0x24
 8011f5a:	6922      	ldr	r2, [r4, #16]
 8011f5c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011f60:	6910      	ldr	r0, [r2, #16]
 8011f62:	f000 fbeb 	bl	801273c <__hi0bits>
 8011f66:	f1c0 0020 	rsb	r0, r0, #32
 8011f6a:	9b05      	ldr	r3, [sp, #20]
 8011f6c:	4418      	add	r0, r3
 8011f6e:	f010 001f 	ands.w	r0, r0, #31
 8011f72:	f000 8093 	beq.w	801209c <_dtoa_r+0x81c>
 8011f76:	f1c0 0220 	rsb	r2, r0, #32
 8011f7a:	2a04      	cmp	r2, #4
 8011f7c:	f340 8085 	ble.w	801208a <_dtoa_r+0x80a>
 8011f80:	9b04      	ldr	r3, [sp, #16]
 8011f82:	f1c0 001c 	rsb	r0, r0, #28
 8011f86:	4403      	add	r3, r0
 8011f88:	9304      	str	r3, [sp, #16]
 8011f8a:	9b05      	ldr	r3, [sp, #20]
 8011f8c:	4480      	add	r8, r0
 8011f8e:	4403      	add	r3, r0
 8011f90:	9305      	str	r3, [sp, #20]
 8011f92:	9b04      	ldr	r3, [sp, #16]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	dd05      	ble.n	8011fa4 <_dtoa_r+0x724>
 8011f98:	4629      	mov	r1, r5
 8011f9a:	461a      	mov	r2, r3
 8011f9c:	4630      	mov	r0, r6
 8011f9e:	f000 fd35 	bl	8012a0c <__lshift>
 8011fa2:	4605      	mov	r5, r0
 8011fa4:	9b05      	ldr	r3, [sp, #20]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	dd05      	ble.n	8011fb6 <_dtoa_r+0x736>
 8011faa:	4621      	mov	r1, r4
 8011fac:	461a      	mov	r2, r3
 8011fae:	4630      	mov	r0, r6
 8011fb0:	f000 fd2c 	bl	8012a0c <__lshift>
 8011fb4:	4604      	mov	r4, r0
 8011fb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d071      	beq.n	80120a0 <_dtoa_r+0x820>
 8011fbc:	4621      	mov	r1, r4
 8011fbe:	4628      	mov	r0, r5
 8011fc0:	f000 fd90 	bl	8012ae4 <__mcmp>
 8011fc4:	2800      	cmp	r0, #0
 8011fc6:	da6b      	bge.n	80120a0 <_dtoa_r+0x820>
 8011fc8:	2300      	movs	r3, #0
 8011fca:	4629      	mov	r1, r5
 8011fcc:	220a      	movs	r2, #10
 8011fce:	4630      	mov	r0, r6
 8011fd0:	f000 fb24 	bl	801261c <__multadd>
 8011fd4:	9b07      	ldr	r3, [sp, #28]
 8011fd6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011fda:	4605      	mov	r5, r0
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	f000 8197 	beq.w	8012310 <_dtoa_r+0xa90>
 8011fe2:	4639      	mov	r1, r7
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	220a      	movs	r2, #10
 8011fe8:	4630      	mov	r0, r6
 8011fea:	f000 fb17 	bl	801261c <__multadd>
 8011fee:	f1ba 0f00 	cmp.w	sl, #0
 8011ff2:	4607      	mov	r7, r0
 8011ff4:	f300 8093 	bgt.w	801211e <_dtoa_r+0x89e>
 8011ff8:	9b06      	ldr	r3, [sp, #24]
 8011ffa:	2b02      	cmp	r3, #2
 8011ffc:	dc57      	bgt.n	80120ae <_dtoa_r+0x82e>
 8011ffe:	e08e      	b.n	801211e <_dtoa_r+0x89e>
 8012000:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012002:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012006:	e751      	b.n	8011eac <_dtoa_r+0x62c>
 8012008:	f109 34ff 	add.w	r4, r9, #4294967295
 801200c:	42a3      	cmp	r3, r4
 801200e:	bfbf      	itttt	lt
 8012010:	1ae2      	sublt	r2, r4, r3
 8012012:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8012014:	189b      	addlt	r3, r3, r2
 8012016:	930a      	strlt	r3, [sp, #40]	; 0x28
 8012018:	bfae      	itee	ge
 801201a:	1b1c      	subge	r4, r3, r4
 801201c:	4623      	movlt	r3, r4
 801201e:	2400      	movlt	r4, #0
 8012020:	f1b9 0f00 	cmp.w	r9, #0
 8012024:	bfb5      	itete	lt
 8012026:	9a04      	ldrlt	r2, [sp, #16]
 8012028:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801202c:	eba2 0809 	sublt.w	r8, r2, r9
 8012030:	464a      	movge	r2, r9
 8012032:	bfb8      	it	lt
 8012034:	2200      	movlt	r2, #0
 8012036:	e73c      	b.n	8011eb2 <_dtoa_r+0x632>
 8012038:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801203c:	9f07      	ldr	r7, [sp, #28]
 801203e:	461c      	mov	r4, r3
 8012040:	e744      	b.n	8011ecc <_dtoa_r+0x64c>
 8012042:	461a      	mov	r2, r3
 8012044:	e770      	b.n	8011f28 <_dtoa_r+0x6a8>
 8012046:	9b06      	ldr	r3, [sp, #24]
 8012048:	2b01      	cmp	r3, #1
 801204a:	dc18      	bgt.n	801207e <_dtoa_r+0x7fe>
 801204c:	9b02      	ldr	r3, [sp, #8]
 801204e:	b9b3      	cbnz	r3, 801207e <_dtoa_r+0x7fe>
 8012050:	9b03      	ldr	r3, [sp, #12]
 8012052:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8012056:	b9a2      	cbnz	r2, 8012082 <_dtoa_r+0x802>
 8012058:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801205c:	0d12      	lsrs	r2, r2, #20
 801205e:	0512      	lsls	r2, r2, #20
 8012060:	b18a      	cbz	r2, 8012086 <_dtoa_r+0x806>
 8012062:	9b04      	ldr	r3, [sp, #16]
 8012064:	3301      	adds	r3, #1
 8012066:	9304      	str	r3, [sp, #16]
 8012068:	9b05      	ldr	r3, [sp, #20]
 801206a:	3301      	adds	r3, #1
 801206c:	9305      	str	r3, [sp, #20]
 801206e:	2301      	movs	r3, #1
 8012070:	9309      	str	r3, [sp, #36]	; 0x24
 8012072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012074:	2b00      	cmp	r3, #0
 8012076:	f47f af70 	bne.w	8011f5a <_dtoa_r+0x6da>
 801207a:	2001      	movs	r0, #1
 801207c:	e775      	b.n	8011f6a <_dtoa_r+0x6ea>
 801207e:	2300      	movs	r3, #0
 8012080:	e7f6      	b.n	8012070 <_dtoa_r+0x7f0>
 8012082:	9b02      	ldr	r3, [sp, #8]
 8012084:	e7f4      	b.n	8012070 <_dtoa_r+0x7f0>
 8012086:	9209      	str	r2, [sp, #36]	; 0x24
 8012088:	e7f3      	b.n	8012072 <_dtoa_r+0x7f2>
 801208a:	d082      	beq.n	8011f92 <_dtoa_r+0x712>
 801208c:	9b04      	ldr	r3, [sp, #16]
 801208e:	321c      	adds	r2, #28
 8012090:	4413      	add	r3, r2
 8012092:	9304      	str	r3, [sp, #16]
 8012094:	9b05      	ldr	r3, [sp, #20]
 8012096:	4490      	add	r8, r2
 8012098:	4413      	add	r3, r2
 801209a:	e779      	b.n	8011f90 <_dtoa_r+0x710>
 801209c:	4602      	mov	r2, r0
 801209e:	e7f5      	b.n	801208c <_dtoa_r+0x80c>
 80120a0:	f1b9 0f00 	cmp.w	r9, #0
 80120a4:	dc36      	bgt.n	8012114 <_dtoa_r+0x894>
 80120a6:	9b06      	ldr	r3, [sp, #24]
 80120a8:	2b02      	cmp	r3, #2
 80120aa:	dd33      	ble.n	8012114 <_dtoa_r+0x894>
 80120ac:	46ca      	mov	sl, r9
 80120ae:	f1ba 0f00 	cmp.w	sl, #0
 80120b2:	d10d      	bne.n	80120d0 <_dtoa_r+0x850>
 80120b4:	4621      	mov	r1, r4
 80120b6:	4653      	mov	r3, sl
 80120b8:	2205      	movs	r2, #5
 80120ba:	4630      	mov	r0, r6
 80120bc:	f000 faae 	bl	801261c <__multadd>
 80120c0:	4601      	mov	r1, r0
 80120c2:	4604      	mov	r4, r0
 80120c4:	4628      	mov	r0, r5
 80120c6:	f000 fd0d 	bl	8012ae4 <__mcmp>
 80120ca:	2800      	cmp	r0, #0
 80120cc:	f73f ade4 	bgt.w	8011c98 <_dtoa_r+0x418>
 80120d0:	9b08      	ldr	r3, [sp, #32]
 80120d2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80120d6:	ea6f 0b03 	mvn.w	fp, r3
 80120da:	f04f 0900 	mov.w	r9, #0
 80120de:	4621      	mov	r1, r4
 80120e0:	4630      	mov	r0, r6
 80120e2:	f000 fa79 	bl	80125d8 <_Bfree>
 80120e6:	2f00      	cmp	r7, #0
 80120e8:	f43f aea1 	beq.w	8011e2e <_dtoa_r+0x5ae>
 80120ec:	f1b9 0f00 	cmp.w	r9, #0
 80120f0:	d005      	beq.n	80120fe <_dtoa_r+0x87e>
 80120f2:	45b9      	cmp	r9, r7
 80120f4:	d003      	beq.n	80120fe <_dtoa_r+0x87e>
 80120f6:	4649      	mov	r1, r9
 80120f8:	4630      	mov	r0, r6
 80120fa:	f000 fa6d 	bl	80125d8 <_Bfree>
 80120fe:	4639      	mov	r1, r7
 8012100:	4630      	mov	r0, r6
 8012102:	f000 fa69 	bl	80125d8 <_Bfree>
 8012106:	e692      	b.n	8011e2e <_dtoa_r+0x5ae>
 8012108:	2400      	movs	r4, #0
 801210a:	4627      	mov	r7, r4
 801210c:	e7e0      	b.n	80120d0 <_dtoa_r+0x850>
 801210e:	4693      	mov	fp, r2
 8012110:	4627      	mov	r7, r4
 8012112:	e5c1      	b.n	8011c98 <_dtoa_r+0x418>
 8012114:	9b07      	ldr	r3, [sp, #28]
 8012116:	46ca      	mov	sl, r9
 8012118:	2b00      	cmp	r3, #0
 801211a:	f000 8100 	beq.w	801231e <_dtoa_r+0xa9e>
 801211e:	f1b8 0f00 	cmp.w	r8, #0
 8012122:	dd05      	ble.n	8012130 <_dtoa_r+0x8b0>
 8012124:	4639      	mov	r1, r7
 8012126:	4642      	mov	r2, r8
 8012128:	4630      	mov	r0, r6
 801212a:	f000 fc6f 	bl	8012a0c <__lshift>
 801212e:	4607      	mov	r7, r0
 8012130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012132:	2b00      	cmp	r3, #0
 8012134:	d05d      	beq.n	80121f2 <_dtoa_r+0x972>
 8012136:	6879      	ldr	r1, [r7, #4]
 8012138:	4630      	mov	r0, r6
 801213a:	f000 fa0d 	bl	8012558 <_Balloc>
 801213e:	4680      	mov	r8, r0
 8012140:	b928      	cbnz	r0, 801214e <_dtoa_r+0x8ce>
 8012142:	4b82      	ldr	r3, [pc, #520]	; (801234c <_dtoa_r+0xacc>)
 8012144:	4602      	mov	r2, r0
 8012146:	f240 21ef 	movw	r1, #751	; 0x2ef
 801214a:	f7ff bbb1 	b.w	80118b0 <_dtoa_r+0x30>
 801214e:	693a      	ldr	r2, [r7, #16]
 8012150:	3202      	adds	r2, #2
 8012152:	0092      	lsls	r2, r2, #2
 8012154:	f107 010c 	add.w	r1, r7, #12
 8012158:	300c      	adds	r0, #12
 801215a:	f7ff faf5 	bl	8011748 <memcpy>
 801215e:	2201      	movs	r2, #1
 8012160:	4641      	mov	r1, r8
 8012162:	4630      	mov	r0, r6
 8012164:	f000 fc52 	bl	8012a0c <__lshift>
 8012168:	9b01      	ldr	r3, [sp, #4]
 801216a:	3301      	adds	r3, #1
 801216c:	9304      	str	r3, [sp, #16]
 801216e:	9b01      	ldr	r3, [sp, #4]
 8012170:	4453      	add	r3, sl
 8012172:	9308      	str	r3, [sp, #32]
 8012174:	9b02      	ldr	r3, [sp, #8]
 8012176:	f003 0301 	and.w	r3, r3, #1
 801217a:	46b9      	mov	r9, r7
 801217c:	9307      	str	r3, [sp, #28]
 801217e:	4607      	mov	r7, r0
 8012180:	9b04      	ldr	r3, [sp, #16]
 8012182:	4621      	mov	r1, r4
 8012184:	3b01      	subs	r3, #1
 8012186:	4628      	mov	r0, r5
 8012188:	9302      	str	r3, [sp, #8]
 801218a:	f7ff faf1 	bl	8011770 <quorem>
 801218e:	4603      	mov	r3, r0
 8012190:	3330      	adds	r3, #48	; 0x30
 8012192:	9005      	str	r0, [sp, #20]
 8012194:	4649      	mov	r1, r9
 8012196:	4628      	mov	r0, r5
 8012198:	9309      	str	r3, [sp, #36]	; 0x24
 801219a:	f000 fca3 	bl	8012ae4 <__mcmp>
 801219e:	463a      	mov	r2, r7
 80121a0:	4682      	mov	sl, r0
 80121a2:	4621      	mov	r1, r4
 80121a4:	4630      	mov	r0, r6
 80121a6:	f000 fcb9 	bl	8012b1c <__mdiff>
 80121aa:	68c2      	ldr	r2, [r0, #12]
 80121ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121ae:	4680      	mov	r8, r0
 80121b0:	bb0a      	cbnz	r2, 80121f6 <_dtoa_r+0x976>
 80121b2:	4601      	mov	r1, r0
 80121b4:	4628      	mov	r0, r5
 80121b6:	f000 fc95 	bl	8012ae4 <__mcmp>
 80121ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121bc:	4602      	mov	r2, r0
 80121be:	4641      	mov	r1, r8
 80121c0:	4630      	mov	r0, r6
 80121c2:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80121c6:	f000 fa07 	bl	80125d8 <_Bfree>
 80121ca:	9b06      	ldr	r3, [sp, #24]
 80121cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80121ce:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80121d2:	ea43 0102 	orr.w	r1, r3, r2
 80121d6:	9b07      	ldr	r3, [sp, #28]
 80121d8:	4319      	orrs	r1, r3
 80121da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121dc:	d10d      	bne.n	80121fa <_dtoa_r+0x97a>
 80121de:	2b39      	cmp	r3, #57	; 0x39
 80121e0:	d029      	beq.n	8012236 <_dtoa_r+0x9b6>
 80121e2:	f1ba 0f00 	cmp.w	sl, #0
 80121e6:	dd01      	ble.n	80121ec <_dtoa_r+0x96c>
 80121e8:	9b05      	ldr	r3, [sp, #20]
 80121ea:	3331      	adds	r3, #49	; 0x31
 80121ec:	9a02      	ldr	r2, [sp, #8]
 80121ee:	7013      	strb	r3, [r2, #0]
 80121f0:	e775      	b.n	80120de <_dtoa_r+0x85e>
 80121f2:	4638      	mov	r0, r7
 80121f4:	e7b8      	b.n	8012168 <_dtoa_r+0x8e8>
 80121f6:	2201      	movs	r2, #1
 80121f8:	e7e1      	b.n	80121be <_dtoa_r+0x93e>
 80121fa:	f1ba 0f00 	cmp.w	sl, #0
 80121fe:	db06      	blt.n	801220e <_dtoa_r+0x98e>
 8012200:	9906      	ldr	r1, [sp, #24]
 8012202:	ea41 0a0a 	orr.w	sl, r1, sl
 8012206:	9907      	ldr	r1, [sp, #28]
 8012208:	ea5a 0a01 	orrs.w	sl, sl, r1
 801220c:	d120      	bne.n	8012250 <_dtoa_r+0x9d0>
 801220e:	2a00      	cmp	r2, #0
 8012210:	ddec      	ble.n	80121ec <_dtoa_r+0x96c>
 8012212:	4629      	mov	r1, r5
 8012214:	2201      	movs	r2, #1
 8012216:	4630      	mov	r0, r6
 8012218:	9304      	str	r3, [sp, #16]
 801221a:	f000 fbf7 	bl	8012a0c <__lshift>
 801221e:	4621      	mov	r1, r4
 8012220:	4605      	mov	r5, r0
 8012222:	f000 fc5f 	bl	8012ae4 <__mcmp>
 8012226:	2800      	cmp	r0, #0
 8012228:	9b04      	ldr	r3, [sp, #16]
 801222a:	dc02      	bgt.n	8012232 <_dtoa_r+0x9b2>
 801222c:	d1de      	bne.n	80121ec <_dtoa_r+0x96c>
 801222e:	07da      	lsls	r2, r3, #31
 8012230:	d5dc      	bpl.n	80121ec <_dtoa_r+0x96c>
 8012232:	2b39      	cmp	r3, #57	; 0x39
 8012234:	d1d8      	bne.n	80121e8 <_dtoa_r+0x968>
 8012236:	9a02      	ldr	r2, [sp, #8]
 8012238:	2339      	movs	r3, #57	; 0x39
 801223a:	7013      	strb	r3, [r2, #0]
 801223c:	4643      	mov	r3, r8
 801223e:	4698      	mov	r8, r3
 8012240:	3b01      	subs	r3, #1
 8012242:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8012246:	2a39      	cmp	r2, #57	; 0x39
 8012248:	d051      	beq.n	80122ee <_dtoa_r+0xa6e>
 801224a:	3201      	adds	r2, #1
 801224c:	701a      	strb	r2, [r3, #0]
 801224e:	e746      	b.n	80120de <_dtoa_r+0x85e>
 8012250:	2a00      	cmp	r2, #0
 8012252:	dd03      	ble.n	801225c <_dtoa_r+0x9dc>
 8012254:	2b39      	cmp	r3, #57	; 0x39
 8012256:	d0ee      	beq.n	8012236 <_dtoa_r+0x9b6>
 8012258:	3301      	adds	r3, #1
 801225a:	e7c7      	b.n	80121ec <_dtoa_r+0x96c>
 801225c:	9a04      	ldr	r2, [sp, #16]
 801225e:	9908      	ldr	r1, [sp, #32]
 8012260:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012264:	428a      	cmp	r2, r1
 8012266:	d02b      	beq.n	80122c0 <_dtoa_r+0xa40>
 8012268:	4629      	mov	r1, r5
 801226a:	2300      	movs	r3, #0
 801226c:	220a      	movs	r2, #10
 801226e:	4630      	mov	r0, r6
 8012270:	f000 f9d4 	bl	801261c <__multadd>
 8012274:	45b9      	cmp	r9, r7
 8012276:	4605      	mov	r5, r0
 8012278:	f04f 0300 	mov.w	r3, #0
 801227c:	f04f 020a 	mov.w	r2, #10
 8012280:	4649      	mov	r1, r9
 8012282:	4630      	mov	r0, r6
 8012284:	d107      	bne.n	8012296 <_dtoa_r+0xa16>
 8012286:	f000 f9c9 	bl	801261c <__multadd>
 801228a:	4681      	mov	r9, r0
 801228c:	4607      	mov	r7, r0
 801228e:	9b04      	ldr	r3, [sp, #16]
 8012290:	3301      	adds	r3, #1
 8012292:	9304      	str	r3, [sp, #16]
 8012294:	e774      	b.n	8012180 <_dtoa_r+0x900>
 8012296:	f000 f9c1 	bl	801261c <__multadd>
 801229a:	4639      	mov	r1, r7
 801229c:	4681      	mov	r9, r0
 801229e:	2300      	movs	r3, #0
 80122a0:	220a      	movs	r2, #10
 80122a2:	4630      	mov	r0, r6
 80122a4:	f000 f9ba 	bl	801261c <__multadd>
 80122a8:	4607      	mov	r7, r0
 80122aa:	e7f0      	b.n	801228e <_dtoa_r+0xa0e>
 80122ac:	f1ba 0f00 	cmp.w	sl, #0
 80122b0:	9a01      	ldr	r2, [sp, #4]
 80122b2:	bfcc      	ite	gt
 80122b4:	46d0      	movgt	r8, sl
 80122b6:	f04f 0801 	movle.w	r8, #1
 80122ba:	4490      	add	r8, r2
 80122bc:	f04f 0900 	mov.w	r9, #0
 80122c0:	4629      	mov	r1, r5
 80122c2:	2201      	movs	r2, #1
 80122c4:	4630      	mov	r0, r6
 80122c6:	9302      	str	r3, [sp, #8]
 80122c8:	f000 fba0 	bl	8012a0c <__lshift>
 80122cc:	4621      	mov	r1, r4
 80122ce:	4605      	mov	r5, r0
 80122d0:	f000 fc08 	bl	8012ae4 <__mcmp>
 80122d4:	2800      	cmp	r0, #0
 80122d6:	dcb1      	bgt.n	801223c <_dtoa_r+0x9bc>
 80122d8:	d102      	bne.n	80122e0 <_dtoa_r+0xa60>
 80122da:	9b02      	ldr	r3, [sp, #8]
 80122dc:	07db      	lsls	r3, r3, #31
 80122de:	d4ad      	bmi.n	801223c <_dtoa_r+0x9bc>
 80122e0:	4643      	mov	r3, r8
 80122e2:	4698      	mov	r8, r3
 80122e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80122e8:	2a30      	cmp	r2, #48	; 0x30
 80122ea:	d0fa      	beq.n	80122e2 <_dtoa_r+0xa62>
 80122ec:	e6f7      	b.n	80120de <_dtoa_r+0x85e>
 80122ee:	9a01      	ldr	r2, [sp, #4]
 80122f0:	429a      	cmp	r2, r3
 80122f2:	d1a4      	bne.n	801223e <_dtoa_r+0x9be>
 80122f4:	f10b 0b01 	add.w	fp, fp, #1
 80122f8:	2331      	movs	r3, #49	; 0x31
 80122fa:	e778      	b.n	80121ee <_dtoa_r+0x96e>
 80122fc:	4b14      	ldr	r3, [pc, #80]	; (8012350 <_dtoa_r+0xad0>)
 80122fe:	f7ff bb2a 	b.w	8011956 <_dtoa_r+0xd6>
 8012302:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012304:	2b00      	cmp	r3, #0
 8012306:	f47f ab05 	bne.w	8011914 <_dtoa_r+0x94>
 801230a:	4b12      	ldr	r3, [pc, #72]	; (8012354 <_dtoa_r+0xad4>)
 801230c:	f7ff bb23 	b.w	8011956 <_dtoa_r+0xd6>
 8012310:	f1ba 0f00 	cmp.w	sl, #0
 8012314:	dc03      	bgt.n	801231e <_dtoa_r+0xa9e>
 8012316:	9b06      	ldr	r3, [sp, #24]
 8012318:	2b02      	cmp	r3, #2
 801231a:	f73f aec8 	bgt.w	80120ae <_dtoa_r+0x82e>
 801231e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012322:	4621      	mov	r1, r4
 8012324:	4628      	mov	r0, r5
 8012326:	f7ff fa23 	bl	8011770 <quorem>
 801232a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801232e:	f808 3b01 	strb.w	r3, [r8], #1
 8012332:	9a01      	ldr	r2, [sp, #4]
 8012334:	eba8 0202 	sub.w	r2, r8, r2
 8012338:	4592      	cmp	sl, r2
 801233a:	ddb7      	ble.n	80122ac <_dtoa_r+0xa2c>
 801233c:	4629      	mov	r1, r5
 801233e:	2300      	movs	r3, #0
 8012340:	220a      	movs	r2, #10
 8012342:	4630      	mov	r0, r6
 8012344:	f000 f96a 	bl	801261c <__multadd>
 8012348:	4605      	mov	r5, r0
 801234a:	e7ea      	b.n	8012322 <_dtoa_r+0xaa2>
 801234c:	08014f85 	.word	0x08014f85
 8012350:	08014ee0 	.word	0x08014ee0
 8012354:	08014f09 	.word	0x08014f09

08012358 <_free_r>:
 8012358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801235a:	2900      	cmp	r1, #0
 801235c:	d044      	beq.n	80123e8 <_free_r+0x90>
 801235e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012362:	9001      	str	r0, [sp, #4]
 8012364:	2b00      	cmp	r3, #0
 8012366:	f1a1 0404 	sub.w	r4, r1, #4
 801236a:	bfb8      	it	lt
 801236c:	18e4      	addlt	r4, r4, r3
 801236e:	f000 f8e7 	bl	8012540 <__malloc_lock>
 8012372:	4a1e      	ldr	r2, [pc, #120]	; (80123ec <_free_r+0x94>)
 8012374:	9801      	ldr	r0, [sp, #4]
 8012376:	6813      	ldr	r3, [r2, #0]
 8012378:	b933      	cbnz	r3, 8012388 <_free_r+0x30>
 801237a:	6063      	str	r3, [r4, #4]
 801237c:	6014      	str	r4, [r2, #0]
 801237e:	b003      	add	sp, #12
 8012380:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012384:	f000 b8e2 	b.w	801254c <__malloc_unlock>
 8012388:	42a3      	cmp	r3, r4
 801238a:	d908      	bls.n	801239e <_free_r+0x46>
 801238c:	6825      	ldr	r5, [r4, #0]
 801238e:	1961      	adds	r1, r4, r5
 8012390:	428b      	cmp	r3, r1
 8012392:	bf01      	itttt	eq
 8012394:	6819      	ldreq	r1, [r3, #0]
 8012396:	685b      	ldreq	r3, [r3, #4]
 8012398:	1949      	addeq	r1, r1, r5
 801239a:	6021      	streq	r1, [r4, #0]
 801239c:	e7ed      	b.n	801237a <_free_r+0x22>
 801239e:	461a      	mov	r2, r3
 80123a0:	685b      	ldr	r3, [r3, #4]
 80123a2:	b10b      	cbz	r3, 80123a8 <_free_r+0x50>
 80123a4:	42a3      	cmp	r3, r4
 80123a6:	d9fa      	bls.n	801239e <_free_r+0x46>
 80123a8:	6811      	ldr	r1, [r2, #0]
 80123aa:	1855      	adds	r5, r2, r1
 80123ac:	42a5      	cmp	r5, r4
 80123ae:	d10b      	bne.n	80123c8 <_free_r+0x70>
 80123b0:	6824      	ldr	r4, [r4, #0]
 80123b2:	4421      	add	r1, r4
 80123b4:	1854      	adds	r4, r2, r1
 80123b6:	42a3      	cmp	r3, r4
 80123b8:	6011      	str	r1, [r2, #0]
 80123ba:	d1e0      	bne.n	801237e <_free_r+0x26>
 80123bc:	681c      	ldr	r4, [r3, #0]
 80123be:	685b      	ldr	r3, [r3, #4]
 80123c0:	6053      	str	r3, [r2, #4]
 80123c2:	440c      	add	r4, r1
 80123c4:	6014      	str	r4, [r2, #0]
 80123c6:	e7da      	b.n	801237e <_free_r+0x26>
 80123c8:	d902      	bls.n	80123d0 <_free_r+0x78>
 80123ca:	230c      	movs	r3, #12
 80123cc:	6003      	str	r3, [r0, #0]
 80123ce:	e7d6      	b.n	801237e <_free_r+0x26>
 80123d0:	6825      	ldr	r5, [r4, #0]
 80123d2:	1961      	adds	r1, r4, r5
 80123d4:	428b      	cmp	r3, r1
 80123d6:	bf04      	itt	eq
 80123d8:	6819      	ldreq	r1, [r3, #0]
 80123da:	685b      	ldreq	r3, [r3, #4]
 80123dc:	6063      	str	r3, [r4, #4]
 80123de:	bf04      	itt	eq
 80123e0:	1949      	addeq	r1, r1, r5
 80123e2:	6021      	streq	r1, [r4, #0]
 80123e4:	6054      	str	r4, [r2, #4]
 80123e6:	e7ca      	b.n	801237e <_free_r+0x26>
 80123e8:	b003      	add	sp, #12
 80123ea:	bd30      	pop	{r4, r5, pc}
 80123ec:	24000f44 	.word	0x24000f44

080123f0 <malloc>:
 80123f0:	4b02      	ldr	r3, [pc, #8]	; (80123fc <malloc+0xc>)
 80123f2:	4601      	mov	r1, r0
 80123f4:	6818      	ldr	r0, [r3, #0]
 80123f6:	f000 b823 	b.w	8012440 <_malloc_r>
 80123fa:	bf00      	nop
 80123fc:	24000068 	.word	0x24000068

08012400 <sbrk_aligned>:
 8012400:	b570      	push	{r4, r5, r6, lr}
 8012402:	4e0e      	ldr	r6, [pc, #56]	; (801243c <sbrk_aligned+0x3c>)
 8012404:	460c      	mov	r4, r1
 8012406:	6831      	ldr	r1, [r6, #0]
 8012408:	4605      	mov	r5, r0
 801240a:	b911      	cbnz	r1, 8012412 <sbrk_aligned+0x12>
 801240c:	f001 fdd6 	bl	8013fbc <_sbrk_r>
 8012410:	6030      	str	r0, [r6, #0]
 8012412:	4621      	mov	r1, r4
 8012414:	4628      	mov	r0, r5
 8012416:	f001 fdd1 	bl	8013fbc <_sbrk_r>
 801241a:	1c43      	adds	r3, r0, #1
 801241c:	d00a      	beq.n	8012434 <sbrk_aligned+0x34>
 801241e:	1cc4      	adds	r4, r0, #3
 8012420:	f024 0403 	bic.w	r4, r4, #3
 8012424:	42a0      	cmp	r0, r4
 8012426:	d007      	beq.n	8012438 <sbrk_aligned+0x38>
 8012428:	1a21      	subs	r1, r4, r0
 801242a:	4628      	mov	r0, r5
 801242c:	f001 fdc6 	bl	8013fbc <_sbrk_r>
 8012430:	3001      	adds	r0, #1
 8012432:	d101      	bne.n	8012438 <sbrk_aligned+0x38>
 8012434:	f04f 34ff 	mov.w	r4, #4294967295
 8012438:	4620      	mov	r0, r4
 801243a:	bd70      	pop	{r4, r5, r6, pc}
 801243c:	24000f48 	.word	0x24000f48

08012440 <_malloc_r>:
 8012440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012444:	1ccd      	adds	r5, r1, #3
 8012446:	f025 0503 	bic.w	r5, r5, #3
 801244a:	3508      	adds	r5, #8
 801244c:	2d0c      	cmp	r5, #12
 801244e:	bf38      	it	cc
 8012450:	250c      	movcc	r5, #12
 8012452:	2d00      	cmp	r5, #0
 8012454:	4607      	mov	r7, r0
 8012456:	db01      	blt.n	801245c <_malloc_r+0x1c>
 8012458:	42a9      	cmp	r1, r5
 801245a:	d905      	bls.n	8012468 <_malloc_r+0x28>
 801245c:	230c      	movs	r3, #12
 801245e:	603b      	str	r3, [r7, #0]
 8012460:	2600      	movs	r6, #0
 8012462:	4630      	mov	r0, r6
 8012464:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012468:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801253c <_malloc_r+0xfc>
 801246c:	f000 f868 	bl	8012540 <__malloc_lock>
 8012470:	f8d8 3000 	ldr.w	r3, [r8]
 8012474:	461c      	mov	r4, r3
 8012476:	bb5c      	cbnz	r4, 80124d0 <_malloc_r+0x90>
 8012478:	4629      	mov	r1, r5
 801247a:	4638      	mov	r0, r7
 801247c:	f7ff ffc0 	bl	8012400 <sbrk_aligned>
 8012480:	1c43      	adds	r3, r0, #1
 8012482:	4604      	mov	r4, r0
 8012484:	d155      	bne.n	8012532 <_malloc_r+0xf2>
 8012486:	f8d8 4000 	ldr.w	r4, [r8]
 801248a:	4626      	mov	r6, r4
 801248c:	2e00      	cmp	r6, #0
 801248e:	d145      	bne.n	801251c <_malloc_r+0xdc>
 8012490:	2c00      	cmp	r4, #0
 8012492:	d048      	beq.n	8012526 <_malloc_r+0xe6>
 8012494:	6823      	ldr	r3, [r4, #0]
 8012496:	4631      	mov	r1, r6
 8012498:	4638      	mov	r0, r7
 801249a:	eb04 0903 	add.w	r9, r4, r3
 801249e:	f001 fd8d 	bl	8013fbc <_sbrk_r>
 80124a2:	4581      	cmp	r9, r0
 80124a4:	d13f      	bne.n	8012526 <_malloc_r+0xe6>
 80124a6:	6821      	ldr	r1, [r4, #0]
 80124a8:	1a6d      	subs	r5, r5, r1
 80124aa:	4629      	mov	r1, r5
 80124ac:	4638      	mov	r0, r7
 80124ae:	f7ff ffa7 	bl	8012400 <sbrk_aligned>
 80124b2:	3001      	adds	r0, #1
 80124b4:	d037      	beq.n	8012526 <_malloc_r+0xe6>
 80124b6:	6823      	ldr	r3, [r4, #0]
 80124b8:	442b      	add	r3, r5
 80124ba:	6023      	str	r3, [r4, #0]
 80124bc:	f8d8 3000 	ldr.w	r3, [r8]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d038      	beq.n	8012536 <_malloc_r+0xf6>
 80124c4:	685a      	ldr	r2, [r3, #4]
 80124c6:	42a2      	cmp	r2, r4
 80124c8:	d12b      	bne.n	8012522 <_malloc_r+0xe2>
 80124ca:	2200      	movs	r2, #0
 80124cc:	605a      	str	r2, [r3, #4]
 80124ce:	e00f      	b.n	80124f0 <_malloc_r+0xb0>
 80124d0:	6822      	ldr	r2, [r4, #0]
 80124d2:	1b52      	subs	r2, r2, r5
 80124d4:	d41f      	bmi.n	8012516 <_malloc_r+0xd6>
 80124d6:	2a0b      	cmp	r2, #11
 80124d8:	d917      	bls.n	801250a <_malloc_r+0xca>
 80124da:	1961      	adds	r1, r4, r5
 80124dc:	42a3      	cmp	r3, r4
 80124de:	6025      	str	r5, [r4, #0]
 80124e0:	bf18      	it	ne
 80124e2:	6059      	strne	r1, [r3, #4]
 80124e4:	6863      	ldr	r3, [r4, #4]
 80124e6:	bf08      	it	eq
 80124e8:	f8c8 1000 	streq.w	r1, [r8]
 80124ec:	5162      	str	r2, [r4, r5]
 80124ee:	604b      	str	r3, [r1, #4]
 80124f0:	4638      	mov	r0, r7
 80124f2:	f104 060b 	add.w	r6, r4, #11
 80124f6:	f000 f829 	bl	801254c <__malloc_unlock>
 80124fa:	f026 0607 	bic.w	r6, r6, #7
 80124fe:	1d23      	adds	r3, r4, #4
 8012500:	1af2      	subs	r2, r6, r3
 8012502:	d0ae      	beq.n	8012462 <_malloc_r+0x22>
 8012504:	1b9b      	subs	r3, r3, r6
 8012506:	50a3      	str	r3, [r4, r2]
 8012508:	e7ab      	b.n	8012462 <_malloc_r+0x22>
 801250a:	42a3      	cmp	r3, r4
 801250c:	6862      	ldr	r2, [r4, #4]
 801250e:	d1dd      	bne.n	80124cc <_malloc_r+0x8c>
 8012510:	f8c8 2000 	str.w	r2, [r8]
 8012514:	e7ec      	b.n	80124f0 <_malloc_r+0xb0>
 8012516:	4623      	mov	r3, r4
 8012518:	6864      	ldr	r4, [r4, #4]
 801251a:	e7ac      	b.n	8012476 <_malloc_r+0x36>
 801251c:	4634      	mov	r4, r6
 801251e:	6876      	ldr	r6, [r6, #4]
 8012520:	e7b4      	b.n	801248c <_malloc_r+0x4c>
 8012522:	4613      	mov	r3, r2
 8012524:	e7cc      	b.n	80124c0 <_malloc_r+0x80>
 8012526:	230c      	movs	r3, #12
 8012528:	603b      	str	r3, [r7, #0]
 801252a:	4638      	mov	r0, r7
 801252c:	f000 f80e 	bl	801254c <__malloc_unlock>
 8012530:	e797      	b.n	8012462 <_malloc_r+0x22>
 8012532:	6025      	str	r5, [r4, #0]
 8012534:	e7dc      	b.n	80124f0 <_malloc_r+0xb0>
 8012536:	605b      	str	r3, [r3, #4]
 8012538:	deff      	udf	#255	; 0xff
 801253a:	bf00      	nop
 801253c:	24000f44 	.word	0x24000f44

08012540 <__malloc_lock>:
 8012540:	4801      	ldr	r0, [pc, #4]	; (8012548 <__malloc_lock+0x8>)
 8012542:	f7ff b8ff 	b.w	8011744 <__retarget_lock_acquire_recursive>
 8012546:	bf00      	nop
 8012548:	24000f40 	.word	0x24000f40

0801254c <__malloc_unlock>:
 801254c:	4801      	ldr	r0, [pc, #4]	; (8012554 <__malloc_unlock+0x8>)
 801254e:	f7ff b8fa 	b.w	8011746 <__retarget_lock_release_recursive>
 8012552:	bf00      	nop
 8012554:	24000f40 	.word	0x24000f40

08012558 <_Balloc>:
 8012558:	b570      	push	{r4, r5, r6, lr}
 801255a:	69c6      	ldr	r6, [r0, #28]
 801255c:	4604      	mov	r4, r0
 801255e:	460d      	mov	r5, r1
 8012560:	b976      	cbnz	r6, 8012580 <_Balloc+0x28>
 8012562:	2010      	movs	r0, #16
 8012564:	f7ff ff44 	bl	80123f0 <malloc>
 8012568:	4602      	mov	r2, r0
 801256a:	61e0      	str	r0, [r4, #28]
 801256c:	b920      	cbnz	r0, 8012578 <_Balloc+0x20>
 801256e:	4b18      	ldr	r3, [pc, #96]	; (80125d0 <_Balloc+0x78>)
 8012570:	4818      	ldr	r0, [pc, #96]	; (80125d4 <_Balloc+0x7c>)
 8012572:	216b      	movs	r1, #107	; 0x6b
 8012574:	f001 fd3c 	bl	8013ff0 <__assert_func>
 8012578:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801257c:	6006      	str	r6, [r0, #0]
 801257e:	60c6      	str	r6, [r0, #12]
 8012580:	69e6      	ldr	r6, [r4, #28]
 8012582:	68f3      	ldr	r3, [r6, #12]
 8012584:	b183      	cbz	r3, 80125a8 <_Balloc+0x50>
 8012586:	69e3      	ldr	r3, [r4, #28]
 8012588:	68db      	ldr	r3, [r3, #12]
 801258a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801258e:	b9b8      	cbnz	r0, 80125c0 <_Balloc+0x68>
 8012590:	2101      	movs	r1, #1
 8012592:	fa01 f605 	lsl.w	r6, r1, r5
 8012596:	1d72      	adds	r2, r6, #5
 8012598:	0092      	lsls	r2, r2, #2
 801259a:	4620      	mov	r0, r4
 801259c:	f001 fd46 	bl	801402c <_calloc_r>
 80125a0:	b160      	cbz	r0, 80125bc <_Balloc+0x64>
 80125a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80125a6:	e00e      	b.n	80125c6 <_Balloc+0x6e>
 80125a8:	2221      	movs	r2, #33	; 0x21
 80125aa:	2104      	movs	r1, #4
 80125ac:	4620      	mov	r0, r4
 80125ae:	f001 fd3d 	bl	801402c <_calloc_r>
 80125b2:	69e3      	ldr	r3, [r4, #28]
 80125b4:	60f0      	str	r0, [r6, #12]
 80125b6:	68db      	ldr	r3, [r3, #12]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d1e4      	bne.n	8012586 <_Balloc+0x2e>
 80125bc:	2000      	movs	r0, #0
 80125be:	bd70      	pop	{r4, r5, r6, pc}
 80125c0:	6802      	ldr	r2, [r0, #0]
 80125c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80125c6:	2300      	movs	r3, #0
 80125c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80125cc:	e7f7      	b.n	80125be <_Balloc+0x66>
 80125ce:	bf00      	nop
 80125d0:	08014f16 	.word	0x08014f16
 80125d4:	08014f96 	.word	0x08014f96

080125d8 <_Bfree>:
 80125d8:	b570      	push	{r4, r5, r6, lr}
 80125da:	69c6      	ldr	r6, [r0, #28]
 80125dc:	4605      	mov	r5, r0
 80125de:	460c      	mov	r4, r1
 80125e0:	b976      	cbnz	r6, 8012600 <_Bfree+0x28>
 80125e2:	2010      	movs	r0, #16
 80125e4:	f7ff ff04 	bl	80123f0 <malloc>
 80125e8:	4602      	mov	r2, r0
 80125ea:	61e8      	str	r0, [r5, #28]
 80125ec:	b920      	cbnz	r0, 80125f8 <_Bfree+0x20>
 80125ee:	4b09      	ldr	r3, [pc, #36]	; (8012614 <_Bfree+0x3c>)
 80125f0:	4809      	ldr	r0, [pc, #36]	; (8012618 <_Bfree+0x40>)
 80125f2:	218f      	movs	r1, #143	; 0x8f
 80125f4:	f001 fcfc 	bl	8013ff0 <__assert_func>
 80125f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80125fc:	6006      	str	r6, [r0, #0]
 80125fe:	60c6      	str	r6, [r0, #12]
 8012600:	b13c      	cbz	r4, 8012612 <_Bfree+0x3a>
 8012602:	69eb      	ldr	r3, [r5, #28]
 8012604:	6862      	ldr	r2, [r4, #4]
 8012606:	68db      	ldr	r3, [r3, #12]
 8012608:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801260c:	6021      	str	r1, [r4, #0]
 801260e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012612:	bd70      	pop	{r4, r5, r6, pc}
 8012614:	08014f16 	.word	0x08014f16
 8012618:	08014f96 	.word	0x08014f96

0801261c <__multadd>:
 801261c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012620:	690d      	ldr	r5, [r1, #16]
 8012622:	4607      	mov	r7, r0
 8012624:	460c      	mov	r4, r1
 8012626:	461e      	mov	r6, r3
 8012628:	f101 0c14 	add.w	ip, r1, #20
 801262c:	2000      	movs	r0, #0
 801262e:	f8dc 3000 	ldr.w	r3, [ip]
 8012632:	b299      	uxth	r1, r3
 8012634:	fb02 6101 	mla	r1, r2, r1, r6
 8012638:	0c1e      	lsrs	r6, r3, #16
 801263a:	0c0b      	lsrs	r3, r1, #16
 801263c:	fb02 3306 	mla	r3, r2, r6, r3
 8012640:	b289      	uxth	r1, r1
 8012642:	3001      	adds	r0, #1
 8012644:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012648:	4285      	cmp	r5, r0
 801264a:	f84c 1b04 	str.w	r1, [ip], #4
 801264e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012652:	dcec      	bgt.n	801262e <__multadd+0x12>
 8012654:	b30e      	cbz	r6, 801269a <__multadd+0x7e>
 8012656:	68a3      	ldr	r3, [r4, #8]
 8012658:	42ab      	cmp	r3, r5
 801265a:	dc19      	bgt.n	8012690 <__multadd+0x74>
 801265c:	6861      	ldr	r1, [r4, #4]
 801265e:	4638      	mov	r0, r7
 8012660:	3101      	adds	r1, #1
 8012662:	f7ff ff79 	bl	8012558 <_Balloc>
 8012666:	4680      	mov	r8, r0
 8012668:	b928      	cbnz	r0, 8012676 <__multadd+0x5a>
 801266a:	4602      	mov	r2, r0
 801266c:	4b0c      	ldr	r3, [pc, #48]	; (80126a0 <__multadd+0x84>)
 801266e:	480d      	ldr	r0, [pc, #52]	; (80126a4 <__multadd+0x88>)
 8012670:	21ba      	movs	r1, #186	; 0xba
 8012672:	f001 fcbd 	bl	8013ff0 <__assert_func>
 8012676:	6922      	ldr	r2, [r4, #16]
 8012678:	3202      	adds	r2, #2
 801267a:	f104 010c 	add.w	r1, r4, #12
 801267e:	0092      	lsls	r2, r2, #2
 8012680:	300c      	adds	r0, #12
 8012682:	f7ff f861 	bl	8011748 <memcpy>
 8012686:	4621      	mov	r1, r4
 8012688:	4638      	mov	r0, r7
 801268a:	f7ff ffa5 	bl	80125d8 <_Bfree>
 801268e:	4644      	mov	r4, r8
 8012690:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012694:	3501      	adds	r5, #1
 8012696:	615e      	str	r6, [r3, #20]
 8012698:	6125      	str	r5, [r4, #16]
 801269a:	4620      	mov	r0, r4
 801269c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126a0:	08014f85 	.word	0x08014f85
 80126a4:	08014f96 	.word	0x08014f96

080126a8 <__s2b>:
 80126a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126ac:	460c      	mov	r4, r1
 80126ae:	4615      	mov	r5, r2
 80126b0:	461f      	mov	r7, r3
 80126b2:	2209      	movs	r2, #9
 80126b4:	3308      	adds	r3, #8
 80126b6:	4606      	mov	r6, r0
 80126b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80126bc:	2100      	movs	r1, #0
 80126be:	2201      	movs	r2, #1
 80126c0:	429a      	cmp	r2, r3
 80126c2:	db09      	blt.n	80126d8 <__s2b+0x30>
 80126c4:	4630      	mov	r0, r6
 80126c6:	f7ff ff47 	bl	8012558 <_Balloc>
 80126ca:	b940      	cbnz	r0, 80126de <__s2b+0x36>
 80126cc:	4602      	mov	r2, r0
 80126ce:	4b19      	ldr	r3, [pc, #100]	; (8012734 <__s2b+0x8c>)
 80126d0:	4819      	ldr	r0, [pc, #100]	; (8012738 <__s2b+0x90>)
 80126d2:	21d3      	movs	r1, #211	; 0xd3
 80126d4:	f001 fc8c 	bl	8013ff0 <__assert_func>
 80126d8:	0052      	lsls	r2, r2, #1
 80126da:	3101      	adds	r1, #1
 80126dc:	e7f0      	b.n	80126c0 <__s2b+0x18>
 80126de:	9b08      	ldr	r3, [sp, #32]
 80126e0:	6143      	str	r3, [r0, #20]
 80126e2:	2d09      	cmp	r5, #9
 80126e4:	f04f 0301 	mov.w	r3, #1
 80126e8:	6103      	str	r3, [r0, #16]
 80126ea:	dd16      	ble.n	801271a <__s2b+0x72>
 80126ec:	f104 0909 	add.w	r9, r4, #9
 80126f0:	46c8      	mov	r8, r9
 80126f2:	442c      	add	r4, r5
 80126f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80126f8:	4601      	mov	r1, r0
 80126fa:	3b30      	subs	r3, #48	; 0x30
 80126fc:	220a      	movs	r2, #10
 80126fe:	4630      	mov	r0, r6
 8012700:	f7ff ff8c 	bl	801261c <__multadd>
 8012704:	45a0      	cmp	r8, r4
 8012706:	d1f5      	bne.n	80126f4 <__s2b+0x4c>
 8012708:	f1a5 0408 	sub.w	r4, r5, #8
 801270c:	444c      	add	r4, r9
 801270e:	1b2d      	subs	r5, r5, r4
 8012710:	1963      	adds	r3, r4, r5
 8012712:	42bb      	cmp	r3, r7
 8012714:	db04      	blt.n	8012720 <__s2b+0x78>
 8012716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801271a:	340a      	adds	r4, #10
 801271c:	2509      	movs	r5, #9
 801271e:	e7f6      	b.n	801270e <__s2b+0x66>
 8012720:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012724:	4601      	mov	r1, r0
 8012726:	3b30      	subs	r3, #48	; 0x30
 8012728:	220a      	movs	r2, #10
 801272a:	4630      	mov	r0, r6
 801272c:	f7ff ff76 	bl	801261c <__multadd>
 8012730:	e7ee      	b.n	8012710 <__s2b+0x68>
 8012732:	bf00      	nop
 8012734:	08014f85 	.word	0x08014f85
 8012738:	08014f96 	.word	0x08014f96

0801273c <__hi0bits>:
 801273c:	0c03      	lsrs	r3, r0, #16
 801273e:	041b      	lsls	r3, r3, #16
 8012740:	b9d3      	cbnz	r3, 8012778 <__hi0bits+0x3c>
 8012742:	0400      	lsls	r0, r0, #16
 8012744:	2310      	movs	r3, #16
 8012746:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801274a:	bf04      	itt	eq
 801274c:	0200      	lsleq	r0, r0, #8
 801274e:	3308      	addeq	r3, #8
 8012750:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012754:	bf04      	itt	eq
 8012756:	0100      	lsleq	r0, r0, #4
 8012758:	3304      	addeq	r3, #4
 801275a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801275e:	bf04      	itt	eq
 8012760:	0080      	lsleq	r0, r0, #2
 8012762:	3302      	addeq	r3, #2
 8012764:	2800      	cmp	r0, #0
 8012766:	db05      	blt.n	8012774 <__hi0bits+0x38>
 8012768:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801276c:	f103 0301 	add.w	r3, r3, #1
 8012770:	bf08      	it	eq
 8012772:	2320      	moveq	r3, #32
 8012774:	4618      	mov	r0, r3
 8012776:	4770      	bx	lr
 8012778:	2300      	movs	r3, #0
 801277a:	e7e4      	b.n	8012746 <__hi0bits+0xa>

0801277c <__lo0bits>:
 801277c:	6803      	ldr	r3, [r0, #0]
 801277e:	f013 0207 	ands.w	r2, r3, #7
 8012782:	d00c      	beq.n	801279e <__lo0bits+0x22>
 8012784:	07d9      	lsls	r1, r3, #31
 8012786:	d422      	bmi.n	80127ce <__lo0bits+0x52>
 8012788:	079a      	lsls	r2, r3, #30
 801278a:	bf49      	itett	mi
 801278c:	085b      	lsrmi	r3, r3, #1
 801278e:	089b      	lsrpl	r3, r3, #2
 8012790:	6003      	strmi	r3, [r0, #0]
 8012792:	2201      	movmi	r2, #1
 8012794:	bf5c      	itt	pl
 8012796:	6003      	strpl	r3, [r0, #0]
 8012798:	2202      	movpl	r2, #2
 801279a:	4610      	mov	r0, r2
 801279c:	4770      	bx	lr
 801279e:	b299      	uxth	r1, r3
 80127a0:	b909      	cbnz	r1, 80127a6 <__lo0bits+0x2a>
 80127a2:	0c1b      	lsrs	r3, r3, #16
 80127a4:	2210      	movs	r2, #16
 80127a6:	b2d9      	uxtb	r1, r3
 80127a8:	b909      	cbnz	r1, 80127ae <__lo0bits+0x32>
 80127aa:	3208      	adds	r2, #8
 80127ac:	0a1b      	lsrs	r3, r3, #8
 80127ae:	0719      	lsls	r1, r3, #28
 80127b0:	bf04      	itt	eq
 80127b2:	091b      	lsreq	r3, r3, #4
 80127b4:	3204      	addeq	r2, #4
 80127b6:	0799      	lsls	r1, r3, #30
 80127b8:	bf04      	itt	eq
 80127ba:	089b      	lsreq	r3, r3, #2
 80127bc:	3202      	addeq	r2, #2
 80127be:	07d9      	lsls	r1, r3, #31
 80127c0:	d403      	bmi.n	80127ca <__lo0bits+0x4e>
 80127c2:	085b      	lsrs	r3, r3, #1
 80127c4:	f102 0201 	add.w	r2, r2, #1
 80127c8:	d003      	beq.n	80127d2 <__lo0bits+0x56>
 80127ca:	6003      	str	r3, [r0, #0]
 80127cc:	e7e5      	b.n	801279a <__lo0bits+0x1e>
 80127ce:	2200      	movs	r2, #0
 80127d0:	e7e3      	b.n	801279a <__lo0bits+0x1e>
 80127d2:	2220      	movs	r2, #32
 80127d4:	e7e1      	b.n	801279a <__lo0bits+0x1e>
	...

080127d8 <__i2b>:
 80127d8:	b510      	push	{r4, lr}
 80127da:	460c      	mov	r4, r1
 80127dc:	2101      	movs	r1, #1
 80127de:	f7ff febb 	bl	8012558 <_Balloc>
 80127e2:	4602      	mov	r2, r0
 80127e4:	b928      	cbnz	r0, 80127f2 <__i2b+0x1a>
 80127e6:	4b05      	ldr	r3, [pc, #20]	; (80127fc <__i2b+0x24>)
 80127e8:	4805      	ldr	r0, [pc, #20]	; (8012800 <__i2b+0x28>)
 80127ea:	f240 1145 	movw	r1, #325	; 0x145
 80127ee:	f001 fbff 	bl	8013ff0 <__assert_func>
 80127f2:	2301      	movs	r3, #1
 80127f4:	6144      	str	r4, [r0, #20]
 80127f6:	6103      	str	r3, [r0, #16]
 80127f8:	bd10      	pop	{r4, pc}
 80127fa:	bf00      	nop
 80127fc:	08014f85 	.word	0x08014f85
 8012800:	08014f96 	.word	0x08014f96

08012804 <__multiply>:
 8012804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012808:	4691      	mov	r9, r2
 801280a:	690a      	ldr	r2, [r1, #16]
 801280c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012810:	429a      	cmp	r2, r3
 8012812:	bfb8      	it	lt
 8012814:	460b      	movlt	r3, r1
 8012816:	460c      	mov	r4, r1
 8012818:	bfbc      	itt	lt
 801281a:	464c      	movlt	r4, r9
 801281c:	4699      	movlt	r9, r3
 801281e:	6927      	ldr	r7, [r4, #16]
 8012820:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012824:	68a3      	ldr	r3, [r4, #8]
 8012826:	6861      	ldr	r1, [r4, #4]
 8012828:	eb07 060a 	add.w	r6, r7, sl
 801282c:	42b3      	cmp	r3, r6
 801282e:	b085      	sub	sp, #20
 8012830:	bfb8      	it	lt
 8012832:	3101      	addlt	r1, #1
 8012834:	f7ff fe90 	bl	8012558 <_Balloc>
 8012838:	b930      	cbnz	r0, 8012848 <__multiply+0x44>
 801283a:	4602      	mov	r2, r0
 801283c:	4b44      	ldr	r3, [pc, #272]	; (8012950 <__multiply+0x14c>)
 801283e:	4845      	ldr	r0, [pc, #276]	; (8012954 <__multiply+0x150>)
 8012840:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8012844:	f001 fbd4 	bl	8013ff0 <__assert_func>
 8012848:	f100 0514 	add.w	r5, r0, #20
 801284c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012850:	462b      	mov	r3, r5
 8012852:	2200      	movs	r2, #0
 8012854:	4543      	cmp	r3, r8
 8012856:	d321      	bcc.n	801289c <__multiply+0x98>
 8012858:	f104 0314 	add.w	r3, r4, #20
 801285c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012860:	f109 0314 	add.w	r3, r9, #20
 8012864:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012868:	9202      	str	r2, [sp, #8]
 801286a:	1b3a      	subs	r2, r7, r4
 801286c:	3a15      	subs	r2, #21
 801286e:	f022 0203 	bic.w	r2, r2, #3
 8012872:	3204      	adds	r2, #4
 8012874:	f104 0115 	add.w	r1, r4, #21
 8012878:	428f      	cmp	r7, r1
 801287a:	bf38      	it	cc
 801287c:	2204      	movcc	r2, #4
 801287e:	9201      	str	r2, [sp, #4]
 8012880:	9a02      	ldr	r2, [sp, #8]
 8012882:	9303      	str	r3, [sp, #12]
 8012884:	429a      	cmp	r2, r3
 8012886:	d80c      	bhi.n	80128a2 <__multiply+0x9e>
 8012888:	2e00      	cmp	r6, #0
 801288a:	dd03      	ble.n	8012894 <__multiply+0x90>
 801288c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012890:	2b00      	cmp	r3, #0
 8012892:	d05b      	beq.n	801294c <__multiply+0x148>
 8012894:	6106      	str	r6, [r0, #16]
 8012896:	b005      	add	sp, #20
 8012898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801289c:	f843 2b04 	str.w	r2, [r3], #4
 80128a0:	e7d8      	b.n	8012854 <__multiply+0x50>
 80128a2:	f8b3 a000 	ldrh.w	sl, [r3]
 80128a6:	f1ba 0f00 	cmp.w	sl, #0
 80128aa:	d024      	beq.n	80128f6 <__multiply+0xf2>
 80128ac:	f104 0e14 	add.w	lr, r4, #20
 80128b0:	46a9      	mov	r9, r5
 80128b2:	f04f 0c00 	mov.w	ip, #0
 80128b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80128ba:	f8d9 1000 	ldr.w	r1, [r9]
 80128be:	fa1f fb82 	uxth.w	fp, r2
 80128c2:	b289      	uxth	r1, r1
 80128c4:	fb0a 110b 	mla	r1, sl, fp, r1
 80128c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80128cc:	f8d9 2000 	ldr.w	r2, [r9]
 80128d0:	4461      	add	r1, ip
 80128d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80128d6:	fb0a c20b 	mla	r2, sl, fp, ip
 80128da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80128de:	b289      	uxth	r1, r1
 80128e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80128e4:	4577      	cmp	r7, lr
 80128e6:	f849 1b04 	str.w	r1, [r9], #4
 80128ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80128ee:	d8e2      	bhi.n	80128b6 <__multiply+0xb2>
 80128f0:	9a01      	ldr	r2, [sp, #4]
 80128f2:	f845 c002 	str.w	ip, [r5, r2]
 80128f6:	9a03      	ldr	r2, [sp, #12]
 80128f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80128fc:	3304      	adds	r3, #4
 80128fe:	f1b9 0f00 	cmp.w	r9, #0
 8012902:	d021      	beq.n	8012948 <__multiply+0x144>
 8012904:	6829      	ldr	r1, [r5, #0]
 8012906:	f104 0c14 	add.w	ip, r4, #20
 801290a:	46ae      	mov	lr, r5
 801290c:	f04f 0a00 	mov.w	sl, #0
 8012910:	f8bc b000 	ldrh.w	fp, [ip]
 8012914:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012918:	fb09 220b 	mla	r2, r9, fp, r2
 801291c:	4452      	add	r2, sl
 801291e:	b289      	uxth	r1, r1
 8012920:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012924:	f84e 1b04 	str.w	r1, [lr], #4
 8012928:	f85c 1b04 	ldr.w	r1, [ip], #4
 801292c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012930:	f8be 1000 	ldrh.w	r1, [lr]
 8012934:	fb09 110a 	mla	r1, r9, sl, r1
 8012938:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801293c:	4567      	cmp	r7, ip
 801293e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012942:	d8e5      	bhi.n	8012910 <__multiply+0x10c>
 8012944:	9a01      	ldr	r2, [sp, #4]
 8012946:	50a9      	str	r1, [r5, r2]
 8012948:	3504      	adds	r5, #4
 801294a:	e799      	b.n	8012880 <__multiply+0x7c>
 801294c:	3e01      	subs	r6, #1
 801294e:	e79b      	b.n	8012888 <__multiply+0x84>
 8012950:	08014f85 	.word	0x08014f85
 8012954:	08014f96 	.word	0x08014f96

08012958 <__pow5mult>:
 8012958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801295c:	4615      	mov	r5, r2
 801295e:	f012 0203 	ands.w	r2, r2, #3
 8012962:	4606      	mov	r6, r0
 8012964:	460f      	mov	r7, r1
 8012966:	d007      	beq.n	8012978 <__pow5mult+0x20>
 8012968:	4c25      	ldr	r4, [pc, #148]	; (8012a00 <__pow5mult+0xa8>)
 801296a:	3a01      	subs	r2, #1
 801296c:	2300      	movs	r3, #0
 801296e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012972:	f7ff fe53 	bl	801261c <__multadd>
 8012976:	4607      	mov	r7, r0
 8012978:	10ad      	asrs	r5, r5, #2
 801297a:	d03d      	beq.n	80129f8 <__pow5mult+0xa0>
 801297c:	69f4      	ldr	r4, [r6, #28]
 801297e:	b97c      	cbnz	r4, 80129a0 <__pow5mult+0x48>
 8012980:	2010      	movs	r0, #16
 8012982:	f7ff fd35 	bl	80123f0 <malloc>
 8012986:	4602      	mov	r2, r0
 8012988:	61f0      	str	r0, [r6, #28]
 801298a:	b928      	cbnz	r0, 8012998 <__pow5mult+0x40>
 801298c:	4b1d      	ldr	r3, [pc, #116]	; (8012a04 <__pow5mult+0xac>)
 801298e:	481e      	ldr	r0, [pc, #120]	; (8012a08 <__pow5mult+0xb0>)
 8012990:	f240 11b3 	movw	r1, #435	; 0x1b3
 8012994:	f001 fb2c 	bl	8013ff0 <__assert_func>
 8012998:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801299c:	6004      	str	r4, [r0, #0]
 801299e:	60c4      	str	r4, [r0, #12]
 80129a0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80129a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80129a8:	b94c      	cbnz	r4, 80129be <__pow5mult+0x66>
 80129aa:	f240 2171 	movw	r1, #625	; 0x271
 80129ae:	4630      	mov	r0, r6
 80129b0:	f7ff ff12 	bl	80127d8 <__i2b>
 80129b4:	2300      	movs	r3, #0
 80129b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80129ba:	4604      	mov	r4, r0
 80129bc:	6003      	str	r3, [r0, #0]
 80129be:	f04f 0900 	mov.w	r9, #0
 80129c2:	07eb      	lsls	r3, r5, #31
 80129c4:	d50a      	bpl.n	80129dc <__pow5mult+0x84>
 80129c6:	4639      	mov	r1, r7
 80129c8:	4622      	mov	r2, r4
 80129ca:	4630      	mov	r0, r6
 80129cc:	f7ff ff1a 	bl	8012804 <__multiply>
 80129d0:	4639      	mov	r1, r7
 80129d2:	4680      	mov	r8, r0
 80129d4:	4630      	mov	r0, r6
 80129d6:	f7ff fdff 	bl	80125d8 <_Bfree>
 80129da:	4647      	mov	r7, r8
 80129dc:	106d      	asrs	r5, r5, #1
 80129de:	d00b      	beq.n	80129f8 <__pow5mult+0xa0>
 80129e0:	6820      	ldr	r0, [r4, #0]
 80129e2:	b938      	cbnz	r0, 80129f4 <__pow5mult+0x9c>
 80129e4:	4622      	mov	r2, r4
 80129e6:	4621      	mov	r1, r4
 80129e8:	4630      	mov	r0, r6
 80129ea:	f7ff ff0b 	bl	8012804 <__multiply>
 80129ee:	6020      	str	r0, [r4, #0]
 80129f0:	f8c0 9000 	str.w	r9, [r0]
 80129f4:	4604      	mov	r4, r0
 80129f6:	e7e4      	b.n	80129c2 <__pow5mult+0x6a>
 80129f8:	4638      	mov	r0, r7
 80129fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80129fe:	bf00      	nop
 8012a00:	080150e0 	.word	0x080150e0
 8012a04:	08014f16 	.word	0x08014f16
 8012a08:	08014f96 	.word	0x08014f96

08012a0c <__lshift>:
 8012a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a10:	460c      	mov	r4, r1
 8012a12:	6849      	ldr	r1, [r1, #4]
 8012a14:	6923      	ldr	r3, [r4, #16]
 8012a16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012a1a:	68a3      	ldr	r3, [r4, #8]
 8012a1c:	4607      	mov	r7, r0
 8012a1e:	4691      	mov	r9, r2
 8012a20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012a24:	f108 0601 	add.w	r6, r8, #1
 8012a28:	42b3      	cmp	r3, r6
 8012a2a:	db0b      	blt.n	8012a44 <__lshift+0x38>
 8012a2c:	4638      	mov	r0, r7
 8012a2e:	f7ff fd93 	bl	8012558 <_Balloc>
 8012a32:	4605      	mov	r5, r0
 8012a34:	b948      	cbnz	r0, 8012a4a <__lshift+0x3e>
 8012a36:	4602      	mov	r2, r0
 8012a38:	4b28      	ldr	r3, [pc, #160]	; (8012adc <__lshift+0xd0>)
 8012a3a:	4829      	ldr	r0, [pc, #164]	; (8012ae0 <__lshift+0xd4>)
 8012a3c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8012a40:	f001 fad6 	bl	8013ff0 <__assert_func>
 8012a44:	3101      	adds	r1, #1
 8012a46:	005b      	lsls	r3, r3, #1
 8012a48:	e7ee      	b.n	8012a28 <__lshift+0x1c>
 8012a4a:	2300      	movs	r3, #0
 8012a4c:	f100 0114 	add.w	r1, r0, #20
 8012a50:	f100 0210 	add.w	r2, r0, #16
 8012a54:	4618      	mov	r0, r3
 8012a56:	4553      	cmp	r3, sl
 8012a58:	db33      	blt.n	8012ac2 <__lshift+0xb6>
 8012a5a:	6920      	ldr	r0, [r4, #16]
 8012a5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012a60:	f104 0314 	add.w	r3, r4, #20
 8012a64:	f019 091f 	ands.w	r9, r9, #31
 8012a68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012a6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012a70:	d02b      	beq.n	8012aca <__lshift+0xbe>
 8012a72:	f1c9 0e20 	rsb	lr, r9, #32
 8012a76:	468a      	mov	sl, r1
 8012a78:	2200      	movs	r2, #0
 8012a7a:	6818      	ldr	r0, [r3, #0]
 8012a7c:	fa00 f009 	lsl.w	r0, r0, r9
 8012a80:	4310      	orrs	r0, r2
 8012a82:	f84a 0b04 	str.w	r0, [sl], #4
 8012a86:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a8a:	459c      	cmp	ip, r3
 8012a8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8012a90:	d8f3      	bhi.n	8012a7a <__lshift+0x6e>
 8012a92:	ebac 0304 	sub.w	r3, ip, r4
 8012a96:	3b15      	subs	r3, #21
 8012a98:	f023 0303 	bic.w	r3, r3, #3
 8012a9c:	3304      	adds	r3, #4
 8012a9e:	f104 0015 	add.w	r0, r4, #21
 8012aa2:	4584      	cmp	ip, r0
 8012aa4:	bf38      	it	cc
 8012aa6:	2304      	movcc	r3, #4
 8012aa8:	50ca      	str	r2, [r1, r3]
 8012aaa:	b10a      	cbz	r2, 8012ab0 <__lshift+0xa4>
 8012aac:	f108 0602 	add.w	r6, r8, #2
 8012ab0:	3e01      	subs	r6, #1
 8012ab2:	4638      	mov	r0, r7
 8012ab4:	612e      	str	r6, [r5, #16]
 8012ab6:	4621      	mov	r1, r4
 8012ab8:	f7ff fd8e 	bl	80125d8 <_Bfree>
 8012abc:	4628      	mov	r0, r5
 8012abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ac2:	f842 0f04 	str.w	r0, [r2, #4]!
 8012ac6:	3301      	adds	r3, #1
 8012ac8:	e7c5      	b.n	8012a56 <__lshift+0x4a>
 8012aca:	3904      	subs	r1, #4
 8012acc:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ad0:	f841 2f04 	str.w	r2, [r1, #4]!
 8012ad4:	459c      	cmp	ip, r3
 8012ad6:	d8f9      	bhi.n	8012acc <__lshift+0xc0>
 8012ad8:	e7ea      	b.n	8012ab0 <__lshift+0xa4>
 8012ada:	bf00      	nop
 8012adc:	08014f85 	.word	0x08014f85
 8012ae0:	08014f96 	.word	0x08014f96

08012ae4 <__mcmp>:
 8012ae4:	b530      	push	{r4, r5, lr}
 8012ae6:	6902      	ldr	r2, [r0, #16]
 8012ae8:	690c      	ldr	r4, [r1, #16]
 8012aea:	1b12      	subs	r2, r2, r4
 8012aec:	d10e      	bne.n	8012b0c <__mcmp+0x28>
 8012aee:	f100 0314 	add.w	r3, r0, #20
 8012af2:	3114      	adds	r1, #20
 8012af4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012af8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012afc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012b00:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012b04:	42a5      	cmp	r5, r4
 8012b06:	d003      	beq.n	8012b10 <__mcmp+0x2c>
 8012b08:	d305      	bcc.n	8012b16 <__mcmp+0x32>
 8012b0a:	2201      	movs	r2, #1
 8012b0c:	4610      	mov	r0, r2
 8012b0e:	bd30      	pop	{r4, r5, pc}
 8012b10:	4283      	cmp	r3, r0
 8012b12:	d3f3      	bcc.n	8012afc <__mcmp+0x18>
 8012b14:	e7fa      	b.n	8012b0c <__mcmp+0x28>
 8012b16:	f04f 32ff 	mov.w	r2, #4294967295
 8012b1a:	e7f7      	b.n	8012b0c <__mcmp+0x28>

08012b1c <__mdiff>:
 8012b1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b20:	460c      	mov	r4, r1
 8012b22:	4606      	mov	r6, r0
 8012b24:	4611      	mov	r1, r2
 8012b26:	4620      	mov	r0, r4
 8012b28:	4690      	mov	r8, r2
 8012b2a:	f7ff ffdb 	bl	8012ae4 <__mcmp>
 8012b2e:	1e05      	subs	r5, r0, #0
 8012b30:	d110      	bne.n	8012b54 <__mdiff+0x38>
 8012b32:	4629      	mov	r1, r5
 8012b34:	4630      	mov	r0, r6
 8012b36:	f7ff fd0f 	bl	8012558 <_Balloc>
 8012b3a:	b930      	cbnz	r0, 8012b4a <__mdiff+0x2e>
 8012b3c:	4b3a      	ldr	r3, [pc, #232]	; (8012c28 <__mdiff+0x10c>)
 8012b3e:	4602      	mov	r2, r0
 8012b40:	f240 2137 	movw	r1, #567	; 0x237
 8012b44:	4839      	ldr	r0, [pc, #228]	; (8012c2c <__mdiff+0x110>)
 8012b46:	f001 fa53 	bl	8013ff0 <__assert_func>
 8012b4a:	2301      	movs	r3, #1
 8012b4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012b50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b54:	bfa4      	itt	ge
 8012b56:	4643      	movge	r3, r8
 8012b58:	46a0      	movge	r8, r4
 8012b5a:	4630      	mov	r0, r6
 8012b5c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012b60:	bfa6      	itte	ge
 8012b62:	461c      	movge	r4, r3
 8012b64:	2500      	movge	r5, #0
 8012b66:	2501      	movlt	r5, #1
 8012b68:	f7ff fcf6 	bl	8012558 <_Balloc>
 8012b6c:	b920      	cbnz	r0, 8012b78 <__mdiff+0x5c>
 8012b6e:	4b2e      	ldr	r3, [pc, #184]	; (8012c28 <__mdiff+0x10c>)
 8012b70:	4602      	mov	r2, r0
 8012b72:	f240 2145 	movw	r1, #581	; 0x245
 8012b76:	e7e5      	b.n	8012b44 <__mdiff+0x28>
 8012b78:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012b7c:	6926      	ldr	r6, [r4, #16]
 8012b7e:	60c5      	str	r5, [r0, #12]
 8012b80:	f104 0914 	add.w	r9, r4, #20
 8012b84:	f108 0514 	add.w	r5, r8, #20
 8012b88:	f100 0e14 	add.w	lr, r0, #20
 8012b8c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012b90:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012b94:	f108 0210 	add.w	r2, r8, #16
 8012b98:	46f2      	mov	sl, lr
 8012b9a:	2100      	movs	r1, #0
 8012b9c:	f859 3b04 	ldr.w	r3, [r9], #4
 8012ba0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012ba4:	fa11 f88b 	uxtah	r8, r1, fp
 8012ba8:	b299      	uxth	r1, r3
 8012baa:	0c1b      	lsrs	r3, r3, #16
 8012bac:	eba8 0801 	sub.w	r8, r8, r1
 8012bb0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012bb4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012bb8:	fa1f f888 	uxth.w	r8, r8
 8012bbc:	1419      	asrs	r1, r3, #16
 8012bbe:	454e      	cmp	r6, r9
 8012bc0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012bc4:	f84a 3b04 	str.w	r3, [sl], #4
 8012bc8:	d8e8      	bhi.n	8012b9c <__mdiff+0x80>
 8012bca:	1b33      	subs	r3, r6, r4
 8012bcc:	3b15      	subs	r3, #21
 8012bce:	f023 0303 	bic.w	r3, r3, #3
 8012bd2:	3304      	adds	r3, #4
 8012bd4:	3415      	adds	r4, #21
 8012bd6:	42a6      	cmp	r6, r4
 8012bd8:	bf38      	it	cc
 8012bda:	2304      	movcc	r3, #4
 8012bdc:	441d      	add	r5, r3
 8012bde:	4473      	add	r3, lr
 8012be0:	469e      	mov	lr, r3
 8012be2:	462e      	mov	r6, r5
 8012be4:	4566      	cmp	r6, ip
 8012be6:	d30e      	bcc.n	8012c06 <__mdiff+0xea>
 8012be8:	f10c 0203 	add.w	r2, ip, #3
 8012bec:	1b52      	subs	r2, r2, r5
 8012bee:	f022 0203 	bic.w	r2, r2, #3
 8012bf2:	3d03      	subs	r5, #3
 8012bf4:	45ac      	cmp	ip, r5
 8012bf6:	bf38      	it	cc
 8012bf8:	2200      	movcc	r2, #0
 8012bfa:	4413      	add	r3, r2
 8012bfc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012c00:	b17a      	cbz	r2, 8012c22 <__mdiff+0x106>
 8012c02:	6107      	str	r7, [r0, #16]
 8012c04:	e7a4      	b.n	8012b50 <__mdiff+0x34>
 8012c06:	f856 8b04 	ldr.w	r8, [r6], #4
 8012c0a:	fa11 f288 	uxtah	r2, r1, r8
 8012c0e:	1414      	asrs	r4, r2, #16
 8012c10:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012c14:	b292      	uxth	r2, r2
 8012c16:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012c1a:	f84e 2b04 	str.w	r2, [lr], #4
 8012c1e:	1421      	asrs	r1, r4, #16
 8012c20:	e7e0      	b.n	8012be4 <__mdiff+0xc8>
 8012c22:	3f01      	subs	r7, #1
 8012c24:	e7ea      	b.n	8012bfc <__mdiff+0xe0>
 8012c26:	bf00      	nop
 8012c28:	08014f85 	.word	0x08014f85
 8012c2c:	08014f96 	.word	0x08014f96

08012c30 <__ulp>:
 8012c30:	b082      	sub	sp, #8
 8012c32:	ed8d 0b00 	vstr	d0, [sp]
 8012c36:	9a01      	ldr	r2, [sp, #4]
 8012c38:	4b0f      	ldr	r3, [pc, #60]	; (8012c78 <__ulp+0x48>)
 8012c3a:	4013      	ands	r3, r2
 8012c3c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	dc08      	bgt.n	8012c56 <__ulp+0x26>
 8012c44:	425b      	negs	r3, r3
 8012c46:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8012c4a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012c4e:	da04      	bge.n	8012c5a <__ulp+0x2a>
 8012c50:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012c54:	4113      	asrs	r3, r2
 8012c56:	2200      	movs	r2, #0
 8012c58:	e008      	b.n	8012c6c <__ulp+0x3c>
 8012c5a:	f1a2 0314 	sub.w	r3, r2, #20
 8012c5e:	2b1e      	cmp	r3, #30
 8012c60:	bfda      	itte	le
 8012c62:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8012c66:	40da      	lsrle	r2, r3
 8012c68:	2201      	movgt	r2, #1
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	4619      	mov	r1, r3
 8012c6e:	4610      	mov	r0, r2
 8012c70:	ec41 0b10 	vmov	d0, r0, r1
 8012c74:	b002      	add	sp, #8
 8012c76:	4770      	bx	lr
 8012c78:	7ff00000 	.word	0x7ff00000

08012c7c <__b2d>:
 8012c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c80:	6906      	ldr	r6, [r0, #16]
 8012c82:	f100 0814 	add.w	r8, r0, #20
 8012c86:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012c8a:	1f37      	subs	r7, r6, #4
 8012c8c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012c90:	4610      	mov	r0, r2
 8012c92:	f7ff fd53 	bl	801273c <__hi0bits>
 8012c96:	f1c0 0320 	rsb	r3, r0, #32
 8012c9a:	280a      	cmp	r0, #10
 8012c9c:	600b      	str	r3, [r1, #0]
 8012c9e:	491b      	ldr	r1, [pc, #108]	; (8012d0c <__b2d+0x90>)
 8012ca0:	dc15      	bgt.n	8012cce <__b2d+0x52>
 8012ca2:	f1c0 0c0b 	rsb	ip, r0, #11
 8012ca6:	fa22 f30c 	lsr.w	r3, r2, ip
 8012caa:	45b8      	cmp	r8, r7
 8012cac:	ea43 0501 	orr.w	r5, r3, r1
 8012cb0:	bf34      	ite	cc
 8012cb2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012cb6:	2300      	movcs	r3, #0
 8012cb8:	3015      	adds	r0, #21
 8012cba:	fa02 f000 	lsl.w	r0, r2, r0
 8012cbe:	fa23 f30c 	lsr.w	r3, r3, ip
 8012cc2:	4303      	orrs	r3, r0
 8012cc4:	461c      	mov	r4, r3
 8012cc6:	ec45 4b10 	vmov	d0, r4, r5
 8012cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cce:	45b8      	cmp	r8, r7
 8012cd0:	bf3a      	itte	cc
 8012cd2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012cd6:	f1a6 0708 	subcc.w	r7, r6, #8
 8012cda:	2300      	movcs	r3, #0
 8012cdc:	380b      	subs	r0, #11
 8012cde:	d012      	beq.n	8012d06 <__b2d+0x8a>
 8012ce0:	f1c0 0120 	rsb	r1, r0, #32
 8012ce4:	fa23 f401 	lsr.w	r4, r3, r1
 8012ce8:	4082      	lsls	r2, r0
 8012cea:	4322      	orrs	r2, r4
 8012cec:	4547      	cmp	r7, r8
 8012cee:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8012cf2:	bf8c      	ite	hi
 8012cf4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012cf8:	2200      	movls	r2, #0
 8012cfa:	4083      	lsls	r3, r0
 8012cfc:	40ca      	lsrs	r2, r1
 8012cfe:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012d02:	4313      	orrs	r3, r2
 8012d04:	e7de      	b.n	8012cc4 <__b2d+0x48>
 8012d06:	ea42 0501 	orr.w	r5, r2, r1
 8012d0a:	e7db      	b.n	8012cc4 <__b2d+0x48>
 8012d0c:	3ff00000 	.word	0x3ff00000

08012d10 <__d2b>:
 8012d10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012d14:	460f      	mov	r7, r1
 8012d16:	2101      	movs	r1, #1
 8012d18:	ec59 8b10 	vmov	r8, r9, d0
 8012d1c:	4616      	mov	r6, r2
 8012d1e:	f7ff fc1b 	bl	8012558 <_Balloc>
 8012d22:	4604      	mov	r4, r0
 8012d24:	b930      	cbnz	r0, 8012d34 <__d2b+0x24>
 8012d26:	4602      	mov	r2, r0
 8012d28:	4b24      	ldr	r3, [pc, #144]	; (8012dbc <__d2b+0xac>)
 8012d2a:	4825      	ldr	r0, [pc, #148]	; (8012dc0 <__d2b+0xb0>)
 8012d2c:	f240 310f 	movw	r1, #783	; 0x30f
 8012d30:	f001 f95e 	bl	8013ff0 <__assert_func>
 8012d34:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012d38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012d3c:	bb2d      	cbnz	r5, 8012d8a <__d2b+0x7a>
 8012d3e:	9301      	str	r3, [sp, #4]
 8012d40:	f1b8 0300 	subs.w	r3, r8, #0
 8012d44:	d026      	beq.n	8012d94 <__d2b+0x84>
 8012d46:	4668      	mov	r0, sp
 8012d48:	9300      	str	r3, [sp, #0]
 8012d4a:	f7ff fd17 	bl	801277c <__lo0bits>
 8012d4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012d52:	b1e8      	cbz	r0, 8012d90 <__d2b+0x80>
 8012d54:	f1c0 0320 	rsb	r3, r0, #32
 8012d58:	fa02 f303 	lsl.w	r3, r2, r3
 8012d5c:	430b      	orrs	r3, r1
 8012d5e:	40c2      	lsrs	r2, r0
 8012d60:	6163      	str	r3, [r4, #20]
 8012d62:	9201      	str	r2, [sp, #4]
 8012d64:	9b01      	ldr	r3, [sp, #4]
 8012d66:	61a3      	str	r3, [r4, #24]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	bf14      	ite	ne
 8012d6c:	2202      	movne	r2, #2
 8012d6e:	2201      	moveq	r2, #1
 8012d70:	6122      	str	r2, [r4, #16]
 8012d72:	b1bd      	cbz	r5, 8012da4 <__d2b+0x94>
 8012d74:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012d78:	4405      	add	r5, r0
 8012d7a:	603d      	str	r5, [r7, #0]
 8012d7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012d80:	6030      	str	r0, [r6, #0]
 8012d82:	4620      	mov	r0, r4
 8012d84:	b003      	add	sp, #12
 8012d86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012d8e:	e7d6      	b.n	8012d3e <__d2b+0x2e>
 8012d90:	6161      	str	r1, [r4, #20]
 8012d92:	e7e7      	b.n	8012d64 <__d2b+0x54>
 8012d94:	a801      	add	r0, sp, #4
 8012d96:	f7ff fcf1 	bl	801277c <__lo0bits>
 8012d9a:	9b01      	ldr	r3, [sp, #4]
 8012d9c:	6163      	str	r3, [r4, #20]
 8012d9e:	3020      	adds	r0, #32
 8012da0:	2201      	movs	r2, #1
 8012da2:	e7e5      	b.n	8012d70 <__d2b+0x60>
 8012da4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012da8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012dac:	6038      	str	r0, [r7, #0]
 8012dae:	6918      	ldr	r0, [r3, #16]
 8012db0:	f7ff fcc4 	bl	801273c <__hi0bits>
 8012db4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012db8:	e7e2      	b.n	8012d80 <__d2b+0x70>
 8012dba:	bf00      	nop
 8012dbc:	08014f85 	.word	0x08014f85
 8012dc0:	08014f96 	.word	0x08014f96

08012dc4 <__ratio>:
 8012dc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dc8:	4688      	mov	r8, r1
 8012dca:	4669      	mov	r1, sp
 8012dcc:	4681      	mov	r9, r0
 8012dce:	f7ff ff55 	bl	8012c7c <__b2d>
 8012dd2:	a901      	add	r1, sp, #4
 8012dd4:	4640      	mov	r0, r8
 8012dd6:	ec55 4b10 	vmov	r4, r5, d0
 8012dda:	ee10 aa10 	vmov	sl, s0
 8012dde:	f7ff ff4d 	bl	8012c7c <__b2d>
 8012de2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012de6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8012dea:	1ad2      	subs	r2, r2, r3
 8012dec:	e9dd 3100 	ldrd	r3, r1, [sp]
 8012df0:	1a5b      	subs	r3, r3, r1
 8012df2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8012df6:	ec57 6b10 	vmov	r6, r7, d0
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	bfd6      	itet	le
 8012dfe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012e02:	462a      	movgt	r2, r5
 8012e04:	463a      	movle	r2, r7
 8012e06:	46ab      	mov	fp, r5
 8012e08:	bfd6      	itet	le
 8012e0a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8012e0e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8012e12:	ee00 3a90 	vmovle	s1, r3
 8012e16:	ec4b ab17 	vmov	d7, sl, fp
 8012e1a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8012e1e:	b003      	add	sp, #12
 8012e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012e24 <__copybits>:
 8012e24:	3901      	subs	r1, #1
 8012e26:	b570      	push	{r4, r5, r6, lr}
 8012e28:	1149      	asrs	r1, r1, #5
 8012e2a:	6914      	ldr	r4, [r2, #16]
 8012e2c:	3101      	adds	r1, #1
 8012e2e:	f102 0314 	add.w	r3, r2, #20
 8012e32:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012e36:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012e3a:	1f05      	subs	r5, r0, #4
 8012e3c:	42a3      	cmp	r3, r4
 8012e3e:	d30c      	bcc.n	8012e5a <__copybits+0x36>
 8012e40:	1aa3      	subs	r3, r4, r2
 8012e42:	3b11      	subs	r3, #17
 8012e44:	f023 0303 	bic.w	r3, r3, #3
 8012e48:	3211      	adds	r2, #17
 8012e4a:	42a2      	cmp	r2, r4
 8012e4c:	bf88      	it	hi
 8012e4e:	2300      	movhi	r3, #0
 8012e50:	4418      	add	r0, r3
 8012e52:	2300      	movs	r3, #0
 8012e54:	4288      	cmp	r0, r1
 8012e56:	d305      	bcc.n	8012e64 <__copybits+0x40>
 8012e58:	bd70      	pop	{r4, r5, r6, pc}
 8012e5a:	f853 6b04 	ldr.w	r6, [r3], #4
 8012e5e:	f845 6f04 	str.w	r6, [r5, #4]!
 8012e62:	e7eb      	b.n	8012e3c <__copybits+0x18>
 8012e64:	f840 3b04 	str.w	r3, [r0], #4
 8012e68:	e7f4      	b.n	8012e54 <__copybits+0x30>

08012e6a <__any_on>:
 8012e6a:	f100 0214 	add.w	r2, r0, #20
 8012e6e:	6900      	ldr	r0, [r0, #16]
 8012e70:	114b      	asrs	r3, r1, #5
 8012e72:	4298      	cmp	r0, r3
 8012e74:	b510      	push	{r4, lr}
 8012e76:	db11      	blt.n	8012e9c <__any_on+0x32>
 8012e78:	dd0a      	ble.n	8012e90 <__any_on+0x26>
 8012e7a:	f011 011f 	ands.w	r1, r1, #31
 8012e7e:	d007      	beq.n	8012e90 <__any_on+0x26>
 8012e80:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012e84:	fa24 f001 	lsr.w	r0, r4, r1
 8012e88:	fa00 f101 	lsl.w	r1, r0, r1
 8012e8c:	428c      	cmp	r4, r1
 8012e8e:	d10b      	bne.n	8012ea8 <__any_on+0x3e>
 8012e90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012e94:	4293      	cmp	r3, r2
 8012e96:	d803      	bhi.n	8012ea0 <__any_on+0x36>
 8012e98:	2000      	movs	r0, #0
 8012e9a:	bd10      	pop	{r4, pc}
 8012e9c:	4603      	mov	r3, r0
 8012e9e:	e7f7      	b.n	8012e90 <__any_on+0x26>
 8012ea0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012ea4:	2900      	cmp	r1, #0
 8012ea6:	d0f5      	beq.n	8012e94 <__any_on+0x2a>
 8012ea8:	2001      	movs	r0, #1
 8012eaa:	e7f6      	b.n	8012e9a <__any_on+0x30>

08012eac <sulp>:
 8012eac:	b570      	push	{r4, r5, r6, lr}
 8012eae:	4604      	mov	r4, r0
 8012eb0:	460d      	mov	r5, r1
 8012eb2:	4616      	mov	r6, r2
 8012eb4:	ec45 4b10 	vmov	d0, r4, r5
 8012eb8:	f7ff feba 	bl	8012c30 <__ulp>
 8012ebc:	b17e      	cbz	r6, 8012ede <sulp+0x32>
 8012ebe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012ec2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	dd09      	ble.n	8012ede <sulp+0x32>
 8012eca:	051b      	lsls	r3, r3, #20
 8012ecc:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8012ed0:	2000      	movs	r0, #0
 8012ed2:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8012ed6:	ec41 0b17 	vmov	d7, r0, r1
 8012eda:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012ede:	bd70      	pop	{r4, r5, r6, pc}

08012ee0 <_strtod_l>:
 8012ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ee4:	ed2d 8b0e 	vpush	{d8-d14}
 8012ee8:	b097      	sub	sp, #92	; 0x5c
 8012eea:	4604      	mov	r4, r0
 8012eec:	920d      	str	r2, [sp, #52]	; 0x34
 8012eee:	2200      	movs	r2, #0
 8012ef0:	9212      	str	r2, [sp, #72]	; 0x48
 8012ef2:	468a      	mov	sl, r1
 8012ef4:	f04f 0800 	mov.w	r8, #0
 8012ef8:	f04f 0900 	mov.w	r9, #0
 8012efc:	460a      	mov	r2, r1
 8012efe:	9211      	str	r2, [sp, #68]	; 0x44
 8012f00:	7811      	ldrb	r1, [r2, #0]
 8012f02:	292b      	cmp	r1, #43	; 0x2b
 8012f04:	d04c      	beq.n	8012fa0 <_strtod_l+0xc0>
 8012f06:	d839      	bhi.n	8012f7c <_strtod_l+0x9c>
 8012f08:	290d      	cmp	r1, #13
 8012f0a:	d833      	bhi.n	8012f74 <_strtod_l+0x94>
 8012f0c:	2908      	cmp	r1, #8
 8012f0e:	d833      	bhi.n	8012f78 <_strtod_l+0x98>
 8012f10:	2900      	cmp	r1, #0
 8012f12:	d03c      	beq.n	8012f8e <_strtod_l+0xae>
 8012f14:	2200      	movs	r2, #0
 8012f16:	9208      	str	r2, [sp, #32]
 8012f18:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8012f1a:	7832      	ldrb	r2, [r6, #0]
 8012f1c:	2a30      	cmp	r2, #48	; 0x30
 8012f1e:	f040 80b8 	bne.w	8013092 <_strtod_l+0x1b2>
 8012f22:	7872      	ldrb	r2, [r6, #1]
 8012f24:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8012f28:	2a58      	cmp	r2, #88	; 0x58
 8012f2a:	d170      	bne.n	801300e <_strtod_l+0x12e>
 8012f2c:	9302      	str	r3, [sp, #8]
 8012f2e:	9b08      	ldr	r3, [sp, #32]
 8012f30:	9301      	str	r3, [sp, #4]
 8012f32:	ab12      	add	r3, sp, #72	; 0x48
 8012f34:	9300      	str	r3, [sp, #0]
 8012f36:	4a91      	ldr	r2, [pc, #580]	; (801317c <_strtod_l+0x29c>)
 8012f38:	ab13      	add	r3, sp, #76	; 0x4c
 8012f3a:	a911      	add	r1, sp, #68	; 0x44
 8012f3c:	4620      	mov	r0, r4
 8012f3e:	f001 f8f3 	bl	8014128 <__gethex>
 8012f42:	f010 070f 	ands.w	r7, r0, #15
 8012f46:	4605      	mov	r5, r0
 8012f48:	d005      	beq.n	8012f56 <_strtod_l+0x76>
 8012f4a:	2f06      	cmp	r7, #6
 8012f4c:	d12a      	bne.n	8012fa4 <_strtod_l+0xc4>
 8012f4e:	3601      	adds	r6, #1
 8012f50:	2300      	movs	r3, #0
 8012f52:	9611      	str	r6, [sp, #68]	; 0x44
 8012f54:	9308      	str	r3, [sp, #32]
 8012f56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	f040 8555 	bne.w	8013a08 <_strtod_l+0xb28>
 8012f5e:	9b08      	ldr	r3, [sp, #32]
 8012f60:	ec49 8b10 	vmov	d0, r8, r9
 8012f64:	b1cb      	cbz	r3, 8012f9a <_strtod_l+0xba>
 8012f66:	eeb1 0b40 	vneg.f64	d0, d0
 8012f6a:	b017      	add	sp, #92	; 0x5c
 8012f6c:	ecbd 8b0e 	vpop	{d8-d14}
 8012f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f74:	2920      	cmp	r1, #32
 8012f76:	d1cd      	bne.n	8012f14 <_strtod_l+0x34>
 8012f78:	3201      	adds	r2, #1
 8012f7a:	e7c0      	b.n	8012efe <_strtod_l+0x1e>
 8012f7c:	292d      	cmp	r1, #45	; 0x2d
 8012f7e:	d1c9      	bne.n	8012f14 <_strtod_l+0x34>
 8012f80:	2101      	movs	r1, #1
 8012f82:	9108      	str	r1, [sp, #32]
 8012f84:	1c51      	adds	r1, r2, #1
 8012f86:	9111      	str	r1, [sp, #68]	; 0x44
 8012f88:	7852      	ldrb	r2, [r2, #1]
 8012f8a:	2a00      	cmp	r2, #0
 8012f8c:	d1c4      	bne.n	8012f18 <_strtod_l+0x38>
 8012f8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012f90:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	f040 8535 	bne.w	8013a04 <_strtod_l+0xb24>
 8012f9a:	ec49 8b10 	vmov	d0, r8, r9
 8012f9e:	e7e4      	b.n	8012f6a <_strtod_l+0x8a>
 8012fa0:	2100      	movs	r1, #0
 8012fa2:	e7ee      	b.n	8012f82 <_strtod_l+0xa2>
 8012fa4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012fa6:	b13a      	cbz	r2, 8012fb8 <_strtod_l+0xd8>
 8012fa8:	2135      	movs	r1, #53	; 0x35
 8012faa:	a814      	add	r0, sp, #80	; 0x50
 8012fac:	f7ff ff3a 	bl	8012e24 <__copybits>
 8012fb0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012fb2:	4620      	mov	r0, r4
 8012fb4:	f7ff fb10 	bl	80125d8 <_Bfree>
 8012fb8:	1e7b      	subs	r3, r7, #1
 8012fba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012fbc:	2b04      	cmp	r3, #4
 8012fbe:	d806      	bhi.n	8012fce <_strtod_l+0xee>
 8012fc0:	e8df f003 	tbb	[pc, r3]
 8012fc4:	201d0314 	.word	0x201d0314
 8012fc8:	14          	.byte	0x14
 8012fc9:	00          	.byte	0x00
 8012fca:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8012fce:	05eb      	lsls	r3, r5, #23
 8012fd0:	bf48      	it	mi
 8012fd2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8012fd6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012fda:	0d1b      	lsrs	r3, r3, #20
 8012fdc:	051b      	lsls	r3, r3, #20
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d1b9      	bne.n	8012f56 <_strtod_l+0x76>
 8012fe2:	f7fe fb85 	bl	80116f0 <__errno>
 8012fe6:	2322      	movs	r3, #34	; 0x22
 8012fe8:	6003      	str	r3, [r0, #0]
 8012fea:	e7b4      	b.n	8012f56 <_strtod_l+0x76>
 8012fec:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8012ff0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012ff4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012ff8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8012ffc:	e7e7      	b.n	8012fce <_strtod_l+0xee>
 8012ffe:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8013184 <_strtod_l+0x2a4>
 8013002:	e7e4      	b.n	8012fce <_strtod_l+0xee>
 8013004:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8013008:	f04f 38ff 	mov.w	r8, #4294967295
 801300c:	e7df      	b.n	8012fce <_strtod_l+0xee>
 801300e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013010:	1c5a      	adds	r2, r3, #1
 8013012:	9211      	str	r2, [sp, #68]	; 0x44
 8013014:	785b      	ldrb	r3, [r3, #1]
 8013016:	2b30      	cmp	r3, #48	; 0x30
 8013018:	d0f9      	beq.n	801300e <_strtod_l+0x12e>
 801301a:	2b00      	cmp	r3, #0
 801301c:	d09b      	beq.n	8012f56 <_strtod_l+0x76>
 801301e:	2301      	movs	r3, #1
 8013020:	9306      	str	r3, [sp, #24]
 8013022:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013024:	9309      	str	r3, [sp, #36]	; 0x24
 8013026:	2300      	movs	r3, #0
 8013028:	9305      	str	r3, [sp, #20]
 801302a:	9307      	str	r3, [sp, #28]
 801302c:	461e      	mov	r6, r3
 801302e:	220a      	movs	r2, #10
 8013030:	9811      	ldr	r0, [sp, #68]	; 0x44
 8013032:	7805      	ldrb	r5, [r0, #0]
 8013034:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8013038:	b2d9      	uxtb	r1, r3
 801303a:	2909      	cmp	r1, #9
 801303c:	d92b      	bls.n	8013096 <_strtod_l+0x1b6>
 801303e:	4950      	ldr	r1, [pc, #320]	; (8013180 <_strtod_l+0x2a0>)
 8013040:	2201      	movs	r2, #1
 8013042:	f000 ffa9 	bl	8013f98 <strncmp>
 8013046:	2800      	cmp	r0, #0
 8013048:	d035      	beq.n	80130b6 <_strtod_l+0x1d6>
 801304a:	2000      	movs	r0, #0
 801304c:	462a      	mov	r2, r5
 801304e:	4633      	mov	r3, r6
 8013050:	4683      	mov	fp, r0
 8013052:	4601      	mov	r1, r0
 8013054:	2a65      	cmp	r2, #101	; 0x65
 8013056:	d001      	beq.n	801305c <_strtod_l+0x17c>
 8013058:	2a45      	cmp	r2, #69	; 0x45
 801305a:	d118      	bne.n	801308e <_strtod_l+0x1ae>
 801305c:	b91b      	cbnz	r3, 8013066 <_strtod_l+0x186>
 801305e:	9b06      	ldr	r3, [sp, #24]
 8013060:	4303      	orrs	r3, r0
 8013062:	d094      	beq.n	8012f8e <_strtod_l+0xae>
 8013064:	2300      	movs	r3, #0
 8013066:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 801306a:	f10a 0201 	add.w	r2, sl, #1
 801306e:	9211      	str	r2, [sp, #68]	; 0x44
 8013070:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8013074:	2a2b      	cmp	r2, #43	; 0x2b
 8013076:	d075      	beq.n	8013164 <_strtod_l+0x284>
 8013078:	2a2d      	cmp	r2, #45	; 0x2d
 801307a:	d07b      	beq.n	8013174 <_strtod_l+0x294>
 801307c:	f04f 0e00 	mov.w	lr, #0
 8013080:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8013084:	2d09      	cmp	r5, #9
 8013086:	f240 8083 	bls.w	8013190 <_strtod_l+0x2b0>
 801308a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801308e:	2500      	movs	r5, #0
 8013090:	e09e      	b.n	80131d0 <_strtod_l+0x2f0>
 8013092:	2300      	movs	r3, #0
 8013094:	e7c4      	b.n	8013020 <_strtod_l+0x140>
 8013096:	2e08      	cmp	r6, #8
 8013098:	bfd5      	itete	le
 801309a:	9907      	ldrle	r1, [sp, #28]
 801309c:	9905      	ldrgt	r1, [sp, #20]
 801309e:	fb02 3301 	mlale	r3, r2, r1, r3
 80130a2:	fb02 3301 	mlagt	r3, r2, r1, r3
 80130a6:	f100 0001 	add.w	r0, r0, #1
 80130aa:	bfd4      	ite	le
 80130ac:	9307      	strle	r3, [sp, #28]
 80130ae:	9305      	strgt	r3, [sp, #20]
 80130b0:	3601      	adds	r6, #1
 80130b2:	9011      	str	r0, [sp, #68]	; 0x44
 80130b4:	e7bc      	b.n	8013030 <_strtod_l+0x150>
 80130b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80130b8:	1c5a      	adds	r2, r3, #1
 80130ba:	9211      	str	r2, [sp, #68]	; 0x44
 80130bc:	785a      	ldrb	r2, [r3, #1]
 80130be:	b3ae      	cbz	r6, 801312c <_strtod_l+0x24c>
 80130c0:	4683      	mov	fp, r0
 80130c2:	4633      	mov	r3, r6
 80130c4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80130c8:	2909      	cmp	r1, #9
 80130ca:	d912      	bls.n	80130f2 <_strtod_l+0x212>
 80130cc:	2101      	movs	r1, #1
 80130ce:	e7c1      	b.n	8013054 <_strtod_l+0x174>
 80130d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80130d2:	1c5a      	adds	r2, r3, #1
 80130d4:	9211      	str	r2, [sp, #68]	; 0x44
 80130d6:	785a      	ldrb	r2, [r3, #1]
 80130d8:	3001      	adds	r0, #1
 80130da:	2a30      	cmp	r2, #48	; 0x30
 80130dc:	d0f8      	beq.n	80130d0 <_strtod_l+0x1f0>
 80130de:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80130e2:	2b08      	cmp	r3, #8
 80130e4:	f200 8495 	bhi.w	8013a12 <_strtod_l+0xb32>
 80130e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80130ea:	9309      	str	r3, [sp, #36]	; 0x24
 80130ec:	4683      	mov	fp, r0
 80130ee:	2000      	movs	r0, #0
 80130f0:	4603      	mov	r3, r0
 80130f2:	3a30      	subs	r2, #48	; 0x30
 80130f4:	f100 0101 	add.w	r1, r0, #1
 80130f8:	d012      	beq.n	8013120 <_strtod_l+0x240>
 80130fa:	448b      	add	fp, r1
 80130fc:	eb00 0c03 	add.w	ip, r0, r3
 8013100:	4619      	mov	r1, r3
 8013102:	250a      	movs	r5, #10
 8013104:	4561      	cmp	r1, ip
 8013106:	d113      	bne.n	8013130 <_strtod_l+0x250>
 8013108:	1819      	adds	r1, r3, r0
 801310a:	2908      	cmp	r1, #8
 801310c:	f103 0301 	add.w	r3, r3, #1
 8013110:	4403      	add	r3, r0
 8013112:	dc1b      	bgt.n	801314c <_strtod_l+0x26c>
 8013114:	9807      	ldr	r0, [sp, #28]
 8013116:	210a      	movs	r1, #10
 8013118:	fb01 2200 	mla	r2, r1, r0, r2
 801311c:	9207      	str	r2, [sp, #28]
 801311e:	2100      	movs	r1, #0
 8013120:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013122:	1c50      	adds	r0, r2, #1
 8013124:	9011      	str	r0, [sp, #68]	; 0x44
 8013126:	7852      	ldrb	r2, [r2, #1]
 8013128:	4608      	mov	r0, r1
 801312a:	e7cb      	b.n	80130c4 <_strtod_l+0x1e4>
 801312c:	4630      	mov	r0, r6
 801312e:	e7d4      	b.n	80130da <_strtod_l+0x1fa>
 8013130:	2908      	cmp	r1, #8
 8013132:	f101 0101 	add.w	r1, r1, #1
 8013136:	dc03      	bgt.n	8013140 <_strtod_l+0x260>
 8013138:	9f07      	ldr	r7, [sp, #28]
 801313a:	436f      	muls	r7, r5
 801313c:	9707      	str	r7, [sp, #28]
 801313e:	e7e1      	b.n	8013104 <_strtod_l+0x224>
 8013140:	2910      	cmp	r1, #16
 8013142:	bfde      	ittt	le
 8013144:	9f05      	ldrle	r7, [sp, #20]
 8013146:	436f      	mulle	r7, r5
 8013148:	9705      	strle	r7, [sp, #20]
 801314a:	e7db      	b.n	8013104 <_strtod_l+0x224>
 801314c:	2b10      	cmp	r3, #16
 801314e:	bfdf      	itttt	le
 8013150:	9805      	ldrle	r0, [sp, #20]
 8013152:	210a      	movle	r1, #10
 8013154:	fb01 2200 	mlale	r2, r1, r0, r2
 8013158:	9205      	strle	r2, [sp, #20]
 801315a:	e7e0      	b.n	801311e <_strtod_l+0x23e>
 801315c:	f04f 0b00 	mov.w	fp, #0
 8013160:	2101      	movs	r1, #1
 8013162:	e77c      	b.n	801305e <_strtod_l+0x17e>
 8013164:	f04f 0e00 	mov.w	lr, #0
 8013168:	f10a 0202 	add.w	r2, sl, #2
 801316c:	9211      	str	r2, [sp, #68]	; 0x44
 801316e:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8013172:	e785      	b.n	8013080 <_strtod_l+0x1a0>
 8013174:	f04f 0e01 	mov.w	lr, #1
 8013178:	e7f6      	b.n	8013168 <_strtod_l+0x288>
 801317a:	bf00      	nop
 801317c:	080150f0 	.word	0x080150f0
 8013180:	080150ec 	.word	0x080150ec
 8013184:	7ff00000 	.word	0x7ff00000
 8013188:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801318a:	1c55      	adds	r5, r2, #1
 801318c:	9511      	str	r5, [sp, #68]	; 0x44
 801318e:	7852      	ldrb	r2, [r2, #1]
 8013190:	2a30      	cmp	r2, #48	; 0x30
 8013192:	d0f9      	beq.n	8013188 <_strtod_l+0x2a8>
 8013194:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8013198:	2d08      	cmp	r5, #8
 801319a:	f63f af78 	bhi.w	801308e <_strtod_l+0x1ae>
 801319e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80131a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80131a4:	920a      	str	r2, [sp, #40]	; 0x28
 80131a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80131a8:	1c55      	adds	r5, r2, #1
 80131aa:	9511      	str	r5, [sp, #68]	; 0x44
 80131ac:	7852      	ldrb	r2, [r2, #1]
 80131ae:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80131b2:	2f09      	cmp	r7, #9
 80131b4:	d937      	bls.n	8013226 <_strtod_l+0x346>
 80131b6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80131b8:	1bed      	subs	r5, r5, r7
 80131ba:	2d08      	cmp	r5, #8
 80131bc:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80131c0:	dc02      	bgt.n	80131c8 <_strtod_l+0x2e8>
 80131c2:	4565      	cmp	r5, ip
 80131c4:	bfa8      	it	ge
 80131c6:	4665      	movge	r5, ip
 80131c8:	f1be 0f00 	cmp.w	lr, #0
 80131cc:	d000      	beq.n	80131d0 <_strtod_l+0x2f0>
 80131ce:	426d      	negs	r5, r5
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d14d      	bne.n	8013270 <_strtod_l+0x390>
 80131d4:	9b06      	ldr	r3, [sp, #24]
 80131d6:	4303      	orrs	r3, r0
 80131d8:	f47f aebd 	bne.w	8012f56 <_strtod_l+0x76>
 80131dc:	2900      	cmp	r1, #0
 80131de:	f47f aed6 	bne.w	8012f8e <_strtod_l+0xae>
 80131e2:	2a69      	cmp	r2, #105	; 0x69
 80131e4:	d027      	beq.n	8013236 <_strtod_l+0x356>
 80131e6:	dc24      	bgt.n	8013232 <_strtod_l+0x352>
 80131e8:	2a49      	cmp	r2, #73	; 0x49
 80131ea:	d024      	beq.n	8013236 <_strtod_l+0x356>
 80131ec:	2a4e      	cmp	r2, #78	; 0x4e
 80131ee:	f47f aece 	bne.w	8012f8e <_strtod_l+0xae>
 80131f2:	4995      	ldr	r1, [pc, #596]	; (8013448 <_strtod_l+0x568>)
 80131f4:	a811      	add	r0, sp, #68	; 0x44
 80131f6:	f001 f9d7 	bl	80145a8 <__match>
 80131fa:	2800      	cmp	r0, #0
 80131fc:	f43f aec7 	beq.w	8012f8e <_strtod_l+0xae>
 8013200:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013202:	781b      	ldrb	r3, [r3, #0]
 8013204:	2b28      	cmp	r3, #40	; 0x28
 8013206:	d12d      	bne.n	8013264 <_strtod_l+0x384>
 8013208:	4990      	ldr	r1, [pc, #576]	; (801344c <_strtod_l+0x56c>)
 801320a:	aa14      	add	r2, sp, #80	; 0x50
 801320c:	a811      	add	r0, sp, #68	; 0x44
 801320e:	f001 f9df 	bl	80145d0 <__hexnan>
 8013212:	2805      	cmp	r0, #5
 8013214:	d126      	bne.n	8013264 <_strtod_l+0x384>
 8013216:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013218:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801321c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8013220:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8013224:	e697      	b.n	8012f56 <_strtod_l+0x76>
 8013226:	250a      	movs	r5, #10
 8013228:	fb05 2c0c 	mla	ip, r5, ip, r2
 801322c:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8013230:	e7b9      	b.n	80131a6 <_strtod_l+0x2c6>
 8013232:	2a6e      	cmp	r2, #110	; 0x6e
 8013234:	e7db      	b.n	80131ee <_strtod_l+0x30e>
 8013236:	4986      	ldr	r1, [pc, #536]	; (8013450 <_strtod_l+0x570>)
 8013238:	a811      	add	r0, sp, #68	; 0x44
 801323a:	f001 f9b5 	bl	80145a8 <__match>
 801323e:	2800      	cmp	r0, #0
 8013240:	f43f aea5 	beq.w	8012f8e <_strtod_l+0xae>
 8013244:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013246:	4983      	ldr	r1, [pc, #524]	; (8013454 <_strtod_l+0x574>)
 8013248:	3b01      	subs	r3, #1
 801324a:	a811      	add	r0, sp, #68	; 0x44
 801324c:	9311      	str	r3, [sp, #68]	; 0x44
 801324e:	f001 f9ab 	bl	80145a8 <__match>
 8013252:	b910      	cbnz	r0, 801325a <_strtod_l+0x37a>
 8013254:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013256:	3301      	adds	r3, #1
 8013258:	9311      	str	r3, [sp, #68]	; 0x44
 801325a:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8013468 <_strtod_l+0x588>
 801325e:	f04f 0800 	mov.w	r8, #0
 8013262:	e678      	b.n	8012f56 <_strtod_l+0x76>
 8013264:	487c      	ldr	r0, [pc, #496]	; (8013458 <_strtod_l+0x578>)
 8013266:	f000 febb 	bl	8013fe0 <nan>
 801326a:	ec59 8b10 	vmov	r8, r9, d0
 801326e:	e672      	b.n	8012f56 <_strtod_l+0x76>
 8013270:	eddd 7a07 	vldr	s15, [sp, #28]
 8013274:	eba5 020b 	sub.w	r2, r5, fp
 8013278:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801327c:	2e00      	cmp	r6, #0
 801327e:	bf08      	it	eq
 8013280:	461e      	moveq	r6, r3
 8013282:	2b10      	cmp	r3, #16
 8013284:	9206      	str	r2, [sp, #24]
 8013286:	461a      	mov	r2, r3
 8013288:	bfa8      	it	ge
 801328a:	2210      	movge	r2, #16
 801328c:	2b09      	cmp	r3, #9
 801328e:	ec59 8b17 	vmov	r8, r9, d7
 8013292:	dd0c      	ble.n	80132ae <_strtod_l+0x3ce>
 8013294:	4971      	ldr	r1, [pc, #452]	; (801345c <_strtod_l+0x57c>)
 8013296:	eddd 6a05 	vldr	s13, [sp, #20]
 801329a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801329e:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80132a2:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80132a6:	eea7 6b05 	vfma.f64	d6, d7, d5
 80132aa:	ec59 8b16 	vmov	r8, r9, d6
 80132ae:	2b0f      	cmp	r3, #15
 80132b0:	dc37      	bgt.n	8013322 <_strtod_l+0x442>
 80132b2:	9906      	ldr	r1, [sp, #24]
 80132b4:	2900      	cmp	r1, #0
 80132b6:	f43f ae4e 	beq.w	8012f56 <_strtod_l+0x76>
 80132ba:	dd23      	ble.n	8013304 <_strtod_l+0x424>
 80132bc:	2916      	cmp	r1, #22
 80132be:	dc0b      	bgt.n	80132d8 <_strtod_l+0x3f8>
 80132c0:	4b66      	ldr	r3, [pc, #408]	; (801345c <_strtod_l+0x57c>)
 80132c2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80132c6:	ed93 7b00 	vldr	d7, [r3]
 80132ca:	ec49 8b16 	vmov	d6, r8, r9
 80132ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80132d2:	ec59 8b17 	vmov	r8, r9, d7
 80132d6:	e63e      	b.n	8012f56 <_strtod_l+0x76>
 80132d8:	9806      	ldr	r0, [sp, #24]
 80132da:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80132de:	4281      	cmp	r1, r0
 80132e0:	db1f      	blt.n	8013322 <_strtod_l+0x442>
 80132e2:	4a5e      	ldr	r2, [pc, #376]	; (801345c <_strtod_l+0x57c>)
 80132e4:	f1c3 030f 	rsb	r3, r3, #15
 80132e8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80132ec:	ed91 7b00 	vldr	d7, [r1]
 80132f0:	ec49 8b16 	vmov	d6, r8, r9
 80132f4:	1ac3      	subs	r3, r0, r3
 80132f6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80132fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80132fe:	ed92 6b00 	vldr	d6, [r2]
 8013302:	e7e4      	b.n	80132ce <_strtod_l+0x3ee>
 8013304:	9906      	ldr	r1, [sp, #24]
 8013306:	3116      	adds	r1, #22
 8013308:	db0b      	blt.n	8013322 <_strtod_l+0x442>
 801330a:	4b54      	ldr	r3, [pc, #336]	; (801345c <_strtod_l+0x57c>)
 801330c:	ebab 0505 	sub.w	r5, fp, r5
 8013310:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013314:	ed95 7b00 	vldr	d7, [r5]
 8013318:	ec49 8b16 	vmov	d6, r8, r9
 801331c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013320:	e7d7      	b.n	80132d2 <_strtod_l+0x3f2>
 8013322:	9906      	ldr	r1, [sp, #24]
 8013324:	1a9a      	subs	r2, r3, r2
 8013326:	440a      	add	r2, r1
 8013328:	2a00      	cmp	r2, #0
 801332a:	dd6e      	ble.n	801340a <_strtod_l+0x52a>
 801332c:	f012 000f 	ands.w	r0, r2, #15
 8013330:	d00a      	beq.n	8013348 <_strtod_l+0x468>
 8013332:	494a      	ldr	r1, [pc, #296]	; (801345c <_strtod_l+0x57c>)
 8013334:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013338:	ed91 7b00 	vldr	d7, [r1]
 801333c:	ec49 8b16 	vmov	d6, r8, r9
 8013340:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013344:	ec59 8b17 	vmov	r8, r9, d7
 8013348:	f032 020f 	bics.w	r2, r2, #15
 801334c:	d04e      	beq.n	80133ec <_strtod_l+0x50c>
 801334e:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8013352:	dd22      	ble.n	801339a <_strtod_l+0x4ba>
 8013354:	2500      	movs	r5, #0
 8013356:	462e      	mov	r6, r5
 8013358:	9507      	str	r5, [sp, #28]
 801335a:	462f      	mov	r7, r5
 801335c:	2322      	movs	r3, #34	; 0x22
 801335e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8013468 <_strtod_l+0x588>
 8013362:	6023      	str	r3, [r4, #0]
 8013364:	f04f 0800 	mov.w	r8, #0
 8013368:	9b07      	ldr	r3, [sp, #28]
 801336a:	2b00      	cmp	r3, #0
 801336c:	f43f adf3 	beq.w	8012f56 <_strtod_l+0x76>
 8013370:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013372:	4620      	mov	r0, r4
 8013374:	f7ff f930 	bl	80125d8 <_Bfree>
 8013378:	4639      	mov	r1, r7
 801337a:	4620      	mov	r0, r4
 801337c:	f7ff f92c 	bl	80125d8 <_Bfree>
 8013380:	4631      	mov	r1, r6
 8013382:	4620      	mov	r0, r4
 8013384:	f7ff f928 	bl	80125d8 <_Bfree>
 8013388:	9907      	ldr	r1, [sp, #28]
 801338a:	4620      	mov	r0, r4
 801338c:	f7ff f924 	bl	80125d8 <_Bfree>
 8013390:	4629      	mov	r1, r5
 8013392:	4620      	mov	r0, r4
 8013394:	f7ff f920 	bl	80125d8 <_Bfree>
 8013398:	e5dd      	b.n	8012f56 <_strtod_l+0x76>
 801339a:	2000      	movs	r0, #0
 801339c:	ec49 8b17 	vmov	d7, r8, r9
 80133a0:	4f2f      	ldr	r7, [pc, #188]	; (8013460 <_strtod_l+0x580>)
 80133a2:	1112      	asrs	r2, r2, #4
 80133a4:	4601      	mov	r1, r0
 80133a6:	2a01      	cmp	r2, #1
 80133a8:	dc23      	bgt.n	80133f2 <_strtod_l+0x512>
 80133aa:	b108      	cbz	r0, 80133b0 <_strtod_l+0x4d0>
 80133ac:	ec59 8b17 	vmov	r8, r9, d7
 80133b0:	4a2b      	ldr	r2, [pc, #172]	; (8013460 <_strtod_l+0x580>)
 80133b2:	482c      	ldr	r0, [pc, #176]	; (8013464 <_strtod_l+0x584>)
 80133b4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80133b8:	ed92 7b00 	vldr	d7, [r2]
 80133bc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80133c0:	ec49 8b16 	vmov	d6, r8, r9
 80133c4:	4a28      	ldr	r2, [pc, #160]	; (8013468 <_strtod_l+0x588>)
 80133c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80133ca:	ee17 1a90 	vmov	r1, s15
 80133ce:	400a      	ands	r2, r1
 80133d0:	4282      	cmp	r2, r0
 80133d2:	ec59 8b17 	vmov	r8, r9, d7
 80133d6:	d8bd      	bhi.n	8013354 <_strtod_l+0x474>
 80133d8:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80133dc:	4282      	cmp	r2, r0
 80133de:	bf86      	itte	hi
 80133e0:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 801346c <_strtod_l+0x58c>
 80133e4:	f04f 38ff 	movhi.w	r8, #4294967295
 80133e8:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 80133ec:	2200      	movs	r2, #0
 80133ee:	9205      	str	r2, [sp, #20]
 80133f0:	e076      	b.n	80134e0 <_strtod_l+0x600>
 80133f2:	f012 0f01 	tst.w	r2, #1
 80133f6:	d004      	beq.n	8013402 <_strtod_l+0x522>
 80133f8:	ed97 6b00 	vldr	d6, [r7]
 80133fc:	2001      	movs	r0, #1
 80133fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013402:	3101      	adds	r1, #1
 8013404:	1052      	asrs	r2, r2, #1
 8013406:	3708      	adds	r7, #8
 8013408:	e7cd      	b.n	80133a6 <_strtod_l+0x4c6>
 801340a:	d0ef      	beq.n	80133ec <_strtod_l+0x50c>
 801340c:	4252      	negs	r2, r2
 801340e:	f012 000f 	ands.w	r0, r2, #15
 8013412:	d00a      	beq.n	801342a <_strtod_l+0x54a>
 8013414:	4911      	ldr	r1, [pc, #68]	; (801345c <_strtod_l+0x57c>)
 8013416:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801341a:	ed91 7b00 	vldr	d7, [r1]
 801341e:	ec49 8b16 	vmov	d6, r8, r9
 8013422:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013426:	ec59 8b17 	vmov	r8, r9, d7
 801342a:	1112      	asrs	r2, r2, #4
 801342c:	d0de      	beq.n	80133ec <_strtod_l+0x50c>
 801342e:	2a1f      	cmp	r2, #31
 8013430:	dd1e      	ble.n	8013470 <_strtod_l+0x590>
 8013432:	2500      	movs	r5, #0
 8013434:	462e      	mov	r6, r5
 8013436:	9507      	str	r5, [sp, #28]
 8013438:	462f      	mov	r7, r5
 801343a:	2322      	movs	r3, #34	; 0x22
 801343c:	f04f 0800 	mov.w	r8, #0
 8013440:	f04f 0900 	mov.w	r9, #0
 8013444:	6023      	str	r3, [r4, #0]
 8013446:	e78f      	b.n	8013368 <_strtod_l+0x488>
 8013448:	08014edd 	.word	0x08014edd
 801344c:	08015104 	.word	0x08015104
 8013450:	08014ed5 	.word	0x08014ed5
 8013454:	08014f0c 	.word	0x08014f0c
 8013458:	08015295 	.word	0x08015295
 801345c:	08015018 	.word	0x08015018
 8013460:	08014ff0 	.word	0x08014ff0
 8013464:	7ca00000 	.word	0x7ca00000
 8013468:	7ff00000 	.word	0x7ff00000
 801346c:	7fefffff 	.word	0x7fefffff
 8013470:	f012 0110 	ands.w	r1, r2, #16
 8013474:	bf18      	it	ne
 8013476:	216a      	movne	r1, #106	; 0x6a
 8013478:	9105      	str	r1, [sp, #20]
 801347a:	ec49 8b17 	vmov	d7, r8, r9
 801347e:	49be      	ldr	r1, [pc, #760]	; (8013778 <_strtod_l+0x898>)
 8013480:	2000      	movs	r0, #0
 8013482:	07d7      	lsls	r7, r2, #31
 8013484:	d504      	bpl.n	8013490 <_strtod_l+0x5b0>
 8013486:	ed91 6b00 	vldr	d6, [r1]
 801348a:	2001      	movs	r0, #1
 801348c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013490:	1052      	asrs	r2, r2, #1
 8013492:	f101 0108 	add.w	r1, r1, #8
 8013496:	d1f4      	bne.n	8013482 <_strtod_l+0x5a2>
 8013498:	b108      	cbz	r0, 801349e <_strtod_l+0x5be>
 801349a:	ec59 8b17 	vmov	r8, r9, d7
 801349e:	9a05      	ldr	r2, [sp, #20]
 80134a0:	b1ba      	cbz	r2, 80134d2 <_strtod_l+0x5f2>
 80134a2:	f3c9 510a 	ubfx	r1, r9, #20, #11
 80134a6:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 80134aa:	2a00      	cmp	r2, #0
 80134ac:	4648      	mov	r0, r9
 80134ae:	dd10      	ble.n	80134d2 <_strtod_l+0x5f2>
 80134b0:	2a1f      	cmp	r2, #31
 80134b2:	f340 812c 	ble.w	801370e <_strtod_l+0x82e>
 80134b6:	2a34      	cmp	r2, #52	; 0x34
 80134b8:	bfde      	ittt	le
 80134ba:	f04f 32ff 	movle.w	r2, #4294967295
 80134be:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 80134c2:	408a      	lslle	r2, r1
 80134c4:	f04f 0800 	mov.w	r8, #0
 80134c8:	bfcc      	ite	gt
 80134ca:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80134ce:	ea02 0900 	andle.w	r9, r2, r0
 80134d2:	ec49 8b17 	vmov	d7, r8, r9
 80134d6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80134da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134de:	d0a8      	beq.n	8013432 <_strtod_l+0x552>
 80134e0:	9a07      	ldr	r2, [sp, #28]
 80134e2:	9200      	str	r2, [sp, #0]
 80134e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80134e6:	4632      	mov	r2, r6
 80134e8:	4620      	mov	r0, r4
 80134ea:	f7ff f8dd 	bl	80126a8 <__s2b>
 80134ee:	9007      	str	r0, [sp, #28]
 80134f0:	2800      	cmp	r0, #0
 80134f2:	f43f af2f 	beq.w	8013354 <_strtod_l+0x474>
 80134f6:	9a06      	ldr	r2, [sp, #24]
 80134f8:	2a00      	cmp	r2, #0
 80134fa:	ebab 0305 	sub.w	r3, fp, r5
 80134fe:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8013758 <_strtod_l+0x878>
 8013502:	bfa8      	it	ge
 8013504:	2300      	movge	r3, #0
 8013506:	ed9f ab96 	vldr	d10, [pc, #600]	; 8013760 <_strtod_l+0x880>
 801350a:	ed9f bb97 	vldr	d11, [pc, #604]	; 8013768 <_strtod_l+0x888>
 801350e:	9309      	str	r3, [sp, #36]	; 0x24
 8013510:	2500      	movs	r5, #0
 8013512:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013516:	930c      	str	r3, [sp, #48]	; 0x30
 8013518:	462e      	mov	r6, r5
 801351a:	9b07      	ldr	r3, [sp, #28]
 801351c:	4620      	mov	r0, r4
 801351e:	6859      	ldr	r1, [r3, #4]
 8013520:	f7ff f81a 	bl	8012558 <_Balloc>
 8013524:	4607      	mov	r7, r0
 8013526:	2800      	cmp	r0, #0
 8013528:	f43f af18 	beq.w	801335c <_strtod_l+0x47c>
 801352c:	9b07      	ldr	r3, [sp, #28]
 801352e:	691a      	ldr	r2, [r3, #16]
 8013530:	3202      	adds	r2, #2
 8013532:	f103 010c 	add.w	r1, r3, #12
 8013536:	0092      	lsls	r2, r2, #2
 8013538:	300c      	adds	r0, #12
 801353a:	f7fe f905 	bl	8011748 <memcpy>
 801353e:	ec49 8b10 	vmov	d0, r8, r9
 8013542:	aa14      	add	r2, sp, #80	; 0x50
 8013544:	a913      	add	r1, sp, #76	; 0x4c
 8013546:	4620      	mov	r0, r4
 8013548:	f7ff fbe2 	bl	8012d10 <__d2b>
 801354c:	ec49 8b18 	vmov	d8, r8, r9
 8013550:	9012      	str	r0, [sp, #72]	; 0x48
 8013552:	2800      	cmp	r0, #0
 8013554:	f43f af02 	beq.w	801335c <_strtod_l+0x47c>
 8013558:	2101      	movs	r1, #1
 801355a:	4620      	mov	r0, r4
 801355c:	f7ff f93c 	bl	80127d8 <__i2b>
 8013560:	4606      	mov	r6, r0
 8013562:	2800      	cmp	r0, #0
 8013564:	f43f aefa 	beq.w	801335c <_strtod_l+0x47c>
 8013568:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801356a:	9914      	ldr	r1, [sp, #80]	; 0x50
 801356c:	2b00      	cmp	r3, #0
 801356e:	bfab      	itete	ge
 8013570:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8013572:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8013574:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8013578:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 801357c:	bfac      	ite	ge
 801357e:	eb03 0b02 	addge.w	fp, r3, r2
 8013582:	eba2 0a03 	sublt.w	sl, r2, r3
 8013586:	9a05      	ldr	r2, [sp, #20]
 8013588:	1a9b      	subs	r3, r3, r2
 801358a:	440b      	add	r3, r1
 801358c:	4a7b      	ldr	r2, [pc, #492]	; (801377c <_strtod_l+0x89c>)
 801358e:	3b01      	subs	r3, #1
 8013590:	4293      	cmp	r3, r2
 8013592:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8013596:	f280 80cd 	bge.w	8013734 <_strtod_l+0x854>
 801359a:	1ad2      	subs	r2, r2, r3
 801359c:	2a1f      	cmp	r2, #31
 801359e:	eba1 0102 	sub.w	r1, r1, r2
 80135a2:	f04f 0001 	mov.w	r0, #1
 80135a6:	f300 80b9 	bgt.w	801371c <_strtod_l+0x83c>
 80135aa:	fa00 f302 	lsl.w	r3, r0, r2
 80135ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80135b0:	2300      	movs	r3, #0
 80135b2:	930a      	str	r3, [sp, #40]	; 0x28
 80135b4:	eb0b 0301 	add.w	r3, fp, r1
 80135b8:	9a05      	ldr	r2, [sp, #20]
 80135ba:	459b      	cmp	fp, r3
 80135bc:	448a      	add	sl, r1
 80135be:	4492      	add	sl, r2
 80135c0:	465a      	mov	r2, fp
 80135c2:	bfa8      	it	ge
 80135c4:	461a      	movge	r2, r3
 80135c6:	4552      	cmp	r2, sl
 80135c8:	bfa8      	it	ge
 80135ca:	4652      	movge	r2, sl
 80135cc:	2a00      	cmp	r2, #0
 80135ce:	bfc2      	ittt	gt
 80135d0:	1a9b      	subgt	r3, r3, r2
 80135d2:	ebaa 0a02 	subgt.w	sl, sl, r2
 80135d6:	ebab 0b02 	subgt.w	fp, fp, r2
 80135da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80135dc:	2a00      	cmp	r2, #0
 80135de:	dd18      	ble.n	8013612 <_strtod_l+0x732>
 80135e0:	4631      	mov	r1, r6
 80135e2:	4620      	mov	r0, r4
 80135e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80135e6:	f7ff f9b7 	bl	8012958 <__pow5mult>
 80135ea:	4606      	mov	r6, r0
 80135ec:	2800      	cmp	r0, #0
 80135ee:	f43f aeb5 	beq.w	801335c <_strtod_l+0x47c>
 80135f2:	4601      	mov	r1, r0
 80135f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80135f6:	4620      	mov	r0, r4
 80135f8:	f7ff f904 	bl	8012804 <__multiply>
 80135fc:	900e      	str	r0, [sp, #56]	; 0x38
 80135fe:	2800      	cmp	r0, #0
 8013600:	f43f aeac 	beq.w	801335c <_strtod_l+0x47c>
 8013604:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013606:	4620      	mov	r0, r4
 8013608:	f7fe ffe6 	bl	80125d8 <_Bfree>
 801360c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801360e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013610:	9212      	str	r2, [sp, #72]	; 0x48
 8013612:	2b00      	cmp	r3, #0
 8013614:	f300 8093 	bgt.w	801373e <_strtod_l+0x85e>
 8013618:	9b06      	ldr	r3, [sp, #24]
 801361a:	2b00      	cmp	r3, #0
 801361c:	dd08      	ble.n	8013630 <_strtod_l+0x750>
 801361e:	4639      	mov	r1, r7
 8013620:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013622:	4620      	mov	r0, r4
 8013624:	f7ff f998 	bl	8012958 <__pow5mult>
 8013628:	4607      	mov	r7, r0
 801362a:	2800      	cmp	r0, #0
 801362c:	f43f ae96 	beq.w	801335c <_strtod_l+0x47c>
 8013630:	f1ba 0f00 	cmp.w	sl, #0
 8013634:	dd08      	ble.n	8013648 <_strtod_l+0x768>
 8013636:	4639      	mov	r1, r7
 8013638:	4652      	mov	r2, sl
 801363a:	4620      	mov	r0, r4
 801363c:	f7ff f9e6 	bl	8012a0c <__lshift>
 8013640:	4607      	mov	r7, r0
 8013642:	2800      	cmp	r0, #0
 8013644:	f43f ae8a 	beq.w	801335c <_strtod_l+0x47c>
 8013648:	f1bb 0f00 	cmp.w	fp, #0
 801364c:	dd08      	ble.n	8013660 <_strtod_l+0x780>
 801364e:	4631      	mov	r1, r6
 8013650:	465a      	mov	r2, fp
 8013652:	4620      	mov	r0, r4
 8013654:	f7ff f9da 	bl	8012a0c <__lshift>
 8013658:	4606      	mov	r6, r0
 801365a:	2800      	cmp	r0, #0
 801365c:	f43f ae7e 	beq.w	801335c <_strtod_l+0x47c>
 8013660:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013662:	463a      	mov	r2, r7
 8013664:	4620      	mov	r0, r4
 8013666:	f7ff fa59 	bl	8012b1c <__mdiff>
 801366a:	4605      	mov	r5, r0
 801366c:	2800      	cmp	r0, #0
 801366e:	f43f ae75 	beq.w	801335c <_strtod_l+0x47c>
 8013672:	2300      	movs	r3, #0
 8013674:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8013678:	60c3      	str	r3, [r0, #12]
 801367a:	4631      	mov	r1, r6
 801367c:	f7ff fa32 	bl	8012ae4 <__mcmp>
 8013680:	2800      	cmp	r0, #0
 8013682:	da7f      	bge.n	8013784 <_strtod_l+0x8a4>
 8013684:	ea5a 0a08 	orrs.w	sl, sl, r8
 8013688:	f040 80a5 	bne.w	80137d6 <_strtod_l+0x8f6>
 801368c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013690:	2b00      	cmp	r3, #0
 8013692:	f040 80a0 	bne.w	80137d6 <_strtod_l+0x8f6>
 8013696:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801369a:	0d1b      	lsrs	r3, r3, #20
 801369c:	051b      	lsls	r3, r3, #20
 801369e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80136a2:	f240 8098 	bls.w	80137d6 <_strtod_l+0x8f6>
 80136a6:	696b      	ldr	r3, [r5, #20]
 80136a8:	b91b      	cbnz	r3, 80136b2 <_strtod_l+0x7d2>
 80136aa:	692b      	ldr	r3, [r5, #16]
 80136ac:	2b01      	cmp	r3, #1
 80136ae:	f340 8092 	ble.w	80137d6 <_strtod_l+0x8f6>
 80136b2:	4629      	mov	r1, r5
 80136b4:	2201      	movs	r2, #1
 80136b6:	4620      	mov	r0, r4
 80136b8:	f7ff f9a8 	bl	8012a0c <__lshift>
 80136bc:	4631      	mov	r1, r6
 80136be:	4605      	mov	r5, r0
 80136c0:	f7ff fa10 	bl	8012ae4 <__mcmp>
 80136c4:	2800      	cmp	r0, #0
 80136c6:	f340 8086 	ble.w	80137d6 <_strtod_l+0x8f6>
 80136ca:	9905      	ldr	r1, [sp, #20]
 80136cc:	4a2c      	ldr	r2, [pc, #176]	; (8013780 <_strtod_l+0x8a0>)
 80136ce:	464b      	mov	r3, r9
 80136d0:	2900      	cmp	r1, #0
 80136d2:	f000 809f 	beq.w	8013814 <_strtod_l+0x934>
 80136d6:	ea02 0109 	and.w	r1, r2, r9
 80136da:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80136de:	f300 8099 	bgt.w	8013814 <_strtod_l+0x934>
 80136e2:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80136e6:	f77f aea8 	ble.w	801343a <_strtod_l+0x55a>
 80136ea:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8013770 <_strtod_l+0x890>
 80136ee:	ec49 8b16 	vmov	d6, r8, r9
 80136f2:	4b23      	ldr	r3, [pc, #140]	; (8013780 <_strtod_l+0x8a0>)
 80136f4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80136f8:	ee17 2a90 	vmov	r2, s15
 80136fc:	4013      	ands	r3, r2
 80136fe:	ec59 8b17 	vmov	r8, r9, d7
 8013702:	2b00      	cmp	r3, #0
 8013704:	f47f ae34 	bne.w	8013370 <_strtod_l+0x490>
 8013708:	2322      	movs	r3, #34	; 0x22
 801370a:	6023      	str	r3, [r4, #0]
 801370c:	e630      	b.n	8013370 <_strtod_l+0x490>
 801370e:	f04f 31ff 	mov.w	r1, #4294967295
 8013712:	fa01 f202 	lsl.w	r2, r1, r2
 8013716:	ea02 0808 	and.w	r8, r2, r8
 801371a:	e6da      	b.n	80134d2 <_strtod_l+0x5f2>
 801371c:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8013720:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8013724:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8013728:	33e2      	adds	r3, #226	; 0xe2
 801372a:	fa00 f303 	lsl.w	r3, r0, r3
 801372e:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8013732:	e73f      	b.n	80135b4 <_strtod_l+0x6d4>
 8013734:	2200      	movs	r2, #0
 8013736:	2301      	movs	r3, #1
 8013738:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801373c:	e73a      	b.n	80135b4 <_strtod_l+0x6d4>
 801373e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013740:	461a      	mov	r2, r3
 8013742:	4620      	mov	r0, r4
 8013744:	f7ff f962 	bl	8012a0c <__lshift>
 8013748:	9012      	str	r0, [sp, #72]	; 0x48
 801374a:	2800      	cmp	r0, #0
 801374c:	f47f af64 	bne.w	8013618 <_strtod_l+0x738>
 8013750:	e604      	b.n	801335c <_strtod_l+0x47c>
 8013752:	bf00      	nop
 8013754:	f3af 8000 	nop.w
 8013758:	94a03595 	.word	0x94a03595
 801375c:	3fcfffff 	.word	0x3fcfffff
 8013760:	94a03595 	.word	0x94a03595
 8013764:	3fdfffff 	.word	0x3fdfffff
 8013768:	35afe535 	.word	0x35afe535
 801376c:	3fe00000 	.word	0x3fe00000
 8013770:	00000000 	.word	0x00000000
 8013774:	39500000 	.word	0x39500000
 8013778:	08015118 	.word	0x08015118
 801377c:	fffffc02 	.word	0xfffffc02
 8013780:	7ff00000 	.word	0x7ff00000
 8013784:	46cb      	mov	fp, r9
 8013786:	d15f      	bne.n	8013848 <_strtod_l+0x968>
 8013788:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801378c:	f1ba 0f00 	cmp.w	sl, #0
 8013790:	d02a      	beq.n	80137e8 <_strtod_l+0x908>
 8013792:	4aa7      	ldr	r2, [pc, #668]	; (8013a30 <_strtod_l+0xb50>)
 8013794:	4293      	cmp	r3, r2
 8013796:	d12b      	bne.n	80137f0 <_strtod_l+0x910>
 8013798:	9b05      	ldr	r3, [sp, #20]
 801379a:	4642      	mov	r2, r8
 801379c:	b1fb      	cbz	r3, 80137de <_strtod_l+0x8fe>
 801379e:	4ba5      	ldr	r3, [pc, #660]	; (8013a34 <_strtod_l+0xb54>)
 80137a0:	ea09 0303 	and.w	r3, r9, r3
 80137a4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80137a8:	f04f 31ff 	mov.w	r1, #4294967295
 80137ac:	d81a      	bhi.n	80137e4 <_strtod_l+0x904>
 80137ae:	0d1b      	lsrs	r3, r3, #20
 80137b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80137b4:	fa01 f303 	lsl.w	r3, r1, r3
 80137b8:	429a      	cmp	r2, r3
 80137ba:	d119      	bne.n	80137f0 <_strtod_l+0x910>
 80137bc:	4b9e      	ldr	r3, [pc, #632]	; (8013a38 <_strtod_l+0xb58>)
 80137be:	459b      	cmp	fp, r3
 80137c0:	d102      	bne.n	80137c8 <_strtod_l+0x8e8>
 80137c2:	3201      	adds	r2, #1
 80137c4:	f43f adca 	beq.w	801335c <_strtod_l+0x47c>
 80137c8:	4b9a      	ldr	r3, [pc, #616]	; (8013a34 <_strtod_l+0xb54>)
 80137ca:	ea0b 0303 	and.w	r3, fp, r3
 80137ce:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80137d2:	f04f 0800 	mov.w	r8, #0
 80137d6:	9b05      	ldr	r3, [sp, #20]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d186      	bne.n	80136ea <_strtod_l+0x80a>
 80137dc:	e5c8      	b.n	8013370 <_strtod_l+0x490>
 80137de:	f04f 33ff 	mov.w	r3, #4294967295
 80137e2:	e7e9      	b.n	80137b8 <_strtod_l+0x8d8>
 80137e4:	460b      	mov	r3, r1
 80137e6:	e7e7      	b.n	80137b8 <_strtod_l+0x8d8>
 80137e8:	ea53 0308 	orrs.w	r3, r3, r8
 80137ec:	f43f af6d 	beq.w	80136ca <_strtod_l+0x7ea>
 80137f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137f2:	b1cb      	cbz	r3, 8013828 <_strtod_l+0x948>
 80137f4:	ea13 0f0b 	tst.w	r3, fp
 80137f8:	d0ed      	beq.n	80137d6 <_strtod_l+0x8f6>
 80137fa:	9a05      	ldr	r2, [sp, #20]
 80137fc:	4640      	mov	r0, r8
 80137fe:	4649      	mov	r1, r9
 8013800:	f1ba 0f00 	cmp.w	sl, #0
 8013804:	d014      	beq.n	8013830 <_strtod_l+0x950>
 8013806:	f7ff fb51 	bl	8012eac <sulp>
 801380a:	ee38 7b00 	vadd.f64	d7, d8, d0
 801380e:	ec59 8b17 	vmov	r8, r9, d7
 8013812:	e7e0      	b.n	80137d6 <_strtod_l+0x8f6>
 8013814:	4013      	ands	r3, r2
 8013816:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801381a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801381e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8013822:	f04f 38ff 	mov.w	r8, #4294967295
 8013826:	e7d6      	b.n	80137d6 <_strtod_l+0x8f6>
 8013828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801382a:	ea13 0f08 	tst.w	r3, r8
 801382e:	e7e3      	b.n	80137f8 <_strtod_l+0x918>
 8013830:	f7ff fb3c 	bl	8012eac <sulp>
 8013834:	ee38 0b40 	vsub.f64	d0, d8, d0
 8013838:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801383c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013840:	ec59 8b10 	vmov	r8, r9, d0
 8013844:	d1c7      	bne.n	80137d6 <_strtod_l+0x8f6>
 8013846:	e5f8      	b.n	801343a <_strtod_l+0x55a>
 8013848:	4631      	mov	r1, r6
 801384a:	4628      	mov	r0, r5
 801384c:	f7ff faba 	bl	8012dc4 <__ratio>
 8013850:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8013854:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801385c:	d85f      	bhi.n	801391e <_strtod_l+0xa3e>
 801385e:	f1ba 0f00 	cmp.w	sl, #0
 8013862:	d166      	bne.n	8013932 <_strtod_l+0xa52>
 8013864:	f1b8 0f00 	cmp.w	r8, #0
 8013868:	d14d      	bne.n	8013906 <_strtod_l+0xa26>
 801386a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801386e:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8013872:	2b00      	cmp	r3, #0
 8013874:	d162      	bne.n	801393c <_strtod_l+0xa5c>
 8013876:	eeb4 0bcd 	vcmpe.f64	d0, d13
 801387a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801387e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013882:	d401      	bmi.n	8013888 <_strtod_l+0x9a8>
 8013884:	ee20 db0d 	vmul.f64	d13, d0, d13
 8013888:	eeb1 cb4d 	vneg.f64	d12, d13
 801388c:	4869      	ldr	r0, [pc, #420]	; (8013a34 <_strtod_l+0xb54>)
 801388e:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8013a40 <_strtod_l+0xb60>
 8013892:	ea0b 0100 	and.w	r1, fp, r0
 8013896:	4561      	cmp	r1, ip
 8013898:	ec53 2b1c 	vmov	r2, r3, d12
 801389c:	d17a      	bne.n	8013994 <_strtod_l+0xab4>
 801389e:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80138a2:	ec49 8b10 	vmov	d0, r8, r9
 80138a6:	910a      	str	r1, [sp, #40]	; 0x28
 80138a8:	f7ff f9c2 	bl	8012c30 <__ulp>
 80138ac:	ec49 8b1e 	vmov	d14, r8, r9
 80138b0:	4860      	ldr	r0, [pc, #384]	; (8013a34 <_strtod_l+0xb54>)
 80138b2:	eea0 eb0c 	vfma.f64	d14, d0, d12
 80138b6:	ee1e 3a90 	vmov	r3, s29
 80138ba:	4a60      	ldr	r2, [pc, #384]	; (8013a3c <_strtod_l+0xb5c>)
 80138bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80138be:	4018      	ands	r0, r3
 80138c0:	4290      	cmp	r0, r2
 80138c2:	ec59 8b1e 	vmov	r8, r9, d14
 80138c6:	d93c      	bls.n	8013942 <_strtod_l+0xa62>
 80138c8:	ee18 2a90 	vmov	r2, s17
 80138cc:	4b5a      	ldr	r3, [pc, #360]	; (8013a38 <_strtod_l+0xb58>)
 80138ce:	429a      	cmp	r2, r3
 80138d0:	d104      	bne.n	80138dc <_strtod_l+0x9fc>
 80138d2:	ee18 3a10 	vmov	r3, s16
 80138d6:	3301      	adds	r3, #1
 80138d8:	f43f ad40 	beq.w	801335c <_strtod_l+0x47c>
 80138dc:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8013a38 <_strtod_l+0xb58>
 80138e0:	f04f 38ff 	mov.w	r8, #4294967295
 80138e4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80138e6:	4620      	mov	r0, r4
 80138e8:	f7fe fe76 	bl	80125d8 <_Bfree>
 80138ec:	4639      	mov	r1, r7
 80138ee:	4620      	mov	r0, r4
 80138f0:	f7fe fe72 	bl	80125d8 <_Bfree>
 80138f4:	4631      	mov	r1, r6
 80138f6:	4620      	mov	r0, r4
 80138f8:	f7fe fe6e 	bl	80125d8 <_Bfree>
 80138fc:	4629      	mov	r1, r5
 80138fe:	4620      	mov	r0, r4
 8013900:	f7fe fe6a 	bl	80125d8 <_Bfree>
 8013904:	e609      	b.n	801351a <_strtod_l+0x63a>
 8013906:	f1b8 0f01 	cmp.w	r8, #1
 801390a:	d103      	bne.n	8013914 <_strtod_l+0xa34>
 801390c:	f1b9 0f00 	cmp.w	r9, #0
 8013910:	f43f ad93 	beq.w	801343a <_strtod_l+0x55a>
 8013914:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8013918:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801391c:	e7b6      	b.n	801388c <_strtod_l+0x9ac>
 801391e:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8013922:	ee20 db0d 	vmul.f64	d13, d0, d13
 8013926:	f1ba 0f00 	cmp.w	sl, #0
 801392a:	d0ad      	beq.n	8013888 <_strtod_l+0x9a8>
 801392c:	eeb0 cb4d 	vmov.f64	d12, d13
 8013930:	e7ac      	b.n	801388c <_strtod_l+0x9ac>
 8013932:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 8013936:	eeb0 db4c 	vmov.f64	d13, d12
 801393a:	e7a7      	b.n	801388c <_strtod_l+0x9ac>
 801393c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8013940:	e7a4      	b.n	801388c <_strtod_l+0x9ac>
 8013942:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8013946:	9b05      	ldr	r3, [sp, #20]
 8013948:	46cb      	mov	fp, r9
 801394a:	2b00      	cmp	r3, #0
 801394c:	d1ca      	bne.n	80138e4 <_strtod_l+0xa04>
 801394e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013952:	0d1b      	lsrs	r3, r3, #20
 8013954:	051b      	lsls	r3, r3, #20
 8013956:	4299      	cmp	r1, r3
 8013958:	d1c4      	bne.n	80138e4 <_strtod_l+0xa04>
 801395a:	ec51 0b1d 	vmov	r0, r1, d13
 801395e:	f7ec ff03 	bl	8000768 <__aeabi_d2lz>
 8013962:	f7ec febb 	bl	80006dc <__aeabi_l2d>
 8013966:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 801396a:	ec41 0b17 	vmov	d7, r0, r1
 801396e:	ea4b 0b08 	orr.w	fp, fp, r8
 8013972:	ea5b 0b0a 	orrs.w	fp, fp, sl
 8013976:	ee3d db47 	vsub.f64	d13, d13, d7
 801397a:	d03c      	beq.n	80139f6 <_strtod_l+0xb16>
 801397c:	eeb4 dbca 	vcmpe.f64	d13, d10
 8013980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013984:	f53f acf4 	bmi.w	8013370 <_strtod_l+0x490>
 8013988:	eeb4 dbcb 	vcmpe.f64	d13, d11
 801398c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013990:	dda8      	ble.n	80138e4 <_strtod_l+0xa04>
 8013992:	e4ed      	b.n	8013370 <_strtod_l+0x490>
 8013994:	9805      	ldr	r0, [sp, #20]
 8013996:	b1f0      	cbz	r0, 80139d6 <_strtod_l+0xaf6>
 8013998:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801399c:	d81b      	bhi.n	80139d6 <_strtod_l+0xaf6>
 801399e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8013a28 <_strtod_l+0xb48>
 80139a2:	eeb4 dbc7 	vcmpe.f64	d13, d7
 80139a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139aa:	d811      	bhi.n	80139d0 <_strtod_l+0xaf0>
 80139ac:	eebc dbcd 	vcvt.u32.f64	s26, d13
 80139b0:	ee1d 3a10 	vmov	r3, s26
 80139b4:	2b01      	cmp	r3, #1
 80139b6:	bf38      	it	cc
 80139b8:	2301      	movcc	r3, #1
 80139ba:	ee0d 3a10 	vmov	s26, r3
 80139be:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 80139c2:	f1ba 0f00 	cmp.w	sl, #0
 80139c6:	d113      	bne.n	80139f0 <_strtod_l+0xb10>
 80139c8:	eeb1 7b4d 	vneg.f64	d7, d13
 80139cc:	ec53 2b17 	vmov	r2, r3, d7
 80139d0:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 80139d4:	1a43      	subs	r3, r0, r1
 80139d6:	eeb0 0b48 	vmov.f64	d0, d8
 80139da:	ec43 2b1c 	vmov	d12, r2, r3
 80139de:	910a      	str	r1, [sp, #40]	; 0x28
 80139e0:	f7ff f926 	bl	8012c30 <__ulp>
 80139e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80139e6:	eeac 8b00 	vfma.f64	d8, d12, d0
 80139ea:	ec59 8b18 	vmov	r8, r9, d8
 80139ee:	e7aa      	b.n	8013946 <_strtod_l+0xa66>
 80139f0:	eeb0 7b4d 	vmov.f64	d7, d13
 80139f4:	e7ea      	b.n	80139cc <_strtod_l+0xaec>
 80139f6:	eeb4 dbc9 	vcmpe.f64	d13, d9
 80139fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139fe:	f57f af71 	bpl.w	80138e4 <_strtod_l+0xa04>
 8013a02:	e4b5      	b.n	8013370 <_strtod_l+0x490>
 8013a04:	2300      	movs	r3, #0
 8013a06:	9308      	str	r3, [sp, #32]
 8013a08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013a0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013a0c:	6013      	str	r3, [r2, #0]
 8013a0e:	f7ff baa6 	b.w	8012f5e <_strtod_l+0x7e>
 8013a12:	2a65      	cmp	r2, #101	; 0x65
 8013a14:	f43f aba2 	beq.w	801315c <_strtod_l+0x27c>
 8013a18:	2a45      	cmp	r2, #69	; 0x45
 8013a1a:	f43f ab9f 	beq.w	801315c <_strtod_l+0x27c>
 8013a1e:	2101      	movs	r1, #1
 8013a20:	f7ff bbd8 	b.w	80131d4 <_strtod_l+0x2f4>
 8013a24:	f3af 8000 	nop.w
 8013a28:	ffc00000 	.word	0xffc00000
 8013a2c:	41dfffff 	.word	0x41dfffff
 8013a30:	000fffff 	.word	0x000fffff
 8013a34:	7ff00000 	.word	0x7ff00000
 8013a38:	7fefffff 	.word	0x7fefffff
 8013a3c:	7c9fffff 	.word	0x7c9fffff
 8013a40:	7fe00000 	.word	0x7fe00000

08013a44 <_strtod_r>:
 8013a44:	4b01      	ldr	r3, [pc, #4]	; (8013a4c <_strtod_r+0x8>)
 8013a46:	f7ff ba4b 	b.w	8012ee0 <_strtod_l>
 8013a4a:	bf00      	nop
 8013a4c:	2400006c 	.word	0x2400006c

08013a50 <_strtol_l.constprop.0>:
 8013a50:	2b01      	cmp	r3, #1
 8013a52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a56:	d001      	beq.n	8013a5c <_strtol_l.constprop.0+0xc>
 8013a58:	2b24      	cmp	r3, #36	; 0x24
 8013a5a:	d906      	bls.n	8013a6a <_strtol_l.constprop.0+0x1a>
 8013a5c:	f7fd fe48 	bl	80116f0 <__errno>
 8013a60:	2316      	movs	r3, #22
 8013a62:	6003      	str	r3, [r0, #0]
 8013a64:	2000      	movs	r0, #0
 8013a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a6a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8013b50 <_strtol_l.constprop.0+0x100>
 8013a6e:	460d      	mov	r5, r1
 8013a70:	462e      	mov	r6, r5
 8013a72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013a76:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8013a7a:	f017 0708 	ands.w	r7, r7, #8
 8013a7e:	d1f7      	bne.n	8013a70 <_strtol_l.constprop.0+0x20>
 8013a80:	2c2d      	cmp	r4, #45	; 0x2d
 8013a82:	d132      	bne.n	8013aea <_strtol_l.constprop.0+0x9a>
 8013a84:	782c      	ldrb	r4, [r5, #0]
 8013a86:	2701      	movs	r7, #1
 8013a88:	1cb5      	adds	r5, r6, #2
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d05b      	beq.n	8013b46 <_strtol_l.constprop.0+0xf6>
 8013a8e:	2b10      	cmp	r3, #16
 8013a90:	d109      	bne.n	8013aa6 <_strtol_l.constprop.0+0x56>
 8013a92:	2c30      	cmp	r4, #48	; 0x30
 8013a94:	d107      	bne.n	8013aa6 <_strtol_l.constprop.0+0x56>
 8013a96:	782c      	ldrb	r4, [r5, #0]
 8013a98:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8013a9c:	2c58      	cmp	r4, #88	; 0x58
 8013a9e:	d14d      	bne.n	8013b3c <_strtol_l.constprop.0+0xec>
 8013aa0:	786c      	ldrb	r4, [r5, #1]
 8013aa2:	2310      	movs	r3, #16
 8013aa4:	3502      	adds	r5, #2
 8013aa6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8013aaa:	f108 38ff 	add.w	r8, r8, #4294967295
 8013aae:	f04f 0e00 	mov.w	lr, #0
 8013ab2:	fbb8 f9f3 	udiv	r9, r8, r3
 8013ab6:	4676      	mov	r6, lr
 8013ab8:	fb03 8a19 	mls	sl, r3, r9, r8
 8013abc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8013ac0:	f1bc 0f09 	cmp.w	ip, #9
 8013ac4:	d816      	bhi.n	8013af4 <_strtol_l.constprop.0+0xa4>
 8013ac6:	4664      	mov	r4, ip
 8013ac8:	42a3      	cmp	r3, r4
 8013aca:	dd24      	ble.n	8013b16 <_strtol_l.constprop.0+0xc6>
 8013acc:	f1be 3fff 	cmp.w	lr, #4294967295
 8013ad0:	d008      	beq.n	8013ae4 <_strtol_l.constprop.0+0x94>
 8013ad2:	45b1      	cmp	r9, r6
 8013ad4:	d31c      	bcc.n	8013b10 <_strtol_l.constprop.0+0xc0>
 8013ad6:	d101      	bne.n	8013adc <_strtol_l.constprop.0+0x8c>
 8013ad8:	45a2      	cmp	sl, r4
 8013ada:	db19      	blt.n	8013b10 <_strtol_l.constprop.0+0xc0>
 8013adc:	fb06 4603 	mla	r6, r6, r3, r4
 8013ae0:	f04f 0e01 	mov.w	lr, #1
 8013ae4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013ae8:	e7e8      	b.n	8013abc <_strtol_l.constprop.0+0x6c>
 8013aea:	2c2b      	cmp	r4, #43	; 0x2b
 8013aec:	bf04      	itt	eq
 8013aee:	782c      	ldrbeq	r4, [r5, #0]
 8013af0:	1cb5      	addeq	r5, r6, #2
 8013af2:	e7ca      	b.n	8013a8a <_strtol_l.constprop.0+0x3a>
 8013af4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8013af8:	f1bc 0f19 	cmp.w	ip, #25
 8013afc:	d801      	bhi.n	8013b02 <_strtol_l.constprop.0+0xb2>
 8013afe:	3c37      	subs	r4, #55	; 0x37
 8013b00:	e7e2      	b.n	8013ac8 <_strtol_l.constprop.0+0x78>
 8013b02:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013b06:	f1bc 0f19 	cmp.w	ip, #25
 8013b0a:	d804      	bhi.n	8013b16 <_strtol_l.constprop.0+0xc6>
 8013b0c:	3c57      	subs	r4, #87	; 0x57
 8013b0e:	e7db      	b.n	8013ac8 <_strtol_l.constprop.0+0x78>
 8013b10:	f04f 3eff 	mov.w	lr, #4294967295
 8013b14:	e7e6      	b.n	8013ae4 <_strtol_l.constprop.0+0x94>
 8013b16:	f1be 3fff 	cmp.w	lr, #4294967295
 8013b1a:	d105      	bne.n	8013b28 <_strtol_l.constprop.0+0xd8>
 8013b1c:	2322      	movs	r3, #34	; 0x22
 8013b1e:	6003      	str	r3, [r0, #0]
 8013b20:	4646      	mov	r6, r8
 8013b22:	b942      	cbnz	r2, 8013b36 <_strtol_l.constprop.0+0xe6>
 8013b24:	4630      	mov	r0, r6
 8013b26:	e79e      	b.n	8013a66 <_strtol_l.constprop.0+0x16>
 8013b28:	b107      	cbz	r7, 8013b2c <_strtol_l.constprop.0+0xdc>
 8013b2a:	4276      	negs	r6, r6
 8013b2c:	2a00      	cmp	r2, #0
 8013b2e:	d0f9      	beq.n	8013b24 <_strtol_l.constprop.0+0xd4>
 8013b30:	f1be 0f00 	cmp.w	lr, #0
 8013b34:	d000      	beq.n	8013b38 <_strtol_l.constprop.0+0xe8>
 8013b36:	1e69      	subs	r1, r5, #1
 8013b38:	6011      	str	r1, [r2, #0]
 8013b3a:	e7f3      	b.n	8013b24 <_strtol_l.constprop.0+0xd4>
 8013b3c:	2430      	movs	r4, #48	; 0x30
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d1b1      	bne.n	8013aa6 <_strtol_l.constprop.0+0x56>
 8013b42:	2308      	movs	r3, #8
 8013b44:	e7af      	b.n	8013aa6 <_strtol_l.constprop.0+0x56>
 8013b46:	2c30      	cmp	r4, #48	; 0x30
 8013b48:	d0a5      	beq.n	8013a96 <_strtol_l.constprop.0+0x46>
 8013b4a:	230a      	movs	r3, #10
 8013b4c:	e7ab      	b.n	8013aa6 <_strtol_l.constprop.0+0x56>
 8013b4e:	bf00      	nop
 8013b50:	08015141 	.word	0x08015141

08013b54 <_strtol_r>:
 8013b54:	f7ff bf7c 	b.w	8013a50 <_strtol_l.constprop.0>

08013b58 <__ssputs_r>:
 8013b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b5c:	688e      	ldr	r6, [r1, #8]
 8013b5e:	461f      	mov	r7, r3
 8013b60:	42be      	cmp	r6, r7
 8013b62:	680b      	ldr	r3, [r1, #0]
 8013b64:	4682      	mov	sl, r0
 8013b66:	460c      	mov	r4, r1
 8013b68:	4690      	mov	r8, r2
 8013b6a:	d82c      	bhi.n	8013bc6 <__ssputs_r+0x6e>
 8013b6c:	898a      	ldrh	r2, [r1, #12]
 8013b6e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013b72:	d026      	beq.n	8013bc2 <__ssputs_r+0x6a>
 8013b74:	6965      	ldr	r5, [r4, #20]
 8013b76:	6909      	ldr	r1, [r1, #16]
 8013b78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013b7c:	eba3 0901 	sub.w	r9, r3, r1
 8013b80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013b84:	1c7b      	adds	r3, r7, #1
 8013b86:	444b      	add	r3, r9
 8013b88:	106d      	asrs	r5, r5, #1
 8013b8a:	429d      	cmp	r5, r3
 8013b8c:	bf38      	it	cc
 8013b8e:	461d      	movcc	r5, r3
 8013b90:	0553      	lsls	r3, r2, #21
 8013b92:	d527      	bpl.n	8013be4 <__ssputs_r+0x8c>
 8013b94:	4629      	mov	r1, r5
 8013b96:	f7fe fc53 	bl	8012440 <_malloc_r>
 8013b9a:	4606      	mov	r6, r0
 8013b9c:	b360      	cbz	r0, 8013bf8 <__ssputs_r+0xa0>
 8013b9e:	6921      	ldr	r1, [r4, #16]
 8013ba0:	464a      	mov	r2, r9
 8013ba2:	f7fd fdd1 	bl	8011748 <memcpy>
 8013ba6:	89a3      	ldrh	r3, [r4, #12]
 8013ba8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013bb0:	81a3      	strh	r3, [r4, #12]
 8013bb2:	6126      	str	r6, [r4, #16]
 8013bb4:	6165      	str	r5, [r4, #20]
 8013bb6:	444e      	add	r6, r9
 8013bb8:	eba5 0509 	sub.w	r5, r5, r9
 8013bbc:	6026      	str	r6, [r4, #0]
 8013bbe:	60a5      	str	r5, [r4, #8]
 8013bc0:	463e      	mov	r6, r7
 8013bc2:	42be      	cmp	r6, r7
 8013bc4:	d900      	bls.n	8013bc8 <__ssputs_r+0x70>
 8013bc6:	463e      	mov	r6, r7
 8013bc8:	6820      	ldr	r0, [r4, #0]
 8013bca:	4632      	mov	r2, r6
 8013bcc:	4641      	mov	r1, r8
 8013bce:	f000 f9c9 	bl	8013f64 <memmove>
 8013bd2:	68a3      	ldr	r3, [r4, #8]
 8013bd4:	1b9b      	subs	r3, r3, r6
 8013bd6:	60a3      	str	r3, [r4, #8]
 8013bd8:	6823      	ldr	r3, [r4, #0]
 8013bda:	4433      	add	r3, r6
 8013bdc:	6023      	str	r3, [r4, #0]
 8013bde:	2000      	movs	r0, #0
 8013be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013be4:	462a      	mov	r2, r5
 8013be6:	f000 fda0 	bl	801472a <_realloc_r>
 8013bea:	4606      	mov	r6, r0
 8013bec:	2800      	cmp	r0, #0
 8013bee:	d1e0      	bne.n	8013bb2 <__ssputs_r+0x5a>
 8013bf0:	6921      	ldr	r1, [r4, #16]
 8013bf2:	4650      	mov	r0, sl
 8013bf4:	f7fe fbb0 	bl	8012358 <_free_r>
 8013bf8:	230c      	movs	r3, #12
 8013bfa:	f8ca 3000 	str.w	r3, [sl]
 8013bfe:	89a3      	ldrh	r3, [r4, #12]
 8013c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c04:	81a3      	strh	r3, [r4, #12]
 8013c06:	f04f 30ff 	mov.w	r0, #4294967295
 8013c0a:	e7e9      	b.n	8013be0 <__ssputs_r+0x88>

08013c0c <_svfiprintf_r>:
 8013c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c10:	4698      	mov	r8, r3
 8013c12:	898b      	ldrh	r3, [r1, #12]
 8013c14:	061b      	lsls	r3, r3, #24
 8013c16:	b09d      	sub	sp, #116	; 0x74
 8013c18:	4607      	mov	r7, r0
 8013c1a:	460d      	mov	r5, r1
 8013c1c:	4614      	mov	r4, r2
 8013c1e:	d50e      	bpl.n	8013c3e <_svfiprintf_r+0x32>
 8013c20:	690b      	ldr	r3, [r1, #16]
 8013c22:	b963      	cbnz	r3, 8013c3e <_svfiprintf_r+0x32>
 8013c24:	2140      	movs	r1, #64	; 0x40
 8013c26:	f7fe fc0b 	bl	8012440 <_malloc_r>
 8013c2a:	6028      	str	r0, [r5, #0]
 8013c2c:	6128      	str	r0, [r5, #16]
 8013c2e:	b920      	cbnz	r0, 8013c3a <_svfiprintf_r+0x2e>
 8013c30:	230c      	movs	r3, #12
 8013c32:	603b      	str	r3, [r7, #0]
 8013c34:	f04f 30ff 	mov.w	r0, #4294967295
 8013c38:	e0d0      	b.n	8013ddc <_svfiprintf_r+0x1d0>
 8013c3a:	2340      	movs	r3, #64	; 0x40
 8013c3c:	616b      	str	r3, [r5, #20]
 8013c3e:	2300      	movs	r3, #0
 8013c40:	9309      	str	r3, [sp, #36]	; 0x24
 8013c42:	2320      	movs	r3, #32
 8013c44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013c48:	f8cd 800c 	str.w	r8, [sp, #12]
 8013c4c:	2330      	movs	r3, #48	; 0x30
 8013c4e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8013df4 <_svfiprintf_r+0x1e8>
 8013c52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013c56:	f04f 0901 	mov.w	r9, #1
 8013c5a:	4623      	mov	r3, r4
 8013c5c:	469a      	mov	sl, r3
 8013c5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013c62:	b10a      	cbz	r2, 8013c68 <_svfiprintf_r+0x5c>
 8013c64:	2a25      	cmp	r2, #37	; 0x25
 8013c66:	d1f9      	bne.n	8013c5c <_svfiprintf_r+0x50>
 8013c68:	ebba 0b04 	subs.w	fp, sl, r4
 8013c6c:	d00b      	beq.n	8013c86 <_svfiprintf_r+0x7a>
 8013c6e:	465b      	mov	r3, fp
 8013c70:	4622      	mov	r2, r4
 8013c72:	4629      	mov	r1, r5
 8013c74:	4638      	mov	r0, r7
 8013c76:	f7ff ff6f 	bl	8013b58 <__ssputs_r>
 8013c7a:	3001      	adds	r0, #1
 8013c7c:	f000 80a9 	beq.w	8013dd2 <_svfiprintf_r+0x1c6>
 8013c80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013c82:	445a      	add	r2, fp
 8013c84:	9209      	str	r2, [sp, #36]	; 0x24
 8013c86:	f89a 3000 	ldrb.w	r3, [sl]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	f000 80a1 	beq.w	8013dd2 <_svfiprintf_r+0x1c6>
 8013c90:	2300      	movs	r3, #0
 8013c92:	f04f 32ff 	mov.w	r2, #4294967295
 8013c96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013c9a:	f10a 0a01 	add.w	sl, sl, #1
 8013c9e:	9304      	str	r3, [sp, #16]
 8013ca0:	9307      	str	r3, [sp, #28]
 8013ca2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013ca6:	931a      	str	r3, [sp, #104]	; 0x68
 8013ca8:	4654      	mov	r4, sl
 8013caa:	2205      	movs	r2, #5
 8013cac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013cb0:	4850      	ldr	r0, [pc, #320]	; (8013df4 <_svfiprintf_r+0x1e8>)
 8013cb2:	f7ec fb2d 	bl	8000310 <memchr>
 8013cb6:	9a04      	ldr	r2, [sp, #16]
 8013cb8:	b9d8      	cbnz	r0, 8013cf2 <_svfiprintf_r+0xe6>
 8013cba:	06d0      	lsls	r0, r2, #27
 8013cbc:	bf44      	itt	mi
 8013cbe:	2320      	movmi	r3, #32
 8013cc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013cc4:	0711      	lsls	r1, r2, #28
 8013cc6:	bf44      	itt	mi
 8013cc8:	232b      	movmi	r3, #43	; 0x2b
 8013cca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013cce:	f89a 3000 	ldrb.w	r3, [sl]
 8013cd2:	2b2a      	cmp	r3, #42	; 0x2a
 8013cd4:	d015      	beq.n	8013d02 <_svfiprintf_r+0xf6>
 8013cd6:	9a07      	ldr	r2, [sp, #28]
 8013cd8:	4654      	mov	r4, sl
 8013cda:	2000      	movs	r0, #0
 8013cdc:	f04f 0c0a 	mov.w	ip, #10
 8013ce0:	4621      	mov	r1, r4
 8013ce2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013ce6:	3b30      	subs	r3, #48	; 0x30
 8013ce8:	2b09      	cmp	r3, #9
 8013cea:	d94d      	bls.n	8013d88 <_svfiprintf_r+0x17c>
 8013cec:	b1b0      	cbz	r0, 8013d1c <_svfiprintf_r+0x110>
 8013cee:	9207      	str	r2, [sp, #28]
 8013cf0:	e014      	b.n	8013d1c <_svfiprintf_r+0x110>
 8013cf2:	eba0 0308 	sub.w	r3, r0, r8
 8013cf6:	fa09 f303 	lsl.w	r3, r9, r3
 8013cfa:	4313      	orrs	r3, r2
 8013cfc:	9304      	str	r3, [sp, #16]
 8013cfe:	46a2      	mov	sl, r4
 8013d00:	e7d2      	b.n	8013ca8 <_svfiprintf_r+0x9c>
 8013d02:	9b03      	ldr	r3, [sp, #12]
 8013d04:	1d19      	adds	r1, r3, #4
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	9103      	str	r1, [sp, #12]
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	bfbb      	ittet	lt
 8013d0e:	425b      	neglt	r3, r3
 8013d10:	f042 0202 	orrlt.w	r2, r2, #2
 8013d14:	9307      	strge	r3, [sp, #28]
 8013d16:	9307      	strlt	r3, [sp, #28]
 8013d18:	bfb8      	it	lt
 8013d1a:	9204      	strlt	r2, [sp, #16]
 8013d1c:	7823      	ldrb	r3, [r4, #0]
 8013d1e:	2b2e      	cmp	r3, #46	; 0x2e
 8013d20:	d10c      	bne.n	8013d3c <_svfiprintf_r+0x130>
 8013d22:	7863      	ldrb	r3, [r4, #1]
 8013d24:	2b2a      	cmp	r3, #42	; 0x2a
 8013d26:	d134      	bne.n	8013d92 <_svfiprintf_r+0x186>
 8013d28:	9b03      	ldr	r3, [sp, #12]
 8013d2a:	1d1a      	adds	r2, r3, #4
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	9203      	str	r2, [sp, #12]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	bfb8      	it	lt
 8013d34:	f04f 33ff 	movlt.w	r3, #4294967295
 8013d38:	3402      	adds	r4, #2
 8013d3a:	9305      	str	r3, [sp, #20]
 8013d3c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8013e04 <_svfiprintf_r+0x1f8>
 8013d40:	7821      	ldrb	r1, [r4, #0]
 8013d42:	2203      	movs	r2, #3
 8013d44:	4650      	mov	r0, sl
 8013d46:	f7ec fae3 	bl	8000310 <memchr>
 8013d4a:	b138      	cbz	r0, 8013d5c <_svfiprintf_r+0x150>
 8013d4c:	9b04      	ldr	r3, [sp, #16]
 8013d4e:	eba0 000a 	sub.w	r0, r0, sl
 8013d52:	2240      	movs	r2, #64	; 0x40
 8013d54:	4082      	lsls	r2, r0
 8013d56:	4313      	orrs	r3, r2
 8013d58:	3401      	adds	r4, #1
 8013d5a:	9304      	str	r3, [sp, #16]
 8013d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d60:	4825      	ldr	r0, [pc, #148]	; (8013df8 <_svfiprintf_r+0x1ec>)
 8013d62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013d66:	2206      	movs	r2, #6
 8013d68:	f7ec fad2 	bl	8000310 <memchr>
 8013d6c:	2800      	cmp	r0, #0
 8013d6e:	d038      	beq.n	8013de2 <_svfiprintf_r+0x1d6>
 8013d70:	4b22      	ldr	r3, [pc, #136]	; (8013dfc <_svfiprintf_r+0x1f0>)
 8013d72:	bb1b      	cbnz	r3, 8013dbc <_svfiprintf_r+0x1b0>
 8013d74:	9b03      	ldr	r3, [sp, #12]
 8013d76:	3307      	adds	r3, #7
 8013d78:	f023 0307 	bic.w	r3, r3, #7
 8013d7c:	3308      	adds	r3, #8
 8013d7e:	9303      	str	r3, [sp, #12]
 8013d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d82:	4433      	add	r3, r6
 8013d84:	9309      	str	r3, [sp, #36]	; 0x24
 8013d86:	e768      	b.n	8013c5a <_svfiprintf_r+0x4e>
 8013d88:	fb0c 3202 	mla	r2, ip, r2, r3
 8013d8c:	460c      	mov	r4, r1
 8013d8e:	2001      	movs	r0, #1
 8013d90:	e7a6      	b.n	8013ce0 <_svfiprintf_r+0xd4>
 8013d92:	2300      	movs	r3, #0
 8013d94:	3401      	adds	r4, #1
 8013d96:	9305      	str	r3, [sp, #20]
 8013d98:	4619      	mov	r1, r3
 8013d9a:	f04f 0c0a 	mov.w	ip, #10
 8013d9e:	4620      	mov	r0, r4
 8013da0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013da4:	3a30      	subs	r2, #48	; 0x30
 8013da6:	2a09      	cmp	r2, #9
 8013da8:	d903      	bls.n	8013db2 <_svfiprintf_r+0x1a6>
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d0c6      	beq.n	8013d3c <_svfiprintf_r+0x130>
 8013dae:	9105      	str	r1, [sp, #20]
 8013db0:	e7c4      	b.n	8013d3c <_svfiprintf_r+0x130>
 8013db2:	fb0c 2101 	mla	r1, ip, r1, r2
 8013db6:	4604      	mov	r4, r0
 8013db8:	2301      	movs	r3, #1
 8013dba:	e7f0      	b.n	8013d9e <_svfiprintf_r+0x192>
 8013dbc:	ab03      	add	r3, sp, #12
 8013dbe:	9300      	str	r3, [sp, #0]
 8013dc0:	462a      	mov	r2, r5
 8013dc2:	4b0f      	ldr	r3, [pc, #60]	; (8013e00 <_svfiprintf_r+0x1f4>)
 8013dc4:	a904      	add	r1, sp, #16
 8013dc6:	4638      	mov	r0, r7
 8013dc8:	f7fc fd7e 	bl	80108c8 <_printf_float>
 8013dcc:	1c42      	adds	r2, r0, #1
 8013dce:	4606      	mov	r6, r0
 8013dd0:	d1d6      	bne.n	8013d80 <_svfiprintf_r+0x174>
 8013dd2:	89ab      	ldrh	r3, [r5, #12]
 8013dd4:	065b      	lsls	r3, r3, #25
 8013dd6:	f53f af2d 	bmi.w	8013c34 <_svfiprintf_r+0x28>
 8013dda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013ddc:	b01d      	add	sp, #116	; 0x74
 8013dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013de2:	ab03      	add	r3, sp, #12
 8013de4:	9300      	str	r3, [sp, #0]
 8013de6:	462a      	mov	r2, r5
 8013de8:	4b05      	ldr	r3, [pc, #20]	; (8013e00 <_svfiprintf_r+0x1f4>)
 8013dea:	a904      	add	r1, sp, #16
 8013dec:	4638      	mov	r0, r7
 8013dee:	f7fc fff3 	bl	8010dd8 <_printf_i>
 8013df2:	e7eb      	b.n	8013dcc <_svfiprintf_r+0x1c0>
 8013df4:	08015241 	.word	0x08015241
 8013df8:	0801524b 	.word	0x0801524b
 8013dfc:	080108c9 	.word	0x080108c9
 8013e00:	08013b59 	.word	0x08013b59
 8013e04:	08015247 	.word	0x08015247

08013e08 <__sflush_r>:
 8013e08:	898a      	ldrh	r2, [r1, #12]
 8013e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e0e:	4605      	mov	r5, r0
 8013e10:	0710      	lsls	r0, r2, #28
 8013e12:	460c      	mov	r4, r1
 8013e14:	d458      	bmi.n	8013ec8 <__sflush_r+0xc0>
 8013e16:	684b      	ldr	r3, [r1, #4]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	dc05      	bgt.n	8013e28 <__sflush_r+0x20>
 8013e1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	dc02      	bgt.n	8013e28 <__sflush_r+0x20>
 8013e22:	2000      	movs	r0, #0
 8013e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013e2a:	2e00      	cmp	r6, #0
 8013e2c:	d0f9      	beq.n	8013e22 <__sflush_r+0x1a>
 8013e2e:	2300      	movs	r3, #0
 8013e30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013e34:	682f      	ldr	r7, [r5, #0]
 8013e36:	6a21      	ldr	r1, [r4, #32]
 8013e38:	602b      	str	r3, [r5, #0]
 8013e3a:	d032      	beq.n	8013ea2 <__sflush_r+0x9a>
 8013e3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013e3e:	89a3      	ldrh	r3, [r4, #12]
 8013e40:	075a      	lsls	r2, r3, #29
 8013e42:	d505      	bpl.n	8013e50 <__sflush_r+0x48>
 8013e44:	6863      	ldr	r3, [r4, #4]
 8013e46:	1ac0      	subs	r0, r0, r3
 8013e48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013e4a:	b10b      	cbz	r3, 8013e50 <__sflush_r+0x48>
 8013e4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013e4e:	1ac0      	subs	r0, r0, r3
 8013e50:	2300      	movs	r3, #0
 8013e52:	4602      	mov	r2, r0
 8013e54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013e56:	6a21      	ldr	r1, [r4, #32]
 8013e58:	4628      	mov	r0, r5
 8013e5a:	47b0      	blx	r6
 8013e5c:	1c43      	adds	r3, r0, #1
 8013e5e:	89a3      	ldrh	r3, [r4, #12]
 8013e60:	d106      	bne.n	8013e70 <__sflush_r+0x68>
 8013e62:	6829      	ldr	r1, [r5, #0]
 8013e64:	291d      	cmp	r1, #29
 8013e66:	d82b      	bhi.n	8013ec0 <__sflush_r+0xb8>
 8013e68:	4a29      	ldr	r2, [pc, #164]	; (8013f10 <__sflush_r+0x108>)
 8013e6a:	410a      	asrs	r2, r1
 8013e6c:	07d6      	lsls	r6, r2, #31
 8013e6e:	d427      	bmi.n	8013ec0 <__sflush_r+0xb8>
 8013e70:	2200      	movs	r2, #0
 8013e72:	6062      	str	r2, [r4, #4]
 8013e74:	04d9      	lsls	r1, r3, #19
 8013e76:	6922      	ldr	r2, [r4, #16]
 8013e78:	6022      	str	r2, [r4, #0]
 8013e7a:	d504      	bpl.n	8013e86 <__sflush_r+0x7e>
 8013e7c:	1c42      	adds	r2, r0, #1
 8013e7e:	d101      	bne.n	8013e84 <__sflush_r+0x7c>
 8013e80:	682b      	ldr	r3, [r5, #0]
 8013e82:	b903      	cbnz	r3, 8013e86 <__sflush_r+0x7e>
 8013e84:	6560      	str	r0, [r4, #84]	; 0x54
 8013e86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013e88:	602f      	str	r7, [r5, #0]
 8013e8a:	2900      	cmp	r1, #0
 8013e8c:	d0c9      	beq.n	8013e22 <__sflush_r+0x1a>
 8013e8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013e92:	4299      	cmp	r1, r3
 8013e94:	d002      	beq.n	8013e9c <__sflush_r+0x94>
 8013e96:	4628      	mov	r0, r5
 8013e98:	f7fe fa5e 	bl	8012358 <_free_r>
 8013e9c:	2000      	movs	r0, #0
 8013e9e:	6360      	str	r0, [r4, #52]	; 0x34
 8013ea0:	e7c0      	b.n	8013e24 <__sflush_r+0x1c>
 8013ea2:	2301      	movs	r3, #1
 8013ea4:	4628      	mov	r0, r5
 8013ea6:	47b0      	blx	r6
 8013ea8:	1c41      	adds	r1, r0, #1
 8013eaa:	d1c8      	bne.n	8013e3e <__sflush_r+0x36>
 8013eac:	682b      	ldr	r3, [r5, #0]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d0c5      	beq.n	8013e3e <__sflush_r+0x36>
 8013eb2:	2b1d      	cmp	r3, #29
 8013eb4:	d001      	beq.n	8013eba <__sflush_r+0xb2>
 8013eb6:	2b16      	cmp	r3, #22
 8013eb8:	d101      	bne.n	8013ebe <__sflush_r+0xb6>
 8013eba:	602f      	str	r7, [r5, #0]
 8013ebc:	e7b1      	b.n	8013e22 <__sflush_r+0x1a>
 8013ebe:	89a3      	ldrh	r3, [r4, #12]
 8013ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ec4:	81a3      	strh	r3, [r4, #12]
 8013ec6:	e7ad      	b.n	8013e24 <__sflush_r+0x1c>
 8013ec8:	690f      	ldr	r7, [r1, #16]
 8013eca:	2f00      	cmp	r7, #0
 8013ecc:	d0a9      	beq.n	8013e22 <__sflush_r+0x1a>
 8013ece:	0793      	lsls	r3, r2, #30
 8013ed0:	680e      	ldr	r6, [r1, #0]
 8013ed2:	bf08      	it	eq
 8013ed4:	694b      	ldreq	r3, [r1, #20]
 8013ed6:	600f      	str	r7, [r1, #0]
 8013ed8:	bf18      	it	ne
 8013eda:	2300      	movne	r3, #0
 8013edc:	eba6 0807 	sub.w	r8, r6, r7
 8013ee0:	608b      	str	r3, [r1, #8]
 8013ee2:	f1b8 0f00 	cmp.w	r8, #0
 8013ee6:	dd9c      	ble.n	8013e22 <__sflush_r+0x1a>
 8013ee8:	6a21      	ldr	r1, [r4, #32]
 8013eea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013eec:	4643      	mov	r3, r8
 8013eee:	463a      	mov	r2, r7
 8013ef0:	4628      	mov	r0, r5
 8013ef2:	47b0      	blx	r6
 8013ef4:	2800      	cmp	r0, #0
 8013ef6:	dc06      	bgt.n	8013f06 <__sflush_r+0xfe>
 8013ef8:	89a3      	ldrh	r3, [r4, #12]
 8013efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013efe:	81a3      	strh	r3, [r4, #12]
 8013f00:	f04f 30ff 	mov.w	r0, #4294967295
 8013f04:	e78e      	b.n	8013e24 <__sflush_r+0x1c>
 8013f06:	4407      	add	r7, r0
 8013f08:	eba8 0800 	sub.w	r8, r8, r0
 8013f0c:	e7e9      	b.n	8013ee2 <__sflush_r+0xda>
 8013f0e:	bf00      	nop
 8013f10:	dfbffffe 	.word	0xdfbffffe

08013f14 <_fflush_r>:
 8013f14:	b538      	push	{r3, r4, r5, lr}
 8013f16:	690b      	ldr	r3, [r1, #16]
 8013f18:	4605      	mov	r5, r0
 8013f1a:	460c      	mov	r4, r1
 8013f1c:	b913      	cbnz	r3, 8013f24 <_fflush_r+0x10>
 8013f1e:	2500      	movs	r5, #0
 8013f20:	4628      	mov	r0, r5
 8013f22:	bd38      	pop	{r3, r4, r5, pc}
 8013f24:	b118      	cbz	r0, 8013f2e <_fflush_r+0x1a>
 8013f26:	6a03      	ldr	r3, [r0, #32]
 8013f28:	b90b      	cbnz	r3, 8013f2e <_fflush_r+0x1a>
 8013f2a:	f7fd faf5 	bl	8011518 <__sinit>
 8013f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d0f3      	beq.n	8013f1e <_fflush_r+0xa>
 8013f36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013f38:	07d0      	lsls	r0, r2, #31
 8013f3a:	d404      	bmi.n	8013f46 <_fflush_r+0x32>
 8013f3c:	0599      	lsls	r1, r3, #22
 8013f3e:	d402      	bmi.n	8013f46 <_fflush_r+0x32>
 8013f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013f42:	f7fd fbff 	bl	8011744 <__retarget_lock_acquire_recursive>
 8013f46:	4628      	mov	r0, r5
 8013f48:	4621      	mov	r1, r4
 8013f4a:	f7ff ff5d 	bl	8013e08 <__sflush_r>
 8013f4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013f50:	07da      	lsls	r2, r3, #31
 8013f52:	4605      	mov	r5, r0
 8013f54:	d4e4      	bmi.n	8013f20 <_fflush_r+0xc>
 8013f56:	89a3      	ldrh	r3, [r4, #12]
 8013f58:	059b      	lsls	r3, r3, #22
 8013f5a:	d4e1      	bmi.n	8013f20 <_fflush_r+0xc>
 8013f5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013f5e:	f7fd fbf2 	bl	8011746 <__retarget_lock_release_recursive>
 8013f62:	e7dd      	b.n	8013f20 <_fflush_r+0xc>

08013f64 <memmove>:
 8013f64:	4288      	cmp	r0, r1
 8013f66:	b510      	push	{r4, lr}
 8013f68:	eb01 0402 	add.w	r4, r1, r2
 8013f6c:	d902      	bls.n	8013f74 <memmove+0x10>
 8013f6e:	4284      	cmp	r4, r0
 8013f70:	4623      	mov	r3, r4
 8013f72:	d807      	bhi.n	8013f84 <memmove+0x20>
 8013f74:	1e43      	subs	r3, r0, #1
 8013f76:	42a1      	cmp	r1, r4
 8013f78:	d008      	beq.n	8013f8c <memmove+0x28>
 8013f7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013f7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013f82:	e7f8      	b.n	8013f76 <memmove+0x12>
 8013f84:	4402      	add	r2, r0
 8013f86:	4601      	mov	r1, r0
 8013f88:	428a      	cmp	r2, r1
 8013f8a:	d100      	bne.n	8013f8e <memmove+0x2a>
 8013f8c:	bd10      	pop	{r4, pc}
 8013f8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013f92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013f96:	e7f7      	b.n	8013f88 <memmove+0x24>

08013f98 <strncmp>:
 8013f98:	b510      	push	{r4, lr}
 8013f9a:	b16a      	cbz	r2, 8013fb8 <strncmp+0x20>
 8013f9c:	3901      	subs	r1, #1
 8013f9e:	1884      	adds	r4, r0, r2
 8013fa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013fa4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013fa8:	429a      	cmp	r2, r3
 8013faa:	d103      	bne.n	8013fb4 <strncmp+0x1c>
 8013fac:	42a0      	cmp	r0, r4
 8013fae:	d001      	beq.n	8013fb4 <strncmp+0x1c>
 8013fb0:	2a00      	cmp	r2, #0
 8013fb2:	d1f5      	bne.n	8013fa0 <strncmp+0x8>
 8013fb4:	1ad0      	subs	r0, r2, r3
 8013fb6:	bd10      	pop	{r4, pc}
 8013fb8:	4610      	mov	r0, r2
 8013fba:	e7fc      	b.n	8013fb6 <strncmp+0x1e>

08013fbc <_sbrk_r>:
 8013fbc:	b538      	push	{r3, r4, r5, lr}
 8013fbe:	4d06      	ldr	r5, [pc, #24]	; (8013fd8 <_sbrk_r+0x1c>)
 8013fc0:	2300      	movs	r3, #0
 8013fc2:	4604      	mov	r4, r0
 8013fc4:	4608      	mov	r0, r1
 8013fc6:	602b      	str	r3, [r5, #0]
 8013fc8:	f7ee ff88 	bl	8002edc <_sbrk>
 8013fcc:	1c43      	adds	r3, r0, #1
 8013fce:	d102      	bne.n	8013fd6 <_sbrk_r+0x1a>
 8013fd0:	682b      	ldr	r3, [r5, #0]
 8013fd2:	b103      	cbz	r3, 8013fd6 <_sbrk_r+0x1a>
 8013fd4:	6023      	str	r3, [r4, #0]
 8013fd6:	bd38      	pop	{r3, r4, r5, pc}
 8013fd8:	24000f3c 	.word	0x24000f3c
 8013fdc:	00000000 	.word	0x00000000

08013fe0 <nan>:
 8013fe0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013fe8 <nan+0x8>
 8013fe4:	4770      	bx	lr
 8013fe6:	bf00      	nop
 8013fe8:	00000000 	.word	0x00000000
 8013fec:	7ff80000 	.word	0x7ff80000

08013ff0 <__assert_func>:
 8013ff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013ff2:	4614      	mov	r4, r2
 8013ff4:	461a      	mov	r2, r3
 8013ff6:	4b09      	ldr	r3, [pc, #36]	; (801401c <__assert_func+0x2c>)
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	4605      	mov	r5, r0
 8013ffc:	68d8      	ldr	r0, [r3, #12]
 8013ffe:	b14c      	cbz	r4, 8014014 <__assert_func+0x24>
 8014000:	4b07      	ldr	r3, [pc, #28]	; (8014020 <__assert_func+0x30>)
 8014002:	9100      	str	r1, [sp, #0]
 8014004:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014008:	4906      	ldr	r1, [pc, #24]	; (8014024 <__assert_func+0x34>)
 801400a:	462b      	mov	r3, r5
 801400c:	f000 fbca 	bl	80147a4 <fiprintf>
 8014010:	f000 fbda 	bl	80147c8 <abort>
 8014014:	4b04      	ldr	r3, [pc, #16]	; (8014028 <__assert_func+0x38>)
 8014016:	461c      	mov	r4, r3
 8014018:	e7f3      	b.n	8014002 <__assert_func+0x12>
 801401a:	bf00      	nop
 801401c:	24000068 	.word	0x24000068
 8014020:	0801525a 	.word	0x0801525a
 8014024:	08015267 	.word	0x08015267
 8014028:	08015295 	.word	0x08015295

0801402c <_calloc_r>:
 801402c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801402e:	fba1 2402 	umull	r2, r4, r1, r2
 8014032:	b94c      	cbnz	r4, 8014048 <_calloc_r+0x1c>
 8014034:	4611      	mov	r1, r2
 8014036:	9201      	str	r2, [sp, #4]
 8014038:	f7fe fa02 	bl	8012440 <_malloc_r>
 801403c:	9a01      	ldr	r2, [sp, #4]
 801403e:	4605      	mov	r5, r0
 8014040:	b930      	cbnz	r0, 8014050 <_calloc_r+0x24>
 8014042:	4628      	mov	r0, r5
 8014044:	b003      	add	sp, #12
 8014046:	bd30      	pop	{r4, r5, pc}
 8014048:	220c      	movs	r2, #12
 801404a:	6002      	str	r2, [r0, #0]
 801404c:	2500      	movs	r5, #0
 801404e:	e7f8      	b.n	8014042 <_calloc_r+0x16>
 8014050:	4621      	mov	r1, r4
 8014052:	f7fd fafa 	bl	801164a <memset>
 8014056:	e7f4      	b.n	8014042 <_calloc_r+0x16>

08014058 <rshift>:
 8014058:	6903      	ldr	r3, [r0, #16]
 801405a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801405e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014062:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014066:	f100 0414 	add.w	r4, r0, #20
 801406a:	dd45      	ble.n	80140f8 <rshift+0xa0>
 801406c:	f011 011f 	ands.w	r1, r1, #31
 8014070:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014074:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014078:	d10c      	bne.n	8014094 <rshift+0x3c>
 801407a:	f100 0710 	add.w	r7, r0, #16
 801407e:	4629      	mov	r1, r5
 8014080:	42b1      	cmp	r1, r6
 8014082:	d334      	bcc.n	80140ee <rshift+0x96>
 8014084:	1a9b      	subs	r3, r3, r2
 8014086:	009b      	lsls	r3, r3, #2
 8014088:	1eea      	subs	r2, r5, #3
 801408a:	4296      	cmp	r6, r2
 801408c:	bf38      	it	cc
 801408e:	2300      	movcc	r3, #0
 8014090:	4423      	add	r3, r4
 8014092:	e015      	b.n	80140c0 <rshift+0x68>
 8014094:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014098:	f1c1 0820 	rsb	r8, r1, #32
 801409c:	40cf      	lsrs	r7, r1
 801409e:	f105 0e04 	add.w	lr, r5, #4
 80140a2:	46a1      	mov	r9, r4
 80140a4:	4576      	cmp	r6, lr
 80140a6:	46f4      	mov	ip, lr
 80140a8:	d815      	bhi.n	80140d6 <rshift+0x7e>
 80140aa:	1a9a      	subs	r2, r3, r2
 80140ac:	0092      	lsls	r2, r2, #2
 80140ae:	3a04      	subs	r2, #4
 80140b0:	3501      	adds	r5, #1
 80140b2:	42ae      	cmp	r6, r5
 80140b4:	bf38      	it	cc
 80140b6:	2200      	movcc	r2, #0
 80140b8:	18a3      	adds	r3, r4, r2
 80140ba:	50a7      	str	r7, [r4, r2]
 80140bc:	b107      	cbz	r7, 80140c0 <rshift+0x68>
 80140be:	3304      	adds	r3, #4
 80140c0:	1b1a      	subs	r2, r3, r4
 80140c2:	42a3      	cmp	r3, r4
 80140c4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80140c8:	bf08      	it	eq
 80140ca:	2300      	moveq	r3, #0
 80140cc:	6102      	str	r2, [r0, #16]
 80140ce:	bf08      	it	eq
 80140d0:	6143      	streq	r3, [r0, #20]
 80140d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80140d6:	f8dc c000 	ldr.w	ip, [ip]
 80140da:	fa0c fc08 	lsl.w	ip, ip, r8
 80140de:	ea4c 0707 	orr.w	r7, ip, r7
 80140e2:	f849 7b04 	str.w	r7, [r9], #4
 80140e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80140ea:	40cf      	lsrs	r7, r1
 80140ec:	e7da      	b.n	80140a4 <rshift+0x4c>
 80140ee:	f851 cb04 	ldr.w	ip, [r1], #4
 80140f2:	f847 cf04 	str.w	ip, [r7, #4]!
 80140f6:	e7c3      	b.n	8014080 <rshift+0x28>
 80140f8:	4623      	mov	r3, r4
 80140fa:	e7e1      	b.n	80140c0 <rshift+0x68>

080140fc <__hexdig_fun>:
 80140fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014100:	2b09      	cmp	r3, #9
 8014102:	d802      	bhi.n	801410a <__hexdig_fun+0xe>
 8014104:	3820      	subs	r0, #32
 8014106:	b2c0      	uxtb	r0, r0
 8014108:	4770      	bx	lr
 801410a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801410e:	2b05      	cmp	r3, #5
 8014110:	d801      	bhi.n	8014116 <__hexdig_fun+0x1a>
 8014112:	3847      	subs	r0, #71	; 0x47
 8014114:	e7f7      	b.n	8014106 <__hexdig_fun+0xa>
 8014116:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801411a:	2b05      	cmp	r3, #5
 801411c:	d801      	bhi.n	8014122 <__hexdig_fun+0x26>
 801411e:	3827      	subs	r0, #39	; 0x27
 8014120:	e7f1      	b.n	8014106 <__hexdig_fun+0xa>
 8014122:	2000      	movs	r0, #0
 8014124:	4770      	bx	lr
	...

08014128 <__gethex>:
 8014128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801412c:	4617      	mov	r7, r2
 801412e:	680a      	ldr	r2, [r1, #0]
 8014130:	b085      	sub	sp, #20
 8014132:	f102 0b02 	add.w	fp, r2, #2
 8014136:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801413a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801413e:	4681      	mov	r9, r0
 8014140:	468a      	mov	sl, r1
 8014142:	9302      	str	r3, [sp, #8]
 8014144:	32fe      	adds	r2, #254	; 0xfe
 8014146:	eb02 030b 	add.w	r3, r2, fp
 801414a:	46d8      	mov	r8, fp
 801414c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8014150:	9301      	str	r3, [sp, #4]
 8014152:	2830      	cmp	r0, #48	; 0x30
 8014154:	d0f7      	beq.n	8014146 <__gethex+0x1e>
 8014156:	f7ff ffd1 	bl	80140fc <__hexdig_fun>
 801415a:	4604      	mov	r4, r0
 801415c:	2800      	cmp	r0, #0
 801415e:	d138      	bne.n	80141d2 <__gethex+0xaa>
 8014160:	49a7      	ldr	r1, [pc, #668]	; (8014400 <__gethex+0x2d8>)
 8014162:	2201      	movs	r2, #1
 8014164:	4640      	mov	r0, r8
 8014166:	f7ff ff17 	bl	8013f98 <strncmp>
 801416a:	4606      	mov	r6, r0
 801416c:	2800      	cmp	r0, #0
 801416e:	d169      	bne.n	8014244 <__gethex+0x11c>
 8014170:	f898 0001 	ldrb.w	r0, [r8, #1]
 8014174:	465d      	mov	r5, fp
 8014176:	f7ff ffc1 	bl	80140fc <__hexdig_fun>
 801417a:	2800      	cmp	r0, #0
 801417c:	d064      	beq.n	8014248 <__gethex+0x120>
 801417e:	465a      	mov	r2, fp
 8014180:	7810      	ldrb	r0, [r2, #0]
 8014182:	2830      	cmp	r0, #48	; 0x30
 8014184:	4690      	mov	r8, r2
 8014186:	f102 0201 	add.w	r2, r2, #1
 801418a:	d0f9      	beq.n	8014180 <__gethex+0x58>
 801418c:	f7ff ffb6 	bl	80140fc <__hexdig_fun>
 8014190:	2301      	movs	r3, #1
 8014192:	fab0 f480 	clz	r4, r0
 8014196:	0964      	lsrs	r4, r4, #5
 8014198:	465e      	mov	r6, fp
 801419a:	9301      	str	r3, [sp, #4]
 801419c:	4642      	mov	r2, r8
 801419e:	4615      	mov	r5, r2
 80141a0:	3201      	adds	r2, #1
 80141a2:	7828      	ldrb	r0, [r5, #0]
 80141a4:	f7ff ffaa 	bl	80140fc <__hexdig_fun>
 80141a8:	2800      	cmp	r0, #0
 80141aa:	d1f8      	bne.n	801419e <__gethex+0x76>
 80141ac:	4994      	ldr	r1, [pc, #592]	; (8014400 <__gethex+0x2d8>)
 80141ae:	2201      	movs	r2, #1
 80141b0:	4628      	mov	r0, r5
 80141b2:	f7ff fef1 	bl	8013f98 <strncmp>
 80141b6:	b978      	cbnz	r0, 80141d8 <__gethex+0xb0>
 80141b8:	b946      	cbnz	r6, 80141cc <__gethex+0xa4>
 80141ba:	1c6e      	adds	r6, r5, #1
 80141bc:	4632      	mov	r2, r6
 80141be:	4615      	mov	r5, r2
 80141c0:	3201      	adds	r2, #1
 80141c2:	7828      	ldrb	r0, [r5, #0]
 80141c4:	f7ff ff9a 	bl	80140fc <__hexdig_fun>
 80141c8:	2800      	cmp	r0, #0
 80141ca:	d1f8      	bne.n	80141be <__gethex+0x96>
 80141cc:	1b73      	subs	r3, r6, r5
 80141ce:	009e      	lsls	r6, r3, #2
 80141d0:	e004      	b.n	80141dc <__gethex+0xb4>
 80141d2:	2400      	movs	r4, #0
 80141d4:	4626      	mov	r6, r4
 80141d6:	e7e1      	b.n	801419c <__gethex+0x74>
 80141d8:	2e00      	cmp	r6, #0
 80141da:	d1f7      	bne.n	80141cc <__gethex+0xa4>
 80141dc:	782b      	ldrb	r3, [r5, #0]
 80141de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80141e2:	2b50      	cmp	r3, #80	; 0x50
 80141e4:	d13d      	bne.n	8014262 <__gethex+0x13a>
 80141e6:	786b      	ldrb	r3, [r5, #1]
 80141e8:	2b2b      	cmp	r3, #43	; 0x2b
 80141ea:	d02f      	beq.n	801424c <__gethex+0x124>
 80141ec:	2b2d      	cmp	r3, #45	; 0x2d
 80141ee:	d031      	beq.n	8014254 <__gethex+0x12c>
 80141f0:	1c69      	adds	r1, r5, #1
 80141f2:	f04f 0b00 	mov.w	fp, #0
 80141f6:	7808      	ldrb	r0, [r1, #0]
 80141f8:	f7ff ff80 	bl	80140fc <__hexdig_fun>
 80141fc:	1e42      	subs	r2, r0, #1
 80141fe:	b2d2      	uxtb	r2, r2
 8014200:	2a18      	cmp	r2, #24
 8014202:	d82e      	bhi.n	8014262 <__gethex+0x13a>
 8014204:	f1a0 0210 	sub.w	r2, r0, #16
 8014208:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801420c:	f7ff ff76 	bl	80140fc <__hexdig_fun>
 8014210:	f100 3cff 	add.w	ip, r0, #4294967295
 8014214:	fa5f fc8c 	uxtb.w	ip, ip
 8014218:	f1bc 0f18 	cmp.w	ip, #24
 801421c:	d91d      	bls.n	801425a <__gethex+0x132>
 801421e:	f1bb 0f00 	cmp.w	fp, #0
 8014222:	d000      	beq.n	8014226 <__gethex+0xfe>
 8014224:	4252      	negs	r2, r2
 8014226:	4416      	add	r6, r2
 8014228:	f8ca 1000 	str.w	r1, [sl]
 801422c:	b1dc      	cbz	r4, 8014266 <__gethex+0x13e>
 801422e:	9b01      	ldr	r3, [sp, #4]
 8014230:	2b00      	cmp	r3, #0
 8014232:	bf14      	ite	ne
 8014234:	f04f 0800 	movne.w	r8, #0
 8014238:	f04f 0806 	moveq.w	r8, #6
 801423c:	4640      	mov	r0, r8
 801423e:	b005      	add	sp, #20
 8014240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014244:	4645      	mov	r5, r8
 8014246:	4626      	mov	r6, r4
 8014248:	2401      	movs	r4, #1
 801424a:	e7c7      	b.n	80141dc <__gethex+0xb4>
 801424c:	f04f 0b00 	mov.w	fp, #0
 8014250:	1ca9      	adds	r1, r5, #2
 8014252:	e7d0      	b.n	80141f6 <__gethex+0xce>
 8014254:	f04f 0b01 	mov.w	fp, #1
 8014258:	e7fa      	b.n	8014250 <__gethex+0x128>
 801425a:	230a      	movs	r3, #10
 801425c:	fb03 0002 	mla	r0, r3, r2, r0
 8014260:	e7d0      	b.n	8014204 <__gethex+0xdc>
 8014262:	4629      	mov	r1, r5
 8014264:	e7e0      	b.n	8014228 <__gethex+0x100>
 8014266:	eba5 0308 	sub.w	r3, r5, r8
 801426a:	3b01      	subs	r3, #1
 801426c:	4621      	mov	r1, r4
 801426e:	2b07      	cmp	r3, #7
 8014270:	dc0a      	bgt.n	8014288 <__gethex+0x160>
 8014272:	4648      	mov	r0, r9
 8014274:	f7fe f970 	bl	8012558 <_Balloc>
 8014278:	4604      	mov	r4, r0
 801427a:	b940      	cbnz	r0, 801428e <__gethex+0x166>
 801427c:	4b61      	ldr	r3, [pc, #388]	; (8014404 <__gethex+0x2dc>)
 801427e:	4602      	mov	r2, r0
 8014280:	21e4      	movs	r1, #228	; 0xe4
 8014282:	4861      	ldr	r0, [pc, #388]	; (8014408 <__gethex+0x2e0>)
 8014284:	f7ff feb4 	bl	8013ff0 <__assert_func>
 8014288:	3101      	adds	r1, #1
 801428a:	105b      	asrs	r3, r3, #1
 801428c:	e7ef      	b.n	801426e <__gethex+0x146>
 801428e:	f100 0a14 	add.w	sl, r0, #20
 8014292:	2300      	movs	r3, #0
 8014294:	495a      	ldr	r1, [pc, #360]	; (8014400 <__gethex+0x2d8>)
 8014296:	f8cd a004 	str.w	sl, [sp, #4]
 801429a:	469b      	mov	fp, r3
 801429c:	45a8      	cmp	r8, r5
 801429e:	d342      	bcc.n	8014326 <__gethex+0x1fe>
 80142a0:	9801      	ldr	r0, [sp, #4]
 80142a2:	f840 bb04 	str.w	fp, [r0], #4
 80142a6:	eba0 000a 	sub.w	r0, r0, sl
 80142aa:	1080      	asrs	r0, r0, #2
 80142ac:	6120      	str	r0, [r4, #16]
 80142ae:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80142b2:	4658      	mov	r0, fp
 80142b4:	f7fe fa42 	bl	801273c <__hi0bits>
 80142b8:	683d      	ldr	r5, [r7, #0]
 80142ba:	eba8 0000 	sub.w	r0, r8, r0
 80142be:	42a8      	cmp	r0, r5
 80142c0:	dd59      	ble.n	8014376 <__gethex+0x24e>
 80142c2:	eba0 0805 	sub.w	r8, r0, r5
 80142c6:	4641      	mov	r1, r8
 80142c8:	4620      	mov	r0, r4
 80142ca:	f7fe fdce 	bl	8012e6a <__any_on>
 80142ce:	4683      	mov	fp, r0
 80142d0:	b1b8      	cbz	r0, 8014302 <__gethex+0x1da>
 80142d2:	f108 33ff 	add.w	r3, r8, #4294967295
 80142d6:	1159      	asrs	r1, r3, #5
 80142d8:	f003 021f 	and.w	r2, r3, #31
 80142dc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80142e0:	f04f 0b01 	mov.w	fp, #1
 80142e4:	fa0b f202 	lsl.w	r2, fp, r2
 80142e8:	420a      	tst	r2, r1
 80142ea:	d00a      	beq.n	8014302 <__gethex+0x1da>
 80142ec:	455b      	cmp	r3, fp
 80142ee:	dd06      	ble.n	80142fe <__gethex+0x1d6>
 80142f0:	f1a8 0102 	sub.w	r1, r8, #2
 80142f4:	4620      	mov	r0, r4
 80142f6:	f7fe fdb8 	bl	8012e6a <__any_on>
 80142fa:	2800      	cmp	r0, #0
 80142fc:	d138      	bne.n	8014370 <__gethex+0x248>
 80142fe:	f04f 0b02 	mov.w	fp, #2
 8014302:	4641      	mov	r1, r8
 8014304:	4620      	mov	r0, r4
 8014306:	f7ff fea7 	bl	8014058 <rshift>
 801430a:	4446      	add	r6, r8
 801430c:	68bb      	ldr	r3, [r7, #8]
 801430e:	42b3      	cmp	r3, r6
 8014310:	da41      	bge.n	8014396 <__gethex+0x26e>
 8014312:	4621      	mov	r1, r4
 8014314:	4648      	mov	r0, r9
 8014316:	f7fe f95f 	bl	80125d8 <_Bfree>
 801431a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801431c:	2300      	movs	r3, #0
 801431e:	6013      	str	r3, [r2, #0]
 8014320:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8014324:	e78a      	b.n	801423c <__gethex+0x114>
 8014326:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801432a:	2a2e      	cmp	r2, #46	; 0x2e
 801432c:	d014      	beq.n	8014358 <__gethex+0x230>
 801432e:	2b20      	cmp	r3, #32
 8014330:	d106      	bne.n	8014340 <__gethex+0x218>
 8014332:	9b01      	ldr	r3, [sp, #4]
 8014334:	f843 bb04 	str.w	fp, [r3], #4
 8014338:	f04f 0b00 	mov.w	fp, #0
 801433c:	9301      	str	r3, [sp, #4]
 801433e:	465b      	mov	r3, fp
 8014340:	7828      	ldrb	r0, [r5, #0]
 8014342:	9303      	str	r3, [sp, #12]
 8014344:	f7ff feda 	bl	80140fc <__hexdig_fun>
 8014348:	9b03      	ldr	r3, [sp, #12]
 801434a:	f000 000f 	and.w	r0, r0, #15
 801434e:	4098      	lsls	r0, r3
 8014350:	ea4b 0b00 	orr.w	fp, fp, r0
 8014354:	3304      	adds	r3, #4
 8014356:	e7a1      	b.n	801429c <__gethex+0x174>
 8014358:	45a8      	cmp	r8, r5
 801435a:	d8e8      	bhi.n	801432e <__gethex+0x206>
 801435c:	2201      	movs	r2, #1
 801435e:	4628      	mov	r0, r5
 8014360:	9303      	str	r3, [sp, #12]
 8014362:	f7ff fe19 	bl	8013f98 <strncmp>
 8014366:	4926      	ldr	r1, [pc, #152]	; (8014400 <__gethex+0x2d8>)
 8014368:	9b03      	ldr	r3, [sp, #12]
 801436a:	2800      	cmp	r0, #0
 801436c:	d1df      	bne.n	801432e <__gethex+0x206>
 801436e:	e795      	b.n	801429c <__gethex+0x174>
 8014370:	f04f 0b03 	mov.w	fp, #3
 8014374:	e7c5      	b.n	8014302 <__gethex+0x1da>
 8014376:	da0b      	bge.n	8014390 <__gethex+0x268>
 8014378:	eba5 0800 	sub.w	r8, r5, r0
 801437c:	4621      	mov	r1, r4
 801437e:	4642      	mov	r2, r8
 8014380:	4648      	mov	r0, r9
 8014382:	f7fe fb43 	bl	8012a0c <__lshift>
 8014386:	eba6 0608 	sub.w	r6, r6, r8
 801438a:	4604      	mov	r4, r0
 801438c:	f100 0a14 	add.w	sl, r0, #20
 8014390:	f04f 0b00 	mov.w	fp, #0
 8014394:	e7ba      	b.n	801430c <__gethex+0x1e4>
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	42b3      	cmp	r3, r6
 801439a:	dd73      	ble.n	8014484 <__gethex+0x35c>
 801439c:	1b9e      	subs	r6, r3, r6
 801439e:	42b5      	cmp	r5, r6
 80143a0:	dc34      	bgt.n	801440c <__gethex+0x2e4>
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	2b02      	cmp	r3, #2
 80143a6:	d023      	beq.n	80143f0 <__gethex+0x2c8>
 80143a8:	2b03      	cmp	r3, #3
 80143aa:	d025      	beq.n	80143f8 <__gethex+0x2d0>
 80143ac:	2b01      	cmp	r3, #1
 80143ae:	d115      	bne.n	80143dc <__gethex+0x2b4>
 80143b0:	42b5      	cmp	r5, r6
 80143b2:	d113      	bne.n	80143dc <__gethex+0x2b4>
 80143b4:	2d01      	cmp	r5, #1
 80143b6:	d10b      	bne.n	80143d0 <__gethex+0x2a8>
 80143b8:	9a02      	ldr	r2, [sp, #8]
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	6013      	str	r3, [r2, #0]
 80143be:	2301      	movs	r3, #1
 80143c0:	6123      	str	r3, [r4, #16]
 80143c2:	f8ca 3000 	str.w	r3, [sl]
 80143c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80143c8:	f04f 0862 	mov.w	r8, #98	; 0x62
 80143cc:	601c      	str	r4, [r3, #0]
 80143ce:	e735      	b.n	801423c <__gethex+0x114>
 80143d0:	1e69      	subs	r1, r5, #1
 80143d2:	4620      	mov	r0, r4
 80143d4:	f7fe fd49 	bl	8012e6a <__any_on>
 80143d8:	2800      	cmp	r0, #0
 80143da:	d1ed      	bne.n	80143b8 <__gethex+0x290>
 80143dc:	4621      	mov	r1, r4
 80143de:	4648      	mov	r0, r9
 80143e0:	f7fe f8fa 	bl	80125d8 <_Bfree>
 80143e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80143e6:	2300      	movs	r3, #0
 80143e8:	6013      	str	r3, [r2, #0]
 80143ea:	f04f 0850 	mov.w	r8, #80	; 0x50
 80143ee:	e725      	b.n	801423c <__gethex+0x114>
 80143f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d1f2      	bne.n	80143dc <__gethex+0x2b4>
 80143f6:	e7df      	b.n	80143b8 <__gethex+0x290>
 80143f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d1dc      	bne.n	80143b8 <__gethex+0x290>
 80143fe:	e7ed      	b.n	80143dc <__gethex+0x2b4>
 8014400:	080150ec 	.word	0x080150ec
 8014404:	08014f85 	.word	0x08014f85
 8014408:	08015296 	.word	0x08015296
 801440c:	f106 38ff 	add.w	r8, r6, #4294967295
 8014410:	f1bb 0f00 	cmp.w	fp, #0
 8014414:	d133      	bne.n	801447e <__gethex+0x356>
 8014416:	f1b8 0f00 	cmp.w	r8, #0
 801441a:	d004      	beq.n	8014426 <__gethex+0x2fe>
 801441c:	4641      	mov	r1, r8
 801441e:	4620      	mov	r0, r4
 8014420:	f7fe fd23 	bl	8012e6a <__any_on>
 8014424:	4683      	mov	fp, r0
 8014426:	ea4f 1268 	mov.w	r2, r8, asr #5
 801442a:	2301      	movs	r3, #1
 801442c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014430:	f008 081f 	and.w	r8, r8, #31
 8014434:	fa03 f308 	lsl.w	r3, r3, r8
 8014438:	4213      	tst	r3, r2
 801443a:	4631      	mov	r1, r6
 801443c:	4620      	mov	r0, r4
 801443e:	bf18      	it	ne
 8014440:	f04b 0b02 	orrne.w	fp, fp, #2
 8014444:	1bad      	subs	r5, r5, r6
 8014446:	f7ff fe07 	bl	8014058 <rshift>
 801444a:	687e      	ldr	r6, [r7, #4]
 801444c:	f04f 0802 	mov.w	r8, #2
 8014450:	f1bb 0f00 	cmp.w	fp, #0
 8014454:	d04a      	beq.n	80144ec <__gethex+0x3c4>
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	2b02      	cmp	r3, #2
 801445a:	d016      	beq.n	801448a <__gethex+0x362>
 801445c:	2b03      	cmp	r3, #3
 801445e:	d018      	beq.n	8014492 <__gethex+0x36a>
 8014460:	2b01      	cmp	r3, #1
 8014462:	d109      	bne.n	8014478 <__gethex+0x350>
 8014464:	f01b 0f02 	tst.w	fp, #2
 8014468:	d006      	beq.n	8014478 <__gethex+0x350>
 801446a:	f8da 3000 	ldr.w	r3, [sl]
 801446e:	ea4b 0b03 	orr.w	fp, fp, r3
 8014472:	f01b 0f01 	tst.w	fp, #1
 8014476:	d10f      	bne.n	8014498 <__gethex+0x370>
 8014478:	f048 0810 	orr.w	r8, r8, #16
 801447c:	e036      	b.n	80144ec <__gethex+0x3c4>
 801447e:	f04f 0b01 	mov.w	fp, #1
 8014482:	e7d0      	b.n	8014426 <__gethex+0x2fe>
 8014484:	f04f 0801 	mov.w	r8, #1
 8014488:	e7e2      	b.n	8014450 <__gethex+0x328>
 801448a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801448c:	f1c3 0301 	rsb	r3, r3, #1
 8014490:	930f      	str	r3, [sp, #60]	; 0x3c
 8014492:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014494:	2b00      	cmp	r3, #0
 8014496:	d0ef      	beq.n	8014478 <__gethex+0x350>
 8014498:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801449c:	f104 0214 	add.w	r2, r4, #20
 80144a0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80144a4:	9301      	str	r3, [sp, #4]
 80144a6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80144aa:	2300      	movs	r3, #0
 80144ac:	4694      	mov	ip, r2
 80144ae:	f852 1b04 	ldr.w	r1, [r2], #4
 80144b2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80144b6:	d01e      	beq.n	80144f6 <__gethex+0x3ce>
 80144b8:	3101      	adds	r1, #1
 80144ba:	f8cc 1000 	str.w	r1, [ip]
 80144be:	f1b8 0f02 	cmp.w	r8, #2
 80144c2:	f104 0214 	add.w	r2, r4, #20
 80144c6:	d13d      	bne.n	8014544 <__gethex+0x41c>
 80144c8:	683b      	ldr	r3, [r7, #0]
 80144ca:	3b01      	subs	r3, #1
 80144cc:	42ab      	cmp	r3, r5
 80144ce:	d10b      	bne.n	80144e8 <__gethex+0x3c0>
 80144d0:	1169      	asrs	r1, r5, #5
 80144d2:	2301      	movs	r3, #1
 80144d4:	f005 051f 	and.w	r5, r5, #31
 80144d8:	fa03 f505 	lsl.w	r5, r3, r5
 80144dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80144e0:	421d      	tst	r5, r3
 80144e2:	bf18      	it	ne
 80144e4:	f04f 0801 	movne.w	r8, #1
 80144e8:	f048 0820 	orr.w	r8, r8, #32
 80144ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80144ee:	601c      	str	r4, [r3, #0]
 80144f0:	9b02      	ldr	r3, [sp, #8]
 80144f2:	601e      	str	r6, [r3, #0]
 80144f4:	e6a2      	b.n	801423c <__gethex+0x114>
 80144f6:	4290      	cmp	r0, r2
 80144f8:	f842 3c04 	str.w	r3, [r2, #-4]
 80144fc:	d8d6      	bhi.n	80144ac <__gethex+0x384>
 80144fe:	68a2      	ldr	r2, [r4, #8]
 8014500:	4593      	cmp	fp, r2
 8014502:	db17      	blt.n	8014534 <__gethex+0x40c>
 8014504:	6861      	ldr	r1, [r4, #4]
 8014506:	4648      	mov	r0, r9
 8014508:	3101      	adds	r1, #1
 801450a:	f7fe f825 	bl	8012558 <_Balloc>
 801450e:	4682      	mov	sl, r0
 8014510:	b918      	cbnz	r0, 801451a <__gethex+0x3f2>
 8014512:	4b1b      	ldr	r3, [pc, #108]	; (8014580 <__gethex+0x458>)
 8014514:	4602      	mov	r2, r0
 8014516:	2184      	movs	r1, #132	; 0x84
 8014518:	e6b3      	b.n	8014282 <__gethex+0x15a>
 801451a:	6922      	ldr	r2, [r4, #16]
 801451c:	3202      	adds	r2, #2
 801451e:	f104 010c 	add.w	r1, r4, #12
 8014522:	0092      	lsls	r2, r2, #2
 8014524:	300c      	adds	r0, #12
 8014526:	f7fd f90f 	bl	8011748 <memcpy>
 801452a:	4621      	mov	r1, r4
 801452c:	4648      	mov	r0, r9
 801452e:	f7fe f853 	bl	80125d8 <_Bfree>
 8014532:	4654      	mov	r4, sl
 8014534:	6922      	ldr	r2, [r4, #16]
 8014536:	1c51      	adds	r1, r2, #1
 8014538:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801453c:	6121      	str	r1, [r4, #16]
 801453e:	2101      	movs	r1, #1
 8014540:	6151      	str	r1, [r2, #20]
 8014542:	e7bc      	b.n	80144be <__gethex+0x396>
 8014544:	6921      	ldr	r1, [r4, #16]
 8014546:	4559      	cmp	r1, fp
 8014548:	dd0b      	ble.n	8014562 <__gethex+0x43a>
 801454a:	2101      	movs	r1, #1
 801454c:	4620      	mov	r0, r4
 801454e:	f7ff fd83 	bl	8014058 <rshift>
 8014552:	68bb      	ldr	r3, [r7, #8]
 8014554:	3601      	adds	r6, #1
 8014556:	42b3      	cmp	r3, r6
 8014558:	f6ff aedb 	blt.w	8014312 <__gethex+0x1ea>
 801455c:	f04f 0801 	mov.w	r8, #1
 8014560:	e7c2      	b.n	80144e8 <__gethex+0x3c0>
 8014562:	f015 051f 	ands.w	r5, r5, #31
 8014566:	d0f9      	beq.n	801455c <__gethex+0x434>
 8014568:	9b01      	ldr	r3, [sp, #4]
 801456a:	441a      	add	r2, r3
 801456c:	f1c5 0520 	rsb	r5, r5, #32
 8014570:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8014574:	f7fe f8e2 	bl	801273c <__hi0bits>
 8014578:	42a8      	cmp	r0, r5
 801457a:	dbe6      	blt.n	801454a <__gethex+0x422>
 801457c:	e7ee      	b.n	801455c <__gethex+0x434>
 801457e:	bf00      	nop
 8014580:	08014f85 	.word	0x08014f85

08014584 <L_shift>:
 8014584:	f1c2 0208 	rsb	r2, r2, #8
 8014588:	0092      	lsls	r2, r2, #2
 801458a:	b570      	push	{r4, r5, r6, lr}
 801458c:	f1c2 0620 	rsb	r6, r2, #32
 8014590:	6843      	ldr	r3, [r0, #4]
 8014592:	6804      	ldr	r4, [r0, #0]
 8014594:	fa03 f506 	lsl.w	r5, r3, r6
 8014598:	432c      	orrs	r4, r5
 801459a:	40d3      	lsrs	r3, r2
 801459c:	6004      	str	r4, [r0, #0]
 801459e:	f840 3f04 	str.w	r3, [r0, #4]!
 80145a2:	4288      	cmp	r0, r1
 80145a4:	d3f4      	bcc.n	8014590 <L_shift+0xc>
 80145a6:	bd70      	pop	{r4, r5, r6, pc}

080145a8 <__match>:
 80145a8:	b530      	push	{r4, r5, lr}
 80145aa:	6803      	ldr	r3, [r0, #0]
 80145ac:	3301      	adds	r3, #1
 80145ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80145b2:	b914      	cbnz	r4, 80145ba <__match+0x12>
 80145b4:	6003      	str	r3, [r0, #0]
 80145b6:	2001      	movs	r0, #1
 80145b8:	bd30      	pop	{r4, r5, pc}
 80145ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80145be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80145c2:	2d19      	cmp	r5, #25
 80145c4:	bf98      	it	ls
 80145c6:	3220      	addls	r2, #32
 80145c8:	42a2      	cmp	r2, r4
 80145ca:	d0f0      	beq.n	80145ae <__match+0x6>
 80145cc:	2000      	movs	r0, #0
 80145ce:	e7f3      	b.n	80145b8 <__match+0x10>

080145d0 <__hexnan>:
 80145d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145d4:	680b      	ldr	r3, [r1, #0]
 80145d6:	6801      	ldr	r1, [r0, #0]
 80145d8:	115e      	asrs	r6, r3, #5
 80145da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80145de:	f013 031f 	ands.w	r3, r3, #31
 80145e2:	b087      	sub	sp, #28
 80145e4:	bf18      	it	ne
 80145e6:	3604      	addne	r6, #4
 80145e8:	2500      	movs	r5, #0
 80145ea:	1f37      	subs	r7, r6, #4
 80145ec:	4682      	mov	sl, r0
 80145ee:	4690      	mov	r8, r2
 80145f0:	9301      	str	r3, [sp, #4]
 80145f2:	f846 5c04 	str.w	r5, [r6, #-4]
 80145f6:	46b9      	mov	r9, r7
 80145f8:	463c      	mov	r4, r7
 80145fa:	9502      	str	r5, [sp, #8]
 80145fc:	46ab      	mov	fp, r5
 80145fe:	784a      	ldrb	r2, [r1, #1]
 8014600:	1c4b      	adds	r3, r1, #1
 8014602:	9303      	str	r3, [sp, #12]
 8014604:	b342      	cbz	r2, 8014658 <__hexnan+0x88>
 8014606:	4610      	mov	r0, r2
 8014608:	9105      	str	r1, [sp, #20]
 801460a:	9204      	str	r2, [sp, #16]
 801460c:	f7ff fd76 	bl	80140fc <__hexdig_fun>
 8014610:	2800      	cmp	r0, #0
 8014612:	d14f      	bne.n	80146b4 <__hexnan+0xe4>
 8014614:	9a04      	ldr	r2, [sp, #16]
 8014616:	9905      	ldr	r1, [sp, #20]
 8014618:	2a20      	cmp	r2, #32
 801461a:	d818      	bhi.n	801464e <__hexnan+0x7e>
 801461c:	9b02      	ldr	r3, [sp, #8]
 801461e:	459b      	cmp	fp, r3
 8014620:	dd13      	ble.n	801464a <__hexnan+0x7a>
 8014622:	454c      	cmp	r4, r9
 8014624:	d206      	bcs.n	8014634 <__hexnan+0x64>
 8014626:	2d07      	cmp	r5, #7
 8014628:	dc04      	bgt.n	8014634 <__hexnan+0x64>
 801462a:	462a      	mov	r2, r5
 801462c:	4649      	mov	r1, r9
 801462e:	4620      	mov	r0, r4
 8014630:	f7ff ffa8 	bl	8014584 <L_shift>
 8014634:	4544      	cmp	r4, r8
 8014636:	d950      	bls.n	80146da <__hexnan+0x10a>
 8014638:	2300      	movs	r3, #0
 801463a:	f1a4 0904 	sub.w	r9, r4, #4
 801463e:	f844 3c04 	str.w	r3, [r4, #-4]
 8014642:	f8cd b008 	str.w	fp, [sp, #8]
 8014646:	464c      	mov	r4, r9
 8014648:	461d      	mov	r5, r3
 801464a:	9903      	ldr	r1, [sp, #12]
 801464c:	e7d7      	b.n	80145fe <__hexnan+0x2e>
 801464e:	2a29      	cmp	r2, #41	; 0x29
 8014650:	d155      	bne.n	80146fe <__hexnan+0x12e>
 8014652:	3102      	adds	r1, #2
 8014654:	f8ca 1000 	str.w	r1, [sl]
 8014658:	f1bb 0f00 	cmp.w	fp, #0
 801465c:	d04f      	beq.n	80146fe <__hexnan+0x12e>
 801465e:	454c      	cmp	r4, r9
 8014660:	d206      	bcs.n	8014670 <__hexnan+0xa0>
 8014662:	2d07      	cmp	r5, #7
 8014664:	dc04      	bgt.n	8014670 <__hexnan+0xa0>
 8014666:	462a      	mov	r2, r5
 8014668:	4649      	mov	r1, r9
 801466a:	4620      	mov	r0, r4
 801466c:	f7ff ff8a 	bl	8014584 <L_shift>
 8014670:	4544      	cmp	r4, r8
 8014672:	d934      	bls.n	80146de <__hexnan+0x10e>
 8014674:	f1a8 0204 	sub.w	r2, r8, #4
 8014678:	4623      	mov	r3, r4
 801467a:	f853 1b04 	ldr.w	r1, [r3], #4
 801467e:	f842 1f04 	str.w	r1, [r2, #4]!
 8014682:	429f      	cmp	r7, r3
 8014684:	d2f9      	bcs.n	801467a <__hexnan+0xaa>
 8014686:	1b3b      	subs	r3, r7, r4
 8014688:	f023 0303 	bic.w	r3, r3, #3
 801468c:	3304      	adds	r3, #4
 801468e:	3e03      	subs	r6, #3
 8014690:	3401      	adds	r4, #1
 8014692:	42a6      	cmp	r6, r4
 8014694:	bf38      	it	cc
 8014696:	2304      	movcc	r3, #4
 8014698:	4443      	add	r3, r8
 801469a:	2200      	movs	r2, #0
 801469c:	f843 2b04 	str.w	r2, [r3], #4
 80146a0:	429f      	cmp	r7, r3
 80146a2:	d2fb      	bcs.n	801469c <__hexnan+0xcc>
 80146a4:	683b      	ldr	r3, [r7, #0]
 80146a6:	b91b      	cbnz	r3, 80146b0 <__hexnan+0xe0>
 80146a8:	4547      	cmp	r7, r8
 80146aa:	d126      	bne.n	80146fa <__hexnan+0x12a>
 80146ac:	2301      	movs	r3, #1
 80146ae:	603b      	str	r3, [r7, #0]
 80146b0:	2005      	movs	r0, #5
 80146b2:	e025      	b.n	8014700 <__hexnan+0x130>
 80146b4:	3501      	adds	r5, #1
 80146b6:	2d08      	cmp	r5, #8
 80146b8:	f10b 0b01 	add.w	fp, fp, #1
 80146bc:	dd06      	ble.n	80146cc <__hexnan+0xfc>
 80146be:	4544      	cmp	r4, r8
 80146c0:	d9c3      	bls.n	801464a <__hexnan+0x7a>
 80146c2:	2300      	movs	r3, #0
 80146c4:	f844 3c04 	str.w	r3, [r4, #-4]
 80146c8:	2501      	movs	r5, #1
 80146ca:	3c04      	subs	r4, #4
 80146cc:	6822      	ldr	r2, [r4, #0]
 80146ce:	f000 000f 	and.w	r0, r0, #15
 80146d2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80146d6:	6020      	str	r0, [r4, #0]
 80146d8:	e7b7      	b.n	801464a <__hexnan+0x7a>
 80146da:	2508      	movs	r5, #8
 80146dc:	e7b5      	b.n	801464a <__hexnan+0x7a>
 80146de:	9b01      	ldr	r3, [sp, #4]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d0df      	beq.n	80146a4 <__hexnan+0xd4>
 80146e4:	f1c3 0320 	rsb	r3, r3, #32
 80146e8:	f04f 32ff 	mov.w	r2, #4294967295
 80146ec:	40da      	lsrs	r2, r3
 80146ee:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80146f2:	4013      	ands	r3, r2
 80146f4:	f846 3c04 	str.w	r3, [r6, #-4]
 80146f8:	e7d4      	b.n	80146a4 <__hexnan+0xd4>
 80146fa:	3f04      	subs	r7, #4
 80146fc:	e7d2      	b.n	80146a4 <__hexnan+0xd4>
 80146fe:	2004      	movs	r0, #4
 8014700:	b007      	add	sp, #28
 8014702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014706 <__ascii_mbtowc>:
 8014706:	b082      	sub	sp, #8
 8014708:	b901      	cbnz	r1, 801470c <__ascii_mbtowc+0x6>
 801470a:	a901      	add	r1, sp, #4
 801470c:	b142      	cbz	r2, 8014720 <__ascii_mbtowc+0x1a>
 801470e:	b14b      	cbz	r3, 8014724 <__ascii_mbtowc+0x1e>
 8014710:	7813      	ldrb	r3, [r2, #0]
 8014712:	600b      	str	r3, [r1, #0]
 8014714:	7812      	ldrb	r2, [r2, #0]
 8014716:	1e10      	subs	r0, r2, #0
 8014718:	bf18      	it	ne
 801471a:	2001      	movne	r0, #1
 801471c:	b002      	add	sp, #8
 801471e:	4770      	bx	lr
 8014720:	4610      	mov	r0, r2
 8014722:	e7fb      	b.n	801471c <__ascii_mbtowc+0x16>
 8014724:	f06f 0001 	mvn.w	r0, #1
 8014728:	e7f8      	b.n	801471c <__ascii_mbtowc+0x16>

0801472a <_realloc_r>:
 801472a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801472e:	4680      	mov	r8, r0
 8014730:	4614      	mov	r4, r2
 8014732:	460e      	mov	r6, r1
 8014734:	b921      	cbnz	r1, 8014740 <_realloc_r+0x16>
 8014736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801473a:	4611      	mov	r1, r2
 801473c:	f7fd be80 	b.w	8012440 <_malloc_r>
 8014740:	b92a      	cbnz	r2, 801474e <_realloc_r+0x24>
 8014742:	f7fd fe09 	bl	8012358 <_free_r>
 8014746:	4625      	mov	r5, r4
 8014748:	4628      	mov	r0, r5
 801474a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801474e:	f000 f842 	bl	80147d6 <_malloc_usable_size_r>
 8014752:	4284      	cmp	r4, r0
 8014754:	4607      	mov	r7, r0
 8014756:	d802      	bhi.n	801475e <_realloc_r+0x34>
 8014758:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801475c:	d812      	bhi.n	8014784 <_realloc_r+0x5a>
 801475e:	4621      	mov	r1, r4
 8014760:	4640      	mov	r0, r8
 8014762:	f7fd fe6d 	bl	8012440 <_malloc_r>
 8014766:	4605      	mov	r5, r0
 8014768:	2800      	cmp	r0, #0
 801476a:	d0ed      	beq.n	8014748 <_realloc_r+0x1e>
 801476c:	42bc      	cmp	r4, r7
 801476e:	4622      	mov	r2, r4
 8014770:	4631      	mov	r1, r6
 8014772:	bf28      	it	cs
 8014774:	463a      	movcs	r2, r7
 8014776:	f7fc ffe7 	bl	8011748 <memcpy>
 801477a:	4631      	mov	r1, r6
 801477c:	4640      	mov	r0, r8
 801477e:	f7fd fdeb 	bl	8012358 <_free_r>
 8014782:	e7e1      	b.n	8014748 <_realloc_r+0x1e>
 8014784:	4635      	mov	r5, r6
 8014786:	e7df      	b.n	8014748 <_realloc_r+0x1e>

08014788 <__ascii_wctomb>:
 8014788:	b149      	cbz	r1, 801479e <__ascii_wctomb+0x16>
 801478a:	2aff      	cmp	r2, #255	; 0xff
 801478c:	bf85      	ittet	hi
 801478e:	238a      	movhi	r3, #138	; 0x8a
 8014790:	6003      	strhi	r3, [r0, #0]
 8014792:	700a      	strbls	r2, [r1, #0]
 8014794:	f04f 30ff 	movhi.w	r0, #4294967295
 8014798:	bf98      	it	ls
 801479a:	2001      	movls	r0, #1
 801479c:	4770      	bx	lr
 801479e:	4608      	mov	r0, r1
 80147a0:	4770      	bx	lr
	...

080147a4 <fiprintf>:
 80147a4:	b40e      	push	{r1, r2, r3}
 80147a6:	b503      	push	{r0, r1, lr}
 80147a8:	4601      	mov	r1, r0
 80147aa:	ab03      	add	r3, sp, #12
 80147ac:	4805      	ldr	r0, [pc, #20]	; (80147c4 <fiprintf+0x20>)
 80147ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80147b2:	6800      	ldr	r0, [r0, #0]
 80147b4:	9301      	str	r3, [sp, #4]
 80147b6:	f000 f83f 	bl	8014838 <_vfiprintf_r>
 80147ba:	b002      	add	sp, #8
 80147bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80147c0:	b003      	add	sp, #12
 80147c2:	4770      	bx	lr
 80147c4:	24000068 	.word	0x24000068

080147c8 <abort>:
 80147c8:	b508      	push	{r3, lr}
 80147ca:	2006      	movs	r0, #6
 80147cc:	f000 fa0c 	bl	8014be8 <raise>
 80147d0:	2001      	movs	r0, #1
 80147d2:	f7ee fb0b 	bl	8002dec <_exit>

080147d6 <_malloc_usable_size_r>:
 80147d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80147da:	1f18      	subs	r0, r3, #4
 80147dc:	2b00      	cmp	r3, #0
 80147de:	bfbc      	itt	lt
 80147e0:	580b      	ldrlt	r3, [r1, r0]
 80147e2:	18c0      	addlt	r0, r0, r3
 80147e4:	4770      	bx	lr

080147e6 <__sfputc_r>:
 80147e6:	6893      	ldr	r3, [r2, #8]
 80147e8:	3b01      	subs	r3, #1
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	b410      	push	{r4}
 80147ee:	6093      	str	r3, [r2, #8]
 80147f0:	da08      	bge.n	8014804 <__sfputc_r+0x1e>
 80147f2:	6994      	ldr	r4, [r2, #24]
 80147f4:	42a3      	cmp	r3, r4
 80147f6:	db01      	blt.n	80147fc <__sfputc_r+0x16>
 80147f8:	290a      	cmp	r1, #10
 80147fa:	d103      	bne.n	8014804 <__sfputc_r+0x1e>
 80147fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014800:	f000 b934 	b.w	8014a6c <__swbuf_r>
 8014804:	6813      	ldr	r3, [r2, #0]
 8014806:	1c58      	adds	r0, r3, #1
 8014808:	6010      	str	r0, [r2, #0]
 801480a:	7019      	strb	r1, [r3, #0]
 801480c:	4608      	mov	r0, r1
 801480e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014812:	4770      	bx	lr

08014814 <__sfputs_r>:
 8014814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014816:	4606      	mov	r6, r0
 8014818:	460f      	mov	r7, r1
 801481a:	4614      	mov	r4, r2
 801481c:	18d5      	adds	r5, r2, r3
 801481e:	42ac      	cmp	r4, r5
 8014820:	d101      	bne.n	8014826 <__sfputs_r+0x12>
 8014822:	2000      	movs	r0, #0
 8014824:	e007      	b.n	8014836 <__sfputs_r+0x22>
 8014826:	f814 1b01 	ldrb.w	r1, [r4], #1
 801482a:	463a      	mov	r2, r7
 801482c:	4630      	mov	r0, r6
 801482e:	f7ff ffda 	bl	80147e6 <__sfputc_r>
 8014832:	1c43      	adds	r3, r0, #1
 8014834:	d1f3      	bne.n	801481e <__sfputs_r+0xa>
 8014836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014838 <_vfiprintf_r>:
 8014838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801483c:	460d      	mov	r5, r1
 801483e:	b09d      	sub	sp, #116	; 0x74
 8014840:	4614      	mov	r4, r2
 8014842:	4698      	mov	r8, r3
 8014844:	4606      	mov	r6, r0
 8014846:	b118      	cbz	r0, 8014850 <_vfiprintf_r+0x18>
 8014848:	6a03      	ldr	r3, [r0, #32]
 801484a:	b90b      	cbnz	r3, 8014850 <_vfiprintf_r+0x18>
 801484c:	f7fc fe64 	bl	8011518 <__sinit>
 8014850:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014852:	07d9      	lsls	r1, r3, #31
 8014854:	d405      	bmi.n	8014862 <_vfiprintf_r+0x2a>
 8014856:	89ab      	ldrh	r3, [r5, #12]
 8014858:	059a      	lsls	r2, r3, #22
 801485a:	d402      	bmi.n	8014862 <_vfiprintf_r+0x2a>
 801485c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801485e:	f7fc ff71 	bl	8011744 <__retarget_lock_acquire_recursive>
 8014862:	89ab      	ldrh	r3, [r5, #12]
 8014864:	071b      	lsls	r3, r3, #28
 8014866:	d501      	bpl.n	801486c <_vfiprintf_r+0x34>
 8014868:	692b      	ldr	r3, [r5, #16]
 801486a:	b99b      	cbnz	r3, 8014894 <_vfiprintf_r+0x5c>
 801486c:	4629      	mov	r1, r5
 801486e:	4630      	mov	r0, r6
 8014870:	f000 f93a 	bl	8014ae8 <__swsetup_r>
 8014874:	b170      	cbz	r0, 8014894 <_vfiprintf_r+0x5c>
 8014876:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014878:	07dc      	lsls	r4, r3, #31
 801487a:	d504      	bpl.n	8014886 <_vfiprintf_r+0x4e>
 801487c:	f04f 30ff 	mov.w	r0, #4294967295
 8014880:	b01d      	add	sp, #116	; 0x74
 8014882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014886:	89ab      	ldrh	r3, [r5, #12]
 8014888:	0598      	lsls	r0, r3, #22
 801488a:	d4f7      	bmi.n	801487c <_vfiprintf_r+0x44>
 801488c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801488e:	f7fc ff5a 	bl	8011746 <__retarget_lock_release_recursive>
 8014892:	e7f3      	b.n	801487c <_vfiprintf_r+0x44>
 8014894:	2300      	movs	r3, #0
 8014896:	9309      	str	r3, [sp, #36]	; 0x24
 8014898:	2320      	movs	r3, #32
 801489a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801489e:	f8cd 800c 	str.w	r8, [sp, #12]
 80148a2:	2330      	movs	r3, #48	; 0x30
 80148a4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8014a58 <_vfiprintf_r+0x220>
 80148a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80148ac:	f04f 0901 	mov.w	r9, #1
 80148b0:	4623      	mov	r3, r4
 80148b2:	469a      	mov	sl, r3
 80148b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80148b8:	b10a      	cbz	r2, 80148be <_vfiprintf_r+0x86>
 80148ba:	2a25      	cmp	r2, #37	; 0x25
 80148bc:	d1f9      	bne.n	80148b2 <_vfiprintf_r+0x7a>
 80148be:	ebba 0b04 	subs.w	fp, sl, r4
 80148c2:	d00b      	beq.n	80148dc <_vfiprintf_r+0xa4>
 80148c4:	465b      	mov	r3, fp
 80148c6:	4622      	mov	r2, r4
 80148c8:	4629      	mov	r1, r5
 80148ca:	4630      	mov	r0, r6
 80148cc:	f7ff ffa2 	bl	8014814 <__sfputs_r>
 80148d0:	3001      	adds	r0, #1
 80148d2:	f000 80a9 	beq.w	8014a28 <_vfiprintf_r+0x1f0>
 80148d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80148d8:	445a      	add	r2, fp
 80148da:	9209      	str	r2, [sp, #36]	; 0x24
 80148dc:	f89a 3000 	ldrb.w	r3, [sl]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	f000 80a1 	beq.w	8014a28 <_vfiprintf_r+0x1f0>
 80148e6:	2300      	movs	r3, #0
 80148e8:	f04f 32ff 	mov.w	r2, #4294967295
 80148ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80148f0:	f10a 0a01 	add.w	sl, sl, #1
 80148f4:	9304      	str	r3, [sp, #16]
 80148f6:	9307      	str	r3, [sp, #28]
 80148f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80148fc:	931a      	str	r3, [sp, #104]	; 0x68
 80148fe:	4654      	mov	r4, sl
 8014900:	2205      	movs	r2, #5
 8014902:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014906:	4854      	ldr	r0, [pc, #336]	; (8014a58 <_vfiprintf_r+0x220>)
 8014908:	f7eb fd02 	bl	8000310 <memchr>
 801490c:	9a04      	ldr	r2, [sp, #16]
 801490e:	b9d8      	cbnz	r0, 8014948 <_vfiprintf_r+0x110>
 8014910:	06d1      	lsls	r1, r2, #27
 8014912:	bf44      	itt	mi
 8014914:	2320      	movmi	r3, #32
 8014916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801491a:	0713      	lsls	r3, r2, #28
 801491c:	bf44      	itt	mi
 801491e:	232b      	movmi	r3, #43	; 0x2b
 8014920:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014924:	f89a 3000 	ldrb.w	r3, [sl]
 8014928:	2b2a      	cmp	r3, #42	; 0x2a
 801492a:	d015      	beq.n	8014958 <_vfiprintf_r+0x120>
 801492c:	9a07      	ldr	r2, [sp, #28]
 801492e:	4654      	mov	r4, sl
 8014930:	2000      	movs	r0, #0
 8014932:	f04f 0c0a 	mov.w	ip, #10
 8014936:	4621      	mov	r1, r4
 8014938:	f811 3b01 	ldrb.w	r3, [r1], #1
 801493c:	3b30      	subs	r3, #48	; 0x30
 801493e:	2b09      	cmp	r3, #9
 8014940:	d94d      	bls.n	80149de <_vfiprintf_r+0x1a6>
 8014942:	b1b0      	cbz	r0, 8014972 <_vfiprintf_r+0x13a>
 8014944:	9207      	str	r2, [sp, #28]
 8014946:	e014      	b.n	8014972 <_vfiprintf_r+0x13a>
 8014948:	eba0 0308 	sub.w	r3, r0, r8
 801494c:	fa09 f303 	lsl.w	r3, r9, r3
 8014950:	4313      	orrs	r3, r2
 8014952:	9304      	str	r3, [sp, #16]
 8014954:	46a2      	mov	sl, r4
 8014956:	e7d2      	b.n	80148fe <_vfiprintf_r+0xc6>
 8014958:	9b03      	ldr	r3, [sp, #12]
 801495a:	1d19      	adds	r1, r3, #4
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	9103      	str	r1, [sp, #12]
 8014960:	2b00      	cmp	r3, #0
 8014962:	bfbb      	ittet	lt
 8014964:	425b      	neglt	r3, r3
 8014966:	f042 0202 	orrlt.w	r2, r2, #2
 801496a:	9307      	strge	r3, [sp, #28]
 801496c:	9307      	strlt	r3, [sp, #28]
 801496e:	bfb8      	it	lt
 8014970:	9204      	strlt	r2, [sp, #16]
 8014972:	7823      	ldrb	r3, [r4, #0]
 8014974:	2b2e      	cmp	r3, #46	; 0x2e
 8014976:	d10c      	bne.n	8014992 <_vfiprintf_r+0x15a>
 8014978:	7863      	ldrb	r3, [r4, #1]
 801497a:	2b2a      	cmp	r3, #42	; 0x2a
 801497c:	d134      	bne.n	80149e8 <_vfiprintf_r+0x1b0>
 801497e:	9b03      	ldr	r3, [sp, #12]
 8014980:	1d1a      	adds	r2, r3, #4
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	9203      	str	r2, [sp, #12]
 8014986:	2b00      	cmp	r3, #0
 8014988:	bfb8      	it	lt
 801498a:	f04f 33ff 	movlt.w	r3, #4294967295
 801498e:	3402      	adds	r4, #2
 8014990:	9305      	str	r3, [sp, #20]
 8014992:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8014a68 <_vfiprintf_r+0x230>
 8014996:	7821      	ldrb	r1, [r4, #0]
 8014998:	2203      	movs	r2, #3
 801499a:	4650      	mov	r0, sl
 801499c:	f7eb fcb8 	bl	8000310 <memchr>
 80149a0:	b138      	cbz	r0, 80149b2 <_vfiprintf_r+0x17a>
 80149a2:	9b04      	ldr	r3, [sp, #16]
 80149a4:	eba0 000a 	sub.w	r0, r0, sl
 80149a8:	2240      	movs	r2, #64	; 0x40
 80149aa:	4082      	lsls	r2, r0
 80149ac:	4313      	orrs	r3, r2
 80149ae:	3401      	adds	r4, #1
 80149b0:	9304      	str	r3, [sp, #16]
 80149b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80149b6:	4829      	ldr	r0, [pc, #164]	; (8014a5c <_vfiprintf_r+0x224>)
 80149b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80149bc:	2206      	movs	r2, #6
 80149be:	f7eb fca7 	bl	8000310 <memchr>
 80149c2:	2800      	cmp	r0, #0
 80149c4:	d03f      	beq.n	8014a46 <_vfiprintf_r+0x20e>
 80149c6:	4b26      	ldr	r3, [pc, #152]	; (8014a60 <_vfiprintf_r+0x228>)
 80149c8:	bb1b      	cbnz	r3, 8014a12 <_vfiprintf_r+0x1da>
 80149ca:	9b03      	ldr	r3, [sp, #12]
 80149cc:	3307      	adds	r3, #7
 80149ce:	f023 0307 	bic.w	r3, r3, #7
 80149d2:	3308      	adds	r3, #8
 80149d4:	9303      	str	r3, [sp, #12]
 80149d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149d8:	443b      	add	r3, r7
 80149da:	9309      	str	r3, [sp, #36]	; 0x24
 80149dc:	e768      	b.n	80148b0 <_vfiprintf_r+0x78>
 80149de:	fb0c 3202 	mla	r2, ip, r2, r3
 80149e2:	460c      	mov	r4, r1
 80149e4:	2001      	movs	r0, #1
 80149e6:	e7a6      	b.n	8014936 <_vfiprintf_r+0xfe>
 80149e8:	2300      	movs	r3, #0
 80149ea:	3401      	adds	r4, #1
 80149ec:	9305      	str	r3, [sp, #20]
 80149ee:	4619      	mov	r1, r3
 80149f0:	f04f 0c0a 	mov.w	ip, #10
 80149f4:	4620      	mov	r0, r4
 80149f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80149fa:	3a30      	subs	r2, #48	; 0x30
 80149fc:	2a09      	cmp	r2, #9
 80149fe:	d903      	bls.n	8014a08 <_vfiprintf_r+0x1d0>
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d0c6      	beq.n	8014992 <_vfiprintf_r+0x15a>
 8014a04:	9105      	str	r1, [sp, #20]
 8014a06:	e7c4      	b.n	8014992 <_vfiprintf_r+0x15a>
 8014a08:	fb0c 2101 	mla	r1, ip, r1, r2
 8014a0c:	4604      	mov	r4, r0
 8014a0e:	2301      	movs	r3, #1
 8014a10:	e7f0      	b.n	80149f4 <_vfiprintf_r+0x1bc>
 8014a12:	ab03      	add	r3, sp, #12
 8014a14:	9300      	str	r3, [sp, #0]
 8014a16:	462a      	mov	r2, r5
 8014a18:	4b12      	ldr	r3, [pc, #72]	; (8014a64 <_vfiprintf_r+0x22c>)
 8014a1a:	a904      	add	r1, sp, #16
 8014a1c:	4630      	mov	r0, r6
 8014a1e:	f7fb ff53 	bl	80108c8 <_printf_float>
 8014a22:	4607      	mov	r7, r0
 8014a24:	1c78      	adds	r0, r7, #1
 8014a26:	d1d6      	bne.n	80149d6 <_vfiprintf_r+0x19e>
 8014a28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014a2a:	07d9      	lsls	r1, r3, #31
 8014a2c:	d405      	bmi.n	8014a3a <_vfiprintf_r+0x202>
 8014a2e:	89ab      	ldrh	r3, [r5, #12]
 8014a30:	059a      	lsls	r2, r3, #22
 8014a32:	d402      	bmi.n	8014a3a <_vfiprintf_r+0x202>
 8014a34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014a36:	f7fc fe86 	bl	8011746 <__retarget_lock_release_recursive>
 8014a3a:	89ab      	ldrh	r3, [r5, #12]
 8014a3c:	065b      	lsls	r3, r3, #25
 8014a3e:	f53f af1d 	bmi.w	801487c <_vfiprintf_r+0x44>
 8014a42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014a44:	e71c      	b.n	8014880 <_vfiprintf_r+0x48>
 8014a46:	ab03      	add	r3, sp, #12
 8014a48:	9300      	str	r3, [sp, #0]
 8014a4a:	462a      	mov	r2, r5
 8014a4c:	4b05      	ldr	r3, [pc, #20]	; (8014a64 <_vfiprintf_r+0x22c>)
 8014a4e:	a904      	add	r1, sp, #16
 8014a50:	4630      	mov	r0, r6
 8014a52:	f7fc f9c1 	bl	8010dd8 <_printf_i>
 8014a56:	e7e4      	b.n	8014a22 <_vfiprintf_r+0x1ea>
 8014a58:	08015241 	.word	0x08015241
 8014a5c:	0801524b 	.word	0x0801524b
 8014a60:	080108c9 	.word	0x080108c9
 8014a64:	08014815 	.word	0x08014815
 8014a68:	08015247 	.word	0x08015247

08014a6c <__swbuf_r>:
 8014a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a6e:	460e      	mov	r6, r1
 8014a70:	4614      	mov	r4, r2
 8014a72:	4605      	mov	r5, r0
 8014a74:	b118      	cbz	r0, 8014a7e <__swbuf_r+0x12>
 8014a76:	6a03      	ldr	r3, [r0, #32]
 8014a78:	b90b      	cbnz	r3, 8014a7e <__swbuf_r+0x12>
 8014a7a:	f7fc fd4d 	bl	8011518 <__sinit>
 8014a7e:	69a3      	ldr	r3, [r4, #24]
 8014a80:	60a3      	str	r3, [r4, #8]
 8014a82:	89a3      	ldrh	r3, [r4, #12]
 8014a84:	071a      	lsls	r2, r3, #28
 8014a86:	d525      	bpl.n	8014ad4 <__swbuf_r+0x68>
 8014a88:	6923      	ldr	r3, [r4, #16]
 8014a8a:	b31b      	cbz	r3, 8014ad4 <__swbuf_r+0x68>
 8014a8c:	6823      	ldr	r3, [r4, #0]
 8014a8e:	6922      	ldr	r2, [r4, #16]
 8014a90:	1a98      	subs	r0, r3, r2
 8014a92:	6963      	ldr	r3, [r4, #20]
 8014a94:	b2f6      	uxtb	r6, r6
 8014a96:	4283      	cmp	r3, r0
 8014a98:	4637      	mov	r7, r6
 8014a9a:	dc04      	bgt.n	8014aa6 <__swbuf_r+0x3a>
 8014a9c:	4621      	mov	r1, r4
 8014a9e:	4628      	mov	r0, r5
 8014aa0:	f7ff fa38 	bl	8013f14 <_fflush_r>
 8014aa4:	b9e0      	cbnz	r0, 8014ae0 <__swbuf_r+0x74>
 8014aa6:	68a3      	ldr	r3, [r4, #8]
 8014aa8:	3b01      	subs	r3, #1
 8014aaa:	60a3      	str	r3, [r4, #8]
 8014aac:	6823      	ldr	r3, [r4, #0]
 8014aae:	1c5a      	adds	r2, r3, #1
 8014ab0:	6022      	str	r2, [r4, #0]
 8014ab2:	701e      	strb	r6, [r3, #0]
 8014ab4:	6962      	ldr	r2, [r4, #20]
 8014ab6:	1c43      	adds	r3, r0, #1
 8014ab8:	429a      	cmp	r2, r3
 8014aba:	d004      	beq.n	8014ac6 <__swbuf_r+0x5a>
 8014abc:	89a3      	ldrh	r3, [r4, #12]
 8014abe:	07db      	lsls	r3, r3, #31
 8014ac0:	d506      	bpl.n	8014ad0 <__swbuf_r+0x64>
 8014ac2:	2e0a      	cmp	r6, #10
 8014ac4:	d104      	bne.n	8014ad0 <__swbuf_r+0x64>
 8014ac6:	4621      	mov	r1, r4
 8014ac8:	4628      	mov	r0, r5
 8014aca:	f7ff fa23 	bl	8013f14 <_fflush_r>
 8014ace:	b938      	cbnz	r0, 8014ae0 <__swbuf_r+0x74>
 8014ad0:	4638      	mov	r0, r7
 8014ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ad4:	4621      	mov	r1, r4
 8014ad6:	4628      	mov	r0, r5
 8014ad8:	f000 f806 	bl	8014ae8 <__swsetup_r>
 8014adc:	2800      	cmp	r0, #0
 8014ade:	d0d5      	beq.n	8014a8c <__swbuf_r+0x20>
 8014ae0:	f04f 37ff 	mov.w	r7, #4294967295
 8014ae4:	e7f4      	b.n	8014ad0 <__swbuf_r+0x64>
	...

08014ae8 <__swsetup_r>:
 8014ae8:	b538      	push	{r3, r4, r5, lr}
 8014aea:	4b2a      	ldr	r3, [pc, #168]	; (8014b94 <__swsetup_r+0xac>)
 8014aec:	4605      	mov	r5, r0
 8014aee:	6818      	ldr	r0, [r3, #0]
 8014af0:	460c      	mov	r4, r1
 8014af2:	b118      	cbz	r0, 8014afc <__swsetup_r+0x14>
 8014af4:	6a03      	ldr	r3, [r0, #32]
 8014af6:	b90b      	cbnz	r3, 8014afc <__swsetup_r+0x14>
 8014af8:	f7fc fd0e 	bl	8011518 <__sinit>
 8014afc:	89a3      	ldrh	r3, [r4, #12]
 8014afe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014b02:	0718      	lsls	r0, r3, #28
 8014b04:	d422      	bmi.n	8014b4c <__swsetup_r+0x64>
 8014b06:	06d9      	lsls	r1, r3, #27
 8014b08:	d407      	bmi.n	8014b1a <__swsetup_r+0x32>
 8014b0a:	2309      	movs	r3, #9
 8014b0c:	602b      	str	r3, [r5, #0]
 8014b0e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014b12:	81a3      	strh	r3, [r4, #12]
 8014b14:	f04f 30ff 	mov.w	r0, #4294967295
 8014b18:	e034      	b.n	8014b84 <__swsetup_r+0x9c>
 8014b1a:	0758      	lsls	r0, r3, #29
 8014b1c:	d512      	bpl.n	8014b44 <__swsetup_r+0x5c>
 8014b1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014b20:	b141      	cbz	r1, 8014b34 <__swsetup_r+0x4c>
 8014b22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014b26:	4299      	cmp	r1, r3
 8014b28:	d002      	beq.n	8014b30 <__swsetup_r+0x48>
 8014b2a:	4628      	mov	r0, r5
 8014b2c:	f7fd fc14 	bl	8012358 <_free_r>
 8014b30:	2300      	movs	r3, #0
 8014b32:	6363      	str	r3, [r4, #52]	; 0x34
 8014b34:	89a3      	ldrh	r3, [r4, #12]
 8014b36:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014b3a:	81a3      	strh	r3, [r4, #12]
 8014b3c:	2300      	movs	r3, #0
 8014b3e:	6063      	str	r3, [r4, #4]
 8014b40:	6923      	ldr	r3, [r4, #16]
 8014b42:	6023      	str	r3, [r4, #0]
 8014b44:	89a3      	ldrh	r3, [r4, #12]
 8014b46:	f043 0308 	orr.w	r3, r3, #8
 8014b4a:	81a3      	strh	r3, [r4, #12]
 8014b4c:	6923      	ldr	r3, [r4, #16]
 8014b4e:	b94b      	cbnz	r3, 8014b64 <__swsetup_r+0x7c>
 8014b50:	89a3      	ldrh	r3, [r4, #12]
 8014b52:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014b56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014b5a:	d003      	beq.n	8014b64 <__swsetup_r+0x7c>
 8014b5c:	4621      	mov	r1, r4
 8014b5e:	4628      	mov	r0, r5
 8014b60:	f000 f884 	bl	8014c6c <__smakebuf_r>
 8014b64:	89a0      	ldrh	r0, [r4, #12]
 8014b66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014b6a:	f010 0301 	ands.w	r3, r0, #1
 8014b6e:	d00a      	beq.n	8014b86 <__swsetup_r+0x9e>
 8014b70:	2300      	movs	r3, #0
 8014b72:	60a3      	str	r3, [r4, #8]
 8014b74:	6963      	ldr	r3, [r4, #20]
 8014b76:	425b      	negs	r3, r3
 8014b78:	61a3      	str	r3, [r4, #24]
 8014b7a:	6923      	ldr	r3, [r4, #16]
 8014b7c:	b943      	cbnz	r3, 8014b90 <__swsetup_r+0xa8>
 8014b7e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014b82:	d1c4      	bne.n	8014b0e <__swsetup_r+0x26>
 8014b84:	bd38      	pop	{r3, r4, r5, pc}
 8014b86:	0781      	lsls	r1, r0, #30
 8014b88:	bf58      	it	pl
 8014b8a:	6963      	ldrpl	r3, [r4, #20]
 8014b8c:	60a3      	str	r3, [r4, #8]
 8014b8e:	e7f4      	b.n	8014b7a <__swsetup_r+0x92>
 8014b90:	2000      	movs	r0, #0
 8014b92:	e7f7      	b.n	8014b84 <__swsetup_r+0x9c>
 8014b94:	24000068 	.word	0x24000068

08014b98 <_raise_r>:
 8014b98:	291f      	cmp	r1, #31
 8014b9a:	b538      	push	{r3, r4, r5, lr}
 8014b9c:	4604      	mov	r4, r0
 8014b9e:	460d      	mov	r5, r1
 8014ba0:	d904      	bls.n	8014bac <_raise_r+0x14>
 8014ba2:	2316      	movs	r3, #22
 8014ba4:	6003      	str	r3, [r0, #0]
 8014ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8014baa:	bd38      	pop	{r3, r4, r5, pc}
 8014bac:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8014bae:	b112      	cbz	r2, 8014bb6 <_raise_r+0x1e>
 8014bb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014bb4:	b94b      	cbnz	r3, 8014bca <_raise_r+0x32>
 8014bb6:	4620      	mov	r0, r4
 8014bb8:	f000 f830 	bl	8014c1c <_getpid_r>
 8014bbc:	462a      	mov	r2, r5
 8014bbe:	4601      	mov	r1, r0
 8014bc0:	4620      	mov	r0, r4
 8014bc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014bc6:	f000 b817 	b.w	8014bf8 <_kill_r>
 8014bca:	2b01      	cmp	r3, #1
 8014bcc:	d00a      	beq.n	8014be4 <_raise_r+0x4c>
 8014bce:	1c59      	adds	r1, r3, #1
 8014bd0:	d103      	bne.n	8014bda <_raise_r+0x42>
 8014bd2:	2316      	movs	r3, #22
 8014bd4:	6003      	str	r3, [r0, #0]
 8014bd6:	2001      	movs	r0, #1
 8014bd8:	e7e7      	b.n	8014baa <_raise_r+0x12>
 8014bda:	2400      	movs	r4, #0
 8014bdc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014be0:	4628      	mov	r0, r5
 8014be2:	4798      	blx	r3
 8014be4:	2000      	movs	r0, #0
 8014be6:	e7e0      	b.n	8014baa <_raise_r+0x12>

08014be8 <raise>:
 8014be8:	4b02      	ldr	r3, [pc, #8]	; (8014bf4 <raise+0xc>)
 8014bea:	4601      	mov	r1, r0
 8014bec:	6818      	ldr	r0, [r3, #0]
 8014bee:	f7ff bfd3 	b.w	8014b98 <_raise_r>
 8014bf2:	bf00      	nop
 8014bf4:	24000068 	.word	0x24000068

08014bf8 <_kill_r>:
 8014bf8:	b538      	push	{r3, r4, r5, lr}
 8014bfa:	4d07      	ldr	r5, [pc, #28]	; (8014c18 <_kill_r+0x20>)
 8014bfc:	2300      	movs	r3, #0
 8014bfe:	4604      	mov	r4, r0
 8014c00:	4608      	mov	r0, r1
 8014c02:	4611      	mov	r1, r2
 8014c04:	602b      	str	r3, [r5, #0]
 8014c06:	f7ee f8e1 	bl	8002dcc <_kill>
 8014c0a:	1c43      	adds	r3, r0, #1
 8014c0c:	d102      	bne.n	8014c14 <_kill_r+0x1c>
 8014c0e:	682b      	ldr	r3, [r5, #0]
 8014c10:	b103      	cbz	r3, 8014c14 <_kill_r+0x1c>
 8014c12:	6023      	str	r3, [r4, #0]
 8014c14:	bd38      	pop	{r3, r4, r5, pc}
 8014c16:	bf00      	nop
 8014c18:	24000f3c 	.word	0x24000f3c

08014c1c <_getpid_r>:
 8014c1c:	f7ee b8ce 	b.w	8002dbc <_getpid>

08014c20 <__swhatbuf_r>:
 8014c20:	b570      	push	{r4, r5, r6, lr}
 8014c22:	460c      	mov	r4, r1
 8014c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c28:	2900      	cmp	r1, #0
 8014c2a:	b096      	sub	sp, #88	; 0x58
 8014c2c:	4615      	mov	r5, r2
 8014c2e:	461e      	mov	r6, r3
 8014c30:	da0d      	bge.n	8014c4e <__swhatbuf_r+0x2e>
 8014c32:	89a3      	ldrh	r3, [r4, #12]
 8014c34:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014c38:	f04f 0100 	mov.w	r1, #0
 8014c3c:	bf0c      	ite	eq
 8014c3e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8014c42:	2340      	movne	r3, #64	; 0x40
 8014c44:	2000      	movs	r0, #0
 8014c46:	6031      	str	r1, [r6, #0]
 8014c48:	602b      	str	r3, [r5, #0]
 8014c4a:	b016      	add	sp, #88	; 0x58
 8014c4c:	bd70      	pop	{r4, r5, r6, pc}
 8014c4e:	466a      	mov	r2, sp
 8014c50:	f000 f848 	bl	8014ce4 <_fstat_r>
 8014c54:	2800      	cmp	r0, #0
 8014c56:	dbec      	blt.n	8014c32 <__swhatbuf_r+0x12>
 8014c58:	9901      	ldr	r1, [sp, #4]
 8014c5a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8014c5e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8014c62:	4259      	negs	r1, r3
 8014c64:	4159      	adcs	r1, r3
 8014c66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014c6a:	e7eb      	b.n	8014c44 <__swhatbuf_r+0x24>

08014c6c <__smakebuf_r>:
 8014c6c:	898b      	ldrh	r3, [r1, #12]
 8014c6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014c70:	079d      	lsls	r5, r3, #30
 8014c72:	4606      	mov	r6, r0
 8014c74:	460c      	mov	r4, r1
 8014c76:	d507      	bpl.n	8014c88 <__smakebuf_r+0x1c>
 8014c78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014c7c:	6023      	str	r3, [r4, #0]
 8014c7e:	6123      	str	r3, [r4, #16]
 8014c80:	2301      	movs	r3, #1
 8014c82:	6163      	str	r3, [r4, #20]
 8014c84:	b002      	add	sp, #8
 8014c86:	bd70      	pop	{r4, r5, r6, pc}
 8014c88:	ab01      	add	r3, sp, #4
 8014c8a:	466a      	mov	r2, sp
 8014c8c:	f7ff ffc8 	bl	8014c20 <__swhatbuf_r>
 8014c90:	9900      	ldr	r1, [sp, #0]
 8014c92:	4605      	mov	r5, r0
 8014c94:	4630      	mov	r0, r6
 8014c96:	f7fd fbd3 	bl	8012440 <_malloc_r>
 8014c9a:	b948      	cbnz	r0, 8014cb0 <__smakebuf_r+0x44>
 8014c9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ca0:	059a      	lsls	r2, r3, #22
 8014ca2:	d4ef      	bmi.n	8014c84 <__smakebuf_r+0x18>
 8014ca4:	f023 0303 	bic.w	r3, r3, #3
 8014ca8:	f043 0302 	orr.w	r3, r3, #2
 8014cac:	81a3      	strh	r3, [r4, #12]
 8014cae:	e7e3      	b.n	8014c78 <__smakebuf_r+0xc>
 8014cb0:	89a3      	ldrh	r3, [r4, #12]
 8014cb2:	6020      	str	r0, [r4, #0]
 8014cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014cb8:	81a3      	strh	r3, [r4, #12]
 8014cba:	9b00      	ldr	r3, [sp, #0]
 8014cbc:	6163      	str	r3, [r4, #20]
 8014cbe:	9b01      	ldr	r3, [sp, #4]
 8014cc0:	6120      	str	r0, [r4, #16]
 8014cc2:	b15b      	cbz	r3, 8014cdc <__smakebuf_r+0x70>
 8014cc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014cc8:	4630      	mov	r0, r6
 8014cca:	f000 f81d 	bl	8014d08 <_isatty_r>
 8014cce:	b128      	cbz	r0, 8014cdc <__smakebuf_r+0x70>
 8014cd0:	89a3      	ldrh	r3, [r4, #12]
 8014cd2:	f023 0303 	bic.w	r3, r3, #3
 8014cd6:	f043 0301 	orr.w	r3, r3, #1
 8014cda:	81a3      	strh	r3, [r4, #12]
 8014cdc:	89a3      	ldrh	r3, [r4, #12]
 8014cde:	431d      	orrs	r5, r3
 8014ce0:	81a5      	strh	r5, [r4, #12]
 8014ce2:	e7cf      	b.n	8014c84 <__smakebuf_r+0x18>

08014ce4 <_fstat_r>:
 8014ce4:	b538      	push	{r3, r4, r5, lr}
 8014ce6:	4d07      	ldr	r5, [pc, #28]	; (8014d04 <_fstat_r+0x20>)
 8014ce8:	2300      	movs	r3, #0
 8014cea:	4604      	mov	r4, r0
 8014cec:	4608      	mov	r0, r1
 8014cee:	4611      	mov	r1, r2
 8014cf0:	602b      	str	r3, [r5, #0]
 8014cf2:	f7ee f8ca 	bl	8002e8a <_fstat>
 8014cf6:	1c43      	adds	r3, r0, #1
 8014cf8:	d102      	bne.n	8014d00 <_fstat_r+0x1c>
 8014cfa:	682b      	ldr	r3, [r5, #0]
 8014cfc:	b103      	cbz	r3, 8014d00 <_fstat_r+0x1c>
 8014cfe:	6023      	str	r3, [r4, #0]
 8014d00:	bd38      	pop	{r3, r4, r5, pc}
 8014d02:	bf00      	nop
 8014d04:	24000f3c 	.word	0x24000f3c

08014d08 <_isatty_r>:
 8014d08:	b538      	push	{r3, r4, r5, lr}
 8014d0a:	4d06      	ldr	r5, [pc, #24]	; (8014d24 <_isatty_r+0x1c>)
 8014d0c:	2300      	movs	r3, #0
 8014d0e:	4604      	mov	r4, r0
 8014d10:	4608      	mov	r0, r1
 8014d12:	602b      	str	r3, [r5, #0]
 8014d14:	f7ee f8c9 	bl	8002eaa <_isatty>
 8014d18:	1c43      	adds	r3, r0, #1
 8014d1a:	d102      	bne.n	8014d22 <_isatty_r+0x1a>
 8014d1c:	682b      	ldr	r3, [r5, #0]
 8014d1e:	b103      	cbz	r3, 8014d22 <_isatty_r+0x1a>
 8014d20:	6023      	str	r3, [r4, #0]
 8014d22:	bd38      	pop	{r3, r4, r5, pc}
 8014d24:	24000f3c 	.word	0x24000f3c

08014d28 <_init>:
 8014d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d2a:	bf00      	nop
 8014d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d2e:	bc08      	pop	{r3}
 8014d30:	469e      	mov	lr, r3
 8014d32:	4770      	bx	lr

08014d34 <_fini>:
 8014d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d36:	bf00      	nop
 8014d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d3a:	bc08      	pop	{r3}
 8014d3c:	469e      	mov	lr, r3
 8014d3e:	4770      	bx	lr
