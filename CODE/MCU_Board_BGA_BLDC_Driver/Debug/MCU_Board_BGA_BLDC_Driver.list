
MCU_Board_BGA_BLDC_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015304  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  080155d8  080155d8  000255d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015b48  08015b48  00025b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015b50  08015b50  00025b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015b54  08015b54  00025b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d8  24000000  08015b58  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000d74  240001d8  08015d30  000301d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000f4c  08015d30  00030f4c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00030206  2**0
                  CONTENTS, READONLY
 11 .debug_info   00029277  00000000  00000000  00030249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000444c  00000000  00000000  000594c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000021e8  00000000  00000000  0005d910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001a6d  00000000  00000000  0005faf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003c784  00000000  00000000  00061565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002af86  00000000  00000000  0009dce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018c6b5  00000000  00000000  000c8c6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000a938  00000000  00000000  00255324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000009f  00000000  00000000  0025fc5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001d8 	.word	0x240001d8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080155bc 	.word	0x080155bc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001dc 	.word	0x240001dc
 800030c:	080155bc 	.word	0x080155bc

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	; 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a8 	b.w	8000aa0 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9e08      	ldr	r6, [sp, #32]
 80007de:	460d      	mov	r5, r1
 80007e0:	4604      	mov	r4, r0
 80007e2:	460f      	mov	r7, r1
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d14a      	bne.n	800087e <__udivmoddi4+0xa6>
 80007e8:	428a      	cmp	r2, r1
 80007ea:	4694      	mov	ip, r2
 80007ec:	d965      	bls.n	80008ba <__udivmoddi4+0xe2>
 80007ee:	fab2 f382 	clz	r3, r2
 80007f2:	b143      	cbz	r3, 8000806 <__udivmoddi4+0x2e>
 80007f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007f8:	f1c3 0220 	rsb	r2, r3, #32
 80007fc:	409f      	lsls	r7, r3
 80007fe:	fa20 f202 	lsr.w	r2, r0, r2
 8000802:	4317      	orrs	r7, r2
 8000804:	409c      	lsls	r4, r3
 8000806:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800080a:	fa1f f58c 	uxth.w	r5, ip
 800080e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000812:	0c22      	lsrs	r2, r4, #16
 8000814:	fb0e 7711 	mls	r7, lr, r1, r7
 8000818:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800081c:	fb01 f005 	mul.w	r0, r1, r5
 8000820:	4290      	cmp	r0, r2
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x62>
 8000824:	eb1c 0202 	adds.w	r2, ip, r2
 8000828:	f101 37ff 	add.w	r7, r1, #4294967295
 800082c:	f080 811c 	bcs.w	8000a68 <__udivmoddi4+0x290>
 8000830:	4290      	cmp	r0, r2
 8000832:	f240 8119 	bls.w	8000a68 <__udivmoddi4+0x290>
 8000836:	3902      	subs	r1, #2
 8000838:	4462      	add	r2, ip
 800083a:	1a12      	subs	r2, r2, r0
 800083c:	b2a4      	uxth	r4, r4
 800083e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000842:	fb0e 2210 	mls	r2, lr, r0, r2
 8000846:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800084a:	fb00 f505 	mul.w	r5, r0, r5
 800084e:	42a5      	cmp	r5, r4
 8000850:	d90a      	bls.n	8000868 <__udivmoddi4+0x90>
 8000852:	eb1c 0404 	adds.w	r4, ip, r4
 8000856:	f100 32ff 	add.w	r2, r0, #4294967295
 800085a:	f080 8107 	bcs.w	8000a6c <__udivmoddi4+0x294>
 800085e:	42a5      	cmp	r5, r4
 8000860:	f240 8104 	bls.w	8000a6c <__udivmoddi4+0x294>
 8000864:	4464      	add	r4, ip
 8000866:	3802      	subs	r0, #2
 8000868:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800086c:	1b64      	subs	r4, r4, r5
 800086e:	2100      	movs	r1, #0
 8000870:	b11e      	cbz	r6, 800087a <__udivmoddi4+0xa2>
 8000872:	40dc      	lsrs	r4, r3
 8000874:	2300      	movs	r3, #0
 8000876:	e9c6 4300 	strd	r4, r3, [r6]
 800087a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800087e:	428b      	cmp	r3, r1
 8000880:	d908      	bls.n	8000894 <__udivmoddi4+0xbc>
 8000882:	2e00      	cmp	r6, #0
 8000884:	f000 80ed 	beq.w	8000a62 <__udivmoddi4+0x28a>
 8000888:	2100      	movs	r1, #0
 800088a:	e9c6 0500 	strd	r0, r5, [r6]
 800088e:	4608      	mov	r0, r1
 8000890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000894:	fab3 f183 	clz	r1, r3
 8000898:	2900      	cmp	r1, #0
 800089a:	d149      	bne.n	8000930 <__udivmoddi4+0x158>
 800089c:	42ab      	cmp	r3, r5
 800089e:	d302      	bcc.n	80008a6 <__udivmoddi4+0xce>
 80008a0:	4282      	cmp	r2, r0
 80008a2:	f200 80f8 	bhi.w	8000a96 <__udivmoddi4+0x2be>
 80008a6:	1a84      	subs	r4, r0, r2
 80008a8:	eb65 0203 	sbc.w	r2, r5, r3
 80008ac:	2001      	movs	r0, #1
 80008ae:	4617      	mov	r7, r2
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d0e2      	beq.n	800087a <__udivmoddi4+0xa2>
 80008b4:	e9c6 4700 	strd	r4, r7, [r6]
 80008b8:	e7df      	b.n	800087a <__udivmoddi4+0xa2>
 80008ba:	b902      	cbnz	r2, 80008be <__udivmoddi4+0xe6>
 80008bc:	deff      	udf	#255	; 0xff
 80008be:	fab2 f382 	clz	r3, r2
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	f040 8090 	bne.w	80009e8 <__udivmoddi4+0x210>
 80008c8:	1a8a      	subs	r2, r1, r2
 80008ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ce:	fa1f fe8c 	uxth.w	lr, ip
 80008d2:	2101      	movs	r1, #1
 80008d4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008d8:	fb07 2015 	mls	r0, r7, r5, r2
 80008dc:	0c22      	lsrs	r2, r4, #16
 80008de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008e2:	fb0e f005 	mul.w	r0, lr, r5
 80008e6:	4290      	cmp	r0, r2
 80008e8:	d908      	bls.n	80008fc <__udivmoddi4+0x124>
 80008ea:	eb1c 0202 	adds.w	r2, ip, r2
 80008ee:	f105 38ff 	add.w	r8, r5, #4294967295
 80008f2:	d202      	bcs.n	80008fa <__udivmoddi4+0x122>
 80008f4:	4290      	cmp	r0, r2
 80008f6:	f200 80cb 	bhi.w	8000a90 <__udivmoddi4+0x2b8>
 80008fa:	4645      	mov	r5, r8
 80008fc:	1a12      	subs	r2, r2, r0
 80008fe:	b2a4      	uxth	r4, r4
 8000900:	fbb2 f0f7 	udiv	r0, r2, r7
 8000904:	fb07 2210 	mls	r2, r7, r0, r2
 8000908:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800090c:	fb0e fe00 	mul.w	lr, lr, r0
 8000910:	45a6      	cmp	lr, r4
 8000912:	d908      	bls.n	8000926 <__udivmoddi4+0x14e>
 8000914:	eb1c 0404 	adds.w	r4, ip, r4
 8000918:	f100 32ff 	add.w	r2, r0, #4294967295
 800091c:	d202      	bcs.n	8000924 <__udivmoddi4+0x14c>
 800091e:	45a6      	cmp	lr, r4
 8000920:	f200 80bb 	bhi.w	8000a9a <__udivmoddi4+0x2c2>
 8000924:	4610      	mov	r0, r2
 8000926:	eba4 040e 	sub.w	r4, r4, lr
 800092a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800092e:	e79f      	b.n	8000870 <__udivmoddi4+0x98>
 8000930:	f1c1 0720 	rsb	r7, r1, #32
 8000934:	408b      	lsls	r3, r1
 8000936:	fa22 fc07 	lsr.w	ip, r2, r7
 800093a:	ea4c 0c03 	orr.w	ip, ip, r3
 800093e:	fa05 f401 	lsl.w	r4, r5, r1
 8000942:	fa20 f307 	lsr.w	r3, r0, r7
 8000946:	40fd      	lsrs	r5, r7
 8000948:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800094c:	4323      	orrs	r3, r4
 800094e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000952:	fa1f fe8c 	uxth.w	lr, ip
 8000956:	fb09 5518 	mls	r5, r9, r8, r5
 800095a:	0c1c      	lsrs	r4, r3, #16
 800095c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000960:	fb08 f50e 	mul.w	r5, r8, lr
 8000964:	42a5      	cmp	r5, r4
 8000966:	fa02 f201 	lsl.w	r2, r2, r1
 800096a:	fa00 f001 	lsl.w	r0, r0, r1
 800096e:	d90b      	bls.n	8000988 <__udivmoddi4+0x1b0>
 8000970:	eb1c 0404 	adds.w	r4, ip, r4
 8000974:	f108 3aff 	add.w	sl, r8, #4294967295
 8000978:	f080 8088 	bcs.w	8000a8c <__udivmoddi4+0x2b4>
 800097c:	42a5      	cmp	r5, r4
 800097e:	f240 8085 	bls.w	8000a8c <__udivmoddi4+0x2b4>
 8000982:	f1a8 0802 	sub.w	r8, r8, #2
 8000986:	4464      	add	r4, ip
 8000988:	1b64      	subs	r4, r4, r5
 800098a:	b29d      	uxth	r5, r3
 800098c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000990:	fb09 4413 	mls	r4, r9, r3, r4
 8000994:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000998:	fb03 fe0e 	mul.w	lr, r3, lr
 800099c:	45a6      	cmp	lr, r4
 800099e:	d908      	bls.n	80009b2 <__udivmoddi4+0x1da>
 80009a0:	eb1c 0404 	adds.w	r4, ip, r4
 80009a4:	f103 35ff 	add.w	r5, r3, #4294967295
 80009a8:	d26c      	bcs.n	8000a84 <__udivmoddi4+0x2ac>
 80009aa:	45a6      	cmp	lr, r4
 80009ac:	d96a      	bls.n	8000a84 <__udivmoddi4+0x2ac>
 80009ae:	3b02      	subs	r3, #2
 80009b0:	4464      	add	r4, ip
 80009b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009b6:	fba3 9502 	umull	r9, r5, r3, r2
 80009ba:	eba4 040e 	sub.w	r4, r4, lr
 80009be:	42ac      	cmp	r4, r5
 80009c0:	46c8      	mov	r8, r9
 80009c2:	46ae      	mov	lr, r5
 80009c4:	d356      	bcc.n	8000a74 <__udivmoddi4+0x29c>
 80009c6:	d053      	beq.n	8000a70 <__udivmoddi4+0x298>
 80009c8:	b156      	cbz	r6, 80009e0 <__udivmoddi4+0x208>
 80009ca:	ebb0 0208 	subs.w	r2, r0, r8
 80009ce:	eb64 040e 	sbc.w	r4, r4, lr
 80009d2:	fa04 f707 	lsl.w	r7, r4, r7
 80009d6:	40ca      	lsrs	r2, r1
 80009d8:	40cc      	lsrs	r4, r1
 80009da:	4317      	orrs	r7, r2
 80009dc:	e9c6 7400 	strd	r7, r4, [r6]
 80009e0:	4618      	mov	r0, r3
 80009e2:	2100      	movs	r1, #0
 80009e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e8:	f1c3 0120 	rsb	r1, r3, #32
 80009ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80009f0:	fa20 f201 	lsr.w	r2, r0, r1
 80009f4:	fa25 f101 	lsr.w	r1, r5, r1
 80009f8:	409d      	lsls	r5, r3
 80009fa:	432a      	orrs	r2, r5
 80009fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a00:	fa1f fe8c 	uxth.w	lr, ip
 8000a04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a08:	fb07 1510 	mls	r5, r7, r0, r1
 8000a0c:	0c11      	lsrs	r1, r2, #16
 8000a0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a12:	fb00 f50e 	mul.w	r5, r0, lr
 8000a16:	428d      	cmp	r5, r1
 8000a18:	fa04 f403 	lsl.w	r4, r4, r3
 8000a1c:	d908      	bls.n	8000a30 <__udivmoddi4+0x258>
 8000a1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a26:	d22f      	bcs.n	8000a88 <__udivmoddi4+0x2b0>
 8000a28:	428d      	cmp	r5, r1
 8000a2a:	d92d      	bls.n	8000a88 <__udivmoddi4+0x2b0>
 8000a2c:	3802      	subs	r0, #2
 8000a2e:	4461      	add	r1, ip
 8000a30:	1b49      	subs	r1, r1, r5
 8000a32:	b292      	uxth	r2, r2
 8000a34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a38:	fb07 1115 	mls	r1, r7, r5, r1
 8000a3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a40:	fb05 f10e 	mul.w	r1, r5, lr
 8000a44:	4291      	cmp	r1, r2
 8000a46:	d908      	bls.n	8000a5a <__udivmoddi4+0x282>
 8000a48:	eb1c 0202 	adds.w	r2, ip, r2
 8000a4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a50:	d216      	bcs.n	8000a80 <__udivmoddi4+0x2a8>
 8000a52:	4291      	cmp	r1, r2
 8000a54:	d914      	bls.n	8000a80 <__udivmoddi4+0x2a8>
 8000a56:	3d02      	subs	r5, #2
 8000a58:	4462      	add	r2, ip
 8000a5a:	1a52      	subs	r2, r2, r1
 8000a5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a60:	e738      	b.n	80008d4 <__udivmoddi4+0xfc>
 8000a62:	4631      	mov	r1, r6
 8000a64:	4630      	mov	r0, r6
 8000a66:	e708      	b.n	800087a <__udivmoddi4+0xa2>
 8000a68:	4639      	mov	r1, r7
 8000a6a:	e6e6      	b.n	800083a <__udivmoddi4+0x62>
 8000a6c:	4610      	mov	r0, r2
 8000a6e:	e6fb      	b.n	8000868 <__udivmoddi4+0x90>
 8000a70:	4548      	cmp	r0, r9
 8000a72:	d2a9      	bcs.n	80009c8 <__udivmoddi4+0x1f0>
 8000a74:	ebb9 0802 	subs.w	r8, r9, r2
 8000a78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	e7a3      	b.n	80009c8 <__udivmoddi4+0x1f0>
 8000a80:	4645      	mov	r5, r8
 8000a82:	e7ea      	b.n	8000a5a <__udivmoddi4+0x282>
 8000a84:	462b      	mov	r3, r5
 8000a86:	e794      	b.n	80009b2 <__udivmoddi4+0x1da>
 8000a88:	4640      	mov	r0, r8
 8000a8a:	e7d1      	b.n	8000a30 <__udivmoddi4+0x258>
 8000a8c:	46d0      	mov	r8, sl
 8000a8e:	e77b      	b.n	8000988 <__udivmoddi4+0x1b0>
 8000a90:	3d02      	subs	r5, #2
 8000a92:	4462      	add	r2, ip
 8000a94:	e732      	b.n	80008fc <__udivmoddi4+0x124>
 8000a96:	4608      	mov	r0, r1
 8000a98:	e70a      	b.n	80008b0 <__udivmoddi4+0xd8>
 8000a9a:	4464      	add	r4, ip
 8000a9c:	3802      	subs	r0, #2
 8000a9e:	e742      	b.n	8000926 <__udivmoddi4+0x14e>

08000aa0 <__aeabi_idiv0>:
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <PIDController_Init>:
#include "PID.h"

void PIDController_Init(PIDController *pid) {
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f04f 0200 	mov.w	r2, #0
 8000ab2:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevError  = 0.0f;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f04f 0200 	mov.w	r2, #0
 8000aba:	629a      	str	r2, [r3, #40]	; 0x28

	pid->differentiator  = 0.0f;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f04f 0200 	mov.w	r2, #0
 8000ac2:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->prevMeasurement = 0.0f;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f04f 0200 	mov.w	r2, #0
 8000aca:	631a      	str	r2, [r3, #48]	; 0x30

	pid->out = 0.0f;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f04f 0200 	mov.w	r2, #0
 8000ad2:	635a      	str	r2, [r3, #52]	; 0x34

}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint, float measurement) {
 8000ae0:	b480      	push	{r7}
 8000ae2:	b087      	sub	sp, #28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	ed87 0a02 	vstr	s0, [r7, #8]
 8000aec:	edc7 0a01 	vstr	s1, [r7, #4]

	/*
	* Error signal
	*/
    float error = setpoint - measurement;
 8000af0:	ed97 7a02 	vldr	s14, [r7, #8]
 8000af4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000af8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000afc:	edc7 7a05 	vstr	s15, [r7, #20]


	/*
	* Proportional
	*/
    float proportional = pid->Kp * error;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	edd3 7a00 	vldr	s15, [r3]
 8000b06:	ed97 7a05 	vldr	s14, [r7, #20]
 8000b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b0e:	edc7 7a04 	vstr	s15, [r7, #16]


	/*
	* Integral
	*/
    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b1e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8000b22:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	edd3 7a08 	vldr	s15, [r3, #32]
 8000b2c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
 8000b36:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b3a:	ee76 7a27 	vadd.f32	s15, s12, s15
 8000b3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	/* Anti-wind-up via integrator clamping */
    if (pid->integrator > pid->limMaxInt) {
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	edd3 7a07 	vldr	s15, [r3, #28]
 8000b58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b60:	dd04      	ble.n	8000b6c <PIDController_Update+0x8c>

        pid->integrator = pid->limMaxInt;
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	69da      	ldr	r2, [r3, #28]
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	625a      	str	r2, [r3, #36]	; 0x24
 8000b6a:	e00e      	b.n	8000b8a <PIDController_Update+0xaa>

    } else if (pid->integrator < pid->limMinInt) {
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	edd3 7a06 	vldr	s15, [r3, #24]
 8000b78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b80:	d503      	bpl.n	8000b8a <PIDController_Update+0xaa>

        pid->integrator = pid->limMinInt;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	699a      	ldr	r2, [r3, #24]
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	625a      	str	r2, [r3, #36]	; 0x24

	/*
	* Derivative (band-limited differentiator)
	*/
		
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	edd3 7a02 	vldr	s15, [r3, #8]
 8000b90:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000b9a:	edd7 6a01 	vldr	s13, [r7, #4]
 8000b9e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000ba2:	ee27 7a27 	vmul.f32	s14, s14, s15
                        + (2.0f * pid->tau - pid->T) * pid->differentiator)
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	edd3 7a03 	vldr	s15, [r3, #12]
 8000bac:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	edd3 7a08 	vldr	s15, [r3, #32]
 8000bb6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000bc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8000bc8:	eef1 6a67 	vneg.f32	s13, s15
                        / (2.0f * pid->tau + pid->T);
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	edd3 7a03 	vldr	s15, [r3, #12]
 8000bd2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	edd3 7a08 	vldr	s15, [r3, #32]
 8000bdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000be0:	eec6 7a87 	vdiv.f32	s15, s13, s14
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c


	/*
	* Compute output and apply limits
	*/
    pid->out = proportional + pid->integrator + pid->differentiator;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000bf0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bf4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    if (pid->out > pid->limMax) {
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	edd3 7a05 	vldr	s15, [r3, #20]
 8000c14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c1c:	dd04      	ble.n	8000c28 <PIDController_Update+0x148>

        pid->out = pid->limMax;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	695a      	ldr	r2, [r3, #20]
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	635a      	str	r2, [r3, #52]	; 0x34
 8000c26:	e00e      	b.n	8000c46 <PIDController_Update+0x166>

    } else if (pid->out < pid->limMin) {
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	edd3 7a04 	vldr	s15, [r3, #16]
 8000c34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c3c:	d503      	bpl.n	8000c46 <PIDController_Update+0x166>

        pid->out = pid->limMin;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	691a      	ldr	r2, [r3, #16]
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	635a      	str	r2, [r3, #52]	; 0x34

    }

	/* Store error and measurement for later use */
    pid->prevError       = error;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	697a      	ldr	r2, [r7, #20]
 8000c4a:	629a      	str	r2, [r3, #40]	; 0x28
    pid->prevMeasurement = measurement;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	631a      	str	r2, [r3, #48]	; 0x30

	/* Return controller output */
    return pid->out;
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c56:	ee07 3a90 	vmov	s15, r3

}
 8000c5a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c5e:	371c      	adds	r7, #28
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <LL_CORDIC_Config>:
  *         @arg @ref LL_CORDIC_OUTSIZE_16BITS
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_Config(CORDIC_TypeDef *CORDICx, uint32_t Function, uint32_t Precision, uint32_t Scale,
                                      uint32_t NbWrite, uint32_t NbRead, uint32_t InSize, uint32_t OutSize)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
 8000c74:	603b      	str	r3, [r7, #0]
  MODIFY_REG(CORDICx->CSR,
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <LL_CORDIC_Config+0x44>)
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	68b9      	ldr	r1, [r7, #8]
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	4311      	orrs	r1, r2
 8000c84:	683a      	ldr	r2, [r7, #0]
 8000c86:	4311      	orrs	r1, r2
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	4311      	orrs	r1, r2
 8000c8c:	69fa      	ldr	r2, [r7, #28]
 8000c8e:	4311      	orrs	r1, r2
 8000c90:	6a3a      	ldr	r2, [r7, #32]
 8000c92:	4311      	orrs	r1, r2
 8000c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c96:	430a      	orrs	r2, r1
 8000c98:	431a      	orrs	r2, r3
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	601a      	str	r2, [r3, #0]
             CORDIC_CSR_FUNC | CORDIC_CSR_PRECISION | CORDIC_CSR_SCALE |
             CORDIC_CSR_NARGS | CORDIC_CSR_NRES | CORDIC_CSR_ARGSIZE | CORDIC_CSR_RESSIZE,
             Function | Precision | Scale |
             NbWrite | NbRead | InSize | OutSize);
}
 8000c9e:	bf00      	nop
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	ff87f800 	.word	0xff87f800

08000cb0 <LL_CORDIC_WriteData>:
  * @param  CORDICx CORDIC Instance
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	683a      	ldr	r2, [r7, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <LL_CORDIC_ReadData>:
  * @rmtoll RDATA        RES           LL_CORDIC_ReadData
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(const CORDIC_TypeDef *CORDICx)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	689b      	ldr	r3, [r3, #8]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <fast_Sinus_Cosinus>:

	  return Ergebnis;
}

void fast_Sinus_Cosinus(float Eingabe, float* Sinus_out, float* Cosinus_out)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08c      	sub	sp, #48	; 0x30
 8000ce8:	af04      	add	r7, sp, #16
 8000cea:	ed87 0a03 	vstr	s0, [r7, #12]
 8000cee:	60b8      	str	r0, [r7, #8]
 8000cf0:	6079      	str	r1, [r7, #4]
	//Nimmt einen Winkel in Grad ein und gibt die Cosinus sowie Sinus werte wieder zurück
	Eingabe = Eingabe / 180.f;//Umrechnung von 360Grad auf 1
 8000cf2:	ed97 7a03 	vldr	s14, [r7, #12]
 8000cf6:	eddf 6a37 	vldr	s13, [pc, #220]	; 8000dd4 <fast_Sinus_Cosinus+0xf0>
 8000cfa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cfe:	edc7 7a03 	vstr	s15, [r7, #12]

	//Beachtung der Periodizität
	while(Eingabe > 1.)
 8000d02:	e007      	b.n	8000d14 <fast_Sinus_Cosinus+0x30>
	{
		Eingabe  = Eingabe - 2.f;
 8000d04:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d08:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000d0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000d10:	edc7 7a03 	vstr	s15, [r7, #12]
	while(Eingabe > 1.)
 8000d14:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000d1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d24:	dcee      	bgt.n	8000d04 <fast_Sinus_Cosinus+0x20>
	}
	while(Eingabe < -1.)
 8000d26:	e007      	b.n	8000d38 <fast_Sinus_Cosinus+0x54>
	{
		Eingabe = Eingabe + 2.f;
 8000d28:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d2c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000d30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d34:	edc7 7a03 	vstr	s15, [r7, #12]
	while(Eingabe < -1.)
 8000d38:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d3c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000d40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d48:	d4ee      	bmi.n	8000d28 <fast_Sinus_Cosinus+0x44>
	}

	//Umwandelung des Datenformats (Darstellung mit einer Festkommazahl)
	int32_t Cordic_Eingabe = (int32_t)((Eingabe * 2147483648.f));
 8000d4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d4e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000dd8 <fast_Sinus_Cosinus+0xf4>
 8000d52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d5a:	ee17 3a90 	vmov	r3, s15
 8000d5e:	61fb      	str	r3, [r7, #28]

	// Low Level code (Initalisierung der Cordic-Einheit)
	LL_CORDIC_Config(CORDIC, LL_CORDIC_FUNCTION_COSINE,   /* cosine function */
 8000d60:	2300      	movs	r3, #0
 8000d62:	9303      	str	r3, [sp, #12]
 8000d64:	2300      	movs	r3, #0
 8000d66:	9302      	str	r3, [sp, #8]
 8000d68:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000d6c:	9301      	str	r3, [sp, #4]
 8000d6e:	2300      	movs	r3, #0
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	2300      	movs	r3, #0
 8000d74:	2260      	movs	r2, #96	; 0x60
 8000d76:	2100      	movs	r1, #0
 8000d78:	4818      	ldr	r0, [pc, #96]	; (8000ddc <fast_Sinus_Cosinus+0xf8>)
 8000d7a:	f7ff ff75 	bl	8000c68 <LL_CORDIC_Config>
	                           LL_CORDIC_NBREAD_2,          /* Two output data: cosine, then sine */
	                           LL_CORDIC_INSIZE_32BITS,     /* q1.31 format for input data */
	                           LL_CORDIC_OUTSIZE_32BITS);   /* q1.31 format for output data */

	 //Festkommazahl der Cordic-Einheit übergeben (Startet die Berechnung)
	  LL_CORDIC_WriteData(CORDIC, Cordic_Eingabe);
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	4619      	mov	r1, r3
 8000d82:	4816      	ldr	r0, [pc, #88]	; (8000ddc <fast_Sinus_Cosinus+0xf8>)
 8000d84:	f7ff ff94 	bl	8000cb0 <LL_CORDIC_WriteData>

	  //Auslesen des Ergebnisses
	  int32_t COSINE_Ergebnis = (int32_t)LL_CORDIC_ReadData(CORDIC);
 8000d88:	4814      	ldr	r0, [pc, #80]	; (8000ddc <fast_Sinus_Cosinus+0xf8>)
 8000d8a:	f7ff ff9f 	bl	8000ccc <LL_CORDIC_ReadData>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	61bb      	str	r3, [r7, #24]
	  int32_t SINE_Ergebnis = (int32_t)LL_CORDIC_ReadData(CORDIC);
 8000d92:	4812      	ldr	r0, [pc, #72]	; (8000ddc <fast_Sinus_Cosinus+0xf8>)
 8000d94:	f7ff ff9a 	bl	8000ccc <LL_CORDIC_ReadData>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	617b      	str	r3, [r7, #20]

	  //Umrechnen von dem Festkommaergebnis zur Gleitkommazahl
	  *Cosinus_out = (float)(COSINE_Ergebnis) * 0.4656612873077392578125E-9f;
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	ee07 3a90 	vmov	s15, r3
 8000da2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000da6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000de0 <fast_Sinus_Cosinus+0xfc>
 8000daa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	edc3 7a00 	vstr	s15, [r3]
	  *Sinus_out = (float)(SINE_Ergebnis) * 0.4656612873077392578125E-9f;
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	ee07 3a90 	vmov	s15, r3
 8000dba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dbe:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000de0 <fast_Sinus_Cosinus+0xfc>
 8000dc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	edc3 7a00 	vstr	s15, [r3]
}
 8000dcc:	bf00      	nop
 8000dce:	3720      	adds	r7, #32
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	43340000 	.word	0x43340000
 8000dd8:	4f000000 	.word	0x4f000000
 8000ddc:	48024400 	.word	0x48024400
 8000de0:	30000000 	.word	0x30000000

08000de4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b0aa      	sub	sp, #168	; 0xa8
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dea:	f002 fd73 	bl	80038d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dee:	f000 f8c3 	bl	8000f78 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000df2:	f000 f92f 	bl	8001054 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df6:	f000 ff87 	bl	8001d08 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dfa:	f000 ff45 	bl	8001c88 <MX_DMA_Init>
  MX_CORDIC_Init();
 8000dfe:	f000 fb3d 	bl	800147c <MX_CORDIC_Init>
  MX_DAC1_Init();
 8000e02:	f000 fb55 	bl	80014b0 <MX_DAC1_Init>
  MX_FDCAN1_Init();
 8000e06:	f000 fbaf 	bl	8001568 <MX_FDCAN1_Init>
  MX_LPUART1_UART_Init();
 8000e0a:	f000 fc11 	bl	8001630 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 8000e0e:	f000 fc5d 	bl	80016cc <MX_UART4_Init>
  MX_SPI2_Init();
 8000e12:	f000 fca9 	bl	8001768 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000e16:	f000 fcff 	bl	8001818 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000e1a:	f000 fd55 	bl	80018c8 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000e1e:	f000 fe33 	bl	8001a88 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000e22:	f000 feab 	bl	8001b7c <MX_TIM8_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000e26:	f000 fefd 	bl	8001c24 <MX_USB_OTG_HS_PCD_Init>
  MX_ADC1_Init();
 8000e2a:	f000 f943 	bl	80010b4 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000e2e:	f000 fa65 	bl	80012fc <MX_ADC3_Init>
  MX_COMP1_Init();
 8000e32:	f000 faf5 	bl	8001420 <MX_COMP1_Init>
  MX_ADC2_Init();
 8000e36:	f000 f9d9 	bl	80011ec <MX_ADC2_Init>
  MX_DTS_Init();
 8000e3a:	f000 fb6b 	bl	8001514 <MX_DTS_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //Start USER LED
 8000e3e:	2100      	movs	r1, #0
 8000e40:	4842      	ldr	r0, [pc, #264]	; (8000f4c <main+0x168>)
 8000e42:	f00c ff15 	bl	800dc70 <HAL_TIM_PWM_Start>

  Driver_set_up();
 8000e46:	f001 f897 	bl	8001f78 <Driver_set_up>

  // calibrate the ADCs for better accuracy and start it w/ interrupt
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000e4a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000e4e:	2100      	movs	r1, #0
 8000e50:	483f      	ldr	r0, [pc, #252]	; (8000f50 <main+0x16c>)
 8000e52:	f004 fbe7 	bl	8005624 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000e56:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	483d      	ldr	r0, [pc, #244]	; (8000f54 <main+0x170>)
 8000e5e:	f004 fbe1 	bl	8005624 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000e62:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000e66:	2100      	movs	r1, #0
 8000e68:	483b      	ldr	r0, [pc, #236]	; (8000f58 <main+0x174>)
 8000e6a:	f004 fbdb 	bl	8005624 <HAL_ADCEx_Calibration_Start>

  PIDController pid_I_D;
  PIDController pid_I_Q;
  Current_Mode_PID_Controller_set_up(&pid_I_D, &pid_I_Q);
 8000e6e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000e72:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e76:	4611      	mov	r1, r2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f001 fbbd 	bl	80025f8 <Current_Mode_PID_Controller_set_up>

  HAL_ADC_Start_DMA(&hadc1, ADC1_result, 3);
 8000e7e:	2203      	movs	r2, #3
 8000e80:	4936      	ldr	r1, [pc, #216]	; (8000f5c <main+0x178>)
 8000e82:	4833      	ldr	r0, [pc, #204]	; (8000f50 <main+0x16c>)
 8000e84:	f003 faec 	bl	8004460 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, ADC2_result, 3);
 8000e88:	2203      	movs	r2, #3
 8000e8a:	4935      	ldr	r1, [pc, #212]	; (8000f60 <main+0x17c>)
 8000e8c:	4831      	ldr	r0, [pc, #196]	; (8000f54 <main+0x170>)
 8000e8e:	f003 fae7 	bl	8004460 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, ADC3_result, 3);
 8000e92:	2203      	movs	r2, #3
 8000e94:	4933      	ldr	r1, [pc, #204]	; (8000f64 <main+0x180>)
 8000e96:	4830      	ldr	r0, [pc, #192]	; (8000f58 <main+0x174>)
 8000e98:	f003 fae2 	bl	8004460 <HAL_ADC_Start_DMA>

  //Starten der Motor PWM erzeugung
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //U-Positiv
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4832      	ldr	r0, [pc, #200]	; (8000f68 <main+0x184>)
 8000ea0:	f00c fee6 	bl	800dc70 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); //U-Negativ
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4830      	ldr	r0, [pc, #192]	; (8000f68 <main+0x184>)
 8000ea8:	f00d ff9c 	bl	800ede4 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); //V-Positiv
 8000eac:	2104      	movs	r1, #4
 8000eae:	482e      	ldr	r0, [pc, #184]	; (8000f68 <main+0x184>)
 8000eb0:	f00c fede 	bl	800dc70 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2); //V-Negativ
 8000eb4:	2104      	movs	r1, #4
 8000eb6:	482c      	ldr	r0, [pc, #176]	; (8000f68 <main+0x184>)
 8000eb8:	f00d ff94 	bl	800ede4 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); //W-Positiv
 8000ebc:	2108      	movs	r1, #8
 8000ebe:	482a      	ldr	r0, [pc, #168]	; (8000f68 <main+0x184>)
 8000ec0:	f00c fed6 	bl	800dc70 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); //W-Negativ
 8000ec4:	2108      	movs	r1, #8
 8000ec6:	4828      	ldr	r0, [pc, #160]	; (8000f68 <main+0x184>)
 8000ec8:	f00d ff8c 	bl	800ede4 <HAL_TIMEx_PWMN_Start>

  //CCR Max value = 3999
  TIM1->CCR1 = 2000;
 8000ecc:	4b27      	ldr	r3, [pc, #156]	; (8000f6c <main+0x188>)
 8000ece:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000ed2:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 2000;
 8000ed4:	4b25      	ldr	r3, [pc, #148]	; (8000f6c <main+0x188>)
 8000ed6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000eda:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 2000;
 8000edc:	4b23      	ldr	r3, [pc, #140]	; (8000f6c <main+0x188>)
 8000ede:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000ee2:	63da      	str	r2, [r3, #60]	; 0x3c

  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_BREAK);
 8000ee4:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <main+0x184>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	68da      	ldr	r2, [r3, #12]
 8000eea:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <main+0x184>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ef2:	60da      	str	r2, [r3, #12]


  //Starten des digitalen Temperatursensors
  HAL_DTS_Start(&hdts);
 8000ef4:	481e      	ldr	r0, [pc, #120]	; (8000f70 <main+0x18c>)
 8000ef6:	f007 fc29 	bl	800874c <HAL_DTS_Start>

  static int32_t Temperature;

  HAL_Delay(1);
 8000efa:	2001      	movs	r0, #1
 8000efc:	f002 fd7c 	bl	80039f8 <HAL_Delay>

  Motor_Parameter Test_Motor;
  Test_Motor.Pole_pair_count = Pole_pair_count;
 8000f00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f04:	637b      	str	r3, [r7, #52]	; 0x34
  FOC_Values Controll_data;

  Controller_Hardware_Parameter HW_Param;
  Current_sensor_calibration(&HW_Param);
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f001 fc7b 	bl	8002804 <Current_sensor_calibration>
		debug_uart4_write_text(" FAULT2: ");
		debug_uart4_write_float((float)RECEIVE_MSG);
		debug_uart4_write_text(" \n");
		*/

	  if(NEW_SENSOR_DATA == 1)
 8000f0e:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <main+0x190>)
 8000f10:	881b      	ldrh	r3, [r3, #0]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d115      	bne.n	8000f42 <main+0x15e>
	  {
		  Controll_Data_preparation(&Controll_data, &Test_Motor, &HW_Param);
 8000f16:	1d3a      	adds	r2, r7, #4
 8000f18:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	4618      	mov	r0, r3
 8000f22:	f001 fbd5 	bl	80026d0 <Controll_Data_preparation>
		  Currentmode_FOC(&Controll_data, &pid_I_D, &pid_I_Q);
 8000f26:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000f2a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000f2e:	f107 0310 	add.w	r3, r7, #16
 8000f32:	4618      	mov	r0, r3
 8000f34:	f001 fad4 	bl	80024e0 <Currentmode_FOC>
		  set_PWM_Half_bridges(&Controll_data);
 8000f38:	f107 0310 	add.w	r3, r7, #16
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f001 fc35 	bl	80027ac <set_PWM_Half_bridges>
	  }

	  HAL_Delay(1000);
 8000f42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f46:	f002 fd57 	bl	80039f8 <HAL_Delay>
	  if(NEW_SENSOR_DATA == 1)
 8000f4a:	e7e0      	b.n	8000f0e <main+0x12a>
 8000f4c:	24000834 	.word	0x24000834
 8000f50:	240001f4 	.word	0x240001f4
 8000f54:	24000264 	.word	0x24000264
 8000f58:	240002d4 	.word	0x240002d4
 8000f5c:	24000dd8 	.word	0x24000dd8
 8000f60:	24000de0 	.word	0x24000de0
 8000f64:	24000de8 	.word	0x24000de8
 8000f68:	240007e8 	.word	0x240007e8
 8000f6c:	40010000 	.word	0x40010000
 8000f70:	240004ec 	.word	0x240004ec
 8000f74:	24000df0 	.word	0x24000df0

08000f78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b09c      	sub	sp, #112	; 0x70
 8000f7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f82:	224c      	movs	r2, #76	; 0x4c
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f010 ff07 	bl	8011d9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	2220      	movs	r2, #32
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f010 ff01 	bl	8011d9a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f98:	2002      	movs	r0, #2
 8000f9a:	f008 fa93 	bl	80094c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	603b      	str	r3, [r7, #0]
 8000fa2:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <SystemClock_Config+0xd8>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	4a2a      	ldr	r2, [pc, #168]	; (8001050 <SystemClock_Config+0xd8>)
 8000fa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fac:	6193      	str	r3, [r2, #24]
 8000fae:	4b28      	ldr	r3, [pc, #160]	; (8001050 <SystemClock_Config+0xd8>)
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fb6:	603b      	str	r3, [r7, #0]
 8000fb8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fba:	bf00      	nop
 8000fbc:	4b24      	ldr	r3, [pc, #144]	; (8001050 <SystemClock_Config+0xd8>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fc8:	d1f8      	bne.n	8000fbc <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000fe0:	2332      	movs	r3, #50	; 0x32
 8000fe2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fe8:	2304      	movs	r3, #4
 8000fea:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fec:	2302      	movs	r3, #2
 8000fee:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ff0:	230c      	movs	r3, #12
 8000ff2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001000:	4618      	mov	r0, r3
 8001002:	f008 faa9 	bl	8009558 <HAL_RCC_OscConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800100c:	f001 fca4 	bl	8002958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001010:	233f      	movs	r3, #63	; 0x3f
 8001012:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001014:	2303      	movs	r3, #3
 8001016:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800101c:	2308      	movs	r3, #8
 800101e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001020:	2340      	movs	r3, #64	; 0x40
 8001022:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001024:	2340      	movs	r3, #64	; 0x40
 8001026:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800102c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800102e:	2340      	movs	r3, #64	; 0x40
 8001030:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	2102      	movs	r1, #2
 8001036:	4618      	mov	r0, r3
 8001038:	f008 fe68 	bl	8009d0c <HAL_RCC_ClockConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001042:	f001 fc89 	bl	8002958 <Error_Handler>
  }
}
 8001046:	bf00      	nop
 8001048:	3770      	adds	r7, #112	; 0x70
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	58024800 	.word	0x58024800

08001054 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b0ae      	sub	sp, #184	; 0xb8
 8001058:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800105a:	463b      	mov	r3, r7
 800105c:	22b8      	movs	r2, #184	; 0xb8
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f010 fe9a 	bl	8011d9a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001066:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800106a:	f04f 0300 	mov.w	r3, #0
 800106e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001072:	2301      	movs	r3, #1
 8001074:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 8001076:	2318      	movs	r3, #24
 8001078:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800107a:	2302      	movs	r3, #2
 800107c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800107e:	2302      	movs	r3, #2
 8001080:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001082:	2302      	movs	r3, #2
 8001084:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001086:	23c0      	movs	r3, #192	; 0xc0
 8001088:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800108a:	2300      	movs	r3, #0
 800108c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001092:	2300      	movs	r3, #0
 8001094:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001098:	463b      	mov	r3, r7
 800109a:	4618      	mov	r0, r3
 800109c:	f009 f9c2 	bl	800a424 <HAL_RCCEx_PeriphCLKConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80010a6:	f001 fc57 	bl	8002958 <Error_Handler>
  }
}
 80010aa:	bf00      	nop
 80010ac:	37b8      	adds	r7, #184	; 0xb8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08c      	sub	sp, #48	; 0x30
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010c6:	463b      	mov	r3, r7
 80010c8:	2224      	movs	r2, #36	; 0x24
 80010ca:	2100      	movs	r1, #0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f010 fe64 	bl	8011d9a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010d2:	4b41      	ldr	r3, [pc, #260]	; (80011d8 <MX_ADC1_Init+0x124>)
 80010d4:	4a41      	ldr	r2, [pc, #260]	; (80011dc <MX_ADC1_Init+0x128>)
 80010d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010d8:	4b3f      	ldr	r3, [pc, #252]	; (80011d8 <MX_ADC1_Init+0x124>)
 80010da:	2200      	movs	r2, #0
 80010dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80010de:	4b3e      	ldr	r3, [pc, #248]	; (80011d8 <MX_ADC1_Init+0x124>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010e4:	4b3c      	ldr	r3, [pc, #240]	; (80011d8 <MX_ADC1_Init+0x124>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80010ea:	4b3b      	ldr	r3, [pc, #236]	; (80011d8 <MX_ADC1_Init+0x124>)
 80010ec:	2208      	movs	r2, #8
 80010ee:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010f0:	4b39      	ldr	r3, [pc, #228]	; (80011d8 <MX_ADC1_Init+0x124>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010f6:	4b38      	ldr	r3, [pc, #224]	; (80011d8 <MX_ADC1_Init+0x124>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80010fc:	4b36      	ldr	r3, [pc, #216]	; (80011d8 <MX_ADC1_Init+0x124>)
 80010fe:	2203      	movs	r2, #3
 8001100:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001102:	4b35      	ldr	r3, [pc, #212]	; (80011d8 <MX_ADC1_Init+0x124>)
 8001104:	2200      	movs	r2, #0
 8001106:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800110a:	4b33      	ldr	r3, [pc, #204]	; (80011d8 <MX_ADC1_Init+0x124>)
 800110c:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8001110:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001112:	4b31      	ldr	r3, [pc, #196]	; (80011d8 <MX_ADC1_Init+0x124>)
 8001114:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001118:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800111a:	4b2f      	ldr	r3, [pc, #188]	; (80011d8 <MX_ADC1_Init+0x124>)
 800111c:	2203      	movs	r2, #3
 800111e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001120:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <MX_ADC1_Init+0x124>)
 8001122:	2200      	movs	r2, #0
 8001124:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001126:	4b2c      	ldr	r3, [pc, #176]	; (80011d8 <MX_ADC1_Init+0x124>)
 8001128:	2200      	movs	r2, #0
 800112a:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800112c:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <MX_ADC1_Init+0x124>)
 800112e:	2200      	movs	r2, #0
 8001130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001134:	4828      	ldr	r0, [pc, #160]	; (80011d8 <MX_ADC1_Init+0x124>)
 8001136:	f002 ff8b 	bl	8004050 <HAL_ADC_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001140:	f001 fc0a 	bl	8002958 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114c:	4619      	mov	r1, r3
 800114e:	4822      	ldr	r0, [pc, #136]	; (80011d8 <MX_ADC1_Init+0x124>)
 8001150:	f004 facc 	bl	80056ec <HAL_ADCEx_MultiModeConfigChannel>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800115a:	f001 fbfd 	bl	8002958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 800115e:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <MX_ADC1_Init+0x12c>)
 8001160:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001162:	2306      	movs	r3, #6
 8001164:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8001166:	2302      	movs	r3, #2
 8001168:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800116a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800116e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001170:	2304      	movs	r3, #4
 8001172:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800117e:	463b      	mov	r3, r7
 8001180:	4619      	mov	r1, r3
 8001182:	4815      	ldr	r0, [pc, #84]	; (80011d8 <MX_ADC1_Init+0x124>)
 8001184:	f003 fa5c 	bl	8004640 <HAL_ADC_ConfigChannel>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800118e:	f001 fbe3 	bl	8002958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001192:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <MX_ADC1_Init+0x130>)
 8001194:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001196:	230c      	movs	r3, #12
 8001198:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800119a:	463b      	mov	r3, r7
 800119c:	4619      	mov	r1, r3
 800119e:	480e      	ldr	r0, [pc, #56]	; (80011d8 <MX_ADC1_Init+0x124>)
 80011a0:	f003 fa4e 	bl	8004640 <HAL_ADC_ConfigChannel>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80011aa:	f001 fbd5 	bl	8002958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <MX_ADC1_Init+0x134>)
 80011b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80011b2:	2312      	movs	r3, #18
 80011b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011b6:	2301      	movs	r3, #1
 80011b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ba:	463b      	mov	r3, r7
 80011bc:	4619      	mov	r1, r3
 80011be:	4806      	ldr	r0, [pc, #24]	; (80011d8 <MX_ADC1_Init+0x124>)
 80011c0:	f003 fa3e 	bl	8004640 <HAL_ADC_ConfigChannel>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80011ca:	f001 fbc5 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	3730      	adds	r7, #48	; 0x30
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	240001f4 	.word	0x240001f4
 80011dc:	40022000 	.word	0x40022000
 80011e0:	43210000 	.word	0x43210000
 80011e4:	47520000 	.word	0x47520000
 80011e8:	3ef08000 	.word	0x3ef08000

080011ec <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	2224      	movs	r2, #36	; 0x24
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f010 fdce 	bl	8011d9a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011fe:	4b3a      	ldr	r3, [pc, #232]	; (80012e8 <MX_ADC2_Init+0xfc>)
 8001200:	4a3a      	ldr	r2, [pc, #232]	; (80012ec <MX_ADC2_Init+0x100>)
 8001202:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001204:	4b38      	ldr	r3, [pc, #224]	; (80012e8 <MX_ADC2_Init+0xfc>)
 8001206:	2200      	movs	r2, #0
 8001208:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 800120a:	4b37      	ldr	r3, [pc, #220]	; (80012e8 <MX_ADC2_Init+0xfc>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001210:	4b35      	ldr	r3, [pc, #212]	; (80012e8 <MX_ADC2_Init+0xfc>)
 8001212:	2201      	movs	r2, #1
 8001214:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001216:	4b34      	ldr	r3, [pc, #208]	; (80012e8 <MX_ADC2_Init+0xfc>)
 8001218:	2208      	movs	r2, #8
 800121a:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800121c:	4b32      	ldr	r3, [pc, #200]	; (80012e8 <MX_ADC2_Init+0xfc>)
 800121e:	2200      	movs	r2, #0
 8001220:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001222:	4b31      	ldr	r3, [pc, #196]	; (80012e8 <MX_ADC2_Init+0xfc>)
 8001224:	2200      	movs	r2, #0
 8001226:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 3;
 8001228:	4b2f      	ldr	r3, [pc, #188]	; (80012e8 <MX_ADC2_Init+0xfc>)
 800122a:	2203      	movs	r2, #3
 800122c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800122e:	4b2e      	ldr	r3, [pc, #184]	; (80012e8 <MX_ADC2_Init+0xfc>)
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8001236:	4b2c      	ldr	r3, [pc, #176]	; (80012e8 <MX_ADC2_Init+0xfc>)
 8001238:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 800123c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800123e:	4b2a      	ldr	r3, [pc, #168]	; (80012e8 <MX_ADC2_Init+0xfc>)
 8001240:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001244:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001246:	4b28      	ldr	r3, [pc, #160]	; (80012e8 <MX_ADC2_Init+0xfc>)
 8001248:	2203      	movs	r2, #3
 800124a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800124c:	4b26      	ldr	r3, [pc, #152]	; (80012e8 <MX_ADC2_Init+0xfc>)
 800124e:	2200      	movs	r2, #0
 8001250:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001252:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <MX_ADC2_Init+0xfc>)
 8001254:	2200      	movs	r2, #0
 8001256:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8001258:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <MX_ADC2_Init+0xfc>)
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001260:	4821      	ldr	r0, [pc, #132]	; (80012e8 <MX_ADC2_Init+0xfc>)
 8001262:	f002 fef5 	bl	8004050 <HAL_ADC_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 800126c:	f001 fb74 	bl	8002958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001270:	4b1f      	ldr	r3, [pc, #124]	; (80012f0 <MX_ADC2_Init+0x104>)
 8001272:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001274:	2306      	movs	r3, #6
 8001276:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8001278:	2302      	movs	r3, #2
 800127a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800127c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001280:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001282:	2304      	movs	r3, #4
 8001284:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	4619      	mov	r1, r3
 8001294:	4814      	ldr	r0, [pc, #80]	; (80012e8 <MX_ADC2_Init+0xfc>)
 8001296:	f003 f9d3 	bl	8004640 <HAL_ADC_ConfigChannel>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 80012a0:	f001 fb5a 	bl	8002958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <MX_ADC2_Init+0x108>)
 80012a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012a8:	230c      	movs	r3, #12
 80012aa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012ac:	2301      	movs	r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	4619      	mov	r1, r3
 80012b4:	480c      	ldr	r0, [pc, #48]	; (80012e8 <MX_ADC2_Init+0xfc>)
 80012b6:	f003 f9c3 	bl	8004640 <HAL_ADC_ConfigChannel>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_ADC2_Init+0xd8>
  {
    Error_Handler();
 80012c0:	f001 fb4a 	bl	8002958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <MX_ADC2_Init+0x10c>)
 80012c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012c8:	2312      	movs	r3, #18
 80012ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	4619      	mov	r1, r3
 80012d0:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_ADC2_Init+0xfc>)
 80012d2:	f003 f9b5 	bl	8004640 <HAL_ADC_ConfigChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_ADC2_Init+0xf4>
  {
    Error_Handler();
 80012dc:	f001 fb3c 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	3728      	adds	r7, #40	; 0x28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	24000264 	.word	0x24000264
 80012ec:	40022100 	.word	0x40022100
 80012f0:	25b00200 	.word	0x25b00200
 80012f4:	2e300800 	.word	0x2e300800
 80012f8:	3ac04000 	.word	0x3ac04000

080012fc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	; 0x28
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	2224      	movs	r2, #36	; 0x24
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f010 fd46 	bl	8011d9a <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800130e:	4b3f      	ldr	r3, [pc, #252]	; (800140c <MX_ADC3_Init+0x110>)
 8001310:	4a3f      	ldr	r2, [pc, #252]	; (8001410 <MX_ADC3_Init+0x114>)
 8001312:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001314:	4b3d      	ldr	r3, [pc, #244]	; (800140c <MX_ADC3_Init+0x110>)
 8001316:	2200      	movs	r2, #0
 8001318:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800131a:	4b3c      	ldr	r3, [pc, #240]	; (800140c <MX_ADC3_Init+0x110>)
 800131c:	2208      	movs	r2, #8
 800131e:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001320:	4b3a      	ldr	r3, [pc, #232]	; (800140c <MX_ADC3_Init+0x110>)
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001326:	4b39      	ldr	r3, [pc, #228]	; (800140c <MX_ADC3_Init+0x110>)
 8001328:	2201      	movs	r2, #1
 800132a:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800132c:	4b37      	ldr	r3, [pc, #220]	; (800140c <MX_ADC3_Init+0x110>)
 800132e:	2208      	movs	r2, #8
 8001330:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001332:	4b36      	ldr	r3, [pc, #216]	; (800140c <MX_ADC3_Init+0x110>)
 8001334:	2200      	movs	r2, #0
 8001336:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001338:	4b34      	ldr	r3, [pc, #208]	; (800140c <MX_ADC3_Init+0x110>)
 800133a:	2200      	movs	r2, #0
 800133c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 3;
 800133e:	4b33      	ldr	r3, [pc, #204]	; (800140c <MX_ADC3_Init+0x110>)
 8001340:	2203      	movs	r2, #3
 8001342:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001344:	4b31      	ldr	r3, [pc, #196]	; (800140c <MX_ADC3_Init+0x110>)
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800134c:	4b2f      	ldr	r3, [pc, #188]	; (800140c <MX_ADC3_Init+0x110>)
 800134e:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8001352:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001354:	4b2d      	ldr	r3, [pc, #180]	; (800140c <MX_ADC3_Init+0x110>)
 8001356:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800135a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800135c:	4b2b      	ldr	r3, [pc, #172]	; (800140c <MX_ADC3_Init+0x110>)
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001364:	4b29      	ldr	r3, [pc, #164]	; (800140c <MX_ADC3_Init+0x110>)
 8001366:	2200      	movs	r2, #0
 8001368:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800136a:	4b28      	ldr	r3, [pc, #160]	; (800140c <MX_ADC3_Init+0x110>)
 800136c:	2203      	movs	r2, #3
 800136e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001370:	4b26      	ldr	r3, [pc, #152]	; (800140c <MX_ADC3_Init+0x110>)
 8001372:	2200      	movs	r2, #0
 8001374:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001376:	4b25      	ldr	r3, [pc, #148]	; (800140c <MX_ADC3_Init+0x110>)
 8001378:	2200      	movs	r2, #0
 800137a:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 800137c:	4b23      	ldr	r3, [pc, #140]	; (800140c <MX_ADC3_Init+0x110>)
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001384:	4821      	ldr	r0, [pc, #132]	; (800140c <MX_ADC3_Init+0x110>)
 8001386:	f002 fe63 	bl	8004050 <HAL_ADC_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_ADC3_Init+0x98>
  {
    Error_Handler();
 8001390:	f001 fae2 	bl	8002958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001394:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <MX_ADC3_Init+0x118>)
 8001396:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001398:	2306      	movs	r3, #6
 800139a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_6CYCLES_5;
 800139c:	2301      	movs	r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013a0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80013a4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013a6:	2304      	movs	r3, #4
 80013a8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	4619      	mov	r1, r3
 80013b6:	4815      	ldr	r0, [pc, #84]	; (800140c <MX_ADC3_Init+0x110>)
 80013b8:	f003 f942 	bl	8004640 <HAL_ADC_ConfigChannel>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_ADC3_Init+0xca>
  {
    Error_Handler();
 80013c2:	f001 fac9 	bl	8002958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013c6:	4b14      	ldr	r3, [pc, #80]	; (8001418 <MX_ADC3_Init+0x11c>)
 80013c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013ca:	230c      	movs	r3, #12
 80013cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	4619      	mov	r1, r3
 80013d2:	480e      	ldr	r0, [pc, #56]	; (800140c <MX_ADC3_Init+0x110>)
 80013d4:	f003 f934 	bl	8004640 <HAL_ADC_ConfigChannel>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_ADC3_Init+0xe6>
  {
    Error_Handler();
 80013de:	f001 fabb 	bl	8002958 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <MX_ADC3_Init+0x120>)
 80013e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80013e6:	2312      	movs	r3, #18
 80013e8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	4619      	mov	r1, r3
 80013f2:	4806      	ldr	r0, [pc, #24]	; (800140c <MX_ADC3_Init+0x110>)
 80013f4:	f003 f924 	bl	8004640 <HAL_ADC_ConfigChannel>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 80013fe:	f001 faab 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	3728      	adds	r7, #40	; 0x28
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	240002d4 	.word	0x240002d4
 8001410:	58026000 	.word	0x58026000
 8001414:	2a000400 	.word	0x2a000400
 8001418:	04300002 	.word	0x04300002
 800141c:	c7520000 	.word	0xc7520000

08001420 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <MX_COMP1_Init+0x54>)
 8001426:	4a14      	ldr	r2, [pc, #80]	; (8001478 <MX_COMP1_Init+0x58>)
 8001428:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 800142a:	4b12      	ldr	r3, [pc, #72]	; (8001474 <MX_COMP1_Init+0x54>)
 800142c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001430:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <MX_COMP1_Init+0x54>)
 8001434:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001438:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <MX_COMP1_Init+0x54>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <MX_COMP1_Init+0x54>)
 8001442:	2200      	movs	r2, #0
 8001444:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <MX_COMP1_Init+0x54>)
 8001448:	2200      	movs	r2, #0
 800144a:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <MX_COMP1_Init+0x54>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <MX_COMP1_Init+0x54>)
 8001454:	2200      	movs	r2, #0
 8001456:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <MX_COMP1_Init+0x54>)
 800145a:	2200      	movs	r2, #0
 800145c:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800145e:	4805      	ldr	r0, [pc, #20]	; (8001474 <MX_COMP1_Init+0x54>)
 8001460:	f004 fa26 	bl	80058b0 <HAL_COMP_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_COMP1_Init+0x4e>
  {
    Error_Handler();
 800146a:	f001 fa75 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	240004ac 	.word	0x240004ac
 8001478:	5800380c 	.word	0x5800380c

0800147c <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CORDIC_Init 0 */

  /* USER CODE END CORDIC_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_CORDIC_CLK_ENABLE();
 8001482:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <MX_CORDIC_Init+0x30>)
 8001484:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001488:	4a08      	ldr	r2, [pc, #32]	; (80014ac <MX_CORDIC_Init+0x30>)
 800148a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <MX_CORDIC_Init+0x30>)
 8001494:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	58024400 	.word	0x58024400

080014b0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	; 0x28
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	2224      	movs	r2, #36	; 0x24
 80014ba:	2100      	movs	r1, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f010 fc6c 	bl	8011d9a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80014c2:	4b12      	ldr	r3, [pc, #72]	; (800150c <MX_DAC1_Init+0x5c>)
 80014c4:	4a12      	ldr	r2, [pc, #72]	; (8001510 <MX_DAC1_Init+0x60>)
 80014c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80014c8:	4810      	ldr	r0, [pc, #64]	; (800150c <MX_DAC1_Init+0x5c>)
 80014ca:	f004 fc2a 	bl	8005d22 <HAL_DAC_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80014d4:	f001 fa40 	bl	8002958 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014d8:	2300      	movs	r3, #0
 80014da:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80014dc:	2300      	movs	r3, #0
 80014de:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80014e4:	2301      	movs	r3, #1
 80014e6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	2200      	movs	r2, #0
 80014f0:	4619      	mov	r1, r3
 80014f2:	4806      	ldr	r0, [pc, #24]	; (800150c <MX_DAC1_Init+0x5c>)
 80014f4:	f004 fc38 	bl	8005d68 <HAL_DAC_ConfigChannel>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80014fe:	f001 fa2b 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	3728      	adds	r7, #40	; 0x28
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	240004d8 	.word	0x240004d8
 8001510:	40007400 	.word	0x40007400

08001514 <MX_DTS_Init>:
  * @brief DTS Initialization Function
  * @param None
  * @retval None
  */
static void MX_DTS_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END DTS_Init 0 */

  /* USER CODE BEGIN DTS_Init 1 */

  /* USER CODE END DTS_Init 1 */
  hdts.Instance = DTS;
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <MX_DTS_Init+0x4c>)
 800151a:	4a12      	ldr	r2, [pc, #72]	; (8001564 <MX_DTS_Init+0x50>)
 800151c:	601a      	str	r2, [r3, #0]
  hdts.Init.QuickMeasure = DTS_QUICKMEAS_DISABLE;
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <MX_DTS_Init+0x4c>)
 8001520:	2200      	movs	r2, #0
 8001522:	605a      	str	r2, [r3, #4]
  hdts.Init.RefClock = DTS_REFCLKSEL_PCLK;
 8001524:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <MX_DTS_Init+0x4c>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  hdts.Init.TriggerInput = DTS_TRIGGER_HW_NONE;
 800152a:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <MX_DTS_Init+0x4c>)
 800152c:	2200      	movs	r2, #0
 800152e:	60da      	str	r2, [r3, #12]
  hdts.Init.SamplingTime = DTS_SMP_TIME_15_CYCLE;
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <MX_DTS_Init+0x4c>)
 8001532:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8001536:	611a      	str	r2, [r3, #16]
  hdts.Init.Divider = 0;
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <MX_DTS_Init+0x4c>)
 800153a:	2200      	movs	r2, #0
 800153c:	615a      	str	r2, [r3, #20]
  hdts.Init.HighThreshold = 0x0;
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <MX_DTS_Init+0x4c>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  hdts.Init.LowThreshold = 0x0;
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <MX_DTS_Init+0x4c>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
  if (HAL_DTS_Init(&hdts) != HAL_OK)
 800154a:	4805      	ldr	r0, [pc, #20]	; (8001560 <MX_DTS_Init+0x4c>)
 800154c:	f007 f864 	bl	8008618 <HAL_DTS_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_DTS_Init+0x46>
  {
    Error_Handler();
 8001556:	f001 f9ff 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN DTS_Init 2 */

  /* USER CODE END DTS_Init 2 */

}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	240004ec 	.word	0x240004ec
 8001564:	58006800 	.word	0x58006800

08001568 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800156c:	4b2e      	ldr	r3, [pc, #184]	; (8001628 <MX_FDCAN1_Init+0xc0>)
 800156e:	4a2f      	ldr	r2, [pc, #188]	; (800162c <MX_FDCAN1_Init+0xc4>)
 8001570:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001572:	4b2d      	ldr	r3, [pc, #180]	; (8001628 <MX_FDCAN1_Init+0xc0>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001578:	4b2b      	ldr	r3, [pc, #172]	; (8001628 <MX_FDCAN1_Init+0xc0>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800157e:	4b2a      	ldr	r3, [pc, #168]	; (8001628 <MX_FDCAN1_Init+0xc0>)
 8001580:	2200      	movs	r2, #0
 8001582:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001584:	4b28      	ldr	r3, [pc, #160]	; (8001628 <MX_FDCAN1_Init+0xc0>)
 8001586:	2200      	movs	r2, #0
 8001588:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800158a:	4b27      	ldr	r3, [pc, #156]	; (8001628 <MX_FDCAN1_Init+0xc0>)
 800158c:	2200      	movs	r2, #0
 800158e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001590:	4b25      	ldr	r3, [pc, #148]	; (8001628 <MX_FDCAN1_Init+0xc0>)
 8001592:	2210      	movs	r2, #16
 8001594:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001596:	4b24      	ldr	r3, [pc, #144]	; (8001628 <MX_FDCAN1_Init+0xc0>)
 8001598:	2201      	movs	r2, #1
 800159a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800159c:	4b22      	ldr	r3, [pc, #136]	; (8001628 <MX_FDCAN1_Init+0xc0>)
 800159e:	2202      	movs	r2, #2
 80015a0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80015a2:	4b21      	ldr	r3, [pc, #132]	; (8001628 <MX_FDCAN1_Init+0xc0>)
 80015a4:	2202      	movs	r2, #2
 80015a6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80015a8:	4b1f      	ldr	r3, [pc, #124]	; (8001628 <MX_FDCAN1_Init+0xc0>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80015ae:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <MX_FDCAN1_Init+0xc0>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80015b4:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <MX_FDCAN1_Init+0xc0>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80015ba:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <MX_FDCAN1_Init+0xc0>)
 80015bc:	2201      	movs	r2, #1
 80015be:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80015c0:	4b19      	ldr	r3, [pc, #100]	; (8001628 <MX_FDCAN1_Init+0xc0>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80015c6:	4b18      	ldr	r3, [pc, #96]	; (8001628 <MX_FDCAN1_Init+0xc0>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80015cc:	4b16      	ldr	r3, [pc, #88]	; (8001628 <MX_FDCAN1_Init+0xc0>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <MX_FDCAN1_Init+0xc0>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80015d8:	4b13      	ldr	r3, [pc, #76]	; (8001628 <MX_FDCAN1_Init+0xc0>)
 80015da:	2204      	movs	r2, #4
 80015dc:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80015de:	4b12      	ldr	r3, [pc, #72]	; (8001628 <MX_FDCAN1_Init+0xc0>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80015e4:	4b10      	ldr	r3, [pc, #64]	; (8001628 <MX_FDCAN1_Init+0xc0>)
 80015e6:	2204      	movs	r2, #4
 80015e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80015ea:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <MX_FDCAN1_Init+0xc0>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80015f0:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <MX_FDCAN1_Init+0xc0>)
 80015f2:	2204      	movs	r2, #4
 80015f4:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80015f6:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <MX_FDCAN1_Init+0xc0>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80015fc:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <MX_FDCAN1_Init+0xc0>)
 80015fe:	2200      	movs	r2, #0
 8001600:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <MX_FDCAN1_Init+0xc0>)
 8001604:	2200      	movs	r2, #0
 8001606:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001608:	4b07      	ldr	r3, [pc, #28]	; (8001628 <MX_FDCAN1_Init+0xc0>)
 800160a:	2200      	movs	r2, #0
 800160c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <MX_FDCAN1_Init+0xc0>)
 8001610:	2204      	movs	r2, #4
 8001612:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001614:	4804      	ldr	r0, [pc, #16]	; (8001628 <MX_FDCAN1_Init+0xc0>)
 8001616:	f007 f8e7 	bl	80087e8 <HAL_FDCAN_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001620:	f001 f99a 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	24000510 	.word	0x24000510
 800162c:	4000a000 	.word	0x4000a000

08001630 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001634:	4b22      	ldr	r3, [pc, #136]	; (80016c0 <MX_LPUART1_UART_Init+0x90>)
 8001636:	4a23      	ldr	r2, [pc, #140]	; (80016c4 <MX_LPUART1_UART_Init+0x94>)
 8001638:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800163a:	4b21      	ldr	r3, [pc, #132]	; (80016c0 <MX_LPUART1_UART_Init+0x90>)
 800163c:	4a22      	ldr	r2, [pc, #136]	; (80016c8 <MX_LPUART1_UART_Init+0x98>)
 800163e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001640:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <MX_LPUART1_UART_Init+0x90>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001646:	4b1e      	ldr	r3, [pc, #120]	; (80016c0 <MX_LPUART1_UART_Init+0x90>)
 8001648:	2200      	movs	r2, #0
 800164a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800164c:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <MX_LPUART1_UART_Init+0x90>)
 800164e:	2200      	movs	r2, #0
 8001650:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001652:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <MX_LPUART1_UART_Init+0x90>)
 8001654:	220c      	movs	r2, #12
 8001656:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001658:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <MX_LPUART1_UART_Init+0x90>)
 800165a:	2200      	movs	r2, #0
 800165c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800165e:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <MX_LPUART1_UART_Init+0x90>)
 8001660:	2200      	movs	r2, #0
 8001662:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001664:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <MX_LPUART1_UART_Init+0x90>)
 8001666:	2200      	movs	r2, #0
 8001668:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <MX_LPUART1_UART_Init+0x90>)
 800166c:	2200      	movs	r2, #0
 800166e:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <MX_LPUART1_UART_Init+0x90>)
 8001672:	2200      	movs	r2, #0
 8001674:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001676:	4812      	ldr	r0, [pc, #72]	; (80016c0 <MX_LPUART1_UART_Init+0x90>)
 8001678:	f00d fec9 	bl	800f40e <HAL_UART_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8001682:	f001 f969 	bl	8002958 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001686:	2100      	movs	r1, #0
 8001688:	480d      	ldr	r0, [pc, #52]	; (80016c0 <MX_LPUART1_UART_Init+0x90>)
 800168a:	f00f f85e 	bl	801074a <HAL_UARTEx_SetTxFifoThreshold>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8001694:	f001 f960 	bl	8002958 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001698:	2100      	movs	r1, #0
 800169a:	4809      	ldr	r0, [pc, #36]	; (80016c0 <MX_LPUART1_UART_Init+0x90>)
 800169c:	f00f f893 	bl	80107c6 <HAL_UARTEx_SetRxFifoThreshold>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80016a6:	f001 f957 	bl	8002958 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80016aa:	4805      	ldr	r0, [pc, #20]	; (80016c0 <MX_LPUART1_UART_Init+0x90>)
 80016ac:	f00f f814 	bl	80106d8 <HAL_UARTEx_DisableFifoMode>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 80016b6:	f001 f94f 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	240005b0 	.word	0x240005b0
 80016c4:	58000c00 	.word	0x58000c00
 80016c8:	00033324 	.word	0x00033324

080016cc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80016d0:	4b22      	ldr	r3, [pc, #136]	; (800175c <MX_UART4_Init+0x90>)
 80016d2:	4a23      	ldr	r2, [pc, #140]	; (8001760 <MX_UART4_Init+0x94>)
 80016d4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 500000;
 80016d6:	4b21      	ldr	r3, [pc, #132]	; (800175c <MX_UART4_Init+0x90>)
 80016d8:	4a22      	ldr	r2, [pc, #136]	; (8001764 <MX_UART4_Init+0x98>)
 80016da:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80016dc:	4b1f      	ldr	r3, [pc, #124]	; (800175c <MX_UART4_Init+0x90>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80016e2:	4b1e      	ldr	r3, [pc, #120]	; (800175c <MX_UART4_Init+0x90>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80016e8:	4b1c      	ldr	r3, [pc, #112]	; (800175c <MX_UART4_Init+0x90>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80016ee:	4b1b      	ldr	r3, [pc, #108]	; (800175c <MX_UART4_Init+0x90>)
 80016f0:	220c      	movs	r2, #12
 80016f2:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f4:	4b19      	ldr	r3, [pc, #100]	; (800175c <MX_UART4_Init+0x90>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80016fa:	4b18      	ldr	r3, [pc, #96]	; (800175c <MX_UART4_Init+0x90>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001700:	4b16      	ldr	r3, [pc, #88]	; (800175c <MX_UART4_Init+0x90>)
 8001702:	2200      	movs	r2, #0
 8001704:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <MX_UART4_Init+0x90>)
 8001708:	2200      	movs	r2, #0
 800170a:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800170c:	4b13      	ldr	r3, [pc, #76]	; (800175c <MX_UART4_Init+0x90>)
 800170e:	2200      	movs	r2, #0
 8001710:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001712:	4812      	ldr	r0, [pc, #72]	; (800175c <MX_UART4_Init+0x90>)
 8001714:	f00d fe7b 	bl	800f40e <HAL_UART_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_UART4_Init+0x56>
  {
    Error_Handler();
 800171e:	f001 f91b 	bl	8002958 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001722:	2100      	movs	r1, #0
 8001724:	480d      	ldr	r0, [pc, #52]	; (800175c <MX_UART4_Init+0x90>)
 8001726:	f00f f810 	bl	801074a <HAL_UARTEx_SetTxFifoThreshold>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_UART4_Init+0x68>
  {
    Error_Handler();
 8001730:	f001 f912 	bl	8002958 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001734:	2100      	movs	r1, #0
 8001736:	4809      	ldr	r0, [pc, #36]	; (800175c <MX_UART4_Init+0x90>)
 8001738:	f00f f845 	bl	80107c6 <HAL_UARTEx_SetRxFifoThreshold>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 8001742:	f001 f909 	bl	8002958 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <MX_UART4_Init+0x90>)
 8001748:	f00e ffc6 	bl	80106d8 <HAL_UARTEx_DisableFifoMode>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 8001752:	f001 f901 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	24000644 	.word	0x24000644
 8001760:	40004c00 	.word	0x40004c00
 8001764:	0007a120 	.word	0x0007a120

08001768 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800176c:	4b28      	ldr	r3, [pc, #160]	; (8001810 <MX_SPI2_Init+0xa8>)
 800176e:	4a29      	ldr	r2, [pc, #164]	; (8001814 <MX_SPI2_Init+0xac>)
 8001770:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001772:	4b27      	ldr	r3, [pc, #156]	; (8001810 <MX_SPI2_Init+0xa8>)
 8001774:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001778:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800177a:	4b25      	ldr	r3, [pc, #148]	; (8001810 <MX_SPI2_Init+0xa8>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001780:	4b23      	ldr	r3, [pc, #140]	; (8001810 <MX_SPI2_Init+0xa8>)
 8001782:	220f      	movs	r2, #15
 8001784:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001786:	4b22      	ldr	r3, [pc, #136]	; (8001810 <MX_SPI2_Init+0xa8>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800178c:	4b20      	ldr	r3, [pc, #128]	; (8001810 <MX_SPI2_Init+0xa8>)
 800178e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001792:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001794:	4b1e      	ldr	r3, [pc, #120]	; (8001810 <MX_SPI2_Init+0xa8>)
 8001796:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800179a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800179c:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <MX_SPI2_Init+0xa8>)
 800179e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80017a2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017a4:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <MX_SPI2_Init+0xa8>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017aa:	4b19      	ldr	r3, [pc, #100]	; (8001810 <MX_SPI2_Init+0xa8>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017b0:	4b17      	ldr	r3, [pc, #92]	; (8001810 <MX_SPI2_Init+0xa8>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80017b6:	4b16      	ldr	r3, [pc, #88]	; (8001810 <MX_SPI2_Init+0xa8>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017bc:	4b14      	ldr	r3, [pc, #80]	; (8001810 <MX_SPI2_Init+0xa8>)
 80017be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017c2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <MX_SPI2_Init+0xa8>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <MX_SPI2_Init+0xa8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017d0:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <MX_SPI2_Init+0xa8>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017d6:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <MX_SPI2_Init+0xa8>)
 80017d8:	2200      	movs	r2, #0
 80017da:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <MX_SPI2_Init+0xa8>)
 80017de:	2200      	movs	r2, #0
 80017e0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <MX_SPI2_Init+0xa8>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <MX_SPI2_Init+0xa8>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017ee:	4b08      	ldr	r3, [pc, #32]	; (8001810 <MX_SPI2_Init+0xa8>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <MX_SPI2_Init+0xa8>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017fa:	4805      	ldr	r0, [pc, #20]	; (8001810 <MX_SPI2_Init+0xa8>)
 80017fc:	f00b f9f8 	bl	800cbf0 <HAL_SPI_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8001806:	f001 f8a7 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	240006d8 	.word	0x240006d8
 8001814:	40003800 	.word	0x40003800

08001818 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800181c:	4b28      	ldr	r3, [pc, #160]	; (80018c0 <MX_SPI3_Init+0xa8>)
 800181e:	4a29      	ldr	r2, [pc, #164]	; (80018c4 <MX_SPI3_Init+0xac>)
 8001820:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001822:	4b27      	ldr	r3, [pc, #156]	; (80018c0 <MX_SPI3_Init+0xa8>)
 8001824:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001828:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800182a:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <MX_SPI3_Init+0xa8>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001830:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <MX_SPI3_Init+0xa8>)
 8001832:	220f      	movs	r2, #15
 8001834:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001836:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <MX_SPI3_Init+0xa8>)
 8001838:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800183c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800183e:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <MX_SPI3_Init+0xa8>)
 8001840:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001844:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001846:	4b1e      	ldr	r3, [pc, #120]	; (80018c0 <MX_SPI3_Init+0xa8>)
 8001848:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800184c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800184e:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <MX_SPI3_Init+0xa8>)
 8001850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001854:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001856:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <MX_SPI3_Init+0xa8>)
 8001858:	2200      	movs	r2, #0
 800185a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800185c:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <MX_SPI3_Init+0xa8>)
 800185e:	2200      	movs	r2, #0
 8001860:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001862:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <MX_SPI3_Init+0xa8>)
 8001864:	2200      	movs	r2, #0
 8001866:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001868:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <MX_SPI3_Init+0xa8>)
 800186a:	2200      	movs	r2, #0
 800186c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800186e:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <MX_SPI3_Init+0xa8>)
 8001870:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001874:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001876:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <MX_SPI3_Init+0xa8>)
 8001878:	2200      	movs	r2, #0
 800187a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800187c:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <MX_SPI3_Init+0xa8>)
 800187e:	2200      	movs	r2, #0
 8001880:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001882:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <MX_SPI3_Init+0xa8>)
 8001884:	2200      	movs	r2, #0
 8001886:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <MX_SPI3_Init+0xa8>)
 800188a:	2200      	movs	r2, #0
 800188c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800188e:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <MX_SPI3_Init+0xa8>)
 8001890:	2200      	movs	r2, #0
 8001892:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001894:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <MX_SPI3_Init+0xa8>)
 8001896:	2200      	movs	r2, #0
 8001898:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <MX_SPI3_Init+0xa8>)
 800189c:	2200      	movs	r2, #0
 800189e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018a0:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <MX_SPI3_Init+0xa8>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <MX_SPI3_Init+0xa8>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80018ac:	4804      	ldr	r0, [pc, #16]	; (80018c0 <MX_SPI3_Init+0xa8>)
 80018ae:	f00b f99f 	bl	800cbf0 <HAL_SPI_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_SPI3_Init+0xa4>
  {
    Error_Handler();
 80018b8:	f001 f84e 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	24000760 	.word	0x24000760
 80018c4:	40003c00 	.word	0x40003c00

080018c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b09e      	sub	sp, #120	; 0x78
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80018e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
 8001904:	615a      	str	r2, [r3, #20]
 8001906:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001908:	463b      	mov	r3, r7
 800190a:	2234      	movs	r2, #52	; 0x34
 800190c:	2100      	movs	r1, #0
 800190e:	4618      	mov	r0, r3
 8001910:	f010 fa43 	bl	8011d9a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001914:	4b5a      	ldr	r3, [pc, #360]	; (8001a80 <MX_TIM1_Init+0x1b8>)
 8001916:	4a5b      	ldr	r2, [pc, #364]	; (8001a84 <MX_TIM1_Init+0x1bc>)
 8001918:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 800191a:	4b59      	ldr	r3, [pc, #356]	; (8001a80 <MX_TIM1_Init+0x1b8>)
 800191c:	2201      	movs	r2, #1
 800191e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001920:	4b57      	ldr	r3, [pc, #348]	; (8001a80 <MX_TIM1_Init+0x1b8>)
 8001922:	2220      	movs	r2, #32
 8001924:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3999;
 8001926:	4b56      	ldr	r3, [pc, #344]	; (8001a80 <MX_TIM1_Init+0x1b8>)
 8001928:	f640 729f 	movw	r2, #3999	; 0xf9f
 800192c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800192e:	4b54      	ldr	r3, [pc, #336]	; (8001a80 <MX_TIM1_Init+0x1b8>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001934:	4b52      	ldr	r3, [pc, #328]	; (8001a80 <MX_TIM1_Init+0x1b8>)
 8001936:	2200      	movs	r2, #0
 8001938:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800193a:	4b51      	ldr	r3, [pc, #324]	; (8001a80 <MX_TIM1_Init+0x1b8>)
 800193c:	2280      	movs	r2, #128	; 0x80
 800193e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001940:	484f      	ldr	r0, [pc, #316]	; (8001a80 <MX_TIM1_Init+0x1b8>)
 8001942:	f00c f8dc 	bl	800dafe <HAL_TIM_Base_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 800194c:	f001 f804 	bl	8002958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001954:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001956:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800195a:	4619      	mov	r1, r3
 800195c:	4848      	ldr	r0, [pc, #288]	; (8001a80 <MX_TIM1_Init+0x1b8>)
 800195e:	f00c fcd7 	bl	800e310 <HAL_TIM_ConfigClockSource>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001968:	f000 fff6 	bl	8002958 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800196c:	4844      	ldr	r0, [pc, #272]	; (8001a80 <MX_TIM1_Init+0x1b8>)
 800196e:	f00c f91d 	bl	800dbac <HAL_TIM_PWM_Init>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8001978:	f000 ffee 	bl	8002958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800197c:	2320      	movs	r3, #32
 800197e:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001980:	2300      	movs	r3, #0
 8001982:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001984:	2300      	movs	r3, #0
 8001986:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001988:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800198c:	4619      	mov	r1, r3
 800198e:	483c      	ldr	r0, [pc, #240]	; (8001a80 <MX_TIM1_Init+0x1b8>)
 8001990:	f00d faf8 	bl	800ef84 <HAL_TIMEx_MasterConfigSynchronization>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800199a:	f000 ffdd 	bl	8002958 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 800199e:	2301      	movs	r3, #1
 80019a0:	653b      	str	r3, [r7, #80]	; 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80019a2:	2301      	movs	r3, #1
 80019a4:	657b      	str	r3, [r7, #84]	; 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_LOW;
 80019a6:	2301      	movs	r3, #1
 80019a8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80019aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019ae:	461a      	mov	r2, r3
 80019b0:	2101      	movs	r1, #1
 80019b2:	4833      	ldr	r0, [pc, #204]	; (8001a80 <MX_TIM1_Init+0x1b8>)
 80019b4:	f00d fc22 	bl	800f1fc <HAL_TIMEx_ConfigBreakInput>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80019be:	f000 ffcb 	bl	8002958 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019c2:	2360      	movs	r3, #96	; 0x60
 80019c4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 2000;
 80019c6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80019ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019cc:	2300      	movs	r3, #0
 80019ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019d0:	2300      	movs	r3, #0
 80019d2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019d8:	2300      	movs	r3, #0
 80019da:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019dc:	2300      	movs	r3, #0
 80019de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019e4:	2200      	movs	r2, #0
 80019e6:	4619      	mov	r1, r3
 80019e8:	4825      	ldr	r0, [pc, #148]	; (8001a80 <MX_TIM1_Init+0x1b8>)
 80019ea:	f00c fb7d 	bl	800e0e8 <HAL_TIM_PWM_ConfigChannel>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80019f4:	f000 ffb0 	bl	8002958 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019fc:	2204      	movs	r2, #4
 80019fe:	4619      	mov	r1, r3
 8001a00:	481f      	ldr	r0, [pc, #124]	; (8001a80 <MX_TIM1_Init+0x1b8>)
 8001a02:	f00c fb71 	bl	800e0e8 <HAL_TIM_PWM_ConfigChannel>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8001a0c:	f000 ffa4 	bl	8002958 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a18:	2208      	movs	r2, #8
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4818      	ldr	r0, [pc, #96]	; (8001a80 <MX_TIM1_Init+0x1b8>)
 8001a1e:	f00c fb63 	bl	800e0e8 <HAL_TIM_PWM_ConfigChannel>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8001a28:	f000 ff96 	bl	8002958 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 10;
 8001a38:	230a      	movs	r3, #10
 8001a3a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a40:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a46:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a5e:	463b      	mov	r3, r7
 8001a60:	4619      	mov	r1, r3
 8001a62:	4807      	ldr	r0, [pc, #28]	; (8001a80 <MX_TIM1_Init+0x1b8>)
 8001a64:	f00d fb2a 	bl	800f0bc <HAL_TIMEx_ConfigBreakDeadTime>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM1_Init+0x1aa>
  {
    Error_Handler();
 8001a6e:	f000 ff73 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a72:	4803      	ldr	r0, [pc, #12]	; (8001a80 <MX_TIM1_Init+0x1b8>)
 8001a74:	f001 fc74 	bl	8003360 <HAL_TIM_MspPostInit>

}
 8001a78:	bf00      	nop
 8001a7a:	3778      	adds	r7, #120	; 0x78
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	240007e8 	.word	0x240007e8
 8001a84:	40010000 	.word	0x40010000

08001a88 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08e      	sub	sp, #56	; 0x38
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a9c:	f107 031c 	add.w	r3, r7, #28
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aa8:	463b      	mov	r3, r7
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
 8001ab2:	60da      	str	r2, [r3, #12]
 8001ab4:	611a      	str	r2, [r3, #16]
 8001ab6:	615a      	str	r2, [r3, #20]
 8001ab8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001aba:	4b2e      	ldr	r3, [pc, #184]	; (8001b74 <MX_TIM4_Init+0xec>)
 8001abc:	4a2e      	ldr	r2, [pc, #184]	; (8001b78 <MX_TIM4_Init+0xf0>)
 8001abe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9999;
 8001ac0:	4b2c      	ldr	r3, [pc, #176]	; (8001b74 <MX_TIM4_Init+0xec>)
 8001ac2:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ac6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac8:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <MX_TIM4_Init+0xec>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001ace:	4b29      	ldr	r3, [pc, #164]	; (8001b74 <MX_TIM4_Init+0xec>)
 8001ad0:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ad4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad6:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <MX_TIM4_Init+0xec>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001adc:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <MX_TIM4_Init+0xec>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ae2:	4824      	ldr	r0, [pc, #144]	; (8001b74 <MX_TIM4_Init+0xec>)
 8001ae4:	f00c f80b 	bl	800dafe <HAL_TIM_Base_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8001aee:	f000 ff33 	bl	8002958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001af2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001af8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001afc:	4619      	mov	r1, r3
 8001afe:	481d      	ldr	r0, [pc, #116]	; (8001b74 <MX_TIM4_Init+0xec>)
 8001b00:	f00c fc06 	bl	800e310 <HAL_TIM_ConfigClockSource>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 8001b0a:	f000 ff25 	bl	8002958 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b0e:	4819      	ldr	r0, [pc, #100]	; (8001b74 <MX_TIM4_Init+0xec>)
 8001b10:	f00c f84c 	bl	800dbac <HAL_TIM_PWM_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001b1a:	f000 ff1d 	bl	8002958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b22:	2300      	movs	r3, #0
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b26:	f107 031c 	add.w	r3, r7, #28
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4811      	ldr	r0, [pc, #68]	; (8001b74 <MX_TIM4_Init+0xec>)
 8001b2e:	f00d fa29 	bl	800ef84 <HAL_TIMEx_MasterConfigSynchronization>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001b38:	f000 ff0e 	bl	8002958 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b3c:	2360      	movs	r3, #96	; 0x60
 8001b3e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5000;
 8001b40:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b44:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b46:	2300      	movs	r3, #0
 8001b48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b4e:	463b      	mov	r3, r7
 8001b50:	2200      	movs	r2, #0
 8001b52:	4619      	mov	r1, r3
 8001b54:	4807      	ldr	r0, [pc, #28]	; (8001b74 <MX_TIM4_Init+0xec>)
 8001b56:	f00c fac7 	bl	800e0e8 <HAL_TIM_PWM_ConfigChannel>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8001b60:	f000 fefa 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b64:	4803      	ldr	r0, [pc, #12]	; (8001b74 <MX_TIM4_Init+0xec>)
 8001b66:	f001 fbfb 	bl	8003360 <HAL_TIM_MspPostInit>

}
 8001b6a:	bf00      	nop
 8001b6c:	3738      	adds	r7, #56	; 0x38
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	24000834 	.word	0x24000834
 8001b78:	40000800 	.word	0x40000800

08001b7c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b088      	sub	sp, #32
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b82:	f107 0310 	add.w	r3, r7, #16
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]
 8001b8c:	609a      	str	r2, [r3, #8]
 8001b8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b9a:	4b20      	ldr	r3, [pc, #128]	; (8001c1c <MX_TIM8_Init+0xa0>)
 8001b9c:	4a20      	ldr	r2, [pc, #128]	; (8001c20 <MX_TIM8_Init+0xa4>)
 8001b9e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001ba0:	4b1e      	ldr	r3, [pc, #120]	; (8001c1c <MX_TIM8_Init+0xa0>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba6:	4b1d      	ldr	r3, [pc, #116]	; (8001c1c <MX_TIM8_Init+0xa0>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001bac:	4b1b      	ldr	r3, [pc, #108]	; (8001c1c <MX_TIM8_Init+0xa0>)
 8001bae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bb2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb4:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <MX_TIM8_Init+0xa0>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001bba:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <MX_TIM8_Init+0xa0>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc0:	4b16      	ldr	r3, [pc, #88]	; (8001c1c <MX_TIM8_Init+0xa0>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001bc6:	4815      	ldr	r0, [pc, #84]	; (8001c1c <MX_TIM8_Init+0xa0>)
 8001bc8:	f00b ff99 	bl	800dafe <HAL_TIM_Base_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001bd2:	f000 fec1 	bl	8002958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bda:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001bdc:	f107 0310 	add.w	r3, r7, #16
 8001be0:	4619      	mov	r1, r3
 8001be2:	480e      	ldr	r0, [pc, #56]	; (8001c1c <MX_TIM8_Init+0xa0>)
 8001be4:	f00c fb94 	bl	800e310 <HAL_TIM_ConfigClockSource>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001bee:	f000 feb3 	bl	8002958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	4619      	mov	r1, r3
 8001c02:	4806      	ldr	r0, [pc, #24]	; (8001c1c <MX_TIM8_Init+0xa0>)
 8001c04:	f00d f9be 	bl	800ef84 <HAL_TIMEx_MasterConfigSynchronization>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001c0e:	f000 fea3 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001c12:	bf00      	nop
 8001c14:	3720      	adds	r7, #32
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	24000880 	.word	0x24000880
 8001c20:	40010400 	.word	0x40010400

08001c24 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001c28:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001c2a:	4a16      	ldr	r2, [pc, #88]	; (8001c84 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8001c2c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8001c2e:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001c30:	2209      	movs	r2, #9
 8001c32:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001c36:	2202      	movs	r2, #2
 8001c38:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001c3a:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8001c40:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001c42:	2202      	movs	r2, #2
 8001c44:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001c46:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8001c52:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 8001c58:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8001c5e:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8001c6a:	4805      	ldr	r0, [pc, #20]	; (8001c80 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001c6c:	f007 fae1 	bl	8009232 <HAL_PCD_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8001c76:	f000 fe6f 	bl	8002958 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	240008cc 	.word	0x240008cc
 8001c84:	40040000 	.word	0x40040000

08001c88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c8e:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <MX_DMA_Init+0x7c>)
 8001c90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c94:	4a1b      	ldr	r2, [pc, #108]	; (8001d04 <MX_DMA_Init+0x7c>)
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c9e:	4b19      	ldr	r3, [pc, #100]	; (8001d04 <MX_DMA_Init+0x7c>)
 8001ca0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	607b      	str	r3, [r7, #4]
 8001caa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001cac:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <MX_DMA_Init+0x7c>)
 8001cae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cb2:	4a14      	ldr	r2, [pc, #80]	; (8001d04 <MX_DMA_Init+0x7c>)
 8001cb4:	f043 0302 	orr.w	r3, r3, #2
 8001cb8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <MX_DMA_Init+0x7c>)
 8001cbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2100      	movs	r1, #0
 8001cce:	200b      	movs	r0, #11
 8001cd0:	f003 fff3 	bl	8005cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001cd4:	200b      	movs	r0, #11
 8001cd6:	f004 f80a 	bl	8005cee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2100      	movs	r1, #0
 8001cde:	2038      	movs	r0, #56	; 0x38
 8001ce0:	f003 ffeb 	bl	8005cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001ce4:	2038      	movs	r0, #56	; 0x38
 8001ce6:	f004 f802 	bl	8005cee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001cea:	2200      	movs	r2, #0
 8001cec:	2100      	movs	r1, #0
 8001cee:	2039      	movs	r0, #57	; 0x39
 8001cf0:	f003 ffe3 	bl	8005cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001cf4:	2039      	movs	r0, #57	; 0x39
 8001cf6:	f003 fffa 	bl	8005cee <HAL_NVIC_EnableIRQ>

}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	58024400 	.word	0x58024400

08001d08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08c      	sub	sp, #48	; 0x30
 8001d0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0e:	f107 031c 	add.w	r3, r7, #28
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	60da      	str	r2, [r3, #12]
 8001d1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1e:	4b5b      	ldr	r3, [pc, #364]	; (8001e8c <MX_GPIO_Init+0x184>)
 8001d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d24:	4a59      	ldr	r2, [pc, #356]	; (8001e8c <MX_GPIO_Init+0x184>)
 8001d26:	f043 0302 	orr.w	r3, r3, #2
 8001d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d2e:	4b57      	ldr	r3, [pc, #348]	; (8001e8c <MX_GPIO_Init+0x184>)
 8001d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	61bb      	str	r3, [r7, #24]
 8001d3a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3c:	4b53      	ldr	r3, [pc, #332]	; (8001e8c <MX_GPIO_Init+0x184>)
 8001d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d42:	4a52      	ldr	r2, [pc, #328]	; (8001e8c <MX_GPIO_Init+0x184>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d4c:	4b4f      	ldr	r3, [pc, #316]	; (8001e8c <MX_GPIO_Init+0x184>)
 8001d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d5a:	4b4c      	ldr	r3, [pc, #304]	; (8001e8c <MX_GPIO_Init+0x184>)
 8001d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d60:	4a4a      	ldr	r2, [pc, #296]	; (8001e8c <MX_GPIO_Init+0x184>)
 8001d62:	f043 0304 	orr.w	r3, r3, #4
 8001d66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d6a:	4b48      	ldr	r3, [pc, #288]	; (8001e8c <MX_GPIO_Init+0x184>)
 8001d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d78:	4b44      	ldr	r3, [pc, #272]	; (8001e8c <MX_GPIO_Init+0x184>)
 8001d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d7e:	4a43      	ldr	r2, [pc, #268]	; (8001e8c <MX_GPIO_Init+0x184>)
 8001d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d88:	4b40      	ldr	r3, [pc, #256]	; (8001e8c <MX_GPIO_Init+0x184>)
 8001d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d96:	4b3d      	ldr	r3, [pc, #244]	; (8001e8c <MX_GPIO_Init+0x184>)
 8001d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d9c:	4a3b      	ldr	r2, [pc, #236]	; (8001e8c <MX_GPIO_Init+0x184>)
 8001d9e:	f043 0310 	orr.w	r3, r3, #16
 8001da2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001da6:	4b39      	ldr	r3, [pc, #228]	; (8001e8c <MX_GPIO_Init+0x184>)
 8001da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dac:	f003 0310 	and.w	r3, r3, #16
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001db4:	4b35      	ldr	r3, [pc, #212]	; (8001e8c <MX_GPIO_Init+0x184>)
 8001db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dba:	4a34      	ldr	r2, [pc, #208]	; (8001e8c <MX_GPIO_Init+0x184>)
 8001dbc:	f043 0308 	orr.w	r3, r3, #8
 8001dc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dc4:	4b31      	ldr	r3, [pc, #196]	; (8001e8c <MX_GPIO_Init+0x184>)
 8001dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_SEN_CS_GPIO_Port, EXT_SEN_CS_Pin, GPIO_PIN_SET);
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dd8:	482d      	ldr	r0, [pc, #180]	; (8001e90 <MX_GPIO_Init+0x188>)
 8001dda:	f007 fa11 	bl	8009200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SEN_CS_GPIO_Port, SPI2_SEN_CS_Pin, GPIO_PIN_SET);
 8001dde:	2201      	movs	r2, #1
 8001de0:	2102      	movs	r1, #2
 8001de2:	482c      	ldr	r0, [pc, #176]	; (8001e94 <MX_GPIO_Init+0x18c>)
 8001de4:	f007 fa0c 	bl	8009200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_STB_GPIO_Port, CAN_STB_Pin, GPIO_PIN_RESET);
 8001de8:	2200      	movs	r2, #0
 8001dea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dee:	4828      	ldr	r0, [pc, #160]	; (8001e90 <MX_GPIO_Init+0x188>)
 8001df0:	f007 fa06 	bl	8009200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Driver_Enable_GPIO_Port, Driver_Enable_Pin, GPIO_PIN_RESET);
 8001df4:	2200      	movs	r2, #0
 8001df6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dfa:	4827      	ldr	r0, [pc, #156]	; (8001e98 <MX_GPIO_Init+0x190>)
 8001dfc:	f007 fa00 	bl	8009200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Driver_CS_GPIO_Port, Driver_CS_Pin, GPIO_PIN_SET);
 8001e00:	2201      	movs	r2, #1
 8001e02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e06:	4825      	ldr	r0, [pc, #148]	; (8001e9c <MX_GPIO_Init+0x194>)
 8001e08:	f007 f9fa 	bl	8009200 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EXT_SEN_CS_Pin CAN_STB_Pin */
  GPIO_InitStruct.Pin = EXT_SEN_CS_Pin|CAN_STB_Pin;
 8001e0c:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e12:	2301      	movs	r3, #1
 8001e14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1e:	f107 031c 	add.w	r3, r7, #28
 8001e22:	4619      	mov	r1, r3
 8001e24:	481a      	ldr	r0, [pc, #104]	; (8001e90 <MX_GPIO_Init+0x188>)
 8001e26:	f007 f843 	bl	8008eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SEN_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_SEN_CS_Pin;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e36:	2300      	movs	r3, #0
 8001e38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI2_SEN_CS_GPIO_Port, &GPIO_InitStruct);
 8001e3a:	f107 031c 	add.w	r3, r7, #28
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4814      	ldr	r0, [pc, #80]	; (8001e94 <MX_GPIO_Init+0x18c>)
 8001e42:	f007 f835 	bl	8008eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Driver_Enable_Pin */
  GPIO_InitStruct.Pin = Driver_Enable_Pin;
 8001e46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	2300      	movs	r3, #0
 8001e56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Driver_Enable_GPIO_Port, &GPIO_InitStruct);
 8001e58:	f107 031c 	add.w	r3, r7, #28
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	480e      	ldr	r0, [pc, #56]	; (8001e98 <MX_GPIO_Init+0x190>)
 8001e60:	f007 f826 	bl	8008eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Driver_CS_Pin */
  GPIO_InitStruct.Pin = Driver_CS_Pin;
 8001e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Driver_CS_GPIO_Port, &GPIO_InitStruct);
 8001e76:	f107 031c 	add.w	r3, r7, #28
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4807      	ldr	r0, [pc, #28]	; (8001e9c <MX_GPIO_Init+0x194>)
 8001e7e:	f007 f817 	bl	8008eb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e82:	bf00      	nop
 8001e84:	3730      	adds	r7, #48	; 0x30
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	58024400 	.word	0x58024400
 8001e90:	58020000 	.word	0x58020000
 8001e94:	58021000 	.word	0x58021000
 8001e98:	58020800 	.word	0x58020800
 8001e9c:	58020400 	.word	0x58020400

08001ea0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
	if(&hadc1 == hadc)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a09      	ldr	r2, [pc, #36]	; (8001ed0 <HAL_ADC_ConvCpltCallback+0x30>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d10a      	bne.n	8001ec6 <HAL_ADC_ConvCpltCallback+0x26>
	{
		HAL_GPIO_WritePin( EXT_SEN_CS_GPIO_Port, EXT_SEN_CS_Pin, GPIO_PIN_RESET );
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001eb6:	4807      	ldr	r0, [pc, #28]	; (8001ed4 <HAL_ADC_ConvCpltCallback+0x34>)
 8001eb8:	f007 f9a2 	bl	8009200 <HAL_GPIO_WritePin>
		HAL_SPI_Receive_IT(&hspi3, &SENSOR_HALL_DATA, 1);
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	4906      	ldr	r1, [pc, #24]	; (8001ed8 <HAL_ADC_ConvCpltCallback+0x38>)
 8001ec0:	4806      	ldr	r0, [pc, #24]	; (8001edc <HAL_ADC_ConvCpltCallback+0x3c>)
 8001ec2:	f00b f9d5 	bl	800d270 <HAL_SPI_Receive_IT>
	}
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	240001f4 	.word	0x240001f4
 8001ed4:	58020000 	.word	0x58020000
 8001ed8:	24000dee 	.word	0x24000dee
 8001edc:	24000760 	.word	0x24000760

08001ee0 <debug_uart4_write_text>:


HAL_StatusTypeDef debug_uart4_write_text(uint8_t *pData)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
	//Sends a text message over UART
	if (HAL_UART_Transmit(&huart4, pData, strlen(pData), 10000) != HAL_OK)
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7fe fa61 	bl	80003b0 <strlen>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	f242 7310 	movw	r3, #10000	; 0x2710
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	4806      	ldr	r0, [pc, #24]	; (8001f14 <debug_uart4_write_text+0x34>)
 8001efa:	f00d fad8 	bl	800f4ae <HAL_UART_Transmit>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <debug_uart4_write_text+0x28>
	{
	  return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e000      	b.n	8001f0a <debug_uart4_write_text+0x2a>
	}
	return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	24000644 	.word	0x24000644

08001f18 <Send_Command_Driver>:
	  }
	return HAL_OK;
}

HAL_StatusTypeDef Send_Command_Driver(uint16_t TX, uint16_t *RX, uint16_t length)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af02      	add	r7, sp, #8
 8001f1e:	4603      	mov	r3, r0
 8001f20:	6039      	str	r1, [r7, #0]
 8001f22:	80fb      	strh	r3, [r7, #6]
 8001f24:	4613      	mov	r3, r2
 8001f26:	80bb      	strh	r3, [r7, #4]
	uint32_t Timeout = 1;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	60bb      	str	r3, [r7, #8]
	//Sends and Receives two bytes (one massage)
	HAL_StatusTypeDef return_Value = HAL_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin( Driver_CS_GPIO_Port, Driver_CS_Pin, GPIO_PIN_RESET );
 8001f30:	2200      	movs	r2, #0
 8001f32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f36:	480e      	ldr	r0, [pc, #56]	; (8001f70 <Send_Command_Driver+0x58>)
 8001f38:	f007 f962 	bl	8009200 <HAL_GPIO_WritePin>
	if(HAL_SPI_TransmitReceive(&hspi2, &TX, RX, length, Timeout) != HAL_OK)
 8001f3c:	88ba      	ldrh	r2, [r7, #4]
 8001f3e:	1db9      	adds	r1, r7, #6
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	4613      	mov	r3, r2
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	480a      	ldr	r0, [pc, #40]	; (8001f74 <Send_Command_Driver+0x5c>)
 8001f4a:	f00a ff75 	bl	800ce38 <HAL_SPI_TransmitReceive>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <Send_Command_Driver+0x40>
	{
		return_Value = HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	73fb      	strb	r3, [r7, #15]
	}
	HAL_GPIO_WritePin( Driver_CS_GPIO_Port, Driver_CS_Pin, GPIO_PIN_SET );
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f5e:	4804      	ldr	r0, [pc, #16]	; (8001f70 <Send_Command_Driver+0x58>)
 8001f60:	f007 f94e 	bl	8009200 <HAL_GPIO_WritePin>

	return return_Value;
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	58020400 	.word	0x58020400
 8001f74:	240006d8 	.word	0x240006d8

08001f78 <Driver_set_up>:

HAL_StatusTypeDef Driver_set_up(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af00      	add	r7, sp, #0
	//Function is setting up the MOSFet driver
	HAL_StatusTypeDef return_Value = HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(Driver_Enable_GPIO_Port, Driver_Enable_Pin, GPIO_PIN_SET);//Enable the Driver
 8001f82:	2201      	movs	r2, #1
 8001f84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f88:	485e      	ldr	r0, [pc, #376]	; (8002104 <Driver_set_up+0x18c>)
 8001f8a:	f007 f939 	bl	8009200 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001f8e:	2001      	movs	r0, #1
 8001f90:	f001 fd32 	bl	80039f8 <HAL_Delay>

	const uint16_t WRITE_BIT = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	83bb      	strh	r3, [r7, #28]
	const uint16_t READ_BIT = (1<<15);
 8001f98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f9c:	837b      	strh	r3, [r7, #26]
	const uint16_t FAULT_STATUS1_REG = 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	833b      	strh	r3, [r7, #24]
	const uint16_t FAULT_STATUS2_REG = 0x0800;
 8001fa2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fa6:	82fb      	strh	r3, [r7, #22]
	const uint16_t DRIVER_CONTROL_REG = 0x1000;
 8001fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fac:	82bb      	strh	r3, [r7, #20]
	const uint16_t GATE_DRIVE_HS_REG = 0x1800;
 8001fae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001fb2:	827b      	strh	r3, [r7, #18]
	const uint16_t GATE_DRIVE_LS_REG = 0x2000;
 8001fb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fb8:	823b      	strh	r3, [r7, #16]
	const uint16_t OCP_CONTROL_REG = 0x2800;
 8001fba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001fbe:	81fb      	strh	r3, [r7, #14]
	const uint16_t CSA_CONTROL_REG = 0x3000;
 8001fc0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001fc4:	81bb      	strh	r3, [r7, #12]
	const uint16_t DRIVER_CONFIG_REG = 0x3800;
 8001fc6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001fca:	817b      	strh	r3, [r7, #10]
	const uint16_t Actual_data = 0x7FF;
 8001fcc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001fd0:	813b      	strh	r3, [r7, #8]

	uint16_t RECEIVE_MSG = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	80fb      	strh	r3, [r7, #6]

	//Check whether the drive is connected
	Send_Command_Driver((READ_BIT | CSA_CONTROL_REG), &RECEIVE_MSG, 1);
 8001fd6:	8b7a      	ldrh	r2, [r7, #26]
 8001fd8:	89bb      	ldrh	r3, [r7, #12]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	1db9      	adds	r1, r7, #6
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff ff98 	bl	8001f18 <Send_Command_Driver>
	if(RECEIVE_MSG != (0x283 & Actual_data))
 8001fe8:	893b      	ldrh	r3, [r7, #8]
 8001fea:	f423 73be 	bic.w	r3, r3, #380	; 0x17c
 8001fee:	059b      	lsls	r3, r3, #22
 8001ff0:	0d9b      	lsrs	r3, r3, #22
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	88fb      	ldrh	r3, [r7, #6]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d001      	beq.n	8001ffe <Driver_set_up+0x86>
	{
		return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e07d      	b.n	80020fa <Driver_set_up+0x182>
	}

	Send_Command_Driver((WRITE_BIT | DRIVER_CONTROL_REG | (1<<10)), &RECEIVE_MSG, 1);//In case of a FAULT all H-bridges are turned of
 8001ffe:	8bba      	ldrh	r2, [r7, #28]
 8002000:	8abb      	ldrh	r3, [r7, #20]
 8002002:	4313      	orrs	r3, r2
 8002004:	b29b      	uxth	r3, r3
 8002006:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800200a:	b29b      	uxth	r3, r3
 800200c:	1db9      	adds	r1, r7, #6
 800200e:	2201      	movs	r2, #1
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff81 	bl	8001f18 <Send_Command_Driver>

	Send_Command_Driver((READ_BIT | DRIVER_CONTROL_REG), &RECEIVE_MSG, 1);
 8002016:	8b7a      	ldrh	r2, [r7, #26]
 8002018:	8abb      	ldrh	r3, [r7, #20]
 800201a:	4313      	orrs	r3, r2
 800201c:	b29b      	uxth	r3, r3
 800201e:	1db9      	adds	r1, r7, #6
 8002020:	2201      	movs	r2, #1
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff ff78 	bl	8001f18 <Send_Command_Driver>
	if(RECEIVE_MSG != ((1<<10) & Actual_data))
 8002028:	893b      	ldrh	r3, [r7, #8]
 800202a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800202e:	b29a      	uxth	r2, r3
 8002030:	88fb      	ldrh	r3, [r7, #6]
 8002032:	429a      	cmp	r2, r3
 8002034:	d001      	beq.n	800203a <Driver_set_up+0xc2>
	{
		return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e05f      	b.n	80020fa <Driver_set_up+0x182>
	//Send_Command_Driver(&(WRITE_BIT | GATE_DRIVE_HS_REG | 0b01110001000), &RECEIVE_MSG, 1);//Halfs the drive strength

	//Gate LS Drive
	//Send_Command_Driver(&(WRITE_BIT | GATE_DRIVE_HS_REG | 0b11010001000), &RECEIVE_MSG, 1);//Halfs the drive strength and reduces the peak gate current drive time

	Send_Command_Driver((WRITE_BIT | OCP_CONTROL_REG | 0b01001100110), &RECEIVE_MSG, 1);//Sets the dead time to 200ns and the VDS_LVL to 0.3V
 800203a:	8bba      	ldrh	r2, [r7, #28]
 800203c:	89fb      	ldrh	r3, [r7, #14]
 800203e:	4313      	orrs	r3, r2
 8002040:	b29a      	uxth	r2, r3
 8002042:	f240 2366 	movw	r3, #614	; 0x266
 8002046:	4313      	orrs	r3, r2
 8002048:	b29b      	uxth	r3, r3
 800204a:	1db9      	adds	r1, r7, #6
 800204c:	2201      	movs	r2, #1
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff ff62 	bl	8001f18 <Send_Command_Driver>
	Send_Command_Driver((READ_BIT | OCP_CONTROL_REG), &RECEIVE_MSG, 1);
 8002054:	8b7a      	ldrh	r2, [r7, #26]
 8002056:	89fb      	ldrh	r3, [r7, #14]
 8002058:	4313      	orrs	r3, r2
 800205a:	b29b      	uxth	r3, r3
 800205c:	1db9      	adds	r1, r7, #6
 800205e:	2201      	movs	r2, #1
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ff59 	bl	8001f18 <Send_Command_Driver>
	if(RECEIVE_MSG != (0b01001100110 & Actual_data))
 8002066:	893b      	ldrh	r3, [r7, #8]
 8002068:	f423 73cc 	bic.w	r3, r3, #408	; 0x198
 800206c:	f023 0301 	bic.w	r3, r3, #1
 8002070:	059b      	lsls	r3, r3, #22
 8002072:	0d9b      	lsrs	r3, r3, #22
 8002074:	b29a      	uxth	r2, r3
 8002076:	88fb      	ldrh	r3, [r7, #6]
 8002078:	429a      	cmp	r2, r3
 800207a:	d001      	beq.n	8002080 <Driver_set_up+0x108>
	{
		return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e03c      	b.n	80020fa <Driver_set_up+0x182>
	}

	Send_Command_Driver((WRITE_BIT | CSA_CONTROL_REG | 0b01010000000), &RECEIVE_MSG, 1);//Sets SENSE OCP to 0,25V
 8002080:	8bba      	ldrh	r2, [r7, #28]
 8002082:	89bb      	ldrh	r3, [r7, #12]
 8002084:	4313      	orrs	r3, r2
 8002086:	b29b      	uxth	r3, r3
 8002088:	f443 7320 	orr.w	r3, r3, #640	; 0x280
 800208c:	b29b      	uxth	r3, r3
 800208e:	1db9      	adds	r1, r7, #6
 8002090:	2201      	movs	r2, #1
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff ff40 	bl	8001f18 <Send_Command_Driver>
	Send_Command_Driver((READ_BIT | CSA_CONTROL_REG), &RECEIVE_MSG, 1);
 8002098:	8b7a      	ldrh	r2, [r7, #26]
 800209a:	89bb      	ldrh	r3, [r7, #12]
 800209c:	4313      	orrs	r3, r2
 800209e:	b29b      	uxth	r3, r3
 80020a0:	1db9      	adds	r1, r7, #6
 80020a2:	2201      	movs	r2, #1
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ff37 	bl	8001f18 <Send_Command_Driver>
	if(RECEIVE_MSG != (0b01010000000 & Actual_data))
 80020aa:	893b      	ldrh	r3, [r7, #8]
 80020ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	88fb      	ldrh	r3, [r7, #6]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d001      	beq.n	80020bc <Driver_set_up+0x144>
	{
		return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e01e      	b.n	80020fa <Driver_set_up+0x182>
	}

	Send_Command_Driver((WRITE_BIT | DRIVER_CONFIG_REG | 0b1), &RECEIVE_MSG, 1);//activates the auto calibration routine
 80020bc:	8bba      	ldrh	r2, [r7, #28]
 80020be:	897b      	ldrh	r3, [r7, #10]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	1db9      	adds	r1, r7, #6
 80020cc:	2201      	movs	r2, #1
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff ff22 	bl	8001f18 <Send_Command_Driver>
	Send_Command_Driver((READ_BIT | DRIVER_CONFIG_REG), &RECEIVE_MSG, 1);
 80020d4:	8b7a      	ldrh	r2, [r7, #26]
 80020d6:	897b      	ldrh	r3, [r7, #10]
 80020d8:	4313      	orrs	r3, r2
 80020da:	b29b      	uxth	r3, r3
 80020dc:	1db9      	adds	r1, r7, #6
 80020de:	2201      	movs	r2, #1
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff19 	bl	8001f18 <Send_Command_Driver>
	if(RECEIVE_MSG != (0b1 & Actual_data))
 80020e6:	893b      	ldrh	r3, [r7, #8]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	88fb      	ldrh	r3, [r7, #6]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d001      	beq.n	80020f8 <Driver_set_up+0x180>
	{
		return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e000      	b.n	80020fa <Driver_set_up+0x182>
	}

	return return_Value;
 80020f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3720      	adds	r7, #32
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	58020800 	.word	0x58020800

08002108 <ShuntVolts_to_Amps>:

float ShuntVolts_to_Amps(float VMeas)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	ed87 0a01 	vstr	s0, [r7, #4]
	//Converts the shunt voltage to amps
	VMeas = VMeas - (3.3f/2.f);//Bias subtraction
 8002112:	edd7 7a01 	vldr	s15, [r7, #4]
 8002116:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002158 <ShuntVolts_to_Amps+0x50>
 800211a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800211e:	edc7 7a01 	vstr	s15, [r7, #4]
	VMeas = VMeas * (1.f/20.f);//Divide by the amplcation
 8002122:	edd7 7a01 	vldr	s15, [r7, #4]
 8002126:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800215c <ShuntVolts_to_Amps+0x54>
 800212a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800212e:	edc7 7a01 	vstr	s15, [r7, #4]
	VMeas = VMeas * (1.f/0.005f);//Divide by shunt resistance (U/R) = A
 8002132:	edd7 7a01 	vldr	s15, [r7, #4]
 8002136:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002160 <ShuntVolts_to_Amps+0x58>
 800213a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800213e:	edc7 7a01 	vstr	s15, [r7, #4]
	return VMeas;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	ee07 3a90 	vmov	s15, r3
}
 8002148:	eeb0 0a67 	vmov.f32	s0, s15
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	3fd33333 	.word	0x3fd33333
 800215c:	3d4ccccd 	.word	0x3d4ccccd
 8002160:	43480000 	.word	0x43480000

08002164 <Convert_HALL_Sensor_Data_to_Electrical_angle>:
{
	return (((float)Data*360.0f)/65536.0f);
}

float Convert_HALL_Sensor_Data_to_Electrical_angle(uint16_t Data, Motor_Parameter *MParam)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	6039      	str	r1, [r7, #0]
 800216e:	80fb      	strh	r3, [r7, #6]
	float Not_pole_count_adjusted = fmodf((((float)Data*360.0f)/65536.0f) + angle_sens_offset, 360.f/MParam->Pole_pair_count);
 8002170:	88fb      	ldrh	r3, [r7, #6]
 8002172:	ee07 3a90 	vmov	s15, r3
 8002176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800217a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80021c8 <Convert_HALL_Sensor_Data_to_Electrical_angle+0x64>
 800217e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002182:	eddf 6a12 	vldr	s13, [pc, #72]	; 80021cc <Convert_HALL_Sensor_Data_to_Electrical_angle+0x68>
 8002186:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800218a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80021d0 <Convert_HALL_Sensor_Data_to_Electrical_angle+0x6c>
 800218e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	edd3 7a00 	vldr	s15, [r3]
 8002198:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 80021c8 <Convert_HALL_Sensor_Data_to_Electrical_angle+0x64>
 800219c:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80021a0:	eef0 0a66 	vmov.f32	s1, s13
 80021a4:	eeb0 0a47 	vmov.f32	s0, s14
 80021a8:	f013 f966 	bl	8015478 <fmodf>
 80021ac:	ed87 0a03 	vstr	s0, [r7, #12]
	return Not_pole_count_adjusted * MParam->Pole_pair_count;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	ed93 7a00 	vldr	s14, [r3]
 80021b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80021ba:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80021be:	eeb0 0a67 	vmov.f32	s0, s15
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	43b40000 	.word	0x43b40000
 80021cc:	47800000 	.word	0x47800000
 80021d0:	42910000 	.word	0x42910000

080021d4 <Clark_Transform>:

void Clark_Transform(float I_U, float I_V, float I_W, float* I_Alpha, float* I_Beta)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b089      	sub	sp, #36	; 0x24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	ed87 0a05 	vstr	s0, [r7, #20]
 80021de:	edc7 0a04 	vstr	s1, [r7, #16]
 80021e2:	ed87 1a03 	vstr	s2, [r7, #12]
 80021e6:	60b8      	str	r0, [r7, #8]
 80021e8:	6079      	str	r1, [r7, #4]
	//Calculates I_Alpha and I_Beta based on the other inputs
	const float inv_sqrt_3 = 0.57735026918962576450914878050196f;
 80021ea:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <Clark_Transform+0x4c>)
 80021ec:	61fb      	str	r3, [r7, #28]
	*I_Alpha = I_U;
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	601a      	str	r2, [r3, #0]
	*I_Beta = (I_U + 2 * I_V) * inv_sqrt_3;
 80021f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80021f8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80021fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002200:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002204:	edd7 7a07 	vldr	s15, [r7, #28]
 8002208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	edc3 7a00 	vstr	s15, [r3]
}
 8002212:	bf00      	nop
 8002214:	3724      	adds	r7, #36	; 0x24
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	3f13cd3a 	.word	0x3f13cd3a

08002224 <Park_Transform>:

void Park_Transform(float I_Alpha, float I_Beta, float Phi, float* I_Q, float* I_D)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b088      	sub	sp, #32
 8002228:	af00      	add	r7, sp, #0
 800222a:	ed87 0a05 	vstr	s0, [r7, #20]
 800222e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002232:	ed87 1a03 	vstr	s2, [r7, #12]
 8002236:	60b8      	str	r0, [r7, #8]
 8002238:	6079      	str	r1, [r7, #4]
	//Calculates I_D and I_Q based on the park transform. Phi should be in degree
	float Sinus_val = 0; float Cosinus_val = 0;
 800223a:	f04f 0300 	mov.w	r3, #0
 800223e:	61fb      	str	r3, [r7, #28]
 8002240:	f04f 0300 	mov.w	r3, #0
 8002244:	61bb      	str	r3, [r7, #24]
	fast_Sinus_Cosinus(Phi, &Sinus_val, &Cosinus_val);
 8002246:	f107 0218 	add.w	r2, r7, #24
 800224a:	f107 031c 	add.w	r3, r7, #28
 800224e:	4611      	mov	r1, r2
 8002250:	4618      	mov	r0, r3
 8002252:	ed97 0a03 	vldr	s0, [r7, #12]
 8002256:	f7fe fd45 	bl	8000ce4 <fast_Sinus_Cosinus>
	*I_D = I_Alpha * Cosinus_val + I_Beta * Sinus_val;
 800225a:	ed97 7a06 	vldr	s14, [r7, #24]
 800225e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002262:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002266:	edd7 6a07 	vldr	s13, [r7, #28]
 800226a:	edd7 7a04 	vldr	s15, [r7, #16]
 800226e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002272:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	edc3 7a00 	vstr	s15, [r3]
	*I_Q = I_Beta * Cosinus_val - I_Alpha * Sinus_val;
 800227c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002280:	edd7 7a04 	vldr	s15, [r7, #16]
 8002284:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002288:	edd7 6a07 	vldr	s13, [r7, #28]
 800228c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002290:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002294:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	edc3 7a00 	vstr	s15, [r3]
}
 800229e:	bf00      	nop
 80022a0:	3720      	adds	r7, #32
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <Inv_Park_Transform>:

void Inv_Park_Transform(float V_D, float V_Q, float Phi, float* V_Alpha, float* V_Beta)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b088      	sub	sp, #32
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	ed87 0a05 	vstr	s0, [r7, #20]
 80022b0:	edc7 0a04 	vstr	s1, [r7, #16]
 80022b4:	ed87 1a03 	vstr	s2, [r7, #12]
 80022b8:	60b8      	str	r0, [r7, #8]
 80022ba:	6079      	str	r1, [r7, #4]
	float Sinus_val = 0; float Cosinus_val = 0;
 80022bc:	f04f 0300 	mov.w	r3, #0
 80022c0:	61fb      	str	r3, [r7, #28]
 80022c2:	f04f 0300 	mov.w	r3, #0
 80022c6:	61bb      	str	r3, [r7, #24]
	fast_Sinus_Cosinus(Phi, &Sinus_val, &Cosinus_val);
 80022c8:	f107 0218 	add.w	r2, r7, #24
 80022cc:	f107 031c 	add.w	r3, r7, #28
 80022d0:	4611      	mov	r1, r2
 80022d2:	4618      	mov	r0, r3
 80022d4:	ed97 0a03 	vldr	s0, [r7, #12]
 80022d8:	f7fe fd04 	bl	8000ce4 <fast_Sinus_Cosinus>
	*V_Alpha = V_D * Cosinus_val - V_Q * Sinus_val;
 80022dc:	ed97 7a06 	vldr	s14, [r7, #24]
 80022e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80022e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80022ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80022f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	edc3 7a00 	vstr	s15, [r3]
	*V_Beta = V_D * Sinus_val - V_Q * Cosinus_val;
 80022fe:	ed97 7a07 	vldr	s14, [r7, #28]
 8002302:	edd7 7a05 	vldr	s15, [r7, #20]
 8002306:	ee27 7a27 	vmul.f32	s14, s14, s15
 800230a:	edd7 6a06 	vldr	s13, [r7, #24]
 800230e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002312:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002316:	ee77 7a67 	vsub.f32	s15, s14, s15
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	edc3 7a00 	vstr	s15, [r3]
}
 8002320:	bf00      	nop
 8002322:	3720      	adds	r7, #32
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <Calc_SVPWM_Alpha_Beta>:
	*PWM_V = V_MEM;
	*PWM_W = W_MEM;
}

void Calc_SVPWM_Alpha_Beta(float V_Alpha, float V_Beta, float* PWM_U, float* PWM_V, float* PWM_W)
{
 8002328:	b480      	push	{r7}
 800232a:	b091      	sub	sp, #68	; 0x44
 800232c:	af00      	add	r7, sp, #0
 800232e:	ed87 0a05 	vstr	s0, [r7, #20]
 8002332:	edc7 0a04 	vstr	s1, [r7, #16]
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
	//Calculates the PWM value (proportional on time) for the half bridges (Alpha and Beta max value should be one)
	const float inv_sqrt_3 = 0.57735026918962576450914878050196f;
 800233c:	4b66      	ldr	r3, [pc, #408]	; (80024d8 <Calc_SVPWM_Alpha_Beta+0x1b0>)
 800233e:	637b      	str	r3, [r7, #52]	; 0x34
	const float sqrt_3 = 1.7320508075688772935274463415059f;
 8002340:	4b66      	ldr	r3, [pc, #408]	; (80024dc <Calc_SVPWM_Alpha_Beta+0x1b4>)
 8002342:	633b      	str	r3, [r7, #48]	; 0x30
	const float divide_by_2 = 0.5f;
 8002344:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002348:	62fb      	str	r3, [r7, #44]	; 0x2c

	//Inv Clark Transform
	float U = V_Alpha;
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	62bb      	str	r3, [r7, #40]	; 0x28
	float V = ((-V_Alpha) + sqrt_3 * V_Beta) * divide_by_2;
 800234e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002352:	edd7 7a04 	vldr	s15, [r7, #16]
 8002356:	ee27 7a27 	vmul.f32	s14, s14, s15
 800235a:	edd7 7a05 	vldr	s15, [r7, #20]
 800235e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002362:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800236a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float W = ((-V_Alpha) - sqrt_3 * V_Beta) * divide_by_2;
 800236e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002372:	eeb1 7a67 	vneg.f32	s14, s15
 8002376:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800237a:	edd7 7a04 	vldr	s15, [r7, #16]
 800237e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002382:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002386:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800238a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800238e:	edc7 7a08 	vstr	s15, [r7, #32]

	//calculating the min mean from the min and max values for U,V,W
	//finding the min value
	float min = 0; float max = 0;
 8002392:	f04f 0300 	mov.w	r3, #0
 8002396:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002398:	f04f 0300 	mov.w	r3, #0
 800239c:	63bb      	str	r3, [r7, #56]	; 0x38
	if(U < V && U < W)
 800239e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80023a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80023a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ae:	d50b      	bpl.n	80023c8 <Calc_SVPWM_Alpha_Beta+0xa0>
 80023b0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80023b4:	edd7 7a08 	vldr	s15, [r7, #32]
 80023b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c0:	d502      	bpl.n	80023c8 <Calc_SVPWM_Alpha_Beta+0xa0>
		min = U;
 80023c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023c6:	e016      	b.n	80023f6 <Calc_SVPWM_Alpha_Beta+0xce>
	else if(V < U && V < W)
 80023c8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80023cc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80023d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d8:	d50b      	bpl.n	80023f2 <Calc_SVPWM_Alpha_Beta+0xca>
 80023da:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80023de:	edd7 7a08 	vldr	s15, [r7, #32]
 80023e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ea:	d502      	bpl.n	80023f2 <Calc_SVPWM_Alpha_Beta+0xca>
		min = V;
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023f0:	e001      	b.n	80023f6 <Calc_SVPWM_Alpha_Beta+0xce>
	else
		min = W;
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	63fb      	str	r3, [r7, #60]	; 0x3c
	//finding the max value
	if(U > V && U > W)
 80023f6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80023fa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80023fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002406:	dd0b      	ble.n	8002420 <Calc_SVPWM_Alpha_Beta+0xf8>
 8002408:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800240c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002410:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002418:	dd02      	ble.n	8002420 <Calc_SVPWM_Alpha_Beta+0xf8>
		max = U;
 800241a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241c:	63bb      	str	r3, [r7, #56]	; 0x38
 800241e:	e016      	b.n	800244e <Calc_SVPWM_Alpha_Beta+0x126>
	else if(V > U && V > W)
 8002420:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002424:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002428:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800242c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002430:	dd0b      	ble.n	800244a <Calc_SVPWM_Alpha_Beta+0x122>
 8002432:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002436:	edd7 7a08 	vldr	s15, [r7, #32]
 800243a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800243e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002442:	dd02      	ble.n	800244a <Calc_SVPWM_Alpha_Beta+0x122>
		max = V;
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	63bb      	str	r3, [r7, #56]	; 0x38
 8002448:	e001      	b.n	800244e <Calc_SVPWM_Alpha_Beta+0x126>
	else
		max = W;
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	63bb      	str	r3, [r7, #56]	; 0x38

	float mid = (max + min) * divide_by_2;
 800244e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002452:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800245a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800245e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002462:	edc7 7a07 	vstr	s15, [r7, #28]

	*PWM_U = (U - mid) * inv_sqrt_3 + 0.5f;
 8002466:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800246a:	edd7 7a07 	vldr	s15, [r7, #28]
 800246e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002472:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800247a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800247e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	edc3 7a00 	vstr	s15, [r3]
	*PWM_V = (V - mid) * inv_sqrt_3 + 0.5f;
 8002488:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800248c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002490:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002494:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800249c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80024a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	edc3 7a00 	vstr	s15, [r3]
	*PWM_W = (W - mid) * inv_sqrt_3 + 0.5f;
 80024aa:	ed97 7a08 	vldr	s14, [r7, #32]
 80024ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80024b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024b6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80024ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024be:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80024c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	edc3 7a00 	vstr	s15, [r3]
}
 80024cc:	bf00      	nop
 80024ce:	3744      	adds	r7, #68	; 0x44
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	3f13cd3a 	.word	0x3f13cd3a
 80024dc:	3fddb3d7 	.word	0x3fddb3d7

080024e0 <Currentmode_FOC>:
	//Tf is a time constant, the cutoff frequency is fc = 1 / (2pi * Tf)
}


HAL_StatusTypeDef Currentmode_FOC(FOC_Values *Values, PIDController *pid_I_D, PIDController *pid_I_Q )
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08a      	sub	sp, #40	; 0x28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
	//Calculates a current mode Field Oriented Control algorithm with the desired PID values
	float I_Alpha = 0; float I_Beta = 0;
 80024ec:	f04f 0300 	mov.w	r3, #0
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
 80024f2:	f04f 0300 	mov.w	r3, #0
 80024f6:	623b      	str	r3, [r7, #32]
	Clark_Transform(Values->IP_U, Values->IP_V, Values->IP_W, &I_Alpha, &I_Beta);//Clark Transformation
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	ed93 7a04 	vldr	s14, [r3, #16]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	edd3 6a05 	vldr	s13, [r3, #20]
 800250a:	f107 0220 	add.w	r2, r7, #32
 800250e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002512:	4611      	mov	r1, r2
 8002514:	4618      	mov	r0, r3
 8002516:	eeb0 1a66 	vmov.f32	s2, s13
 800251a:	eef0 0a47 	vmov.f32	s1, s14
 800251e:	eeb0 0a67 	vmov.f32	s0, s15
 8002522:	f7ff fe57 	bl	80021d4 <Clark_Transform>

	float I_Q = 0; float I_D = 0;
 8002526:	f04f 0300 	mov.w	r3, #0
 800252a:	61fb      	str	r3, [r7, #28]
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	61bb      	str	r3, [r7, #24]
	Park_Transform(I_Alpha, I_Beta, Values->electrical_angle, &I_Q, &I_D);//Park Transformation
 8002532:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002536:	ed97 7a08 	vldr	s14, [r7, #32]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	edd3 6a00 	vldr	s13, [r3]
 8002540:	f107 0218 	add.w	r2, r7, #24
 8002544:	f107 031c 	add.w	r3, r7, #28
 8002548:	4611      	mov	r1, r2
 800254a:	4618      	mov	r0, r3
 800254c:	eeb0 1a66 	vmov.f32	s2, s13
 8002550:	eef0 0a47 	vmov.f32	s1, s14
 8002554:	eeb0 0a67 	vmov.f32	s0, s15
 8002558:	f7ff fe64 	bl	8002224 <Park_Transform>

	//PID Control calculation
	PIDController_Update(pid_I_D, Values->Id_target, I_D);//I D control
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002562:	ed97 7a06 	vldr	s14, [r7, #24]
 8002566:	eef0 0a47 	vmov.f32	s1, s14
 800256a:	eeb0 0a67 	vmov.f32	s0, s15
 800256e:	68b8      	ldr	r0, [r7, #8]
 8002570:	f7fe fab6 	bl	8000ae0 <PIDController_Update>
	PIDController_Update(pid_I_Q, Values->Iq_target, I_Q);//I Q control
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	edd3 7a02 	vldr	s15, [r3, #8]
 800257a:	ed97 7a07 	vldr	s14, [r7, #28]
 800257e:	eef0 0a47 	vmov.f32	s1, s14
 8002582:	eeb0 0a67 	vmov.f32	s0, s15
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7fe faaa 	bl	8000ae0 <PIDController_Update>

	float V_Alpha = 0; float V_Beta = 0;
 800258c:	f04f 0300 	mov.w	r3, #0
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	f04f 0300 	mov.w	r3, #0
 8002596:	613b      	str	r3, [r7, #16]
	Inv_Park_Transform(pid_I_D->out, pid_I_Q->out, Values->electrical_angle, &V_Alpha, &V_Beta);
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	edd3 6a00 	vldr	s13, [r3]
 80025aa:	f107 0210 	add.w	r2, r7, #16
 80025ae:	f107 0314 	add.w	r3, r7, #20
 80025b2:	4611      	mov	r1, r2
 80025b4:	4618      	mov	r0, r3
 80025b6:	eeb0 1a66 	vmov.f32	s2, s13
 80025ba:	eef0 0a47 	vmov.f32	s1, s14
 80025be:	eeb0 0a67 	vmov.f32	s0, s15
 80025c2:	f7ff fe70 	bl	80022a6 <Inv_Park_Transform>

	Calc_SVPWM_Alpha_Beta(V_Alpha, V_Beta, &Values->PWM_U_Dutycycle, &Values->PWM_V_Dutycycle, &Values->PWM_W_Dutycycle);
 80025c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80025ca:	ed97 7a04 	vldr	s14, [r7, #16]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f103 0018 	add.w	r0, r3, #24
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f103 011c 	add.w	r1, r3, #28
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	3320      	adds	r3, #32
 80025de:	461a      	mov	r2, r3
 80025e0:	eef0 0a47 	vmov.f32	s1, s14
 80025e4:	eeb0 0a67 	vmov.f32	s0, s15
 80025e8:	f7ff fe9e 	bl	8002328 <Calc_SVPWM_Alpha_Beta>

	//No sanity check for now
	return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3728      	adds	r7, #40	; 0x28
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <Current_Mode_PID_Controller_set_up>:


void Current_Mode_PID_Controller_set_up(PIDController *pid_I_D, PIDController *pid_I_Q)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
	//Initialises the PID controllers
	pid_I_D->Kp = PID_KP_I_D; pid_I_D->Ki = PID_KI_I_D; pid_I_D->Kd = PID_KD_I_D;
 8002602:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	f04f 0200 	mov.w	r2, #0
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	f04f 0200 	mov.w	r2, #0
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	609a      	str	r2, [r3, #8]
	pid_I_D->tau = PID_TAU_I_D;
 800261a:	4a18      	ldr	r2, [pc, #96]	; (800267c <Current_Mode_PID_Controller_set_up+0x84>)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	60da      	str	r2, [r3, #12]
	pid_I_D->limMin = PID_LIM_MIN_INT_I_D; pid_I_D->limMax = PID_LIM_MAX_INT_I_D;
 8002620:	4a17      	ldr	r2, [pc, #92]	; (8002680 <Current_Mode_PID_Controller_set_up+0x88>)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	611a      	str	r2, [r3, #16]
 8002626:	4a16      	ldr	r2, [pc, #88]	; (8002680 <Current_Mode_PID_Controller_set_up+0x88>)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	615a      	str	r2, [r3, #20]
	pid_I_D->T = SAMPLE_TIME_S;
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	621a      	str	r2, [r3, #32]

	PIDController_Init(pid_I_D);//I_D Controller
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7fe fa35 	bl	8000aa4 <PIDController_Init>

	pid_I_D->Kp = PID_KP_I_Q; pid_I_D->Ki = PID_KI_I_Q; pid_I_D->Kd = PID_KD_I_Q;
 800263a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	609a      	str	r2, [r3, #8]
	pid_I_D->tau = PID_TAU_I_Q;
 8002652:	4a0a      	ldr	r2, [pc, #40]	; (800267c <Current_Mode_PID_Controller_set_up+0x84>)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	60da      	str	r2, [r3, #12]
	pid_I_D->limMin = PID_LIM_MIN_INT_I_Q; pid_I_D->limMax = PID_LIM_MAX_INT_I_Q;
 8002658:	4a09      	ldr	r2, [pc, #36]	; (8002680 <Current_Mode_PID_Controller_set_up+0x88>)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	611a      	str	r2, [r3, #16]
 800265e:	4a08      	ldr	r2, [pc, #32]	; (8002680 <Current_Mode_PID_Controller_set_up+0x88>)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	615a      	str	r2, [r3, #20]
	pid_I_D->T = SAMPLE_TIME_S;
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	621a      	str	r2, [r3, #32]

	PIDController_Init(pid_I_Q);//I_Q Controller
 800266c:	6838      	ldr	r0, [r7, #0]
 800266e:	f7fe fa19 	bl	8000aa4 <PIDController_Init>

}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	38a7c5ac 	.word	0x38a7c5ac
 8002680:	40a00000 	.word	0x40a00000

08002684 <proportinal_PWM_to_act_val>:
		debug_uart4_write_text("\r\n");
	}
}

uint16_t proportinal_PWM_to_act_val(float PWM_val)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	ed87 0a01 	vstr	s0, [r7, #4]
	//transforms a proportianal PWM (1-0) value to the actual register value required for the timer
	const uint16_t max_value = 3999; const uint16_t min_value = 0;
 800268e:	f640 739f 	movw	r3, #3999	; 0xf9f
 8002692:	81fb      	strh	r3, [r7, #14]
 8002694:	2300      	movs	r3, #0
 8002696:	81bb      	strh	r3, [r7, #12]
	uint16_t return_Value = (uint16_t)(((float)max_value) * PWM_val);
 8002698:	89fb      	ldrh	r3, [r7, #14]
 800269a:	ee07 3a90 	vmov	s15, r3
 800269e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80026a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026ae:	ee17 3a90 	vmov	r3, s15
 80026b2:	817b      	strh	r3, [r7, #10]
	if(return_Value > max_value)
 80026b4:	897a      	ldrh	r2, [r7, #10]
 80026b6:	89fb      	ldrh	r3, [r7, #14]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d901      	bls.n	80026c0 <proportinal_PWM_to_act_val+0x3c>
		return  max_value;
 80026bc:	89fb      	ldrh	r3, [r7, #14]
 80026be:	e000      	b.n	80026c2 <proportinal_PWM_to_act_val+0x3e>
	else
		return return_Value;
 80026c0:	897b      	ldrh	r3, [r7, #10]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
	...

080026d0 <Controll_Data_preparation>:

void Controll_Data_preparation(FOC_Values *Controll_Values,Motor_Parameter *MParam, Controller_Hardware_Parameter *CAL_Values)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
	//Prepares the sensor data for the foc routine
	Controll_Values->IP_U = ShuntVolts_to_Amps((float)ADC1_result[1] * Bit16_to_Volt) - CAL_Values->I_U_offset;
 80026dc:	4b2f      	ldr	r3, [pc, #188]	; (800279c <Controll_Data_preparation+0xcc>)
 80026de:	885b      	ldrh	r3, [r3, #2]
 80026e0:	ee07 3a90 	vmov	s15, r3
 80026e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026e8:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80027a0 <Controll_Data_preparation+0xd0>
 80026ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026f0:	eeb0 0a67 	vmov.f32	s0, s15
 80026f4:	f7ff fd08 	bl	8002108 <ShuntVolts_to_Amps>
 80026f8:	eeb0 7a40 	vmov.f32	s14, s0
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	edd3 7a00 	vldr	s15, [r3]
 8002702:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	edc3 7a03 	vstr	s15, [r3, #12]
	Controll_Values->IP_V = ShuntVolts_to_Amps((float)ADC1_result[0] * Bit16_to_Volt) - CAL_Values->I_V_offset;
 800270c:	4b23      	ldr	r3, [pc, #140]	; (800279c <Controll_Data_preparation+0xcc>)
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	ee07 3a90 	vmov	s15, r3
 8002714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002718:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80027a0 <Controll_Data_preparation+0xd0>
 800271c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002720:	eeb0 0a67 	vmov.f32	s0, s15
 8002724:	f7ff fcf0 	bl	8002108 <ShuntVolts_to_Amps>
 8002728:	eeb0 7a40 	vmov.f32	s14, s0
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002732:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	edc3 7a04 	vstr	s15, [r3, #16]
	Controll_Values->IP_W = ShuntVolts_to_Amps((float)ADC2_result[0] * Bit16_to_Volt) - CAL_Values->I_W_offset;
 800273c:	4b19      	ldr	r3, [pc, #100]	; (80027a4 <Controll_Data_preparation+0xd4>)
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	ee07 3a90 	vmov	s15, r3
 8002744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002748:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80027a0 <Controll_Data_preparation+0xd0>
 800274c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002750:	eeb0 0a67 	vmov.f32	s0, s15
 8002754:	f7ff fcd8 	bl	8002108 <ShuntVolts_to_Amps>
 8002758:	eeb0 7a40 	vmov.f32	s14, s0
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002762:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	edc3 7a05 	vstr	s15, [r3, #20]

	Controll_Values->electrical_angle = Convert_HALL_Sensor_Data_to_Electrical_angle(SENSOR_HALL_DATA,MParam);
 800276c:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <Controll_Data_preparation+0xd8>)
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	68b9      	ldr	r1, [r7, #8]
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff fcf6 	bl	8002164 <Convert_HALL_Sensor_Data_to_Electrical_angle>
 8002778:	eef0 7a40 	vmov.f32	s15, s0
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	edc3 7a00 	vstr	s15, [r3]

	Controll_Values->Id_target = 2.f;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002788:	605a      	str	r2, [r3, #4]
	Controll_Values->Iq_target = 1.f;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002790:	609a      	str	r2, [r3, #8]
}
 8002792:	bf00      	nop
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	24000dd8 	.word	0x24000dd8
 80027a0:	38533406 	.word	0x38533406
 80027a4:	24000de0 	.word	0x24000de0
 80027a8:	24000dee 	.word	0x24000dee

080027ac <set_PWM_Half_bridges>:

void set_PWM_Half_bridges(FOC_Values *Controll_Values)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
	TIM1->CCR1 = proportinal_PWM_to_act_val(Controll_Values->PWM_U_Dutycycle);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	edd3 7a06 	vldr	s15, [r3, #24]
 80027ba:	eeb0 0a67 	vmov.f32	s0, s15
 80027be:	f7ff ff61 	bl	8002684 <proportinal_PWM_to_act_val>
 80027c2:	4603      	mov	r3, r0
 80027c4:	461a      	mov	r2, r3
 80027c6:	4b0e      	ldr	r3, [pc, #56]	; (8002800 <set_PWM_Half_bridges+0x54>)
 80027c8:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = proportinal_PWM_to_act_val(Controll_Values->PWM_V_Dutycycle);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	edd3 7a07 	vldr	s15, [r3, #28]
 80027d0:	eeb0 0a67 	vmov.f32	s0, s15
 80027d4:	f7ff ff56 	bl	8002684 <proportinal_PWM_to_act_val>
 80027d8:	4603      	mov	r3, r0
 80027da:	461a      	mov	r2, r3
 80027dc:	4b08      	ldr	r3, [pc, #32]	; (8002800 <set_PWM_Half_bridges+0x54>)
 80027de:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = proportinal_PWM_to_act_val(Controll_Values->PWM_W_Dutycycle);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	edd3 7a08 	vldr	s15, [r3, #32]
 80027e6:	eeb0 0a67 	vmov.f32	s0, s15
 80027ea:	f7ff ff4b 	bl	8002684 <proportinal_PWM_to_act_val>
 80027ee:	4603      	mov	r3, r0
 80027f0:	461a      	mov	r2, r3
 80027f2:	4b03      	ldr	r3, [pc, #12]	; (8002800 <set_PWM_Half_bridges+0x54>)
 80027f4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40010000 	.word	0x40010000

08002804 <Current_sensor_calibration>:

void Current_sensor_calibration(Controller_Hardware_Parameter *CAL_Values)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
	TIM1->CCR1 = 0;
 800280c:	4b4b      	ldr	r3, [pc, #300]	; (800293c <Current_sensor_calibration+0x138>)
 800280e:	2200      	movs	r2, #0
 8002810:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8002812:	4b4a      	ldr	r3, [pc, #296]	; (800293c <Current_sensor_calibration+0x138>)
 8002814:	2200      	movs	r2, #0
 8002816:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8002818:	4b48      	ldr	r3, [pc, #288]	; (800293c <Current_sensor_calibration+0x138>)
 800281a:	2200      	movs	r2, #0
 800281c:	63da      	str	r2, [r3, #60]	; 0x3c
	const uint16_t Samples = 1000;
 800281e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002822:	813b      	strh	r3, [r7, #8]

	debug_uart4_write_text("Starting Currentsensor Calibration \r\n");
 8002824:	4846      	ldr	r0, [pc, #280]	; (8002940 <Current_sensor_calibration+0x13c>)
 8002826:	f7ff fb5b 	bl	8001ee0 <debug_uart4_write_text>

	float Cal_U_val = 0, Cal_V_val = 0, Cal_W_val = 0;
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	f04f 0300 	mov.w	r3, #0
 8002834:	613b      	str	r3, [r7, #16]
 8002836:	f04f 0300 	mov.w	r3, #0
 800283a:	60fb      	str	r3, [r7, #12]

	for(uint16_t n = 0; n < Samples; n++)
 800283c:	2300      	movs	r3, #0
 800283e:	817b      	strh	r3, [r7, #10]
 8002840:	e04c      	b.n	80028dc <Current_sensor_calibration+0xd8>
	{
		Cal_U_val = Cal_U_val + ShuntVolts_to_Amps((float)ADC1_result[1] * Bit16_to_Volt);
 8002842:	4b40      	ldr	r3, [pc, #256]	; (8002944 <Current_sensor_calibration+0x140>)
 8002844:	885b      	ldrh	r3, [r3, #2]
 8002846:	ee07 3a90 	vmov	s15, r3
 800284a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800284e:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8002948 <Current_sensor_calibration+0x144>
 8002852:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002856:	eeb0 0a67 	vmov.f32	s0, s15
 800285a:	f7ff fc55 	bl	8002108 <ShuntVolts_to_Amps>
 800285e:	eeb0 7a40 	vmov.f32	s14, s0
 8002862:	edd7 7a05 	vldr	s15, [r7, #20]
 8002866:	ee77 7a87 	vadd.f32	s15, s15, s14
 800286a:	edc7 7a05 	vstr	s15, [r7, #20]
		Cal_V_val = Cal_V_val + ShuntVolts_to_Amps((float)ADC1_result[0] * Bit16_to_Volt);
 800286e:	4b35      	ldr	r3, [pc, #212]	; (8002944 <Current_sensor_calibration+0x140>)
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	ee07 3a90 	vmov	s15, r3
 8002876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800287a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002948 <Current_sensor_calibration+0x144>
 800287e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002882:	eeb0 0a67 	vmov.f32	s0, s15
 8002886:	f7ff fc3f 	bl	8002108 <ShuntVolts_to_Amps>
 800288a:	eeb0 7a40 	vmov.f32	s14, s0
 800288e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002892:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002896:	edc7 7a04 	vstr	s15, [r7, #16]
		Cal_W_val = Cal_W_val + ShuntVolts_to_Amps((float)ADC2_result[0] * Bit16_to_Volt);
 800289a:	4b2c      	ldr	r3, [pc, #176]	; (800294c <Current_sensor_calibration+0x148>)
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	ee07 3a90 	vmov	s15, r3
 80028a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028a6:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002948 <Current_sensor_calibration+0x144>
 80028aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ae:	eeb0 0a67 	vmov.f32	s0, s15
 80028b2:	f7ff fc29 	bl	8002108 <ShuntVolts_to_Amps>
 80028b6:	eeb0 7a40 	vmov.f32	s14, s0
 80028ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80028be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028c2:	edc7 7a03 	vstr	s15, [r7, #12]

		NEW_SENSOR_DATA = 0;
 80028c6:	4b22      	ldr	r3, [pc, #136]	; (8002950 <Current_sensor_calibration+0x14c>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	801a      	strh	r2, [r3, #0]

		while(NEW_SENSOR_DATA == 0)
 80028cc:	bf00      	nop
 80028ce:	4b20      	ldr	r3, [pc, #128]	; (8002950 <Current_sensor_calibration+0x14c>)
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0fb      	beq.n	80028ce <Current_sensor_calibration+0xca>
	for(uint16_t n = 0; n < Samples; n++)
 80028d6:	897b      	ldrh	r3, [r7, #10]
 80028d8:	3301      	adds	r3, #1
 80028da:	817b      	strh	r3, [r7, #10]
 80028dc:	897a      	ldrh	r2, [r7, #10]
 80028de:	893b      	ldrh	r3, [r7, #8]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d3ae      	bcc.n	8002842 <Current_sensor_calibration+0x3e>
		{

		}
	}
	CAL_Values->I_U_offset = Cal_U_val / Samples;
 80028e4:	893b      	ldrh	r3, [r7, #8]
 80028e6:	ee07 3a90 	vmov	s15, r3
 80028ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028ee:	edd7 6a05 	vldr	s13, [r7, #20]
 80028f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	edc3 7a00 	vstr	s15, [r3]
	CAL_Values->I_V_offset = Cal_V_val / Samples;
 80028fc:	893b      	ldrh	r3, [r7, #8]
 80028fe:	ee07 3a90 	vmov	s15, r3
 8002902:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002906:	edd7 6a04 	vldr	s13, [r7, #16]
 800290a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	edc3 7a01 	vstr	s15, [r3, #4]
	CAL_Values->I_W_offset = Cal_W_val / Samples;
 8002914:	893b      	ldrh	r3, [r7, #8]
 8002916:	ee07 3a90 	vmov	s15, r3
 800291a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800291e:	edd7 6a03 	vldr	s13, [r7, #12]
 8002922:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	edc3 7a02 	vstr	s15, [r3, #8]

	debug_uart4_write_text("Finished Currentsensor Calibration \r\n");
 800292c:	4809      	ldr	r0, [pc, #36]	; (8002954 <Current_sensor_calibration+0x150>)
 800292e:	f7ff fad7 	bl	8001ee0 <debug_uart4_write_text>
}
 8002932:	bf00      	nop
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40010000 	.word	0x40010000
 8002940:	08015638 	.word	0x08015638
 8002944:	24000dd8 	.word	0x24000dd8
 8002948:	38533406 	.word	0x38533406
 800294c:	24000de0 	.word	0x24000de0
 8002950:	24000df0 	.word	0x24000df0
 8002954:	08015660 	.word	0x08015660

08002958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800295c:	b672      	cpsid	i
}
 800295e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002960:	e7fe      	b.n	8002960 <Error_Handler+0x8>
	...

08002964 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800296a:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <HAL_MspInit+0x30>)
 800296c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002970:	4a08      	ldr	r2, [pc, #32]	; (8002994 <HAL_MspInit+0x30>)
 8002972:	f043 0302 	orr.w	r3, r3, #2
 8002976:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800297a:	4b06      	ldr	r3, [pc, #24]	; (8002994 <HAL_MspInit+0x30>)
 800297c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	607b      	str	r3, [r7, #4]
 8002986:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	58024400 	.word	0x58024400

08002998 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b090      	sub	sp, #64	; 0x40
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	605a      	str	r2, [r3, #4]
 80029aa:	609a      	str	r2, [r3, #8]
 80029ac:	60da      	str	r2, [r3, #12]
 80029ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a83      	ldr	r2, [pc, #524]	; (8002bc4 <HAL_ADC_MspInit+0x22c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d163      	bne.n	8002a82 <HAL_ADC_MspInit+0xea>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80029ba:	4b83      	ldr	r3, [pc, #524]	; (8002bc8 <HAL_ADC_MspInit+0x230>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	3301      	adds	r3, #1
 80029c0:	4a81      	ldr	r2, [pc, #516]	; (8002bc8 <HAL_ADC_MspInit+0x230>)
 80029c2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80029c4:	4b80      	ldr	r3, [pc, #512]	; (8002bc8 <HAL_ADC_MspInit+0x230>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d10e      	bne.n	80029ea <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80029cc:	4b7f      	ldr	r3, [pc, #508]	; (8002bcc <HAL_ADC_MspInit+0x234>)
 80029ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029d2:	4a7e      	ldr	r2, [pc, #504]	; (8002bcc <HAL_ADC_MspInit+0x234>)
 80029d4:	f043 0320 	orr.w	r3, r3, #32
 80029d8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80029dc:	4b7b      	ldr	r3, [pc, #492]	; (8002bcc <HAL_ADC_MspInit+0x234>)
 80029de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029e2:	f003 0320 	and.w	r3, r3, #32
 80029e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80029e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ea:	4b78      	ldr	r3, [pc, #480]	; (8002bcc <HAL_ADC_MspInit+0x234>)
 80029ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029f0:	4a76      	ldr	r2, [pc, #472]	; (8002bcc <HAL_ADC_MspInit+0x234>)
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029fa:	4b74      	ldr	r3, [pc, #464]	; (8002bcc <HAL_ADC_MspInit+0x234>)
 80029fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    PA1     ------> ADC1_INP17
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = I_Phase_V_Pin|I_Phase_U_Pin|U_Phase_V_Pin;
 8002a08:	230b      	movs	r3, #11
 8002a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a18:	4619      	mov	r1, r3
 8002a1a:	486d      	ldr	r0, [pc, #436]	; (8002bd0 <HAL_ADC_MspInit+0x238>)
 8002a1c:	f006 fa48 	bl	8008eb0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002a20:	4b6c      	ldr	r3, [pc, #432]	; (8002bd4 <HAL_ADC_MspInit+0x23c>)
 8002a22:	4a6d      	ldr	r2, [pc, #436]	; (8002bd8 <HAL_ADC_MspInit+0x240>)
 8002a24:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002a26:	4b6b      	ldr	r3, [pc, #428]	; (8002bd4 <HAL_ADC_MspInit+0x23c>)
 8002a28:	2209      	movs	r2, #9
 8002a2a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a2c:	4b69      	ldr	r3, [pc, #420]	; (8002bd4 <HAL_ADC_MspInit+0x23c>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a32:	4b68      	ldr	r3, [pc, #416]	; (8002bd4 <HAL_ADC_MspInit+0x23c>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002a38:	4b66      	ldr	r3, [pc, #408]	; (8002bd4 <HAL_ADC_MspInit+0x23c>)
 8002a3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a3e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a40:	4b64      	ldr	r3, [pc, #400]	; (8002bd4 <HAL_ADC_MspInit+0x23c>)
 8002a42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a46:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a48:	4b62      	ldr	r3, [pc, #392]	; (8002bd4 <HAL_ADC_MspInit+0x23c>)
 8002a4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a4e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002a50:	4b60      	ldr	r3, [pc, #384]	; (8002bd4 <HAL_ADC_MspInit+0x23c>)
 8002a52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a56:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002a58:	4b5e      	ldr	r3, [pc, #376]	; (8002bd4 <HAL_ADC_MspInit+0x23c>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a5e:	4b5d      	ldr	r3, [pc, #372]	; (8002bd4 <HAL_ADC_MspInit+0x23c>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002a64:	485b      	ldr	r0, [pc, #364]	; (8002bd4 <HAL_ADC_MspInit+0x23c>)
 8002a66:	f003 fabd 	bl	8005fe4 <HAL_DMA_Init>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <HAL_ADC_MspInit+0xdc>
    {
      Error_Handler();
 8002a70:	f7ff ff72 	bl	8002958 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a57      	ldr	r2, [pc, #348]	; (8002bd4 <HAL_ADC_MspInit+0x23c>)
 8002a78:	659a      	str	r2, [r3, #88]	; 0x58
 8002a7a:	4a56      	ldr	r2, [pc, #344]	; (8002bd4 <HAL_ADC_MspInit+0x23c>)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002a80:	e11b      	b.n	8002cba <HAL_ADC_MspInit+0x322>
  else if(hadc->Instance==ADC2)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a55      	ldr	r2, [pc, #340]	; (8002bdc <HAL_ADC_MspInit+0x244>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	f040 80b1 	bne.w	8002bf0 <HAL_ADC_MspInit+0x258>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002a8e:	4b4e      	ldr	r3, [pc, #312]	; (8002bc8 <HAL_ADC_MspInit+0x230>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	3301      	adds	r3, #1
 8002a94:	4a4c      	ldr	r2, [pc, #304]	; (8002bc8 <HAL_ADC_MspInit+0x230>)
 8002a96:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002a98:	4b4b      	ldr	r3, [pc, #300]	; (8002bc8 <HAL_ADC_MspInit+0x230>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d10e      	bne.n	8002abe <HAL_ADC_MspInit+0x126>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002aa0:	4b4a      	ldr	r3, [pc, #296]	; (8002bcc <HAL_ADC_MspInit+0x234>)
 8002aa2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002aa6:	4a49      	ldr	r2, [pc, #292]	; (8002bcc <HAL_ADC_MspInit+0x234>)
 8002aa8:	f043 0320 	orr.w	r3, r3, #32
 8002aac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002ab0:	4b46      	ldr	r3, [pc, #280]	; (8002bcc <HAL_ADC_MspInit+0x234>)
 8002ab2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ab6:	f003 0320 	and.w	r3, r3, #32
 8002aba:	623b      	str	r3, [r7, #32]
 8002abc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002abe:	4b43      	ldr	r3, [pc, #268]	; (8002bcc <HAL_ADC_MspInit+0x234>)
 8002ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ac4:	4a41      	ldr	r2, [pc, #260]	; (8002bcc <HAL_ADC_MspInit+0x234>)
 8002ac6:	f043 0304 	orr.w	r3, r3, #4
 8002aca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ace:	4b3f      	ldr	r3, [pc, #252]	; (8002bcc <HAL_ADC_MspInit+0x234>)
 8002ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	61fb      	str	r3, [r7, #28]
 8002ada:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002adc:	4b3b      	ldr	r3, [pc, #236]	; (8002bcc <HAL_ADC_MspInit+0x234>)
 8002ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ae2:	4a3a      	ldr	r2, [pc, #232]	; (8002bcc <HAL_ADC_MspInit+0x234>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002aec:	4b37      	ldr	r3, [pc, #220]	; (8002bcc <HAL_ADC_MspInit+0x234>)
 8002aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	61bb      	str	r3, [r7, #24]
 8002af8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002afa:	4b34      	ldr	r3, [pc, #208]	; (8002bcc <HAL_ADC_MspInit+0x234>)
 8002afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b00:	4a32      	ldr	r2, [pc, #200]	; (8002bcc <HAL_ADC_MspInit+0x234>)
 8002b02:	f043 0302 	orr.w	r3, r3, #2
 8002b06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b0a:	4b30      	ldr	r3, [pc, #192]	; (8002bcc <HAL_ADC_MspInit+0x234>)
 8002b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = U_Phase_U_Pin;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(U_Phase_U_GPIO_Port, &GPIO_InitStruct);
 8002b24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b28:	4619      	mov	r1, r3
 8002b2a:	482d      	ldr	r0, [pc, #180]	; (8002be0 <HAL_ADC_MspInit+0x248>)
 8002b2c:	f006 f9c0 	bl	8008eb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = U_Phase_W_Pin;
 8002b30:	2304      	movs	r3, #4
 8002b32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b34:	2303      	movs	r3, #3
 8002b36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(U_Phase_W_GPIO_Port, &GPIO_InitStruct);
 8002b3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b40:	4619      	mov	r1, r3
 8002b42:	4823      	ldr	r0, [pc, #140]	; (8002bd0 <HAL_ADC_MspInit+0x238>)
 8002b44:	f006 f9b4 	bl	8008eb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I_Phase_W_Pin;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I_Phase_W_GPIO_Port, &GPIO_InitStruct);
 8002b54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4822      	ldr	r0, [pc, #136]	; (8002be4 <HAL_ADC_MspInit+0x24c>)
 8002b5c:	f006 f9a8 	bl	8008eb0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream0;
 8002b60:	4b21      	ldr	r3, [pc, #132]	; (8002be8 <HAL_ADC_MspInit+0x250>)
 8002b62:	4a22      	ldr	r2, [pc, #136]	; (8002bec <HAL_ADC_MspInit+0x254>)
 8002b64:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8002b66:	4b20      	ldr	r3, [pc, #128]	; (8002be8 <HAL_ADC_MspInit+0x250>)
 8002b68:	220a      	movs	r2, #10
 8002b6a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b6c:	4b1e      	ldr	r3, [pc, #120]	; (8002be8 <HAL_ADC_MspInit+0x250>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b72:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <HAL_ADC_MspInit+0x250>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002b78:	4b1b      	ldr	r3, [pc, #108]	; (8002be8 <HAL_ADC_MspInit+0x250>)
 8002b7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b7e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b80:	4b19      	ldr	r3, [pc, #100]	; (8002be8 <HAL_ADC_MspInit+0x250>)
 8002b82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b86:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b88:	4b17      	ldr	r3, [pc, #92]	; (8002be8 <HAL_ADC_MspInit+0x250>)
 8002b8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b8e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002b90:	4b15      	ldr	r3, [pc, #84]	; (8002be8 <HAL_ADC_MspInit+0x250>)
 8002b92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b96:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002b98:	4b13      	ldr	r3, [pc, #76]	; (8002be8 <HAL_ADC_MspInit+0x250>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b9e:	4b12      	ldr	r3, [pc, #72]	; (8002be8 <HAL_ADC_MspInit+0x250>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002ba4:	4810      	ldr	r0, [pc, #64]	; (8002be8 <HAL_ADC_MspInit+0x250>)
 8002ba6:	f003 fa1d 	bl	8005fe4 <HAL_DMA_Init>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <HAL_ADC_MspInit+0x21c>
      Error_Handler();
 8002bb0:	f7ff fed2 	bl	8002958 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a0c      	ldr	r2, [pc, #48]	; (8002be8 <HAL_ADC_MspInit+0x250>)
 8002bb8:	659a      	str	r2, [r3, #88]	; 0x58
 8002bba:	4a0b      	ldr	r2, [pc, #44]	; (8002be8 <HAL_ADC_MspInit+0x250>)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002bc0:	e07b      	b.n	8002cba <HAL_ADC_MspInit+0x322>
 8002bc2:	bf00      	nop
 8002bc4:	40022000 	.word	0x40022000
 8002bc8:	24000df4 	.word	0x24000df4
 8002bcc:	58024400 	.word	0x58024400
 8002bd0:	58020000 	.word	0x58020000
 8002bd4:	24000344 	.word	0x24000344
 8002bd8:	40020010 	.word	0x40020010
 8002bdc:	40022100 	.word	0x40022100
 8002be0:	58020800 	.word	0x58020800
 8002be4:	58020400 	.word	0x58020400
 8002be8:	240003bc 	.word	0x240003bc
 8002bec:	40020410 	.word	0x40020410
  else if(hadc->Instance==ADC3)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a33      	ldr	r2, [pc, #204]	; (8002cc4 <HAL_ADC_MspInit+0x32c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d15f      	bne.n	8002cba <HAL_ADC_MspInit+0x322>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002bfa:	4b33      	ldr	r3, [pc, #204]	; (8002cc8 <HAL_ADC_MspInit+0x330>)
 8002bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c00:	4a31      	ldr	r2, [pc, #196]	; (8002cc8 <HAL_ADC_MspInit+0x330>)
 8002c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c0a:	4b2f      	ldr	r3, [pc, #188]	; (8002cc8 <HAL_ADC_MspInit+0x330>)
 8002c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c18:	4b2b      	ldr	r3, [pc, #172]	; (8002cc8 <HAL_ADC_MspInit+0x330>)
 8002c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c1e:	4a2a      	ldr	r2, [pc, #168]	; (8002cc8 <HAL_ADC_MspInit+0x330>)
 8002c20:	f043 0304 	orr.w	r3, r3, #4
 8002c24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c28:	4b27      	ldr	r3, [pc, #156]	; (8002cc8 <HAL_ADC_MspInit+0x330>)
 8002c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_Supply_Pin;
 8002c36:	2301      	movs	r3, #1
 8002c38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(U_Supply_GPIO_Port, &GPIO_InitStruct);
 8002c42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c46:	4619      	mov	r1, r3
 8002c48:	4820      	ldr	r0, [pc, #128]	; (8002ccc <HAL_ADC_MspInit+0x334>)
 8002c4a:	f006 f931 	bl	8008eb0 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002c4e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002c52:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002c56:	f000 fef3 	bl	8003a40 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream1;
 8002c5a:	4b1d      	ldr	r3, [pc, #116]	; (8002cd0 <HAL_ADC_MspInit+0x338>)
 8002c5c:	4a1d      	ldr	r2, [pc, #116]	; (8002cd4 <HAL_ADC_MspInit+0x33c>)
 8002c5e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002c60:	4b1b      	ldr	r3, [pc, #108]	; (8002cd0 <HAL_ADC_MspInit+0x338>)
 8002c62:	2273      	movs	r2, #115	; 0x73
 8002c64:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c66:	4b1a      	ldr	r3, [pc, #104]	; (8002cd0 <HAL_ADC_MspInit+0x338>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c6c:	4b18      	ldr	r3, [pc, #96]	; (8002cd0 <HAL_ADC_MspInit+0x338>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002c72:	4b17      	ldr	r3, [pc, #92]	; (8002cd0 <HAL_ADC_MspInit+0x338>)
 8002c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c78:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c7a:	4b15      	ldr	r3, [pc, #84]	; (8002cd0 <HAL_ADC_MspInit+0x338>)
 8002c7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c80:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c82:	4b13      	ldr	r3, [pc, #76]	; (8002cd0 <HAL_ADC_MspInit+0x338>)
 8002c84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c88:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002c8a:	4b11      	ldr	r3, [pc, #68]	; (8002cd0 <HAL_ADC_MspInit+0x338>)
 8002c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c90:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002c92:	4b0f      	ldr	r3, [pc, #60]	; (8002cd0 <HAL_ADC_MspInit+0x338>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c98:	4b0d      	ldr	r3, [pc, #52]	; (8002cd0 <HAL_ADC_MspInit+0x338>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002c9e:	480c      	ldr	r0, [pc, #48]	; (8002cd0 <HAL_ADC_MspInit+0x338>)
 8002ca0:	f003 f9a0 	bl	8005fe4 <HAL_DMA_Init>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <HAL_ADC_MspInit+0x316>
      Error_Handler();
 8002caa:	f7ff fe55 	bl	8002958 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a07      	ldr	r2, [pc, #28]	; (8002cd0 <HAL_ADC_MspInit+0x338>)
 8002cb2:	659a      	str	r2, [r3, #88]	; 0x58
 8002cb4:	4a06      	ldr	r2, [pc, #24]	; (8002cd0 <HAL_ADC_MspInit+0x338>)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002cba:	bf00      	nop
 8002cbc:	3740      	adds	r7, #64	; 0x40
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	58026000 	.word	0x58026000
 8002cc8:	58024400 	.word	0x58024400
 8002ccc:	58020800 	.word	0x58020800
 8002cd0:	24000434 	.word	0x24000434
 8002cd4:	40020428 	.word	0x40020428

08002cd8 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08a      	sub	sp, #40	; 0x28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce0:	f107 0314 	add.w	r3, r7, #20
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	60da      	str	r2, [r3, #12]
 8002cee:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a25      	ldr	r2, [pc, #148]	; (8002d8c <HAL_COMP_MspInit+0xb4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d144      	bne.n	8002d84 <HAL_COMP_MspInit+0xac>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 8002cfa:	4b25      	ldr	r3, [pc, #148]	; (8002d90 <HAL_COMP_MspInit+0xb8>)
 8002cfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d00:	4a23      	ldr	r2, [pc, #140]	; (8002d90 <HAL_COMP_MspInit+0xb8>)
 8002d02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d06:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002d0a:	4b21      	ldr	r3, [pc, #132]	; (8002d90 <HAL_COMP_MspInit+0xb8>)
 8002d0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d14:	613b      	str	r3, [r7, #16]
 8002d16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d18:	4b1d      	ldr	r3, [pc, #116]	; (8002d90 <HAL_COMP_MspInit+0xb8>)
 8002d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d1e:	4a1c      	ldr	r2, [pc, #112]	; (8002d90 <HAL_COMP_MspInit+0xb8>)
 8002d20:	f043 0304 	orr.w	r3, r3, #4
 8002d24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d28:	4b19      	ldr	r3, [pc, #100]	; (8002d90 <HAL_COMP_MspInit+0xb8>)
 8002d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d2e:	f003 0304 	and.w	r3, r3, #4
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d36:	4b16      	ldr	r3, [pc, #88]	; (8002d90 <HAL_COMP_MspInit+0xb8>)
 8002d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d3c:	4a14      	ldr	r2, [pc, #80]	; (8002d90 <HAL_COMP_MspInit+0xb8>)
 8002d3e:	f043 0302 	orr.w	r3, r3, #2
 8002d42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d46:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <HAL_COMP_MspInit+0xb8>)
 8002d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PC4     ------> COMP1_INM
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002d54:	2310      	movs	r3, #16
 8002d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d60:	f107 0314 	add.w	r3, r7, #20
 8002d64:	4619      	mov	r1, r3
 8002d66:	480b      	ldr	r0, [pc, #44]	; (8002d94 <HAL_COMP_MspInit+0xbc>)
 8002d68:	f006 f8a2 	bl	8008eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d6c:	2304      	movs	r3, #4
 8002d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d70:	2303      	movs	r3, #3
 8002d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d78:	f107 0314 	add.w	r3, r7, #20
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4806      	ldr	r0, [pc, #24]	; (8002d98 <HAL_COMP_MspInit+0xc0>)
 8002d80:	f006 f896 	bl	8008eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8002d84:	bf00      	nop
 8002d86:	3728      	adds	r7, #40	; 0x28
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	5800380c 	.word	0x5800380c
 8002d90:	58024400 	.word	0x58024400
 8002d94:	58020800 	.word	0x58020800
 8002d98:	58020400 	.word	0x58020400

08002d9c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b08a      	sub	sp, #40	; 0x28
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da4:	f107 0314 	add.w	r3, r7, #20
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	605a      	str	r2, [r3, #4]
 8002dae:	609a      	str	r2, [r3, #8]
 8002db0:	60da      	str	r2, [r3, #12]
 8002db2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a18      	ldr	r2, [pc, #96]	; (8002e1c <HAL_DAC_MspInit+0x80>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d129      	bne.n	8002e12 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002dbe:	4b18      	ldr	r3, [pc, #96]	; (8002e20 <HAL_DAC_MspInit+0x84>)
 8002dc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dc4:	4a16      	ldr	r2, [pc, #88]	; (8002e20 <HAL_DAC_MspInit+0x84>)
 8002dc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002dca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002dce:	4b14      	ldr	r3, [pc, #80]	; (8002e20 <HAL_DAC_MspInit+0x84>)
 8002dd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ddc:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <HAL_DAC_MspInit+0x84>)
 8002dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002de2:	4a0f      	ldr	r2, [pc, #60]	; (8002e20 <HAL_DAC_MspInit+0x84>)
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dec:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <HAL_DAC_MspInit+0x84>)
 8002dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002dfa:	2310      	movs	r3, #16
 8002dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e02:	2300      	movs	r3, #0
 8002e04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e06:	f107 0314 	add.w	r3, r7, #20
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4805      	ldr	r0, [pc, #20]	; (8002e24 <HAL_DAC_MspInit+0x88>)
 8002e0e:	f006 f84f 	bl	8008eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002e12:	bf00      	nop
 8002e14:	3728      	adds	r7, #40	; 0x28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40007400 	.word	0x40007400
 8002e20:	58024400 	.word	0x58024400
 8002e24:	58020000 	.word	0x58020000

08002e28 <HAL_DTS_MspInit>:
* This function configures the hardware resources used in this example
* @param hdts: DTS handle pointer
* @retval None
*/
void HAL_DTS_MspInit(DTS_HandleTypeDef* hdts)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  if(hdts->Instance==DTS)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a0b      	ldr	r2, [pc, #44]	; (8002e64 <HAL_DTS_MspInit+0x3c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d10e      	bne.n	8002e58 <HAL_DTS_MspInit+0x30>
  {
  /* USER CODE BEGIN DTS_MspInit 0 */

  /* USER CODE END DTS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DTS_CLK_ENABLE();
 8002e3a:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <HAL_DTS_MspInit+0x40>)
 8002e3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e40:	4a09      	ldr	r2, [pc, #36]	; (8002e68 <HAL_DTS_MspInit+0x40>)
 8002e42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e46:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002e4a:	4b07      	ldr	r3, [pc, #28]	; (8002e68 <HAL_DTS_MspInit+0x40>)
 8002e4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DTS_MspInit 1 */

  /* USER CODE END DTS_MspInit 1 */
  }

}
 8002e58:	bf00      	nop
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	58006800 	.word	0x58006800
 8002e68:	58024400 	.word	0x58024400

08002e6c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b0b8      	sub	sp, #224	; 0xe0
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e74:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	60da      	str	r2, [r3, #12]
 8002e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e84:	f107 0310 	add.w	r3, r7, #16
 8002e88:	22b8      	movs	r2, #184	; 0xb8
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f00e ff84 	bl	8011d9a <memset>
  if(hfdcan->Instance==FDCAN1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a27      	ldr	r2, [pc, #156]	; (8002f34 <HAL_FDCAN_MspInit+0xc8>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d146      	bne.n	8002f2a <HAL_FDCAN_MspInit+0xbe>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002e9c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002ea0:	f04f 0300 	mov.w	r3, #0
 8002ea4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002ea8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002eac:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002eae:	f107 0310 	add.w	r3, r7, #16
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f007 fab6 	bl	800a424 <HAL_RCCEx_PeriphCLKConfig>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002ebe:	f7ff fd4b 	bl	8002958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002ec2:	4b1d      	ldr	r3, [pc, #116]	; (8002f38 <HAL_FDCAN_MspInit+0xcc>)
 8002ec4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002ec8:	4a1b      	ldr	r2, [pc, #108]	; (8002f38 <HAL_FDCAN_MspInit+0xcc>)
 8002eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ece:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002ed2:	4b19      	ldr	r3, [pc, #100]	; (8002f38 <HAL_FDCAN_MspInit+0xcc>)
 8002ed4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ee0:	4b15      	ldr	r3, [pc, #84]	; (8002f38 <HAL_FDCAN_MspInit+0xcc>)
 8002ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ee6:	4a14      	ldr	r2, [pc, #80]	; (8002f38 <HAL_FDCAN_MspInit+0xcc>)
 8002ee8:	f043 0302 	orr.w	r3, r3, #2
 8002eec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ef0:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <HAL_FDCAN_MspInit+0xcc>)
 8002ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	60bb      	str	r3, [r7, #8]
 8002efc:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB9     ------> FDCAN1_TX
    PB8     ------> FDCAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8002efe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f06:	2302      	movs	r3, #2
 8002f08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f12:	2300      	movs	r3, #0
 8002f14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002f18:	2309      	movs	r3, #9
 8002f1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f1e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f22:	4619      	mov	r1, r3
 8002f24:	4805      	ldr	r0, [pc, #20]	; (8002f3c <HAL_FDCAN_MspInit+0xd0>)
 8002f26:	f005 ffc3 	bl	8008eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8002f2a:	bf00      	nop
 8002f2c:	37e0      	adds	r7, #224	; 0xe0
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	4000a000 	.word	0x4000a000
 8002f38:	58024400 	.word	0x58024400
 8002f3c:	58020400 	.word	0x58020400

08002f40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b0ba      	sub	sp, #232	; 0xe8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f48:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	605a      	str	r2, [r3, #4]
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	60da      	str	r2, [r3, #12]
 8002f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f58:	f107 0318 	add.w	r3, r7, #24
 8002f5c:	22b8      	movs	r2, #184	; 0xb8
 8002f5e:	2100      	movs	r1, #0
 8002f60:	4618      	mov	r0, r3
 8002f62:	f00e ff1a 	bl	8011d9a <memset>
  if(huart->Instance==LPUART1)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a4c      	ldr	r2, [pc, #304]	; (800309c <HAL_UART_MspInit+0x15c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d146      	bne.n	8002ffe <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002f70:	f04f 0204 	mov.w	r2, #4
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f82:	f107 0318 	add.w	r3, r7, #24
 8002f86:	4618      	mov	r0, r3
 8002f88:	f007 fa4c 	bl	800a424 <HAL_RCCEx_PeriphCLKConfig>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002f92:	f7ff fce1 	bl	8002958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002f96:	4b42      	ldr	r3, [pc, #264]	; (80030a0 <HAL_UART_MspInit+0x160>)
 8002f98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f9c:	4a40      	ldr	r2, [pc, #256]	; (80030a0 <HAL_UART_MspInit+0x160>)
 8002f9e:	f043 0308 	orr.w	r3, r3, #8
 8002fa2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002fa6:	4b3e      	ldr	r3, [pc, #248]	; (80030a0 <HAL_UART_MspInit+0x160>)
 8002fa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fb4:	4b3a      	ldr	r3, [pc, #232]	; (80030a0 <HAL_UART_MspInit+0x160>)
 8002fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fba:	4a39      	ldr	r2, [pc, #228]	; (80030a0 <HAL_UART_MspInit+0x160>)
 8002fbc:	f043 0302 	orr.w	r3, r3, #2
 8002fc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fc4:	4b36      	ldr	r3, [pc, #216]	; (80030a0 <HAL_UART_MspInit+0x160>)
 8002fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	613b      	str	r3, [r7, #16]
 8002fd0:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB7     ------> LPUART1_RX
    PB6     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = External_uart_RX_Pin|External_uart_TX_Pin;
 8002fd2:	23c0      	movs	r3, #192	; 0xc0
 8002fd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd8:	2302      	movs	r3, #2
 8002fda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART;
 8002fea:	2308      	movs	r3, #8
 8002fec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	482b      	ldr	r0, [pc, #172]	; (80030a4 <HAL_UART_MspInit+0x164>)
 8002ff8:	f005 ff5a 	bl	8008eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8002ffc:	e04a      	b.n	8003094 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==UART4)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a29      	ldr	r2, [pc, #164]	; (80030a8 <HAL_UART_MspInit+0x168>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d145      	bne.n	8003094 <HAL_UART_MspInit+0x154>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003008:	f04f 0202 	mov.w	r2, #2
 800300c:	f04f 0300 	mov.w	r3, #0
 8003010:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003014:	2300      	movs	r3, #0
 8003016:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800301a:	f107 0318 	add.w	r3, r7, #24
 800301e:	4618      	mov	r0, r3
 8003020:	f007 fa00 	bl	800a424 <HAL_RCCEx_PeriphCLKConfig>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <HAL_UART_MspInit+0xee>
      Error_Handler();
 800302a:	f7ff fc95 	bl	8002958 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 800302e:	4b1c      	ldr	r3, [pc, #112]	; (80030a0 <HAL_UART_MspInit+0x160>)
 8003030:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003034:	4a1a      	ldr	r2, [pc, #104]	; (80030a0 <HAL_UART_MspInit+0x160>)
 8003036:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800303a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800303e:	4b18      	ldr	r3, [pc, #96]	; (80030a0 <HAL_UART_MspInit+0x160>)
 8003040:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003044:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800304c:	4b14      	ldr	r3, [pc, #80]	; (80030a0 <HAL_UART_MspInit+0x160>)
 800304e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003052:	4a13      	ldr	r2, [pc, #76]	; (80030a0 <HAL_UART_MspInit+0x160>)
 8003054:	f043 0308 	orr.w	r3, r3, #8
 8003058:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800305c:	4b10      	ldr	r3, [pc, #64]	; (80030a0 <HAL_UART_MspInit+0x160>)
 800305e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	60bb      	str	r3, [r7, #8]
 8003068:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DEBUG_RX_Pin|DEBUG_TX_Pin;
 800306a:	2303      	movs	r3, #3
 800306c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003070:	2302      	movs	r3, #2
 8003072:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003076:	2300      	movs	r3, #0
 8003078:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800307c:	2300      	movs	r3, #0
 800307e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003082:	2308      	movs	r3, #8
 8003084:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003088:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800308c:	4619      	mov	r1, r3
 800308e:	4807      	ldr	r0, [pc, #28]	; (80030ac <HAL_UART_MspInit+0x16c>)
 8003090:	f005 ff0e 	bl	8008eb0 <HAL_GPIO_Init>
}
 8003094:	bf00      	nop
 8003096:	37e8      	adds	r7, #232	; 0xe8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	58000c00 	.word	0x58000c00
 80030a0:	58024400 	.word	0x58024400
 80030a4:	58020400 	.word	0x58020400
 80030a8:	40004c00 	.word	0x40004c00
 80030ac:	58020c00 	.word	0x58020c00

080030b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b0ba      	sub	sp, #232	; 0xe8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	605a      	str	r2, [r3, #4]
 80030c2:	609a      	str	r2, [r3, #8]
 80030c4:	60da      	str	r2, [r3, #12]
 80030c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030c8:	f107 0318 	add.w	r3, r7, #24
 80030cc:	22b8      	movs	r2, #184	; 0xb8
 80030ce:	2100      	movs	r1, #0
 80030d0:	4618      	mov	r0, r3
 80030d2:	f00e fe62 	bl	8011d9a <memset>
  if(hspi->Instance==SPI2)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a50      	ldr	r2, [pc, #320]	; (800321c <HAL_SPI_MspInit+0x16c>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d146      	bne.n	800316e <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80030e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80030ec:	2300      	movs	r3, #0
 80030ee:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030f0:	f107 0318 	add.w	r3, r7, #24
 80030f4:	4618      	mov	r0, r3
 80030f6:	f007 f995 	bl	800a424 <HAL_RCCEx_PeriphCLKConfig>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8003100:	f7ff fc2a 	bl	8002958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003104:	4b46      	ldr	r3, [pc, #280]	; (8003220 <HAL_SPI_MspInit+0x170>)
 8003106:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800310a:	4a45      	ldr	r2, [pc, #276]	; (8003220 <HAL_SPI_MspInit+0x170>)
 800310c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003110:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003114:	4b42      	ldr	r3, [pc, #264]	; (8003220 <HAL_SPI_MspInit+0x170>)
 8003116:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800311a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003122:	4b3f      	ldr	r3, [pc, #252]	; (8003220 <HAL_SPI_MspInit+0x170>)
 8003124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003128:	4a3d      	ldr	r2, [pc, #244]	; (8003220 <HAL_SPI_MspInit+0x170>)
 800312a:	f043 0302 	orr.w	r3, r3, #2
 800312e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003132:	4b3b      	ldr	r3, [pc, #236]	; (8003220 <HAL_SPI_MspInit+0x170>)
 8003134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = Driver_Sen_MOSI_Pin|Driver_Sen_MISO_Pin|Driver_Sen_SCK_Pin;
 8003140:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003144:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003148:	2302      	movs	r3, #2
 800314a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314e:	2300      	movs	r3, #0
 8003150:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003154:	2300      	movs	r3, #0
 8003156:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800315a:	2305      	movs	r3, #5
 800315c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003160:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003164:	4619      	mov	r1, r3
 8003166:	482f      	ldr	r0, [pc, #188]	; (8003224 <HAL_SPI_MspInit+0x174>)
 8003168:	f005 fea2 	bl	8008eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800316c:	e052      	b.n	8003214 <HAL_SPI_MspInit+0x164>
  else if(hspi->Instance==SPI3)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a2d      	ldr	r2, [pc, #180]	; (8003228 <HAL_SPI_MspInit+0x178>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d14d      	bne.n	8003214 <HAL_SPI_MspInit+0x164>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8003178:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800317c:	f04f 0300 	mov.w	r3, #0
 8003180:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003184:	2300      	movs	r3, #0
 8003186:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003188:	f107 0318 	add.w	r3, r7, #24
 800318c:	4618      	mov	r0, r3
 800318e:	f007 f949 	bl	800a424 <HAL_RCCEx_PeriphCLKConfig>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <HAL_SPI_MspInit+0xec>
      Error_Handler();
 8003198:	f7ff fbde 	bl	8002958 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800319c:	4b20      	ldr	r3, [pc, #128]	; (8003220 <HAL_SPI_MspInit+0x170>)
 800319e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031a2:	4a1f      	ldr	r2, [pc, #124]	; (8003220 <HAL_SPI_MspInit+0x170>)
 80031a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031ac:	4b1c      	ldr	r3, [pc, #112]	; (8003220 <HAL_SPI_MspInit+0x170>)
 80031ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031ba:	4b19      	ldr	r3, [pc, #100]	; (8003220 <HAL_SPI_MspInit+0x170>)
 80031bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031c0:	4a17      	ldr	r2, [pc, #92]	; (8003220 <HAL_SPI_MspInit+0x170>)
 80031c2:	f043 0304 	orr.w	r3, r3, #4
 80031c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031ca:	4b15      	ldr	r3, [pc, #84]	; (8003220 <HAL_SPI_MspInit+0x170>)
 80031cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	60bb      	str	r3, [r7, #8]
 80031d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EXT_SEN_MISO_Pin|EXT_SEN_SCK_Pin|EXT_SEN_MOSI_Pin;
 80031d8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80031dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e0:	2302      	movs	r3, #2
 80031e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ec:	2300      	movs	r3, #0
 80031ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80031f2:	2306      	movs	r3, #6
 80031f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80031fc:	4619      	mov	r1, r3
 80031fe:	480b      	ldr	r0, [pc, #44]	; (800322c <HAL_SPI_MspInit+0x17c>)
 8003200:	f005 fe56 	bl	8008eb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8003204:	2200      	movs	r2, #0
 8003206:	2100      	movs	r1, #0
 8003208:	2033      	movs	r0, #51	; 0x33
 800320a:	f002 fd56 	bl	8005cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800320e:	2033      	movs	r0, #51	; 0x33
 8003210:	f002 fd6d 	bl	8005cee <HAL_NVIC_EnableIRQ>
}
 8003214:	bf00      	nop
 8003216:	37e8      	adds	r7, #232	; 0xe8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40003800 	.word	0x40003800
 8003220:	58024400 	.word	0x58024400
 8003224:	58020400 	.word	0x58020400
 8003228:	40003c00 	.word	0x40003c00
 800322c:	58020800 	.word	0x58020800

08003230 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08c      	sub	sp, #48	; 0x30
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003238:	f107 031c 	add.w	r3, r7, #28
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	605a      	str	r2, [r3, #4]
 8003242:	609a      	str	r2, [r3, #8]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a3f      	ldr	r2, [pc, #252]	; (800334c <HAL_TIM_Base_MspInit+0x11c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d14f      	bne.n	80032f2 <HAL_TIM_Base_MspInit+0xc2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003252:	4b3f      	ldr	r3, [pc, #252]	; (8003350 <HAL_TIM_Base_MspInit+0x120>)
 8003254:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003258:	4a3d      	ldr	r2, [pc, #244]	; (8003350 <HAL_TIM_Base_MspInit+0x120>)
 800325a:	f043 0301 	orr.w	r3, r3, #1
 800325e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003262:	4b3b      	ldr	r3, [pc, #236]	; (8003350 <HAL_TIM_Base_MspInit+0x120>)
 8003264:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	61bb      	str	r3, [r7, #24]
 800326e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003270:	4b37      	ldr	r3, [pc, #220]	; (8003350 <HAL_TIM_Base_MspInit+0x120>)
 8003272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003276:	4a36      	ldr	r2, [pc, #216]	; (8003350 <HAL_TIM_Base_MspInit+0x120>)
 8003278:	f043 0310 	orr.w	r3, r3, #16
 800327c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003280:	4b33      	ldr	r3, [pc, #204]	; (8003350 <HAL_TIM_Base_MspInit+0x120>)
 8003282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003286:	f003 0310 	and.w	r3, r3, #16
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = Driver_fault_Pin;
 800328e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003294:	2312      	movs	r3, #18
 8003296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003298:	2300      	movs	r3, #0
 800329a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800329c:	2300      	movs	r3, #0
 800329e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80032a0:	2301      	movs	r3, #1
 80032a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Driver_fault_GPIO_Port, &GPIO_InitStruct);
 80032a4:	f107 031c 	add.w	r3, r7, #28
 80032a8:	4619      	mov	r1, r3
 80032aa:	482a      	ldr	r0, [pc, #168]	; (8003354 <HAL_TIM_Base_MspInit+0x124>)
 80032ac:	f005 fe00 	bl	8008eb0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80032b0:	2200      	movs	r2, #0
 80032b2:	2100      	movs	r1, #0
 80032b4:	2018      	movs	r0, #24
 80032b6:	f002 fd00 	bl	8005cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80032ba:	2018      	movs	r0, #24
 80032bc:	f002 fd17 	bl	8005cee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80032c0:	2200      	movs	r2, #0
 80032c2:	2100      	movs	r1, #0
 80032c4:	2019      	movs	r0, #25
 80032c6:	f002 fcf8 	bl	8005cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80032ca:	2019      	movs	r0, #25
 80032cc:	f002 fd0f 	bl	8005cee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80032d0:	2200      	movs	r2, #0
 80032d2:	2100      	movs	r1, #0
 80032d4:	201a      	movs	r0, #26
 80032d6:	f002 fcf0 	bl	8005cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80032da:	201a      	movs	r0, #26
 80032dc:	f002 fd07 	bl	8005cee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80032e0:	2200      	movs	r2, #0
 80032e2:	2100      	movs	r1, #0
 80032e4:	201b      	movs	r0, #27
 80032e6:	f002 fce8 	bl	8005cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80032ea:	201b      	movs	r0, #27
 80032ec:	f002 fcff 	bl	8005cee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80032f0:	e028      	b.n	8003344 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM4)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a18      	ldr	r2, [pc, #96]	; (8003358 <HAL_TIM_Base_MspInit+0x128>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d10f      	bne.n	800331c <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80032fc:	4b14      	ldr	r3, [pc, #80]	; (8003350 <HAL_TIM_Base_MspInit+0x120>)
 80032fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003302:	4a13      	ldr	r2, [pc, #76]	; (8003350 <HAL_TIM_Base_MspInit+0x120>)
 8003304:	f043 0304 	orr.w	r3, r3, #4
 8003308:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800330c:	4b10      	ldr	r3, [pc, #64]	; (8003350 <HAL_TIM_Base_MspInit+0x120>)
 800330e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003312:	f003 0304 	and.w	r3, r3, #4
 8003316:	613b      	str	r3, [r7, #16]
 8003318:	693b      	ldr	r3, [r7, #16]
}
 800331a:	e013      	b.n	8003344 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM8)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a0e      	ldr	r2, [pc, #56]	; (800335c <HAL_TIM_Base_MspInit+0x12c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d10e      	bne.n	8003344 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003326:	4b0a      	ldr	r3, [pc, #40]	; (8003350 <HAL_TIM_Base_MspInit+0x120>)
 8003328:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800332c:	4a08      	ldr	r2, [pc, #32]	; (8003350 <HAL_TIM_Base_MspInit+0x120>)
 800332e:	f043 0302 	orr.w	r3, r3, #2
 8003332:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003336:	4b06      	ldr	r3, [pc, #24]	; (8003350 <HAL_TIM_Base_MspInit+0x120>)
 8003338:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	68fb      	ldr	r3, [r7, #12]
}
 8003344:	bf00      	nop
 8003346:	3730      	adds	r7, #48	; 0x30
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40010000 	.word	0x40010000
 8003350:	58024400 	.word	0x58024400
 8003354:	58021000 	.word	0x58021000
 8003358:	40000800 	.word	0x40000800
 800335c:	40010400 	.word	0x40010400

08003360 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b08a      	sub	sp, #40	; 0x28
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003368:	f107 0314 	add.w	r3, r7, #20
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	605a      	str	r2, [r3, #4]
 8003372:	609a      	str	r2, [r3, #8]
 8003374:	60da      	str	r2, [r3, #12]
 8003376:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a26      	ldr	r2, [pc, #152]	; (8003418 <HAL_TIM_MspPostInit+0xb8>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d120      	bne.n	80033c4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003382:	4b26      	ldr	r3, [pc, #152]	; (800341c <HAL_TIM_MspPostInit+0xbc>)
 8003384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003388:	4a24      	ldr	r2, [pc, #144]	; (800341c <HAL_TIM_MspPostInit+0xbc>)
 800338a:	f043 0310 	orr.w	r3, r3, #16
 800338e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003392:	4b22      	ldr	r3, [pc, #136]	; (800341c <HAL_TIM_MspPostInit+0xbc>)
 8003394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003398:	f003 0310 	and.w	r3, r3, #16
 800339c:	613b      	str	r3, [r7, #16]
 800339e:	693b      	ldr	r3, [r7, #16]
    PE8     ------> TIM1_CH1N
    PE12     ------> TIM1_CH3N
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM_V_L_Pin|PWM_V_H_Pin|PWM_U_L_Pin|PWM_W_L_Pin
 80033a0:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 80033a4:	617b      	str	r3, [r7, #20]
                          |PWM_U_H_Pin|PWM_W_H_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a6:	2302      	movs	r3, #2
 80033a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033aa:	2300      	movs	r3, #0
 80033ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ae:	2300      	movs	r3, #0
 80033b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80033b2:	2301      	movs	r3, #1
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033b6:	f107 0314 	add.w	r3, r7, #20
 80033ba:	4619      	mov	r1, r3
 80033bc:	4818      	ldr	r0, [pc, #96]	; (8003420 <HAL_TIM_MspPostInit+0xc0>)
 80033be:	f005 fd77 	bl	8008eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80033c2:	e024      	b.n	800340e <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM4)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a16      	ldr	r2, [pc, #88]	; (8003424 <HAL_TIM_MspPostInit+0xc4>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d11f      	bne.n	800340e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033ce:	4b13      	ldr	r3, [pc, #76]	; (800341c <HAL_TIM_MspPostInit+0xbc>)
 80033d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033d4:	4a11      	ldr	r2, [pc, #68]	; (800341c <HAL_TIM_MspPostInit+0xbc>)
 80033d6:	f043 0308 	orr.w	r3, r3, #8
 80033da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033de:	4b0f      	ldr	r3, [pc, #60]	; (800341c <HAL_TIM_MspPostInit+0xbc>)
 80033e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033e4:	f003 0308 	and.w	r3, r3, #8
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USER_LED_Pin;
 80033ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f2:	2302      	movs	r3, #2
 80033f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f6:	2300      	movs	r3, #0
 80033f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033fa:	2300      	movs	r3, #0
 80033fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80033fe:	2302      	movs	r3, #2
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8003402:	f107 0314 	add.w	r3, r7, #20
 8003406:	4619      	mov	r1, r3
 8003408:	4807      	ldr	r0, [pc, #28]	; (8003428 <HAL_TIM_MspPostInit+0xc8>)
 800340a:	f005 fd51 	bl	8008eb0 <HAL_GPIO_Init>
}
 800340e:	bf00      	nop
 8003410:	3728      	adds	r7, #40	; 0x28
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40010000 	.word	0x40010000
 800341c:	58024400 	.word	0x58024400
 8003420:	58021000 	.word	0x58021000
 8003424:	40000800 	.word	0x40000800
 8003428:	58020c00 	.word	0x58020c00

0800342c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b0b8      	sub	sp, #224	; 0xe0
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003434:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	605a      	str	r2, [r3, #4]
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	60da      	str	r2, [r3, #12]
 8003442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003444:	f107 0310 	add.w	r3, r7, #16
 8003448:	22b8      	movs	r2, #184	; 0xb8
 800344a:	2100      	movs	r1, #0
 800344c:	4618      	mov	r0, r3
 800344e:	f00e fca4 	bl	8011d9a <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a25      	ldr	r2, [pc, #148]	; (80034ec <HAL_PCD_MspInit+0xc0>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d143      	bne.n	80034e4 <HAL_PCD_MspInit+0xb8>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800345c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003460:	f04f 0300 	mov.w	r3, #0
 8003464:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8003468:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800346c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003470:	f107 0310 	add.w	r3, r7, #16
 8003474:	4618      	mov	r0, r3
 8003476:	f006 ffd5 	bl	800a424 <HAL_RCCEx_PeriphCLKConfig>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8003480:	f7ff fa6a 	bl	8002958 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8003484:	f006 f858 	bl	8009538 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003488:	4b19      	ldr	r3, [pc, #100]	; (80034f0 <HAL_PCD_MspInit+0xc4>)
 800348a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800348e:	4a18      	ldr	r2, [pc, #96]	; (80034f0 <HAL_PCD_MspInit+0xc4>)
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003498:	4b15      	ldr	r3, [pc, #84]	; (80034f0 <HAL_PCD_MspInit+0xc4>)
 800349a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80034a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034ae:	2300      	movs	r3, #0
 80034b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b4:	2300      	movs	r3, #0
 80034b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80034be:	4619      	mov	r1, r3
 80034c0:	480c      	ldr	r0, [pc, #48]	; (80034f4 <HAL_PCD_MspInit+0xc8>)
 80034c2:	f005 fcf5 	bl	8008eb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80034c6:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <HAL_PCD_MspInit+0xc4>)
 80034c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80034cc:	4a08      	ldr	r2, [pc, #32]	; (80034f0 <HAL_PCD_MspInit+0xc4>)
 80034ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034d2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80034d6:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <HAL_PCD_MspInit+0xc4>)
 80034d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80034dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e0:	60bb      	str	r3, [r7, #8]
 80034e2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 80034e4:	bf00      	nop
 80034e6:	37e0      	adds	r7, #224	; 0xe0
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40040000 	.word	0x40040000
 80034f0:	58024400 	.word	0x58024400
 80034f4:	58020000 	.word	0x58020000

080034f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034fc:	e7fe      	b.n	80034fc <NMI_Handler+0x4>

080034fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034fe:	b480      	push	{r7}
 8003500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003502:	e7fe      	b.n	8003502 <HardFault_Handler+0x4>

08003504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003508:	e7fe      	b.n	8003508 <MemManage_Handler+0x4>

0800350a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800350a:	b480      	push	{r7}
 800350c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800350e:	e7fe      	b.n	800350e <BusFault_Handler+0x4>

08003510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003514:	e7fe      	b.n	8003514 <UsageFault_Handler+0x4>

08003516 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003516:	b480      	push	{r7}
 8003518:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800351a:	bf00      	nop
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003528:	bf00      	nop
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003532:	b480      	push	{r7}
 8003534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003536:	bf00      	nop
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003544:	f000 fa38 	bl	80039b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003548:	bf00      	nop
 800354a:	bd80      	pop	{r7, pc}

0800354c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003550:	4802      	ldr	r0, [pc, #8]	; (800355c <DMA1_Stream0_IRQHandler+0x10>)
 8003552:	f003 fd4f 	bl	8006ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003556:	bf00      	nop
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	24000344 	.word	0x24000344

08003560 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003564:	4802      	ldr	r0, [pc, #8]	; (8003570 <TIM1_BRK_IRQHandler+0x10>)
 8003566:	f00a fc9f 	bl	800dea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800356a:	bf00      	nop
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	240007e8 	.word	0x240007e8

08003574 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003578:	4802      	ldr	r0, [pc, #8]	; (8003584 <TIM1_UP_IRQHandler+0x10>)
 800357a:	f00a fc95 	bl	800dea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800357e:	bf00      	nop
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	240007e8 	.word	0x240007e8

08003588 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800358c:	4802      	ldr	r0, [pc, #8]	; (8003598 <TIM1_TRG_COM_IRQHandler+0x10>)
 800358e:	f00a fc8b 	bl	800dea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8003592:	bf00      	nop
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	240007e8 	.word	0x240007e8

0800359c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80035a0:	4802      	ldr	r0, [pc, #8]	; (80035ac <TIM1_CC_IRQHandler+0x10>)
 80035a2:	f00a fc81 	bl	800dea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	240007e8 	.word	0x240007e8

080035b0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

	HAL_GPIO_WritePin( EXT_SEN_CS_GPIO_Port, EXT_SEN_CS_Pin, GPIO_PIN_SET );
 80035b4:	2201      	movs	r2, #1
 80035b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035ba:	4805      	ldr	r0, [pc, #20]	; (80035d0 <SPI3_IRQHandler+0x20>)
 80035bc:	f005 fe20 	bl	8009200 <HAL_GPIO_WritePin>

	NEW_SENSOR_DATA = 1;//New sensor data is available
 80035c0:	4b04      	ldr	r3, [pc, #16]	; (80035d4 <SPI3_IRQHandler+0x24>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80035c6:	4804      	ldr	r0, [pc, #16]	; (80035d8 <SPI3_IRQHandler+0x28>)
 80035c8:	f009 ff0a 	bl	800d3e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80035cc:	bf00      	nop
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	58020000 	.word	0x58020000
 80035d4:	24000df0 	.word	0x24000df0
 80035d8:	24000760 	.word	0x24000760

080035dc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80035e0:	4802      	ldr	r0, [pc, #8]	; (80035ec <DMA2_Stream0_IRQHandler+0x10>)
 80035e2:	f003 fd07 	bl	8006ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80035e6:	bf00      	nop
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	240003bc 	.word	0x240003bc

080035f0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80035f4:	4802      	ldr	r0, [pc, #8]	; (8003600 <DMA2_Stream1_IRQHandler+0x10>)
 80035f6:	f003 fcfd 	bl	8006ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80035fa:	bf00      	nop
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	24000434 	.word	0x24000434

08003604 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  return 1;
 8003608:	2301      	movs	r3, #1
}
 800360a:	4618      	mov	r0, r3
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <_kill>:

int _kill(int pid, int sig)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800361e:	f00e fc0f 	bl	8011e40 <__errno>
 8003622:	4603      	mov	r3, r0
 8003624:	2216      	movs	r2, #22
 8003626:	601a      	str	r2, [r3, #0]
  return -1;
 8003628:	f04f 33ff 	mov.w	r3, #4294967295
}
 800362c:	4618      	mov	r0, r3
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <_exit>:

void _exit (int status)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800363c:	f04f 31ff 	mov.w	r1, #4294967295
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7ff ffe7 	bl	8003614 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003646:	e7fe      	b.n	8003646 <_exit+0x12>

08003648 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003654:	2300      	movs	r3, #0
 8003656:	617b      	str	r3, [r7, #20]
 8003658:	e00a      	b.n	8003670 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800365a:	f3af 8000 	nop.w
 800365e:	4601      	mov	r1, r0
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	60ba      	str	r2, [r7, #8]
 8003666:	b2ca      	uxtb	r2, r1
 8003668:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	3301      	adds	r3, #1
 800366e:	617b      	str	r3, [r7, #20]
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	429a      	cmp	r2, r3
 8003676:	dbf0      	blt.n	800365a <_read+0x12>
  }

  return len;
 8003678:	687b      	ldr	r3, [r7, #4]
}
 800367a:	4618      	mov	r0, r3
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b086      	sub	sp, #24
 8003686:	af00      	add	r7, sp, #0
 8003688:	60f8      	str	r0, [r7, #12]
 800368a:	60b9      	str	r1, [r7, #8]
 800368c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	e009      	b.n	80036a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	60ba      	str	r2, [r7, #8]
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	3301      	adds	r3, #1
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	dbf1      	blt.n	8003694 <_write+0x12>
  }
  return len;
 80036b0:	687b      	ldr	r3, [r7, #4]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <_close>:

int _close(int file)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80036c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
 80036da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036e2:	605a      	str	r2, [r3, #4]
  return 0;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <_isatty>:

int _isatty(int file)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80036fa:	2301      	movs	r3, #1
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
	...

08003724 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800372c:	4a14      	ldr	r2, [pc, #80]	; (8003780 <_sbrk+0x5c>)
 800372e:	4b15      	ldr	r3, [pc, #84]	; (8003784 <_sbrk+0x60>)
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003738:	4b13      	ldr	r3, [pc, #76]	; (8003788 <_sbrk+0x64>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d102      	bne.n	8003746 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003740:	4b11      	ldr	r3, [pc, #68]	; (8003788 <_sbrk+0x64>)
 8003742:	4a12      	ldr	r2, [pc, #72]	; (800378c <_sbrk+0x68>)
 8003744:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003746:	4b10      	ldr	r3, [pc, #64]	; (8003788 <_sbrk+0x64>)
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4413      	add	r3, r2
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	429a      	cmp	r2, r3
 8003752:	d207      	bcs.n	8003764 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003754:	f00e fb74 	bl	8011e40 <__errno>
 8003758:	4603      	mov	r3, r0
 800375a:	220c      	movs	r2, #12
 800375c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800375e:	f04f 33ff 	mov.w	r3, #4294967295
 8003762:	e009      	b.n	8003778 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003764:	4b08      	ldr	r3, [pc, #32]	; (8003788 <_sbrk+0x64>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800376a:	4b07      	ldr	r3, [pc, #28]	; (8003788 <_sbrk+0x64>)
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4413      	add	r3, r2
 8003772:	4a05      	ldr	r2, [pc, #20]	; (8003788 <_sbrk+0x64>)
 8003774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003776:	68fb      	ldr	r3, [r7, #12]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	24050000 	.word	0x24050000
 8003784:	00000400 	.word	0x00000400
 8003788:	24000df8 	.word	0x24000df8
 800378c:	24000f50 	.word	0x24000f50

08003790 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003794:	4b32      	ldr	r3, [pc, #200]	; (8003860 <SystemInit+0xd0>)
 8003796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379a:	4a31      	ldr	r2, [pc, #196]	; (8003860 <SystemInit+0xd0>)
 800379c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80037a4:	4b2f      	ldr	r3, [pc, #188]	; (8003864 <SystemInit+0xd4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 030f 	and.w	r3, r3, #15
 80037ac:	2b06      	cmp	r3, #6
 80037ae:	d807      	bhi.n	80037c0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80037b0:	4b2c      	ldr	r3, [pc, #176]	; (8003864 <SystemInit+0xd4>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f023 030f 	bic.w	r3, r3, #15
 80037b8:	4a2a      	ldr	r2, [pc, #168]	; (8003864 <SystemInit+0xd4>)
 80037ba:	f043 0307 	orr.w	r3, r3, #7
 80037be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80037c0:	4b29      	ldr	r3, [pc, #164]	; (8003868 <SystemInit+0xd8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a28      	ldr	r2, [pc, #160]	; (8003868 <SystemInit+0xd8>)
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80037cc:	4b26      	ldr	r3, [pc, #152]	; (8003868 <SystemInit+0xd8>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80037d2:	4b25      	ldr	r3, [pc, #148]	; (8003868 <SystemInit+0xd8>)
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	4924      	ldr	r1, [pc, #144]	; (8003868 <SystemInit+0xd8>)
 80037d8:	4b24      	ldr	r3, [pc, #144]	; (800386c <SystemInit+0xdc>)
 80037da:	4013      	ands	r3, r2
 80037dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80037de:	4b21      	ldr	r3, [pc, #132]	; (8003864 <SystemInit+0xd4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0308 	and.w	r3, r3, #8
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d007      	beq.n	80037fa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80037ea:	4b1e      	ldr	r3, [pc, #120]	; (8003864 <SystemInit+0xd4>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f023 030f 	bic.w	r3, r3, #15
 80037f2:	4a1c      	ldr	r2, [pc, #112]	; (8003864 <SystemInit+0xd4>)
 80037f4:	f043 0307 	orr.w	r3, r3, #7
 80037f8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80037fa:	4b1b      	ldr	r3, [pc, #108]	; (8003868 <SystemInit+0xd8>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003800:	4b19      	ldr	r3, [pc, #100]	; (8003868 <SystemInit+0xd8>)
 8003802:	2200      	movs	r2, #0
 8003804:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003806:	4b18      	ldr	r3, [pc, #96]	; (8003868 <SystemInit+0xd8>)
 8003808:	2200      	movs	r2, #0
 800380a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800380c:	4b16      	ldr	r3, [pc, #88]	; (8003868 <SystemInit+0xd8>)
 800380e:	4a18      	ldr	r2, [pc, #96]	; (8003870 <SystemInit+0xe0>)
 8003810:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003812:	4b15      	ldr	r3, [pc, #84]	; (8003868 <SystemInit+0xd8>)
 8003814:	4a17      	ldr	r2, [pc, #92]	; (8003874 <SystemInit+0xe4>)
 8003816:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003818:	4b13      	ldr	r3, [pc, #76]	; (8003868 <SystemInit+0xd8>)
 800381a:	4a17      	ldr	r2, [pc, #92]	; (8003878 <SystemInit+0xe8>)
 800381c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800381e:	4b12      	ldr	r3, [pc, #72]	; (8003868 <SystemInit+0xd8>)
 8003820:	2200      	movs	r2, #0
 8003822:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003824:	4b10      	ldr	r3, [pc, #64]	; (8003868 <SystemInit+0xd8>)
 8003826:	4a14      	ldr	r2, [pc, #80]	; (8003878 <SystemInit+0xe8>)
 8003828:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800382a:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <SystemInit+0xd8>)
 800382c:	2200      	movs	r2, #0
 800382e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003830:	4b0d      	ldr	r3, [pc, #52]	; (8003868 <SystemInit+0xd8>)
 8003832:	4a11      	ldr	r2, [pc, #68]	; (8003878 <SystemInit+0xe8>)
 8003834:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003836:	4b0c      	ldr	r3, [pc, #48]	; (8003868 <SystemInit+0xd8>)
 8003838:	2200      	movs	r2, #0
 800383a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800383c:	4b0a      	ldr	r3, [pc, #40]	; (8003868 <SystemInit+0xd8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a09      	ldr	r2, [pc, #36]	; (8003868 <SystemInit+0xd8>)
 8003842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003846:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003848:	4b07      	ldr	r3, [pc, #28]	; (8003868 <SystemInit+0xd8>)
 800384a:	2200      	movs	r2, #0
 800384c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800384e:	4b0b      	ldr	r3, [pc, #44]	; (800387c <SystemInit+0xec>)
 8003850:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003854:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003856:	bf00      	nop
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	e000ed00 	.word	0xe000ed00
 8003864:	52002000 	.word	0x52002000
 8003868:	58024400 	.word	0x58024400
 800386c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003870:	02020200 	.word	0x02020200
 8003874:	01ff0000 	.word	0x01ff0000
 8003878:	01010280 	.word	0x01010280
 800387c:	52004000 	.word	0x52004000

08003880 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003880:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003884:	f7ff ff84 	bl	8003790 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003888:	480c      	ldr	r0, [pc, #48]	; (80038bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800388a:	490d      	ldr	r1, [pc, #52]	; (80038c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800388c:	4a0d      	ldr	r2, [pc, #52]	; (80038c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800388e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003890:	e002      	b.n	8003898 <LoopCopyDataInit>

08003892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003896:	3304      	adds	r3, #4

08003898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800389a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800389c:	d3f9      	bcc.n	8003892 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800389e:	4a0a      	ldr	r2, [pc, #40]	; (80038c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80038a0:	4c0a      	ldr	r4, [pc, #40]	; (80038cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80038a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038a4:	e001      	b.n	80038aa <LoopFillZerobss>

080038a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038a8:	3204      	adds	r2, #4

080038aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038ac:	d3fb      	bcc.n	80038a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80038ae:	f00e facd 	bl	8011e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038b2:	f7fd fa97 	bl	8000de4 <main>
  bx  lr
 80038b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80038b8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80038bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80038c0:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 80038c4:	08015b58 	.word	0x08015b58
  ldr r2, =_sbss
 80038c8:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 80038cc:	24000f4c 	.word	0x24000f4c

080038d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038d0:	e7fe      	b.n	80038d0 <ADC3_IRQHandler>
	...

080038d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038da:	2003      	movs	r0, #3
 80038dc:	f002 f9e2 	bl	8005ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80038e0:	f006 fbca 	bl	800a078 <HAL_RCC_GetSysClockFreq>
 80038e4:	4602      	mov	r2, r0
 80038e6:	4b15      	ldr	r3, [pc, #84]	; (800393c <HAL_Init+0x68>)
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	0a1b      	lsrs	r3, r3, #8
 80038ec:	f003 030f 	and.w	r3, r3, #15
 80038f0:	4913      	ldr	r1, [pc, #76]	; (8003940 <HAL_Init+0x6c>)
 80038f2:	5ccb      	ldrb	r3, [r1, r3]
 80038f4:	f003 031f 	and.w	r3, r3, #31
 80038f8:	fa22 f303 	lsr.w	r3, r2, r3
 80038fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038fe:	4b0f      	ldr	r3, [pc, #60]	; (800393c <HAL_Init+0x68>)
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	4a0e      	ldr	r2, [pc, #56]	; (8003940 <HAL_Init+0x6c>)
 8003908:	5cd3      	ldrb	r3, [r2, r3]
 800390a:	f003 031f 	and.w	r3, r3, #31
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	fa22 f303 	lsr.w	r3, r2, r3
 8003914:	4a0b      	ldr	r2, [pc, #44]	; (8003944 <HAL_Init+0x70>)
 8003916:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003918:	4a0b      	ldr	r2, [pc, #44]	; (8003948 <HAL_Init+0x74>)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800391e:	200f      	movs	r0, #15
 8003920:	f000 f814 	bl	800394c <HAL_InitTick>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e002      	b.n	8003934 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800392e:	f7ff f819 	bl	8002964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	58024400 	.word	0x58024400
 8003940:	080156d4 	.word	0x080156d4
 8003944:	24000004 	.word	0x24000004
 8003948:	24000000 	.word	0x24000000

0800394c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003954:	4b15      	ldr	r3, [pc, #84]	; (80039ac <HAL_InitTick+0x60>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e021      	b.n	80039a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003960:	4b13      	ldr	r3, [pc, #76]	; (80039b0 <HAL_InitTick+0x64>)
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	4b11      	ldr	r3, [pc, #68]	; (80039ac <HAL_InitTick+0x60>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	4619      	mov	r1, r3
 800396a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800396e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003972:	fbb2 f3f3 	udiv	r3, r2, r3
 8003976:	4618      	mov	r0, r3
 8003978:	f002 f9c7 	bl	8005d0a <HAL_SYSTICK_Config>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e00e      	b.n	80039a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b0f      	cmp	r3, #15
 800398a:	d80a      	bhi.n	80039a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800398c:	2200      	movs	r2, #0
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	f04f 30ff 	mov.w	r0, #4294967295
 8003994:	f002 f991 	bl	8005cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003998:	4a06      	ldr	r2, [pc, #24]	; (80039b4 <HAL_InitTick+0x68>)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800399e:	2300      	movs	r3, #0
 80039a0:	e000      	b.n	80039a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	2400000c 	.word	0x2400000c
 80039b0:	24000000 	.word	0x24000000
 80039b4:	24000008 	.word	0x24000008

080039b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80039bc:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <HAL_IncTick+0x20>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	461a      	mov	r2, r3
 80039c2:	4b06      	ldr	r3, [pc, #24]	; (80039dc <HAL_IncTick+0x24>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4413      	add	r3, r2
 80039c8:	4a04      	ldr	r2, [pc, #16]	; (80039dc <HAL_IncTick+0x24>)
 80039ca:	6013      	str	r3, [r2, #0]
}
 80039cc:	bf00      	nop
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	2400000c 	.word	0x2400000c
 80039dc:	24000dfc 	.word	0x24000dfc

080039e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
  return uwTick;
 80039e4:	4b03      	ldr	r3, [pc, #12]	; (80039f4 <HAL_GetTick+0x14>)
 80039e6:	681b      	ldr	r3, [r3, #0]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	24000dfc 	.word	0x24000dfc

080039f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a00:	f7ff ffee 	bl	80039e0 <HAL_GetTick>
 8003a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a10:	d005      	beq.n	8003a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a12:	4b0a      	ldr	r3, [pc, #40]	; (8003a3c <HAL_Delay+0x44>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a1e:	bf00      	nop
 8003a20:	f7ff ffde 	bl	80039e0 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d8f7      	bhi.n	8003a20 <HAL_Delay+0x28>
  {
  }
}
 8003a30:	bf00      	nop
 8003a32:	bf00      	nop
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	2400000c 	.word	0x2400000c

08003a40 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003a4a:	4b07      	ldr	r3, [pc, #28]	; (8003a68 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	43db      	mvns	r3, r3
 8003a52:	401a      	ands	r2, r3
 8003a54:	4904      	ldr	r1, [pc, #16]	; (8003a68 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	604b      	str	r3, [r1, #4]
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	58000400 	.word	0x58000400

08003a6c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	431a      	orrs	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	609a      	str	r2, [r3, #8]
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	609a      	str	r2, [r3, #8]
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	3360      	adds	r3, #96	; 0x60
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4a10      	ldr	r2, [pc, #64]	; (8003b34 <LL_ADC_SetOffset+0x60>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d10b      	bne.n	8003b10 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003b0e:	e00b      	b.n	8003b28 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	430b      	orrs	r3, r1
 8003b22:	431a      	orrs	r2, r3
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	601a      	str	r2, [r3, #0]
}
 8003b28:	bf00      	nop
 8003b2a:	371c      	adds	r7, #28
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	58026000 	.word	0x58026000

08003b38 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	3360      	adds	r3, #96	; 0x60
 8003b46:	461a      	mov	r2, r3
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	f003 031f 	and.w	r3, r3, #31
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	fa01 f303 	lsl.w	r3, r1, r3
 8003b84:	431a      	orrs	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	611a      	str	r2, [r3, #16]
}
 8003b8a:	bf00      	nop
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
	...

08003b98 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4a0c      	ldr	r2, [pc, #48]	; (8003bd8 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00e      	beq.n	8003bca <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	3360      	adds	r3, #96	; 0x60
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	601a      	str	r2, [r3, #0]
  }
}
 8003bca:	bf00      	nop
 8003bcc:	371c      	adds	r7, #28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	58026000 	.word	0x58026000

08003bdc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4a0c      	ldr	r2, [pc, #48]	; (8003c1c <LL_ADC_SetOffsetSaturation+0x40>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d10e      	bne.n	8003c0e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	3360      	adds	r3, #96	; 0x60
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003c0e:	bf00      	nop
 8003c10:	371c      	adds	r7, #28
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	58026000 	.word	0x58026000

08003c20 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b087      	sub	sp, #28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4a0c      	ldr	r2, [pc, #48]	; (8003c60 <LL_ADC_SetOffsetSign+0x40>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d10e      	bne.n	8003c52 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	3360      	adds	r3, #96	; 0x60
 8003c38:	461a      	mov	r2, r3
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003c52:	bf00      	nop
 8003c54:	371c      	adds	r7, #28
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	58026000 	.word	0x58026000

08003c64 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	3360      	adds	r3, #96	; 0x60
 8003c74:	461a      	mov	r2, r3
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4a0c      	ldr	r2, [pc, #48]	; (8003cb4 <LL_ADC_SetOffsetState+0x50>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d108      	bne.n	8003c98 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	431a      	orrs	r2, r3
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003c96:	e007      	b.n	8003ca8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	601a      	str	r2, [r3, #0]
}
 8003ca8:	bf00      	nop
 8003caa:	371c      	adds	r7, #28
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	58026000 	.word	0x58026000

08003cb8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e000      	b.n	8003cd2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b087      	sub	sp, #28
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	60f8      	str	r0, [r7, #12]
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	3330      	adds	r3, #48	; 0x30
 8003cee:	461a      	mov	r2, r3
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	0a1b      	lsrs	r3, r3, #8
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	f003 030c 	and.w	r3, r3, #12
 8003cfa:	4413      	add	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	f003 031f 	and.w	r3, r3, #31
 8003d08:	211f      	movs	r1, #31
 8003d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	401a      	ands	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	0e9b      	lsrs	r3, r3, #26
 8003d16:	f003 011f 	and.w	r1, r3, #31
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f003 031f 	and.w	r3, r3, #31
 8003d20:	fa01 f303 	lsl.w	r3, r1, r3
 8003d24:	431a      	orrs	r2, r3
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003d2a:	bf00      	nop
 8003d2c:	371c      	adds	r7, #28
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
 8003d3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f023 0203 	bic.w	r2, r3, #3
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	60da      	str	r2, [r3, #12]
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f043 0201 	orr.w	r2, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	60da      	str	r2, [r3, #12]
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a08      	ldr	r2, [pc, #32]	; (8003dac <LL_ADC_REG_SetDMATransferMode+0x30>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d107      	bne.n	8003d9e <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f023 0203 	bic.w	r2, r3, #3
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	60da      	str	r2, [r3, #12]
  }
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	58026000 	.word	0x58026000

08003db0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	3314      	adds	r3, #20
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	0e5b      	lsrs	r3, r3, #25
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	4413      	add	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	0d1b      	lsrs	r3, r3, #20
 8003dd8:	f003 031f 	and.w	r3, r3, #31
 8003ddc:	2107      	movs	r1, #7
 8003dde:	fa01 f303 	lsl.w	r3, r1, r3
 8003de2:	43db      	mvns	r3, r3
 8003de4:	401a      	ands	r2, r3
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	0d1b      	lsrs	r3, r3, #20
 8003dea:	f003 031f 	and.w	r3, r3, #31
 8003dee:	6879      	ldr	r1, [r7, #4]
 8003df0:	fa01 f303 	lsl.w	r3, r1, r3
 8003df4:	431a      	orrs	r2, r3
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003dfa:	bf00      	nop
 8003dfc:	371c      	adds	r7, #28
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
	...

08003e08 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4a1a      	ldr	r2, [pc, #104]	; (8003e80 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d115      	bne.n	8003e48 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e28:	43db      	mvns	r3, r3
 8003e2a:	401a      	ands	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f003 0318 	and.w	r3, r3, #24
 8003e32:	4914      	ldr	r1, [pc, #80]	; (8003e84 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003e34:	40d9      	lsrs	r1, r3
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	400b      	ands	r3, r1
 8003e3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003e46:	e014      	b.n	8003e72 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e54:	43db      	mvns	r3, r3
 8003e56:	401a      	ands	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f003 0318 	and.w	r3, r3, #24
 8003e5e:	4909      	ldr	r1, [pc, #36]	; (8003e84 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003e60:	40d9      	lsrs	r1, r3
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	400b      	ands	r3, r1
 8003e66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003e72:	bf00      	nop
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	58026000 	.word	0x58026000
 8003e84:	000fffff 	.word	0x000fffff

08003e88 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 031f 	and.w	r3, r3, #31
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	4b04      	ldr	r3, [pc, #16]	; (8003ec4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6093      	str	r3, [r2, #8]
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	5fffffc0 	.word	0x5fffffc0

08003ec8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ed8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003edc:	d101      	bne.n	8003ee2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689a      	ldr	r2, [r3, #8]
 8003efc:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <LL_ADC_EnableInternalRegulator+0x24>)
 8003efe:	4013      	ands	r3, r2
 8003f00:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	6fffffc0 	.word	0x6fffffc0

08003f18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f2c:	d101      	bne.n	8003f32 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	4b05      	ldr	r3, [pc, #20]	; (8003f64 <LL_ADC_Enable+0x24>)
 8003f4e:	4013      	ands	r3, r2
 8003f50:	f043 0201 	orr.w	r2, r3, #1
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	7fffffc0 	.word	0x7fffffc0

08003f68 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <LL_ADC_Disable+0x24>)
 8003f76:	4013      	ands	r3, r2
 8003f78:	f043 0202 	orr.w	r2, r3, #2
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	7fffffc0 	.word	0x7fffffc0

08003f90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d101      	bne.n	8003fa8 <LL_ADC_IsEnabled+0x18>
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e000      	b.n	8003faa <LL_ADC_IsEnabled+0x1a>
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d101      	bne.n	8003fce <LL_ADC_IsDisableOngoing+0x18>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <LL_ADC_IsDisableOngoing+0x1a>
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	4b05      	ldr	r3, [pc, #20]	; (8004000 <LL_ADC_REG_StartConversion+0x24>)
 8003fea:	4013      	ands	r3, r2
 8003fec:	f043 0204 	orr.w	r2, r3, #4
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	7fffffc0 	.word	0x7fffffc0

08004004 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b04      	cmp	r3, #4
 8004016:	d101      	bne.n	800401c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004018:	2301      	movs	r3, #1
 800401a:	e000      	b.n	800401e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800402a:	b480      	push	{r7}
 800402c:	b083      	sub	sp, #12
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	2b08      	cmp	r3, #8
 800403c:	d101      	bne.n	8004042 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800403e:	2301      	movs	r3, #1
 8004040:	e000      	b.n	8004044 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004050:	b590      	push	{r4, r7, lr}
 8004052:	b089      	sub	sp, #36	; 0x24
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004058:	2300      	movs	r3, #0
 800405a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800405c:	2300      	movs	r3, #0
 800405e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e1ee      	b.n	8004448 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004074:	2b00      	cmp	r3, #0
 8004076:	d109      	bne.n	800408c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7fe fc8d 	bl	8002998 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff ff19 	bl	8003ec8 <LL_ADC_IsDeepPowerDownEnabled>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d004      	beq.n	80040a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff feff 	bl	8003ea4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff ff34 	bl	8003f18 <LL_ADC_IsInternalRegulatorEnabled>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d114      	bne.n	80040e0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff ff18 	bl	8003ef0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80040c0:	4b8e      	ldr	r3, [pc, #568]	; (80042fc <HAL_ADC_Init+0x2ac>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	099b      	lsrs	r3, r3, #6
 80040c6:	4a8e      	ldr	r2, [pc, #568]	; (8004300 <HAL_ADC_Init+0x2b0>)
 80040c8:	fba2 2303 	umull	r2, r3, r2, r3
 80040cc:	099b      	lsrs	r3, r3, #6
 80040ce:	3301      	adds	r3, #1
 80040d0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80040d2:	e002      	b.n	80040da <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1f9      	bne.n	80040d4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff ff17 	bl	8003f18 <LL_ADC_IsInternalRegulatorEnabled>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10d      	bne.n	800410c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040f4:	f043 0210 	orr.w	r2, r3, #16
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004100:	f043 0201 	orr.w	r2, r3, #1
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff ff77 	bl	8004004 <LL_ADC_REG_IsConversionOngoing>
 8004116:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800411c:	f003 0310 	and.w	r3, r3, #16
 8004120:	2b00      	cmp	r3, #0
 8004122:	f040 8188 	bne.w	8004436 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2b00      	cmp	r3, #0
 800412a:	f040 8184 	bne.w	8004436 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004132:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004136:	f043 0202 	orr.w	r2, r3, #2
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff ff24 	bl	8003f90 <LL_ADC_IsEnabled>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d136      	bne.n	80041bc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a6c      	ldr	r2, [pc, #432]	; (8004304 <HAL_ADC_Init+0x2b4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d004      	beq.n	8004162 <HAL_ADC_Init+0x112>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a6a      	ldr	r2, [pc, #424]	; (8004308 <HAL_ADC_Init+0x2b8>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d10e      	bne.n	8004180 <HAL_ADC_Init+0x130>
 8004162:	4868      	ldr	r0, [pc, #416]	; (8004304 <HAL_ADC_Init+0x2b4>)
 8004164:	f7ff ff14 	bl	8003f90 <LL_ADC_IsEnabled>
 8004168:	4604      	mov	r4, r0
 800416a:	4867      	ldr	r0, [pc, #412]	; (8004308 <HAL_ADC_Init+0x2b8>)
 800416c:	f7ff ff10 	bl	8003f90 <LL_ADC_IsEnabled>
 8004170:	4603      	mov	r3, r0
 8004172:	4323      	orrs	r3, r4
 8004174:	2b00      	cmp	r3, #0
 8004176:	bf0c      	ite	eq
 8004178:	2301      	moveq	r3, #1
 800417a:	2300      	movne	r3, #0
 800417c:	b2db      	uxtb	r3, r3
 800417e:	e008      	b.n	8004192 <HAL_ADC_Init+0x142>
 8004180:	4862      	ldr	r0, [pc, #392]	; (800430c <HAL_ADC_Init+0x2bc>)
 8004182:	f7ff ff05 	bl	8003f90 <LL_ADC_IsEnabled>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	bf0c      	ite	eq
 800418c:	2301      	moveq	r3, #1
 800418e:	2300      	movne	r3, #0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d012      	beq.n	80041bc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a5a      	ldr	r2, [pc, #360]	; (8004304 <HAL_ADC_Init+0x2b4>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d004      	beq.n	80041aa <HAL_ADC_Init+0x15a>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a58      	ldr	r2, [pc, #352]	; (8004308 <HAL_ADC_Init+0x2b8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d101      	bne.n	80041ae <HAL_ADC_Init+0x15e>
 80041aa:	4a59      	ldr	r2, [pc, #356]	; (8004310 <HAL_ADC_Init+0x2c0>)
 80041ac:	e000      	b.n	80041b0 <HAL_ADC_Init+0x160>
 80041ae:	4a59      	ldr	r2, [pc, #356]	; (8004314 <HAL_ADC_Init+0x2c4>)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	4619      	mov	r1, r3
 80041b6:	4610      	mov	r0, r2
 80041b8:	f7ff fc58 	bl	8003a6c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a52      	ldr	r2, [pc, #328]	; (800430c <HAL_ADC_Init+0x2bc>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d129      	bne.n	800421a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	7e5b      	ldrb	r3, [r3, #25]
 80041ca:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80041d0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80041d6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	2b08      	cmp	r3, #8
 80041de:	d013      	beq.n	8004208 <HAL_ADC_Init+0x1b8>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	2b0c      	cmp	r3, #12
 80041e6:	d00d      	beq.n	8004204 <HAL_ADC_Init+0x1b4>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	2b1c      	cmp	r3, #28
 80041ee:	d007      	beq.n	8004200 <HAL_ADC_Init+0x1b0>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	2b18      	cmp	r3, #24
 80041f6:	d101      	bne.n	80041fc <HAL_ADC_Init+0x1ac>
 80041f8:	2318      	movs	r3, #24
 80041fa:	e006      	b.n	800420a <HAL_ADC_Init+0x1ba>
 80041fc:	2300      	movs	r3, #0
 80041fe:	e004      	b.n	800420a <HAL_ADC_Init+0x1ba>
 8004200:	2310      	movs	r3, #16
 8004202:	e002      	b.n	800420a <HAL_ADC_Init+0x1ba>
 8004204:	2308      	movs	r3, #8
 8004206:	e000      	b.n	800420a <HAL_ADC_Init+0x1ba>
 8004208:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800420a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004212:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004214:	4313      	orrs	r3, r2
 8004216:	61bb      	str	r3, [r7, #24]
 8004218:	e00e      	b.n	8004238 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	7e5b      	ldrb	r3, [r3, #25]
 800421e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004224:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800422a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004232:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004234:	4313      	orrs	r3, r2
 8004236:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d106      	bne.n	8004250 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004246:	3b01      	subs	r3, #1
 8004248:	045b      	lsls	r3, r3, #17
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	4313      	orrs	r3, r2
 800424e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004254:	2b00      	cmp	r3, #0
 8004256:	d009      	beq.n	800426c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004264:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	4313      	orrs	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a26      	ldr	r2, [pc, #152]	; (800430c <HAL_ADC_Init+0x2bc>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d115      	bne.n	80042a2 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	4b26      	ldr	r3, [pc, #152]	; (8004318 <HAL_ADC_Init+0x2c8>)
 800427e:	4013      	ands	r3, r2
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6812      	ldr	r2, [r2, #0]
 8004284:	69b9      	ldr	r1, [r7, #24]
 8004286:	430b      	orrs	r3, r1
 8004288:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	611a      	str	r2, [r3, #16]
 80042a0:	e009      	b.n	80042b6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68da      	ldr	r2, [r3, #12]
 80042a8:	4b1c      	ldr	r3, [pc, #112]	; (800431c <HAL_ADC_Init+0x2cc>)
 80042aa:	4013      	ands	r3, r2
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6812      	ldr	r2, [r2, #0]
 80042b0:	69b9      	ldr	r1, [r7, #24]
 80042b2:	430b      	orrs	r3, r1
 80042b4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff fea2 	bl	8004004 <LL_ADC_REG_IsConversionOngoing>
 80042c0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7ff feaf 	bl	800402a <LL_ADC_INJ_IsConversionOngoing>
 80042cc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f040 808e 	bne.w	80043f2 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f040 808a 	bne.w	80043f2 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a0a      	ldr	r2, [pc, #40]	; (800430c <HAL_ADC_Init+0x2bc>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d11b      	bne.n	8004320 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	7e1b      	ldrb	r3, [r3, #24]
 80042ec:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042f4:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80042f6:	4313      	orrs	r3, r2
 80042f8:	61bb      	str	r3, [r7, #24]
 80042fa:	e018      	b.n	800432e <HAL_ADC_Init+0x2de>
 80042fc:	24000000 	.word	0x24000000
 8004300:	053e2d63 	.word	0x053e2d63
 8004304:	40022000 	.word	0x40022000
 8004308:	40022100 	.word	0x40022100
 800430c:	58026000 	.word	0x58026000
 8004310:	40022300 	.word	0x40022300
 8004314:	58026300 	.word	0x58026300
 8004318:	fff04007 	.word	0xfff04007
 800431c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	7e1b      	ldrb	r3, [r3, #24]
 8004324:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800432a:	4313      	orrs	r3, r2
 800432c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68da      	ldr	r2, [r3, #12]
 8004334:	4b46      	ldr	r3, [pc, #280]	; (8004450 <HAL_ADC_Init+0x400>)
 8004336:	4013      	ands	r3, r2
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6812      	ldr	r2, [r2, #0]
 800433c:	69b9      	ldr	r1, [r7, #24]
 800433e:	430b      	orrs	r3, r1
 8004340:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004348:	2b01      	cmp	r3, #1
 800434a:	d137      	bne.n	80043bc <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004350:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a3f      	ldr	r2, [pc, #252]	; (8004454 <HAL_ADC_Init+0x404>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d116      	bne.n	800438a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691a      	ldr	r2, [r3, #16]
 8004362:	4b3d      	ldr	r3, [pc, #244]	; (8004458 <HAL_ADC_Init+0x408>)
 8004364:	4013      	ands	r3, r2
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800436e:	4311      	orrs	r1, r2
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004374:	4311      	orrs	r1, r2
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800437a:	430a      	orrs	r2, r1
 800437c:	431a      	orrs	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0201 	orr.w	r2, r2, #1
 8004386:	611a      	str	r2, [r3, #16]
 8004388:	e020      	b.n	80043cc <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	691a      	ldr	r2, [r3, #16]
 8004390:	4b32      	ldr	r3, [pc, #200]	; (800445c <HAL_ADC_Init+0x40c>)
 8004392:	4013      	ands	r3, r2
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004398:	3a01      	subs	r2, #1
 800439a:	0411      	lsls	r1, r2, #16
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80043a0:	4311      	orrs	r1, r2
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043a6:	4311      	orrs	r1, r2
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80043ac:	430a      	orrs	r2, r1
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f042 0201 	orr.w	r2, r2, #1
 80043b8:	611a      	str	r2, [r3, #16]
 80043ba:	e007      	b.n	80043cc <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691a      	ldr	r2, [r3, #16]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0201 	bic.w	r2, r2, #1
 80043ca:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a1b      	ldr	r2, [pc, #108]	; (8004454 <HAL_ADC_Init+0x404>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d002      	beq.n	80043f2 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 ffd1 	bl	8005394 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d10c      	bne.n	8004414 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004400:	f023 010f 	bic.w	r1, r3, #15
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	69db      	ldr	r3, [r3, #28]
 8004408:	1e5a      	subs	r2, r3, #1
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	631a      	str	r2, [r3, #48]	; 0x30
 8004412:	e007      	b.n	8004424 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 020f 	bic.w	r2, r2, #15
 8004422:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004428:	f023 0303 	bic.w	r3, r3, #3
 800442c:	f043 0201 	orr.w	r2, r3, #1
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	661a      	str	r2, [r3, #96]	; 0x60
 8004434:	e007      	b.n	8004446 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800443a:	f043 0210 	orr.w	r2, r3, #16
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004446:	7ffb      	ldrb	r3, [r7, #31]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3724      	adds	r7, #36	; 0x24
 800444c:	46bd      	mov	sp, r7
 800444e:	bd90      	pop	{r4, r7, pc}
 8004450:	ffffbffc 	.word	0xffffbffc
 8004454:	58026000 	.word	0x58026000
 8004458:	fc00f81f 	.word	0xfc00f81f
 800445c:	fc00f81e 	.word	0xfc00f81e

08004460 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a60      	ldr	r2, [pc, #384]	; (80045f4 <HAL_ADC_Start_DMA+0x194>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d004      	beq.n	8004480 <HAL_ADC_Start_DMA+0x20>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a5f      	ldr	r2, [pc, #380]	; (80045f8 <HAL_ADC_Start_DMA+0x198>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d101      	bne.n	8004484 <HAL_ADC_Start_DMA+0x24>
 8004480:	4b5e      	ldr	r3, [pc, #376]	; (80045fc <HAL_ADC_Start_DMA+0x19c>)
 8004482:	e000      	b.n	8004486 <HAL_ADC_Start_DMA+0x26>
 8004484:	4b5e      	ldr	r3, [pc, #376]	; (8004600 <HAL_ADC_Start_DMA+0x1a0>)
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff fcfe 	bl	8003e88 <LL_ADC_GetMultimode>
 800448c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff fdb6 	bl	8004004 <LL_ADC_REG_IsConversionOngoing>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	f040 80a2 	bne.w	80045e4 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d101      	bne.n	80044ae <HAL_ADC_Start_DMA+0x4e>
 80044aa:	2302      	movs	r3, #2
 80044ac:	e09d      	b.n	80045ea <HAL_ADC_Start_DMA+0x18a>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d006      	beq.n	80044ca <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	2b05      	cmp	r3, #5
 80044c0:	d003      	beq.n	80044ca <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	2b09      	cmp	r3, #9
 80044c6:	f040 8086 	bne.w	80045d6 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 fde4 	bl	8005098 <ADC_Enable>
 80044d0:	4603      	mov	r3, r0
 80044d2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80044d4:	7dfb      	ldrb	r3, [r7, #23]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d178      	bne.n	80045cc <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044de:	4b49      	ldr	r3, [pc, #292]	; (8004604 <HAL_ADC_Start_DMA+0x1a4>)
 80044e0:	4013      	ands	r3, r2
 80044e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a42      	ldr	r2, [pc, #264]	; (80045f8 <HAL_ADC_Start_DMA+0x198>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d002      	beq.n	80044fa <HAL_ADC_Start_DMA+0x9a>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	e000      	b.n	80044fc <HAL_ADC_Start_DMA+0x9c>
 80044fa:	4b3e      	ldr	r3, [pc, #248]	; (80045f4 <HAL_ADC_Start_DMA+0x194>)
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	6812      	ldr	r2, [r2, #0]
 8004500:	4293      	cmp	r3, r2
 8004502:	d002      	beq.n	800450a <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d105      	bne.n	8004516 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800450e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800451a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d006      	beq.n	8004530 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004526:	f023 0206 	bic.w	r2, r3, #6
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	665a      	str	r2, [r3, #100]	; 0x64
 800452e:	e002      	b.n	8004536 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	665a      	str	r2, [r3, #100]	; 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453a:	4a33      	ldr	r2, [pc, #204]	; (8004608 <HAL_ADC_Start_DMA+0x1a8>)
 800453c:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004542:	4a32      	ldr	r2, [pc, #200]	; (800460c <HAL_ADC_Start_DMA+0x1ac>)
 8004544:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454a:	4a31      	ldr	r2, [pc, #196]	; (8004610 <HAL_ADC_Start_DMA+0x1b0>)
 800454c:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	221c      	movs	r2, #28
 8004554:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f042 0210 	orr.w	r2, r2, #16
 800456c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a28      	ldr	r2, [pc, #160]	; (8004614 <HAL_ADC_Start_DMA+0x1b4>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d10f      	bne.n	8004598 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	4619      	mov	r1, r3
 8004586:	4610      	mov	r0, r2
 8004588:	f7ff fbf8 	bl	8003d7c <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff fbe3 	bl	8003d5c <LL_ADC_EnableDMAReq>
 8004596:	e007      	b.n	80045a8 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a0:	4619      	mov	r1, r3
 80045a2:	4610      	mov	r0, r2
 80045a4:	f7ff fbc7 	bl	8003d36 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3340      	adds	r3, #64	; 0x40
 80045b2:	4619      	mov	r1, r3
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f002 f86c 	bl	8006694 <HAL_DMA_Start_IT>
 80045bc:	4603      	mov	r3, r0
 80045be:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff fd09 	bl	8003fdc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80045ca:	e00d      	b.n	80045e8 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (tmp_hal_status == HAL_OK)
 80045d4:	e008      	b.n	80045e8 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80045e2:	e001      	b.n	80045e8 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80045e4:	2302      	movs	r3, #2
 80045e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80045e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3718      	adds	r7, #24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	40022000 	.word	0x40022000
 80045f8:	40022100 	.word	0x40022100
 80045fc:	40022300 	.word	0x40022300
 8004600:	58026300 	.word	0x58026300
 8004604:	fffff0fe 	.word	0xfffff0fe
 8004608:	0800526b 	.word	0x0800526b
 800460c:	08005343 	.word	0x08005343
 8004610:	0800535f 	.word	0x0800535f
 8004614:	58026000 	.word	0x58026000

08004618 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004640:	b590      	push	{r4, r7, lr}
 8004642:	b0b9      	sub	sp, #228	; 0xe4
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004650:	2300      	movs	r3, #0
 8004652:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800465a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	4aa9      	ldr	r2, [pc, #676]	; (8004908 <HAL_ADC_ConfigChannel+0x2c8>)
 8004662:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800466a:	2b01      	cmp	r3, #1
 800466c:	d102      	bne.n	8004674 <HAL_ADC_ConfigChannel+0x34>
 800466e:	2302      	movs	r3, #2
 8004670:	f000 bcfa 	b.w	8005068 <HAL_ADC_ConfigChannel+0xa28>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff fcbf 	bl	8004004 <LL_ADC_REG_IsConversionOngoing>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	f040 84de 	bne.w	800504a <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a9e      	ldr	r2, [pc, #632]	; (800490c <HAL_ADC_ConfigChannel+0x2cc>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d033      	beq.n	8004700 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d108      	bne.n	80046b6 <HAL_ADC_ConfigChannel+0x76>
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	0e9b      	lsrs	r3, r3, #26
 80046aa:	f003 031f 	and.w	r3, r3, #31
 80046ae:	2201      	movs	r2, #1
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	e01d      	b.n	80046f2 <HAL_ADC_ConfigChannel+0xb2>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046c2:	fa93 f3a3 	rbit	r3, r3
 80046c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80046ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80046d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80046da:	2320      	movs	r3, #32
 80046dc:	e004      	b.n	80046e8 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80046de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80046e2:	fab3 f383 	clz	r3, r3
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	f003 031f 	and.w	r3, r3, #31
 80046ec:	2201      	movs	r2, #1
 80046ee:	fa02 f303 	lsl.w	r3, r2, r3
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6812      	ldr	r2, [r2, #0]
 80046f6:	69d1      	ldr	r1, [r2, #28]
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6812      	ldr	r2, [r2, #0]
 80046fc:	430b      	orrs	r3, r1
 80046fe:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6818      	ldr	r0, [r3, #0]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	6859      	ldr	r1, [r3, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	461a      	mov	r2, r3
 800470e:	f7ff fae6 	bl	8003cde <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f7ff fc74 	bl	8004004 <LL_ADC_REG_IsConversionOngoing>
 800471c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff fc80 	bl	800402a <LL_ADC_INJ_IsConversionOngoing>
 800472a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800472e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004732:	2b00      	cmp	r3, #0
 8004734:	f040 8270 	bne.w	8004c18 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004738:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800473c:	2b00      	cmp	r3, #0
 800473e:	f040 826b 	bne.w	8004c18 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6818      	ldr	r0, [r3, #0]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	6819      	ldr	r1, [r3, #0]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	461a      	mov	r2, r3
 8004750:	f7ff fb2e 	bl	8003db0 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a6c      	ldr	r2, [pc, #432]	; (800490c <HAL_ADC_ConfigChannel+0x2cc>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d10d      	bne.n	800477a <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	695a      	ldr	r2, [r3, #20]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	08db      	lsrs	r3, r3, #3
 800476a:	f003 0303 	and.w	r3, r3, #3
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004778:	e032      	b.n	80047e0 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800477a:	4b65      	ldr	r3, [pc, #404]	; (8004910 <HAL_ADC_ConfigChannel+0x2d0>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004782:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004786:	d10b      	bne.n	80047a0 <HAL_ADC_ConfigChannel+0x160>
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	695a      	ldr	r2, [r3, #20]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	089b      	lsrs	r3, r3, #2
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	e01d      	b.n	80047dc <HAL_ADC_ConfigChannel+0x19c>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	f003 0310 	and.w	r3, r3, #16
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10b      	bne.n	80047c6 <HAL_ADC_ConfigChannel+0x186>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	695a      	ldr	r2, [r3, #20]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	089b      	lsrs	r3, r3, #2
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	e00a      	b.n	80047dc <HAL_ADC_ConfigChannel+0x19c>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	695a      	ldr	r2, [r3, #20]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	089b      	lsrs	r3, r3, #2
 80047d2:	f003 0304 	and.w	r3, r3, #4
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	2b04      	cmp	r3, #4
 80047e6:	d048      	beq.n	800487a <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6818      	ldr	r0, [r3, #0]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	6919      	ldr	r1, [r3, #16]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047f8:	f7ff f96c 	bl	8003ad4 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a42      	ldr	r2, [pc, #264]	; (800490c <HAL_ADC_ConfigChannel+0x2cc>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d119      	bne.n	800483a <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6818      	ldr	r0, [r3, #0]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	6919      	ldr	r1, [r3, #16]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	461a      	mov	r2, r3
 8004814:	f7ff fa04 	bl	8003c20 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6818      	ldr	r0, [r3, #0]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	6919      	ldr	r1, [r3, #16]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d102      	bne.n	8004830 <HAL_ADC_ConfigChannel+0x1f0>
 800482a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800482e:	e000      	b.n	8004832 <HAL_ADC_ConfigChannel+0x1f2>
 8004830:	2300      	movs	r3, #0
 8004832:	461a      	mov	r2, r3
 8004834:	f7ff f9d2 	bl	8003bdc <LL_ADC_SetOffsetSaturation>
 8004838:	e1ee      	b.n	8004c18 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	6919      	ldr	r1, [r3, #16]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004848:	2b01      	cmp	r3, #1
 800484a:	d102      	bne.n	8004852 <HAL_ADC_ConfigChannel+0x212>
 800484c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004850:	e000      	b.n	8004854 <HAL_ADC_ConfigChannel+0x214>
 8004852:	2300      	movs	r3, #0
 8004854:	461a      	mov	r2, r3
 8004856:	f7ff f99f 	bl	8003b98 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6818      	ldr	r0, [r3, #0]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	6919      	ldr	r1, [r3, #16]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	7e1b      	ldrb	r3, [r3, #24]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d102      	bne.n	8004870 <HAL_ADC_ConfigChannel+0x230>
 800486a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800486e:	e000      	b.n	8004872 <HAL_ADC_ConfigChannel+0x232>
 8004870:	2300      	movs	r3, #0
 8004872:	461a      	mov	r2, r3
 8004874:	f7ff f976 	bl	8003b64 <LL_ADC_SetDataRightShift>
 8004878:	e1ce      	b.n	8004c18 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a23      	ldr	r2, [pc, #140]	; (800490c <HAL_ADC_ConfigChannel+0x2cc>)
 8004880:	4293      	cmp	r3, r2
 8004882:	f040 8181 	bne.w	8004b88 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2100      	movs	r1, #0
 800488c:	4618      	mov	r0, r3
 800488e:	f7ff f953 	bl	8003b38 <LL_ADC_GetOffsetChannel>
 8004892:	4603      	mov	r3, r0
 8004894:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10a      	bne.n	80048b2 <HAL_ADC_ConfigChannel+0x272>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2100      	movs	r1, #0
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7ff f948 	bl	8003b38 <LL_ADC_GetOffsetChannel>
 80048a8:	4603      	mov	r3, r0
 80048aa:	0e9b      	lsrs	r3, r3, #26
 80048ac:	f003 021f 	and.w	r2, r3, #31
 80048b0:	e01e      	b.n	80048f0 <HAL_ADC_ConfigChannel+0x2b0>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2100      	movs	r1, #0
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7ff f93d 	bl	8003b38 <LL_ADC_GetOffsetChannel>
 80048be:	4603      	mov	r3, r0
 80048c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048c8:	fa93 f3a3 	rbit	r3, r3
 80048cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80048d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80048d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80048d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80048e0:	2320      	movs	r3, #32
 80048e2:	e004      	b.n	80048ee <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80048e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048e8:	fab3 f383 	clz	r3, r3
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	461a      	mov	r2, r3
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10b      	bne.n	8004914 <HAL_ADC_ConfigChannel+0x2d4>
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	0e9b      	lsrs	r3, r3, #26
 8004902:	f003 031f 	and.w	r3, r3, #31
 8004906:	e01e      	b.n	8004946 <HAL_ADC_ConfigChannel+0x306>
 8004908:	47ff0000 	.word	0x47ff0000
 800490c:	58026000 	.word	0x58026000
 8004910:	5c001000 	.word	0x5c001000
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004920:	fa93 f3a3 	rbit	r3, r3
 8004924:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004928:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800492c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004930:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8004938:	2320      	movs	r3, #32
 800493a:	e004      	b.n	8004946 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 800493c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004940:	fab3 f383 	clz	r3, r3
 8004944:	b2db      	uxtb	r3, r3
 8004946:	429a      	cmp	r2, r3
 8004948:	d106      	bne.n	8004958 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2200      	movs	r2, #0
 8004950:	2100      	movs	r1, #0
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff f986 	bl	8003c64 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2101      	movs	r1, #1
 800495e:	4618      	mov	r0, r3
 8004960:	f7ff f8ea 	bl	8003b38 <LL_ADC_GetOffsetChannel>
 8004964:	4603      	mov	r3, r0
 8004966:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10a      	bne.n	8004984 <HAL_ADC_ConfigChannel+0x344>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2101      	movs	r1, #1
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff f8df 	bl	8003b38 <LL_ADC_GetOffsetChannel>
 800497a:	4603      	mov	r3, r0
 800497c:	0e9b      	lsrs	r3, r3, #26
 800497e:	f003 021f 	and.w	r2, r3, #31
 8004982:	e01e      	b.n	80049c2 <HAL_ADC_ConfigChannel+0x382>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2101      	movs	r1, #1
 800498a:	4618      	mov	r0, r3
 800498c:	f7ff f8d4 	bl	8003b38 <LL_ADC_GetOffsetChannel>
 8004990:	4603      	mov	r3, r0
 8004992:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004996:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800499a:	fa93 f3a3 	rbit	r3, r3
 800499e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80049a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80049aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80049b2:	2320      	movs	r3, #32
 80049b4:	e004      	b.n	80049c0 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80049b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80049ba:	fab3 f383 	clz	r3, r3
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	461a      	mov	r2, r3
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d105      	bne.n	80049da <HAL_ADC_ConfigChannel+0x39a>
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	0e9b      	lsrs	r3, r3, #26
 80049d4:	f003 031f 	and.w	r3, r3, #31
 80049d8:	e018      	b.n	8004a0c <HAL_ADC_ConfigChannel+0x3cc>
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80049e6:	fa93 f3a3 	rbit	r3, r3
 80049ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80049ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80049f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80049f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80049fe:	2320      	movs	r3, #32
 8004a00:	e004      	b.n	8004a0c <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8004a02:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a06:	fab3 f383 	clz	r3, r3
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d106      	bne.n	8004a1e <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2200      	movs	r2, #0
 8004a16:	2101      	movs	r1, #1
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7ff f923 	bl	8003c64 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2102      	movs	r1, #2
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff f887 	bl	8003b38 <LL_ADC_GetOffsetChannel>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10a      	bne.n	8004a4a <HAL_ADC_ConfigChannel+0x40a>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2102      	movs	r1, #2
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7ff f87c 	bl	8003b38 <LL_ADC_GetOffsetChannel>
 8004a40:	4603      	mov	r3, r0
 8004a42:	0e9b      	lsrs	r3, r3, #26
 8004a44:	f003 021f 	and.w	r2, r3, #31
 8004a48:	e01e      	b.n	8004a88 <HAL_ADC_ConfigChannel+0x448>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2102      	movs	r1, #2
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7ff f871 	bl	8003b38 <LL_ADC_GetOffsetChannel>
 8004a56:	4603      	mov	r3, r0
 8004a58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a60:	fa93 f3a3 	rbit	r3, r3
 8004a64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004a68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004a70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004a78:	2320      	movs	r3, #32
 8004a7a:	e004      	b.n	8004a86 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004a7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a80:	fab3 f383 	clz	r3, r3
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	461a      	mov	r2, r3
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d105      	bne.n	8004aa0 <HAL_ADC_ConfigChannel+0x460>
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	0e9b      	lsrs	r3, r3, #26
 8004a9a:	f003 031f 	and.w	r3, r3, #31
 8004a9e:	e014      	b.n	8004aca <HAL_ADC_ConfigChannel+0x48a>
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004aa8:	fa93 f3a3 	rbit	r3, r3
 8004aac:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004aae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ab0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004ab4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004abc:	2320      	movs	r3, #32
 8004abe:	e004      	b.n	8004aca <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004ac0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ac4:	fab3 f383 	clz	r3, r3
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d106      	bne.n	8004adc <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	2102      	movs	r1, #2
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7ff f8c4 	bl	8003c64 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2103      	movs	r1, #3
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7ff f828 	bl	8003b38 <LL_ADC_GetOffsetChannel>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10a      	bne.n	8004b08 <HAL_ADC_ConfigChannel+0x4c8>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2103      	movs	r1, #3
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7ff f81d 	bl	8003b38 <LL_ADC_GetOffsetChannel>
 8004afe:	4603      	mov	r3, r0
 8004b00:	0e9b      	lsrs	r3, r3, #26
 8004b02:	f003 021f 	and.w	r2, r3, #31
 8004b06:	e017      	b.n	8004b38 <HAL_ADC_ConfigChannel+0x4f8>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2103      	movs	r1, #3
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7ff f812 	bl	8003b38 <LL_ADC_GetOffsetChannel>
 8004b14:	4603      	mov	r3, r0
 8004b16:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b1a:	fa93 f3a3 	rbit	r3, r3
 8004b1e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b22:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004b24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004b2a:	2320      	movs	r3, #32
 8004b2c:	e003      	b.n	8004b36 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004b2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b30:	fab3 f383 	clz	r3, r3
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	461a      	mov	r2, r3
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d105      	bne.n	8004b50 <HAL_ADC_ConfigChannel+0x510>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	0e9b      	lsrs	r3, r3, #26
 8004b4a:	f003 031f 	and.w	r3, r3, #31
 8004b4e:	e011      	b.n	8004b74 <HAL_ADC_ConfigChannel+0x534>
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b58:	fa93 f3a3 	rbit	r3, r3
 8004b5c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004b5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b60:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004b62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004b68:	2320      	movs	r3, #32
 8004b6a:	e003      	b.n	8004b74 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004b6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b6e:	fab3 f383 	clz	r3, r3
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d14f      	bne.n	8004c18 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	2103      	movs	r1, #3
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7ff f86f 	bl	8003c64 <LL_ADC_SetOffsetState>
 8004b86:	e047      	b.n	8004c18 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	069b      	lsls	r3, r3, #26
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d107      	bne.n	8004bac <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004baa:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	069b      	lsls	r3, r3, #26
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d107      	bne.n	8004bd0 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004bce:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	069b      	lsls	r3, r3, #26
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d107      	bne.n	8004bf4 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004bf2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bfa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	069b      	lsls	r3, r3, #26
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d107      	bne.n	8004c18 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c16:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7ff f9b7 	bl	8003f90 <LL_ADC_IsEnabled>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f040 8219 	bne.w	800505c <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6818      	ldr	r0, [r3, #0]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	6819      	ldr	r1, [r3, #0]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	461a      	mov	r2, r3
 8004c38:	f7ff f8e6 	bl	8003e08 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	4aa1      	ldr	r2, [pc, #644]	; (8004ec8 <HAL_ADC_ConfigChannel+0x888>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	f040 812e 	bne.w	8004ea4 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10b      	bne.n	8004c70 <HAL_ADC_ConfigChannel+0x630>
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	0e9b      	lsrs	r3, r3, #26
 8004c5e:	3301      	adds	r3, #1
 8004c60:	f003 031f 	and.w	r3, r3, #31
 8004c64:	2b09      	cmp	r3, #9
 8004c66:	bf94      	ite	ls
 8004c68:	2301      	movls	r3, #1
 8004c6a:	2300      	movhi	r3, #0
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	e019      	b.n	8004ca4 <HAL_ADC_ConfigChannel+0x664>
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c78:	fa93 f3a3 	rbit	r3, r3
 8004c7c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c80:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004c82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d101      	bne.n	8004c8c <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004c88:	2320      	movs	r3, #32
 8004c8a:	e003      	b.n	8004c94 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004c8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c8e:	fab3 f383 	clz	r3, r3
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	3301      	adds	r3, #1
 8004c96:	f003 031f 	and.w	r3, r3, #31
 8004c9a:	2b09      	cmp	r3, #9
 8004c9c:	bf94      	ite	ls
 8004c9e:	2301      	movls	r3, #1
 8004ca0:	2300      	movhi	r3, #0
 8004ca2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d079      	beq.n	8004d9c <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d107      	bne.n	8004cc4 <HAL_ADC_ConfigChannel+0x684>
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	0e9b      	lsrs	r3, r3, #26
 8004cba:	3301      	adds	r3, #1
 8004cbc:	069b      	lsls	r3, r3, #26
 8004cbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cc2:	e015      	b.n	8004cf0 <HAL_ADC_ConfigChannel+0x6b0>
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ccc:	fa93 f3a3 	rbit	r3, r3
 8004cd0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cd4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004cdc:	2320      	movs	r3, #32
 8004cde:	e003      	b.n	8004ce8 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ce2:	fab3 f383 	clz	r3, r3
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	3301      	adds	r3, #1
 8004cea:	069b      	lsls	r3, r3, #26
 8004cec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d109      	bne.n	8004d10 <HAL_ADC_ConfigChannel+0x6d0>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	0e9b      	lsrs	r3, r3, #26
 8004d02:	3301      	adds	r3, #1
 8004d04:	f003 031f 	and.w	r3, r3, #31
 8004d08:	2101      	movs	r1, #1
 8004d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d0e:	e017      	b.n	8004d40 <HAL_ADC_ConfigChannel+0x700>
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d18:	fa93 f3a3 	rbit	r3, r3
 8004d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d20:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004d22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004d28:	2320      	movs	r3, #32
 8004d2a:	e003      	b.n	8004d34 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004d2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d2e:	fab3 f383 	clz	r3, r3
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	3301      	adds	r3, #1
 8004d36:	f003 031f 	and.w	r3, r3, #31
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d40:	ea42 0103 	orr.w	r1, r2, r3
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10a      	bne.n	8004d66 <HAL_ADC_ConfigChannel+0x726>
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	0e9b      	lsrs	r3, r3, #26
 8004d56:	3301      	adds	r3, #1
 8004d58:	f003 021f 	and.w	r2, r3, #31
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	4413      	add	r3, r2
 8004d62:	051b      	lsls	r3, r3, #20
 8004d64:	e018      	b.n	8004d98 <HAL_ADC_ConfigChannel+0x758>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d6e:	fa93 f3a3 	rbit	r3, r3
 8004d72:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d76:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004d7e:	2320      	movs	r3, #32
 8004d80:	e003      	b.n	8004d8a <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d84:	fab3 f383 	clz	r3, r3
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	f003 021f 	and.w	r2, r3, #31
 8004d90:	4613      	mov	r3, r2
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	4413      	add	r3, r2
 8004d96:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d98:	430b      	orrs	r3, r1
 8004d9a:	e07e      	b.n	8004e9a <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d107      	bne.n	8004db8 <HAL_ADC_ConfigChannel+0x778>
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	0e9b      	lsrs	r3, r3, #26
 8004dae:	3301      	adds	r3, #1
 8004db0:	069b      	lsls	r3, r3, #26
 8004db2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004db6:	e015      	b.n	8004de4 <HAL_ADC_ConfigChannel+0x7a4>
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc0:	fa93 f3a3 	rbit	r3, r3
 8004dc4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004dd0:	2320      	movs	r3, #32
 8004dd2:	e003      	b.n	8004ddc <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd6:	fab3 f383 	clz	r3, r3
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	3301      	adds	r3, #1
 8004dde:	069b      	lsls	r3, r3, #26
 8004de0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d109      	bne.n	8004e04 <HAL_ADC_ConfigChannel+0x7c4>
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	0e9b      	lsrs	r3, r3, #26
 8004df6:	3301      	adds	r3, #1
 8004df8:	f003 031f 	and.w	r3, r3, #31
 8004dfc:	2101      	movs	r1, #1
 8004dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8004e02:	e017      	b.n	8004e34 <HAL_ADC_ConfigChannel+0x7f4>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	fa93 f3a3 	rbit	r3, r3
 8004e10:	61bb      	str	r3, [r7, #24]
  return result;
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004e1c:	2320      	movs	r3, #32
 8004e1e:	e003      	b.n	8004e28 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004e20:	6a3b      	ldr	r3, [r7, #32]
 8004e22:	fab3 f383 	clz	r3, r3
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	3301      	adds	r3, #1
 8004e2a:	f003 031f 	and.w	r3, r3, #31
 8004e2e:	2101      	movs	r1, #1
 8004e30:	fa01 f303 	lsl.w	r3, r1, r3
 8004e34:	ea42 0103 	orr.w	r1, r2, r3
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10d      	bne.n	8004e60 <HAL_ADC_ConfigChannel+0x820>
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	0e9b      	lsrs	r3, r3, #26
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	f003 021f 	and.w	r2, r3, #31
 8004e50:	4613      	mov	r3, r2
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	4413      	add	r3, r2
 8004e56:	3b1e      	subs	r3, #30
 8004e58:	051b      	lsls	r3, r3, #20
 8004e5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e5e:	e01b      	b.n	8004e98 <HAL_ADC_ConfigChannel+0x858>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	fa93 f3a3 	rbit	r3, r3
 8004e6c:	60fb      	str	r3, [r7, #12]
  return result;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004e78:	2320      	movs	r3, #32
 8004e7a:	e003      	b.n	8004e84 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	fab3 f383 	clz	r3, r3
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	3301      	adds	r3, #1
 8004e86:	f003 021f 	and.w	r2, r3, #31
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	4413      	add	r3, r2
 8004e90:	3b1e      	subs	r3, #30
 8004e92:	051b      	lsls	r3, r3, #20
 8004e94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e98:	430b      	orrs	r3, r1
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	6892      	ldr	r2, [r2, #8]
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	f7fe ff86 	bl	8003db0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f280 80d7 	bge.w	800505c <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a06      	ldr	r2, [pc, #24]	; (8004ecc <HAL_ADC_ConfigChannel+0x88c>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d004      	beq.n	8004ec2 <HAL_ADC_ConfigChannel+0x882>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a04      	ldr	r2, [pc, #16]	; (8004ed0 <HAL_ADC_ConfigChannel+0x890>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d10a      	bne.n	8004ed8 <HAL_ADC_ConfigChannel+0x898>
 8004ec2:	4b04      	ldr	r3, [pc, #16]	; (8004ed4 <HAL_ADC_ConfigChannel+0x894>)
 8004ec4:	e009      	b.n	8004eda <HAL_ADC_ConfigChannel+0x89a>
 8004ec6:	bf00      	nop
 8004ec8:	47ff0000 	.word	0x47ff0000
 8004ecc:	40022000 	.word	0x40022000
 8004ed0:	40022100 	.word	0x40022100
 8004ed4:	40022300 	.word	0x40022300
 8004ed8:	4b65      	ldr	r3, [pc, #404]	; (8005070 <HAL_ADC_ConfigChannel+0xa30>)
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fe fdec 	bl	8003ab8 <LL_ADC_GetCommonPathInternalCh>
 8004ee0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a62      	ldr	r2, [pc, #392]	; (8005074 <HAL_ADC_ConfigChannel+0xa34>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d004      	beq.n	8004ef8 <HAL_ADC_ConfigChannel+0x8b8>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a61      	ldr	r2, [pc, #388]	; (8005078 <HAL_ADC_ConfigChannel+0xa38>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d10e      	bne.n	8004f16 <HAL_ADC_ConfigChannel+0x8d6>
 8004ef8:	485e      	ldr	r0, [pc, #376]	; (8005074 <HAL_ADC_ConfigChannel+0xa34>)
 8004efa:	f7ff f849 	bl	8003f90 <LL_ADC_IsEnabled>
 8004efe:	4604      	mov	r4, r0
 8004f00:	485d      	ldr	r0, [pc, #372]	; (8005078 <HAL_ADC_ConfigChannel+0xa38>)
 8004f02:	f7ff f845 	bl	8003f90 <LL_ADC_IsEnabled>
 8004f06:	4603      	mov	r3, r0
 8004f08:	4323      	orrs	r3, r4
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	bf0c      	ite	eq
 8004f0e:	2301      	moveq	r3, #1
 8004f10:	2300      	movne	r3, #0
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	e008      	b.n	8004f28 <HAL_ADC_ConfigChannel+0x8e8>
 8004f16:	4859      	ldr	r0, [pc, #356]	; (800507c <HAL_ADC_ConfigChannel+0xa3c>)
 8004f18:	f7ff f83a 	bl	8003f90 <LL_ADC_IsEnabled>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	bf0c      	ite	eq
 8004f22:	2301      	moveq	r3, #1
 8004f24:	2300      	movne	r3, #0
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 8084 	beq.w	8005036 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a53      	ldr	r2, [pc, #332]	; (8005080 <HAL_ADC_ConfigChannel+0xa40>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d132      	bne.n	8004f9e <HAL_ADC_ConfigChannel+0x95e>
 8004f38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d12c      	bne.n	8004f9e <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a4c      	ldr	r2, [pc, #304]	; (800507c <HAL_ADC_ConfigChannel+0xa3c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	f040 8086 	bne.w	800505c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a47      	ldr	r2, [pc, #284]	; (8005074 <HAL_ADC_ConfigChannel+0xa34>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d004      	beq.n	8004f64 <HAL_ADC_ConfigChannel+0x924>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a46      	ldr	r2, [pc, #280]	; (8005078 <HAL_ADC_ConfigChannel+0xa38>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d101      	bne.n	8004f68 <HAL_ADC_ConfigChannel+0x928>
 8004f64:	4a47      	ldr	r2, [pc, #284]	; (8005084 <HAL_ADC_ConfigChannel+0xa44>)
 8004f66:	e000      	b.n	8004f6a <HAL_ADC_ConfigChannel+0x92a>
 8004f68:	4a41      	ldr	r2, [pc, #260]	; (8005070 <HAL_ADC_ConfigChannel+0xa30>)
 8004f6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f72:	4619      	mov	r1, r3
 8004f74:	4610      	mov	r0, r2
 8004f76:	f7fe fd8c 	bl	8003a92 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f7a:	4b43      	ldr	r3, [pc, #268]	; (8005088 <HAL_ADC_ConfigChannel+0xa48>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	099b      	lsrs	r3, r3, #6
 8004f80:	4a42      	ldr	r2, [pc, #264]	; (800508c <HAL_ADC_ConfigChannel+0xa4c>)
 8004f82:	fba2 2303 	umull	r2, r3, r2, r3
 8004f86:	099b      	lsrs	r3, r3, #6
 8004f88:	3301      	adds	r3, #1
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004f8e:	e002      	b.n	8004f96 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	3b01      	subs	r3, #1
 8004f94:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1f9      	bne.n	8004f90 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f9c:	e05e      	b.n	800505c <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a3b      	ldr	r2, [pc, #236]	; (8005090 <HAL_ADC_ConfigChannel+0xa50>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d120      	bne.n	8004fea <HAL_ADC_ConfigChannel+0x9aa>
 8004fa8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004fac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d11a      	bne.n	8004fea <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a30      	ldr	r2, [pc, #192]	; (800507c <HAL_ADC_ConfigChannel+0xa3c>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d14e      	bne.n	800505c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a2c      	ldr	r2, [pc, #176]	; (8005074 <HAL_ADC_ConfigChannel+0xa34>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d004      	beq.n	8004fd2 <HAL_ADC_ConfigChannel+0x992>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a2a      	ldr	r2, [pc, #168]	; (8005078 <HAL_ADC_ConfigChannel+0xa38>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d101      	bne.n	8004fd6 <HAL_ADC_ConfigChannel+0x996>
 8004fd2:	4a2c      	ldr	r2, [pc, #176]	; (8005084 <HAL_ADC_ConfigChannel+0xa44>)
 8004fd4:	e000      	b.n	8004fd8 <HAL_ADC_ConfigChannel+0x998>
 8004fd6:	4a26      	ldr	r2, [pc, #152]	; (8005070 <HAL_ADC_ConfigChannel+0xa30>)
 8004fd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004fdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	4610      	mov	r0, r2
 8004fe4:	f7fe fd55 	bl	8003a92 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fe8:	e038      	b.n	800505c <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a29      	ldr	r2, [pc, #164]	; (8005094 <HAL_ADC_ConfigChannel+0xa54>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d133      	bne.n	800505c <HAL_ADC_ConfigChannel+0xa1c>
 8004ff4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ff8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d12d      	bne.n	800505c <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a1d      	ldr	r2, [pc, #116]	; (800507c <HAL_ADC_ConfigChannel+0xa3c>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d128      	bne.n	800505c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a19      	ldr	r2, [pc, #100]	; (8005074 <HAL_ADC_ConfigChannel+0xa34>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d004      	beq.n	800501e <HAL_ADC_ConfigChannel+0x9de>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a17      	ldr	r2, [pc, #92]	; (8005078 <HAL_ADC_ConfigChannel+0xa38>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d101      	bne.n	8005022 <HAL_ADC_ConfigChannel+0x9e2>
 800501e:	4a19      	ldr	r2, [pc, #100]	; (8005084 <HAL_ADC_ConfigChannel+0xa44>)
 8005020:	e000      	b.n	8005024 <HAL_ADC_ConfigChannel+0x9e4>
 8005022:	4a13      	ldr	r2, [pc, #76]	; (8005070 <HAL_ADC_ConfigChannel+0xa30>)
 8005024:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005028:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800502c:	4619      	mov	r1, r3
 800502e:	4610      	mov	r0, r2
 8005030:	f7fe fd2f 	bl	8003a92 <LL_ADC_SetCommonPathInternalCh>
 8005034:	e012      	b.n	800505c <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800503a:	f043 0220 	orr.w	r2, r3, #32
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8005048:	e008      	b.n	800505c <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800504e:	f043 0220 	orr.w	r2, r3, #32
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005064:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8005068:	4618      	mov	r0, r3
 800506a:	37e4      	adds	r7, #228	; 0xe4
 800506c:	46bd      	mov	sp, r7
 800506e:	bd90      	pop	{r4, r7, pc}
 8005070:	58026300 	.word	0x58026300
 8005074:	40022000 	.word	0x40022000
 8005078:	40022100 	.word	0x40022100
 800507c:	58026000 	.word	0x58026000
 8005080:	c7520000 	.word	0xc7520000
 8005084:	40022300 	.word	0x40022300
 8005088:	24000000 	.word	0x24000000
 800508c:	053e2d63 	.word	0x053e2d63
 8005090:	c3210000 	.word	0xc3210000
 8005094:	cb840000 	.word	0xcb840000

08005098 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7fe ff73 	bl	8003f90 <LL_ADC_IsEnabled>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d16e      	bne.n	800518e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689a      	ldr	r2, [r3, #8]
 80050b6:	4b38      	ldr	r3, [pc, #224]	; (8005198 <ADC_Enable+0x100>)
 80050b8:	4013      	ands	r3, r2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00d      	beq.n	80050da <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050c2:	f043 0210 	orr.w	r2, r3, #16
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050ce:	f043 0201 	orr.w	r2, r3, #1
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e05a      	b.n	8005190 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fe ff2e 	bl	8003f40 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80050e4:	f7fe fc7c 	bl	80039e0 <HAL_GetTick>
 80050e8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a2b      	ldr	r2, [pc, #172]	; (800519c <ADC_Enable+0x104>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d004      	beq.n	80050fe <ADC_Enable+0x66>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a29      	ldr	r2, [pc, #164]	; (80051a0 <ADC_Enable+0x108>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d101      	bne.n	8005102 <ADC_Enable+0x6a>
 80050fe:	4b29      	ldr	r3, [pc, #164]	; (80051a4 <ADC_Enable+0x10c>)
 8005100:	e000      	b.n	8005104 <ADC_Enable+0x6c>
 8005102:	4b29      	ldr	r3, [pc, #164]	; (80051a8 <ADC_Enable+0x110>)
 8005104:	4618      	mov	r0, r3
 8005106:	f7fe febf 	bl	8003e88 <LL_ADC_GetMultimode>
 800510a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a23      	ldr	r2, [pc, #140]	; (80051a0 <ADC_Enable+0x108>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d002      	beq.n	800511c <ADC_Enable+0x84>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	e000      	b.n	800511e <ADC_Enable+0x86>
 800511c:	4b1f      	ldr	r3, [pc, #124]	; (800519c <ADC_Enable+0x104>)
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6812      	ldr	r2, [r2, #0]
 8005122:	4293      	cmp	r3, r2
 8005124:	d02c      	beq.n	8005180 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d130      	bne.n	800518e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800512c:	e028      	b.n	8005180 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4618      	mov	r0, r3
 8005134:	f7fe ff2c 	bl	8003f90 <LL_ADC_IsEnabled>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d104      	bne.n	8005148 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4618      	mov	r0, r3
 8005144:	f7fe fefc 	bl	8003f40 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005148:	f7fe fc4a 	bl	80039e0 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d914      	bls.n	8005180 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b01      	cmp	r3, #1
 8005162:	d00d      	beq.n	8005180 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005168:	f043 0210 	orr.w	r2, r3, #16
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005174:	f043 0201 	orr.w	r2, r3, #1
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e007      	b.n	8005190 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b01      	cmp	r3, #1
 800518c:	d1cf      	bne.n	800512e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	8000003f 	.word	0x8000003f
 800519c:	40022000 	.word	0x40022000
 80051a0:	40022100 	.word	0x40022100
 80051a4:	40022300 	.word	0x40022300
 80051a8:	58026300 	.word	0x58026300

080051ac <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7fe fefc 	bl	8003fb6 <LL_ADC_IsDisableOngoing>
 80051be:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7fe fee3 	bl	8003f90 <LL_ADC_IsEnabled>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d047      	beq.n	8005260 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d144      	bne.n	8005260 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f003 030d 	and.w	r3, r3, #13
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d10c      	bne.n	80051fe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7fe febd 	bl	8003f68 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2203      	movs	r2, #3
 80051f4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80051f6:	f7fe fbf3 	bl	80039e0 <HAL_GetTick>
 80051fa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80051fc:	e029      	b.n	8005252 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005202:	f043 0210 	orr.w	r2, r3, #16
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800520e:	f043 0201 	orr.w	r2, r3, #1
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e023      	b.n	8005262 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800521a:	f7fe fbe1 	bl	80039e0 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b02      	cmp	r3, #2
 8005226:	d914      	bls.n	8005252 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00d      	beq.n	8005252 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800523a:	f043 0210 	orr.w	r2, r3, #16
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005246:	f043 0201 	orr.w	r2, r3, #1
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e007      	b.n	8005262 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f003 0301 	and.w	r3, r3, #1
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1dc      	bne.n	800521a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b084      	sub	sp, #16
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005276:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800527c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005280:	2b00      	cmp	r3, #0
 8005282:	d14b      	bne.n	800531c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005288:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0308 	and.w	r3, r3, #8
 800529a:	2b00      	cmp	r3, #0
 800529c:	d021      	beq.n	80052e2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7fe fd08 	bl	8003cb8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d032      	beq.n	8005314 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d12b      	bne.n	8005314 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	661a      	str	r2, [r3, #96]	; 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d11f      	bne.n	8005314 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052d8:	f043 0201 	orr.w	r2, r3, #1
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	661a      	str	r2, [r3, #96]	; 0x60
 80052e0:	e018      	b.n	8005314 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f003 0303 	and.w	r3, r3, #3
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d111      	bne.n	8005314 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	661a      	str	r2, [r3, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005300:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d105      	bne.n	8005314 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800530c:	f043 0201 	orr.w	r2, r3, #1
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	661a      	str	r2, [r3, #96]	; 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f7fc fdc3 	bl	8001ea0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800531a:	e00e      	b.n	800533a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005320:	f003 0310 	and.w	r3, r3, #16
 8005324:	2b00      	cmp	r3, #0
 8005326:	d003      	beq.n	8005330 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f7ff f97f 	bl	800462c <HAL_ADC_ErrorCallback>
}
 800532e:	e004      	b.n	800533a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	4798      	blx	r3
}
 800533a:	bf00      	nop
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b084      	sub	sp, #16
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f7ff f961 	bl	8004618 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005356:	bf00      	nop
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b084      	sub	sp, #16
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005370:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800537c:	f043 0204 	orr.w	r2, r3, #4
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	665a      	str	r2, [r3, #100]	; 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f7ff f951 	bl	800462c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800538a:	bf00      	nop
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
	...

08005394 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a6c      	ldr	r2, [pc, #432]	; (8005554 <ADC_ConfigureBoostMode+0x1c0>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d004      	beq.n	80053b0 <ADC_ConfigureBoostMode+0x1c>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a6b      	ldr	r2, [pc, #428]	; (8005558 <ADC_ConfigureBoostMode+0x1c4>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d109      	bne.n	80053c4 <ADC_ConfigureBoostMode+0x30>
 80053b0:	4b6a      	ldr	r3, [pc, #424]	; (800555c <ADC_ConfigureBoostMode+0x1c8>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	bf14      	ite	ne
 80053bc:	2301      	movne	r3, #1
 80053be:	2300      	moveq	r3, #0
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	e008      	b.n	80053d6 <ADC_ConfigureBoostMode+0x42>
 80053c4:	4b66      	ldr	r3, [pc, #408]	; (8005560 <ADC_ConfigureBoostMode+0x1cc>)
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	bf14      	ite	ne
 80053d0:	2301      	movne	r3, #1
 80053d2:	2300      	moveq	r3, #0
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d01c      	beq.n	8005414 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80053da:	f004 ffc7 	bl	800a36c <HAL_RCC_GetHCLKFreq>
 80053de:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053e8:	d010      	beq.n	800540c <ADC_ConfigureBoostMode+0x78>
 80053ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053ee:	d873      	bhi.n	80054d8 <ADC_ConfigureBoostMode+0x144>
 80053f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053f4:	d002      	beq.n	80053fc <ADC_ConfigureBoostMode+0x68>
 80053f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053fa:	d16d      	bne.n	80054d8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	0c1b      	lsrs	r3, r3, #16
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	fbb2 f3f3 	udiv	r3, r2, r3
 8005408:	60fb      	str	r3, [r7, #12]
        break;
 800540a:	e068      	b.n	80054de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	089b      	lsrs	r3, r3, #2
 8005410:	60fb      	str	r3, [r7, #12]
        break;
 8005412:	e064      	b.n	80054de <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005414:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005418:	f04f 0100 	mov.w	r1, #0
 800541c:	f006 f9a2 	bl	800b764 <HAL_RCCEx_GetPeriphCLKFreq>
 8005420:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800542a:	d051      	beq.n	80054d0 <ADC_ConfigureBoostMode+0x13c>
 800542c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005430:	d854      	bhi.n	80054dc <ADC_ConfigureBoostMode+0x148>
 8005432:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005436:	d047      	beq.n	80054c8 <ADC_ConfigureBoostMode+0x134>
 8005438:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800543c:	d84e      	bhi.n	80054dc <ADC_ConfigureBoostMode+0x148>
 800543e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005442:	d03d      	beq.n	80054c0 <ADC_ConfigureBoostMode+0x12c>
 8005444:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005448:	d848      	bhi.n	80054dc <ADC_ConfigureBoostMode+0x148>
 800544a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800544e:	d033      	beq.n	80054b8 <ADC_ConfigureBoostMode+0x124>
 8005450:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005454:	d842      	bhi.n	80054dc <ADC_ConfigureBoostMode+0x148>
 8005456:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800545a:	d029      	beq.n	80054b0 <ADC_ConfigureBoostMode+0x11c>
 800545c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005460:	d83c      	bhi.n	80054dc <ADC_ConfigureBoostMode+0x148>
 8005462:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005466:	d01a      	beq.n	800549e <ADC_ConfigureBoostMode+0x10a>
 8005468:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800546c:	d836      	bhi.n	80054dc <ADC_ConfigureBoostMode+0x148>
 800546e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005472:	d014      	beq.n	800549e <ADC_ConfigureBoostMode+0x10a>
 8005474:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005478:	d830      	bhi.n	80054dc <ADC_ConfigureBoostMode+0x148>
 800547a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800547e:	d00e      	beq.n	800549e <ADC_ConfigureBoostMode+0x10a>
 8005480:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005484:	d82a      	bhi.n	80054dc <ADC_ConfigureBoostMode+0x148>
 8005486:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800548a:	d008      	beq.n	800549e <ADC_ConfigureBoostMode+0x10a>
 800548c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005490:	d824      	bhi.n	80054dc <ADC_ConfigureBoostMode+0x148>
 8005492:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005496:	d002      	beq.n	800549e <ADC_ConfigureBoostMode+0x10a>
 8005498:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800549c:	d11e      	bne.n	80054dc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	0c9b      	lsrs	r3, r3, #18
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ac:	60fb      	str	r3, [r7, #12]
        break;
 80054ae:	e016      	b.n	80054de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	091b      	lsrs	r3, r3, #4
 80054b4:	60fb      	str	r3, [r7, #12]
        break;
 80054b6:	e012      	b.n	80054de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	095b      	lsrs	r3, r3, #5
 80054bc:	60fb      	str	r3, [r7, #12]
        break;
 80054be:	e00e      	b.n	80054de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	099b      	lsrs	r3, r3, #6
 80054c4:	60fb      	str	r3, [r7, #12]
        break;
 80054c6:	e00a      	b.n	80054de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	09db      	lsrs	r3, r3, #7
 80054cc:	60fb      	str	r3, [r7, #12]
        break;
 80054ce:	e006      	b.n	80054de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	0a1b      	lsrs	r3, r3, #8
 80054d4:	60fb      	str	r3, [r7, #12]
        break;
 80054d6:	e002      	b.n	80054de <ADC_ConfigureBoostMode+0x14a>
        break;
 80054d8:	bf00      	nop
 80054da:	e000      	b.n	80054de <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80054dc:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	085b      	lsrs	r3, r3, #1
 80054e2:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4a1f      	ldr	r2, [pc, #124]	; (8005564 <ADC_ConfigureBoostMode+0x1d0>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d808      	bhi.n	80054fe <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	689a      	ldr	r2, [r3, #8]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80054fa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80054fc:	e025      	b.n	800554a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4a19      	ldr	r2, [pc, #100]	; (8005568 <ADC_ConfigureBoostMode+0x1d4>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d80a      	bhi.n	800551c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005518:	609a      	str	r2, [r3, #8]
}
 800551a:	e016      	b.n	800554a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4a13      	ldr	r2, [pc, #76]	; (800556c <ADC_ConfigureBoostMode+0x1d8>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d80a      	bhi.n	800553a <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005536:	609a      	str	r2, [r3, #8]
}
 8005538:	e007      	b.n	800554a <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005548:	609a      	str	r2, [r3, #8]
}
 800554a:	bf00      	nop
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	40022000 	.word	0x40022000
 8005558:	40022100 	.word	0x40022100
 800555c:	40022300 	.word	0x40022300
 8005560:	58026300 	.word	0x58026300
 8005564:	005f5e10 	.word	0x005f5e10
 8005568:	00bebc20 	.word	0x00bebc20
 800556c:	017d7840 	.word	0x017d7840

08005570 <LL_ADC_IsEnabled>:
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b01      	cmp	r3, #1
 8005582:	d101      	bne.n	8005588 <LL_ADC_IsEnabled+0x18>
 8005584:	2301      	movs	r3, #1
 8005586:	e000      	b.n	800558a <LL_ADC_IsEnabled+0x1a>
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
	...

08005598 <LL_ADC_StartCalibration>:
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	4b09      	ldr	r3, [pc, #36]	; (80055d0 <LL_ADC_StartCalibration+0x38>)
 80055aa:	4013      	ands	r3, r2
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80055b8:	430a      	orrs	r2, r1
 80055ba:	4313      	orrs	r3, r2
 80055bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	609a      	str	r2, [r3, #8]
}
 80055c4:	bf00      	nop
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	3ffeffc0 	.word	0x3ffeffc0

080055d4 <LL_ADC_IsCalibrationOnGoing>:
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055e8:	d101      	bne.n	80055ee <LL_ADC_IsCalibrationOnGoing+0x1a>
 80055ea:	2301      	movs	r3, #1
 80055ec:	e000      	b.n	80055f0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <LL_ADC_REG_IsConversionOngoing>:
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f003 0304 	and.w	r3, r3, #4
 800560c:	2b04      	cmp	r3, #4
 800560e:	d101      	bne.n	8005614 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005610:	2301      	movs	r3, #1
 8005612:	e000      	b.n	8005616 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
	...

08005624 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005630:	2300      	movs	r3, #0
 8005632:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800563a:	2b01      	cmp	r3, #1
 800563c:	d101      	bne.n	8005642 <HAL_ADCEx_Calibration_Start+0x1e>
 800563e:	2302      	movs	r3, #2
 8005640:	e04c      	b.n	80056dc <HAL_ADCEx_Calibration_Start+0xb8>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f7ff fdae 	bl	80051ac <ADC_Disable>
 8005650:	4603      	mov	r3, r0
 8005652:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005654:	7dfb      	ldrb	r3, [r7, #23]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d135      	bne.n	80056c6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800565e:	4b21      	ldr	r3, [pc, #132]	; (80056e4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005660:	4013      	ands	r3, r2
 8005662:	f043 0202 	orr.w	r2, r3, #2
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	661a      	str	r2, [r3, #96]	; 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	68b9      	ldr	r1, [r7, #8]
 8005672:	4618      	mov	r0, r3
 8005674:	f7ff ff90 	bl	8005598 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005678:	e014      	b.n	80056a4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	3301      	adds	r3, #1
 800567e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	4a19      	ldr	r2, [pc, #100]	; (80056e8 <HAL_ADCEx_Calibration_Start+0xc4>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d30d      	bcc.n	80056a4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800568c:	f023 0312 	bic.w	r3, r3, #18
 8005690:	f043 0210 	orr.w	r2, r3, #16
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e01b      	b.n	80056dc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7ff ff93 	bl	80055d4 <LL_ADC_IsCalibrationOnGoing>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1e2      	bne.n	800567a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056b8:	f023 0303 	bic.w	r3, r3, #3
 80056bc:	f043 0201 	orr.w	r2, r3, #1
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	661a      	str	r2, [r3, #96]	; 0x60
 80056c4:	e005      	b.n	80056d2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ca:	f043 0210 	orr.w	r2, r3, #16
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	661a      	str	r2, [r3, #96]	; 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80056da:	7dfb      	ldrb	r3, [r7, #23]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3718      	adds	r7, #24
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	ffffeefd 	.word	0xffffeefd
 80056e8:	25c3f800 	.word	0x25c3f800

080056ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80056ec:	b590      	push	{r4, r7, lr}
 80056ee:	b0a3      	sub	sp, #140	; 0x8c
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056f6:	2300      	movs	r3, #0
 80056f8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005702:	2b01      	cmp	r3, #1
 8005704:	d101      	bne.n	800570a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005706:	2302      	movs	r3, #2
 8005708:	e0c1      	b.n	800588e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005712:	2300      	movs	r3, #0
 8005714:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005716:	2300      	movs	r3, #0
 8005718:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a5e      	ldr	r2, [pc, #376]	; (8005898 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d102      	bne.n	800572a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005724:	4b5d      	ldr	r3, [pc, #372]	; (800589c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	e001      	b.n	800572e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800572a:	2300      	movs	r3, #0
 800572c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10b      	bne.n	800574c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005738:	f043 0220 	orr.w	r2, r3, #32
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e0a0      	b.n	800588e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4618      	mov	r0, r3
 8005750:	f7ff ff54 	bl	80055fc <LL_ADC_REG_IsConversionOngoing>
 8005754:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4618      	mov	r0, r3
 800575e:	f7ff ff4d 	bl	80055fc <LL_ADC_REG_IsConversionOngoing>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	f040 8081 	bne.w	800586c <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800576a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800576e:	2b00      	cmp	r3, #0
 8005770:	d17c      	bne.n	800586c <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a48      	ldr	r2, [pc, #288]	; (8005898 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d004      	beq.n	8005786 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a46      	ldr	r2, [pc, #280]	; (800589c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d101      	bne.n	800578a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8005786:	4b46      	ldr	r3, [pc, #280]	; (80058a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005788:	e000      	b.n	800578c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800578a:	4b46      	ldr	r3, [pc, #280]	; (80058a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800578c:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d039      	beq.n	800580a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005796:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	431a      	orrs	r2, r3
 80057a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057a6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a3a      	ldr	r2, [pc, #232]	; (8005898 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d004      	beq.n	80057bc <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a39      	ldr	r2, [pc, #228]	; (800589c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d10e      	bne.n	80057da <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80057bc:	4836      	ldr	r0, [pc, #216]	; (8005898 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80057be:	f7ff fed7 	bl	8005570 <LL_ADC_IsEnabled>
 80057c2:	4604      	mov	r4, r0
 80057c4:	4835      	ldr	r0, [pc, #212]	; (800589c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80057c6:	f7ff fed3 	bl	8005570 <LL_ADC_IsEnabled>
 80057ca:	4603      	mov	r3, r0
 80057cc:	4323      	orrs	r3, r4
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	bf0c      	ite	eq
 80057d2:	2301      	moveq	r3, #1
 80057d4:	2300      	movne	r3, #0
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	e008      	b.n	80057ec <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80057da:	4833      	ldr	r0, [pc, #204]	; (80058a8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80057dc:	f7ff fec8 	bl	8005570 <LL_ADC_IsEnabled>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	bf0c      	ite	eq
 80057e6:	2301      	moveq	r3, #1
 80057e8:	2300      	movne	r3, #0
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d047      	beq.n	8005880 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80057f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	4b2d      	ldr	r3, [pc, #180]	; (80058ac <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80057f6:	4013      	ands	r3, r2
 80057f8:	683a      	ldr	r2, [r7, #0]
 80057fa:	6811      	ldr	r1, [r2, #0]
 80057fc:	683a      	ldr	r2, [r7, #0]
 80057fe:	6892      	ldr	r2, [r2, #8]
 8005800:	430a      	orrs	r2, r1
 8005802:	431a      	orrs	r2, r3
 8005804:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005806:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005808:	e03a      	b.n	8005880 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800580a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005812:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005814:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a1f      	ldr	r2, [pc, #124]	; (8005898 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d004      	beq.n	800582a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a1d      	ldr	r2, [pc, #116]	; (800589c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d10e      	bne.n	8005848 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800582a:	481b      	ldr	r0, [pc, #108]	; (8005898 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800582c:	f7ff fea0 	bl	8005570 <LL_ADC_IsEnabled>
 8005830:	4604      	mov	r4, r0
 8005832:	481a      	ldr	r0, [pc, #104]	; (800589c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005834:	f7ff fe9c 	bl	8005570 <LL_ADC_IsEnabled>
 8005838:	4603      	mov	r3, r0
 800583a:	4323      	orrs	r3, r4
 800583c:	2b00      	cmp	r3, #0
 800583e:	bf0c      	ite	eq
 8005840:	2301      	moveq	r3, #1
 8005842:	2300      	movne	r3, #0
 8005844:	b2db      	uxtb	r3, r3
 8005846:	e008      	b.n	800585a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005848:	4817      	ldr	r0, [pc, #92]	; (80058a8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800584a:	f7ff fe91 	bl	8005570 <LL_ADC_IsEnabled>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	bf0c      	ite	eq
 8005854:	2301      	moveq	r3, #1
 8005856:	2300      	movne	r3, #0
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d010      	beq.n	8005880 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800585e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005860:	689a      	ldr	r2, [r3, #8]
 8005862:	4b12      	ldr	r3, [pc, #72]	; (80058ac <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005864:	4013      	ands	r3, r2
 8005866:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005868:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800586a:	e009      	b.n	8005880 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005870:	f043 0220 	orr.w	r2, r3, #32
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800587e:	e000      	b.n	8005882 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005880:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800588a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800588e:	4618      	mov	r0, r3
 8005890:	378c      	adds	r7, #140	; 0x8c
 8005892:	46bd      	mov	sp, r7
 8005894:	bd90      	pop	{r4, r7, pc}
 8005896:	bf00      	nop
 8005898:	40022000 	.word	0x40022000
 800589c:	40022100 	.word	0x40022100
 80058a0:	40022300 	.word	0x40022300
 80058a4:	58026300 	.word	0x58026300
 80058a8:	58026000 	.word	0x58026000
 80058ac:	fffff0e0 	.word	0xfffff0e0

080058b0 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b088      	sub	sp, #32
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80058b8:	2300      	movs	r3, #0
 80058ba:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 80058bc:	2300      	movs	r3, #0
 80058be:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d102      	bne.n	80058cc <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	77fb      	strb	r3, [r7, #31]
 80058ca:	e10e      	b.n	8005aea <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058da:	d102      	bne.n	80058e2 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	77fb      	strb	r3, [r7, #31]
 80058e0:	e103      	b.n	8005aea <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d109      	bne.n	8005902 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7fd f9eb 	bl	8002cd8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8005916:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 800591c:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 8005922:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 8005928:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800592e:	4313      	orrs	r3, r2
 8005930:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	4b6e      	ldr	r3, [pc, #440]	; (8005af4 <HAL_COMP_Init+0x244>)
 800593a:	4013      	ands	r3, r2
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	6812      	ldr	r2, [r2, #0]
 8005940:	6979      	ldr	r1, [r7, #20]
 8005942:	430b      	orrs	r3, r1
 8005944:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	2b10      	cmp	r3, #16
 800594c:	d108      	bne.n	8005960 <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f042 0210 	orr.w	r2, r2, #16
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	e007      	b.n	8005970 <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 0210 	bic.w	r2, r2, #16
 800596e:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0304 	and.w	r3, r3, #4
 800597a:	2b00      	cmp	r3, #0
 800597c:	d016      	beq.n	80059ac <HAL_COMP_Init+0xfc>
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d013      	beq.n	80059ac <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005984:	4b5c      	ldr	r3, [pc, #368]	; (8005af8 <HAL_COMP_Init+0x248>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	099b      	lsrs	r3, r3, #6
 800598a:	4a5c      	ldr	r2, [pc, #368]	; (8005afc <HAL_COMP_Init+0x24c>)
 800598c:	fba2 2303 	umull	r2, r3, r2, r3
 8005990:	099b      	lsrs	r3, r3, #6
 8005992:	1c5a      	adds	r2, r3, #1
 8005994:	4613      	mov	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 800599e:	e002      	b.n	80059a6 <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	3b01      	subs	r3, #1
 80059a4:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1f9      	bne.n	80059a0 <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a53      	ldr	r2, [pc, #332]	; (8005b00 <HAL_COMP_Init+0x250>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d102      	bne.n	80059bc <HAL_COMP_Init+0x10c>
 80059b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80059ba:	e001      	b.n	80059c0 <HAL_COMP_Init+0x110>
 80059bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80059c0:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	f003 0303 	and.w	r3, r3, #3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d06d      	beq.n	8005aaa <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	f003 0310 	and.w	r3, r3, #16
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d008      	beq.n	80059ec <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 80059da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	600b      	str	r3, [r1, #0]
 80059ea:	e008      	b.n	80059fe <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 80059ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	43db      	mvns	r3, r3
 80059f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059fa:	4013      	ands	r3, r2
 80059fc:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	f003 0320 	and.w	r3, r3, #32
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d008      	beq.n	8005a1c <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 8005a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	604b      	str	r3, [r1, #4]
 8005a1a:	e008      	b.n	8005a2e <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 8005a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	43db      	mvns	r3, r3
 8005a26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 8005a2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00a      	beq.n	8005a5a <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 8005a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a48:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005a4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 8005a58:	e00a      	b.n	8005a70 <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 8005a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a5e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	43db      	mvns	r3, r3
 8005a66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00a      	beq.n	8005a92 <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 8005a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a80:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005a84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 8005a90:	e021      	b.n	8005ad6 <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 8005a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a96:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	43db      	mvns	r3, r3
 8005a9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 8005aa8:	e015      	b.n	8005ad6 <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 8005aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aae:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	43db      	mvns	r3, r3
 8005ab6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005aba:	4013      	ands	r3, r2
 8005abc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 8005ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ac4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	43db      	mvns	r3, r3
 8005acc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d103      	bne.n	8005aea <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
   
  }
  
  return status;
 8005aea:	7ffb      	ldrb	r3, [r7, #31]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3720      	adds	r7, #32
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	f0e8cce1 	.word	0xf0e8cce1
 8005af8:	24000000 	.word	0x24000000
 8005afc:	053e2d63 	.word	0x053e2d63
 8005b00:	5800380c 	.word	0x5800380c

08005b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f003 0307 	and.w	r3, r3, #7
 8005b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b14:	4b0b      	ldr	r3, [pc, #44]	; (8005b44 <__NVIC_SetPriorityGrouping+0x40>)
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b20:	4013      	ands	r3, r2
 8005b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005b2c:	4b06      	ldr	r3, [pc, #24]	; (8005b48 <__NVIC_SetPriorityGrouping+0x44>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b32:	4a04      	ldr	r2, [pc, #16]	; (8005b44 <__NVIC_SetPriorityGrouping+0x40>)
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	60d3      	str	r3, [r2, #12]
}
 8005b38:	bf00      	nop
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	e000ed00 	.word	0xe000ed00
 8005b48:	05fa0000 	.word	0x05fa0000

08005b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b50:	4b04      	ldr	r3, [pc, #16]	; (8005b64 <__NVIC_GetPriorityGrouping+0x18>)
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	0a1b      	lsrs	r3, r3, #8
 8005b56:	f003 0307 	and.w	r3, r3, #7
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	e000ed00 	.word	0xe000ed00

08005b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	4603      	mov	r3, r0
 8005b70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005b72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	db0b      	blt.n	8005b92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b7a:	88fb      	ldrh	r3, [r7, #6]
 8005b7c:	f003 021f 	and.w	r2, r3, #31
 8005b80:	4907      	ldr	r1, [pc, #28]	; (8005ba0 <__NVIC_EnableIRQ+0x38>)
 8005b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b86:	095b      	lsrs	r3, r3, #5
 8005b88:	2001      	movs	r0, #1
 8005b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8005b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005b92:	bf00      	nop
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	e000e100 	.word	0xe000e100

08005ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	4603      	mov	r3, r0
 8005bac:	6039      	str	r1, [r7, #0]
 8005bae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005bb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	db0a      	blt.n	8005bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	b2da      	uxtb	r2, r3
 8005bbc:	490c      	ldr	r1, [pc, #48]	; (8005bf0 <__NVIC_SetPriority+0x4c>)
 8005bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bc2:	0112      	lsls	r2, r2, #4
 8005bc4:	b2d2      	uxtb	r2, r2
 8005bc6:	440b      	add	r3, r1
 8005bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005bcc:	e00a      	b.n	8005be4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	4908      	ldr	r1, [pc, #32]	; (8005bf4 <__NVIC_SetPriority+0x50>)
 8005bd4:	88fb      	ldrh	r3, [r7, #6]
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	3b04      	subs	r3, #4
 8005bdc:	0112      	lsls	r2, r2, #4
 8005bde:	b2d2      	uxtb	r2, r2
 8005be0:	440b      	add	r3, r1
 8005be2:	761a      	strb	r2, [r3, #24]
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	e000e100 	.word	0xe000e100
 8005bf4:	e000ed00 	.word	0xe000ed00

08005bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b089      	sub	sp, #36	; 0x24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f003 0307 	and.w	r3, r3, #7
 8005c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	f1c3 0307 	rsb	r3, r3, #7
 8005c12:	2b04      	cmp	r3, #4
 8005c14:	bf28      	it	cs
 8005c16:	2304      	movcs	r3, #4
 8005c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	2b06      	cmp	r3, #6
 8005c20:	d902      	bls.n	8005c28 <NVIC_EncodePriority+0x30>
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	3b03      	subs	r3, #3
 8005c26:	e000      	b.n	8005c2a <NVIC_EncodePriority+0x32>
 8005c28:	2300      	movs	r3, #0
 8005c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	fa02 f303 	lsl.w	r3, r2, r3
 8005c36:	43da      	mvns	r2, r3
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	401a      	ands	r2, r3
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c40:	f04f 31ff 	mov.w	r1, #4294967295
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	fa01 f303 	lsl.w	r3, r1, r3
 8005c4a:	43d9      	mvns	r1, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c50:	4313      	orrs	r3, r2
         );
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3724      	adds	r7, #36	; 0x24
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
	...

08005c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c70:	d301      	bcc.n	8005c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c72:	2301      	movs	r3, #1
 8005c74:	e00f      	b.n	8005c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c76:	4a0a      	ldr	r2, [pc, #40]	; (8005ca0 <SysTick_Config+0x40>)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c7e:	210f      	movs	r1, #15
 8005c80:	f04f 30ff 	mov.w	r0, #4294967295
 8005c84:	f7ff ff8e 	bl	8005ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c88:	4b05      	ldr	r3, [pc, #20]	; (8005ca0 <SysTick_Config+0x40>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c8e:	4b04      	ldr	r3, [pc, #16]	; (8005ca0 <SysTick_Config+0x40>)
 8005c90:	2207      	movs	r2, #7
 8005c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	e000e010 	.word	0xe000e010

08005ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f7ff ff29 	bl	8005b04 <__NVIC_SetPriorityGrouping>
}
 8005cb2:	bf00      	nop
 8005cb4:	3708      	adds	r7, #8
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b086      	sub	sp, #24
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	60b9      	str	r1, [r7, #8]
 8005cc4:	607a      	str	r2, [r7, #4]
 8005cc6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005cc8:	f7ff ff40 	bl	8005b4c <__NVIC_GetPriorityGrouping>
 8005ccc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	68b9      	ldr	r1, [r7, #8]
 8005cd2:	6978      	ldr	r0, [r7, #20]
 8005cd4:	f7ff ff90 	bl	8005bf8 <NVIC_EncodePriority>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005cde:	4611      	mov	r1, r2
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7ff ff5f 	bl	8005ba4 <__NVIC_SetPriority>
}
 8005ce6:	bf00      	nop
 8005ce8:	3718      	adds	r7, #24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b082      	sub	sp, #8
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005cf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7ff ff33 	bl	8005b68 <__NVIC_EnableIRQ>
}
 8005d02:	bf00      	nop
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b082      	sub	sp, #8
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7ff ffa4 	bl	8005c60 <SysTick_Config>
 8005d18:	4603      	mov	r3, r0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3708      	adds	r7, #8
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b082      	sub	sp, #8
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d101      	bne.n	8005d34 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e014      	b.n	8005d5e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	791b      	ldrb	r3, [r3, #4]
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d105      	bne.n	8005d4a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7fd f829 	bl	8002d9c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2202      	movs	r2, #2
 8005d4e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3708      	adds	r7, #8
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
	...

08005d68 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b088      	sub	sp, #32
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	795b      	ldrb	r3, [r3, #5]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d101      	bne.n	8005d80 <HAL_DAC_ConfigChannel+0x18>
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	e12a      	b.n	8005fd6 <HAL_DAC_ConfigChannel+0x26e>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2201      	movs	r2, #1
 8005d84:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2202      	movs	r2, #2
 8005d8a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2b04      	cmp	r3, #4
 8005d92:	f040 8081 	bne.w	8005e98 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005d96:	f7fd fe23 	bl	80039e0 <HAL_GetTick>
 8005d9a:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d140      	bne.n	8005e24 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005da2:	e018      	b.n	8005dd6 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005da4:	f7fd fe1c 	bl	80039e0 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d911      	bls.n	8005dd6 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005db8:	4b89      	ldr	r3, [pc, #548]	; (8005fe0 <HAL_DAC_ConfigChannel+0x278>)
 8005dba:	4013      	ands	r3, r2
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00a      	beq.n	8005dd6 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	f043 0208 	orr.w	r2, r3, #8
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2203      	movs	r2, #3
 8005dd0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e0ff      	b.n	8005fd6 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ddc:	4b80      	ldr	r3, [pc, #512]	; (8005fe0 <HAL_DAC_ConfigChannel+0x278>)
 8005dde:	4013      	ands	r3, r2
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1df      	bne.n	8005da4 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8005de4:	2001      	movs	r0, #1
 8005de6:	f7fd fe07 	bl	80039f8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	6992      	ldr	r2, [r2, #24]
 8005df2:	641a      	str	r2, [r3, #64]	; 0x40
 8005df4:	e023      	b.n	8005e3e <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005df6:	f7fd fdf3 	bl	80039e0 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d90f      	bls.n	8005e24 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	da0a      	bge.n	8005e24 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	f043 0208 	orr.w	r2, r3, #8
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2203      	movs	r2, #3
 8005e1e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e0d8      	b.n	8005fd6 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	dbe3      	blt.n	8005df6 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8005e2e:	2001      	movs	r0, #1
 8005e30:	f7fd fde2 	bl	80039f8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	6992      	ldr	r2, [r2, #24]
 8005e3c:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f003 0310 	and.w	r3, r3, #16
 8005e4a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e52:	43db      	mvns	r3, r3
 8005e54:	ea02 0103 	and.w	r1, r2, r3
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	69da      	ldr	r2, [r3, #28]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f003 0310 	and.w	r3, r3, #16
 8005e62:	409a      	lsls	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f003 0310 	and.w	r3, r3, #16
 8005e78:	21ff      	movs	r1, #255	; 0xff
 8005e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e7e:	43db      	mvns	r3, r3
 8005e80:	ea02 0103 	and.w	r1, r2, r3
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	6a1a      	ldr	r2, [r3, #32]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f003 0310 	and.w	r3, r3, #16
 8005e8e:	409a      	lsls	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	430a      	orrs	r2, r1
 8005e96:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d11d      	bne.n	8005edc <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea6:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f003 0310 	and.w	r3, r3, #16
 8005eae:	221f      	movs	r2, #31
 8005eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb4:	43db      	mvns	r3, r3
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	4013      	ands	r3, r2
 8005eba:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f003 0310 	and.w	r3, r3, #16
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f003 0310 	and.w	r3, r3, #16
 8005eea:	2207      	movs	r2, #7
 8005eec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef0:	43db      	mvns	r3, r3
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d102      	bne.n	8005f06 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8005f00:	2300      	movs	r3, #0
 8005f02:	61fb      	str	r3, [r7, #28]
 8005f04:	e00f      	b.n	8005f26 <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d102      	bne.n	8005f14 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	61fb      	str	r3, [r7, #28]
 8005f12:	e008      	b.n	8005f26 <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d102      	bne.n	8005f22 <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	61fb      	str	r3, [r7, #28]
 8005f20:	e001      	b.n	8005f26 <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005f22:	2300      	movs	r3, #0
 8005f24:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	69fa      	ldr	r2, [r7, #28]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f003 0310 	and.w	r3, r3, #16
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6819      	ldr	r1, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f003 0310 	and.w	r3, r3, #16
 8005f5c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005f60:	fa02 f303 	lsl.w	r3, r2, r3
 8005f64:	43da      	mvns	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	400a      	ands	r2, r1
 8005f6c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f003 0310 	and.w	r3, r3, #16
 8005f7c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005f80:	fa02 f303 	lsl.w	r3, r2, r3
 8005f84:	43db      	mvns	r3, r3
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	4013      	ands	r3, r2
 8005f8a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f003 0310 	and.w	r3, r3, #16
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6819      	ldr	r1, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f003 0310 	and.w	r3, r3, #16
 8005fb8:	22c0      	movs	r2, #192	; 0xc0
 8005fba:	fa02 f303 	lsl.w	r3, r2, r3
 8005fbe:	43da      	mvns	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	400a      	ands	r2, r1
 8005fc6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3720      	adds	r7, #32
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	20008000 	.word	0x20008000

08005fe4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005fec:	f7fd fcf8 	bl	80039e0 <HAL_GetTick>
 8005ff0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d101      	bne.n	8005ffc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e312      	b.n	8006622 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a66      	ldr	r2, [pc, #408]	; (800619c <HAL_DMA_Init+0x1b8>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d04a      	beq.n	800609c <HAL_DMA_Init+0xb8>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a65      	ldr	r2, [pc, #404]	; (80061a0 <HAL_DMA_Init+0x1bc>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d045      	beq.n	800609c <HAL_DMA_Init+0xb8>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a63      	ldr	r2, [pc, #396]	; (80061a4 <HAL_DMA_Init+0x1c0>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d040      	beq.n	800609c <HAL_DMA_Init+0xb8>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a62      	ldr	r2, [pc, #392]	; (80061a8 <HAL_DMA_Init+0x1c4>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d03b      	beq.n	800609c <HAL_DMA_Init+0xb8>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a60      	ldr	r2, [pc, #384]	; (80061ac <HAL_DMA_Init+0x1c8>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d036      	beq.n	800609c <HAL_DMA_Init+0xb8>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a5f      	ldr	r2, [pc, #380]	; (80061b0 <HAL_DMA_Init+0x1cc>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d031      	beq.n	800609c <HAL_DMA_Init+0xb8>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a5d      	ldr	r2, [pc, #372]	; (80061b4 <HAL_DMA_Init+0x1d0>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d02c      	beq.n	800609c <HAL_DMA_Init+0xb8>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a5c      	ldr	r2, [pc, #368]	; (80061b8 <HAL_DMA_Init+0x1d4>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d027      	beq.n	800609c <HAL_DMA_Init+0xb8>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a5a      	ldr	r2, [pc, #360]	; (80061bc <HAL_DMA_Init+0x1d8>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d022      	beq.n	800609c <HAL_DMA_Init+0xb8>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a59      	ldr	r2, [pc, #356]	; (80061c0 <HAL_DMA_Init+0x1dc>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d01d      	beq.n	800609c <HAL_DMA_Init+0xb8>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a57      	ldr	r2, [pc, #348]	; (80061c4 <HAL_DMA_Init+0x1e0>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d018      	beq.n	800609c <HAL_DMA_Init+0xb8>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a56      	ldr	r2, [pc, #344]	; (80061c8 <HAL_DMA_Init+0x1e4>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d013      	beq.n	800609c <HAL_DMA_Init+0xb8>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a54      	ldr	r2, [pc, #336]	; (80061cc <HAL_DMA_Init+0x1e8>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d00e      	beq.n	800609c <HAL_DMA_Init+0xb8>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a53      	ldr	r2, [pc, #332]	; (80061d0 <HAL_DMA_Init+0x1ec>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d009      	beq.n	800609c <HAL_DMA_Init+0xb8>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a51      	ldr	r2, [pc, #324]	; (80061d4 <HAL_DMA_Init+0x1f0>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d004      	beq.n	800609c <HAL_DMA_Init+0xb8>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a50      	ldr	r2, [pc, #320]	; (80061d8 <HAL_DMA_Init+0x1f4>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d101      	bne.n	80060a0 <HAL_DMA_Init+0xbc>
 800609c:	2301      	movs	r3, #1
 800609e:	e000      	b.n	80060a2 <HAL_DMA_Init+0xbe>
 80060a0:	2300      	movs	r3, #0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f000 813c 	beq.w	8006320 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2202      	movs	r2, #2
 80060ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a37      	ldr	r2, [pc, #220]	; (800619c <HAL_DMA_Init+0x1b8>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d04a      	beq.n	8006158 <HAL_DMA_Init+0x174>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a36      	ldr	r2, [pc, #216]	; (80061a0 <HAL_DMA_Init+0x1bc>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d045      	beq.n	8006158 <HAL_DMA_Init+0x174>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a34      	ldr	r2, [pc, #208]	; (80061a4 <HAL_DMA_Init+0x1c0>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d040      	beq.n	8006158 <HAL_DMA_Init+0x174>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a33      	ldr	r2, [pc, #204]	; (80061a8 <HAL_DMA_Init+0x1c4>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d03b      	beq.n	8006158 <HAL_DMA_Init+0x174>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a31      	ldr	r2, [pc, #196]	; (80061ac <HAL_DMA_Init+0x1c8>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d036      	beq.n	8006158 <HAL_DMA_Init+0x174>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a30      	ldr	r2, [pc, #192]	; (80061b0 <HAL_DMA_Init+0x1cc>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d031      	beq.n	8006158 <HAL_DMA_Init+0x174>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a2e      	ldr	r2, [pc, #184]	; (80061b4 <HAL_DMA_Init+0x1d0>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d02c      	beq.n	8006158 <HAL_DMA_Init+0x174>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a2d      	ldr	r2, [pc, #180]	; (80061b8 <HAL_DMA_Init+0x1d4>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d027      	beq.n	8006158 <HAL_DMA_Init+0x174>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a2b      	ldr	r2, [pc, #172]	; (80061bc <HAL_DMA_Init+0x1d8>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d022      	beq.n	8006158 <HAL_DMA_Init+0x174>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a2a      	ldr	r2, [pc, #168]	; (80061c0 <HAL_DMA_Init+0x1dc>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d01d      	beq.n	8006158 <HAL_DMA_Init+0x174>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a28      	ldr	r2, [pc, #160]	; (80061c4 <HAL_DMA_Init+0x1e0>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d018      	beq.n	8006158 <HAL_DMA_Init+0x174>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a27      	ldr	r2, [pc, #156]	; (80061c8 <HAL_DMA_Init+0x1e4>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d013      	beq.n	8006158 <HAL_DMA_Init+0x174>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a25      	ldr	r2, [pc, #148]	; (80061cc <HAL_DMA_Init+0x1e8>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d00e      	beq.n	8006158 <HAL_DMA_Init+0x174>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a24      	ldr	r2, [pc, #144]	; (80061d0 <HAL_DMA_Init+0x1ec>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d009      	beq.n	8006158 <HAL_DMA_Init+0x174>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a22      	ldr	r2, [pc, #136]	; (80061d4 <HAL_DMA_Init+0x1f0>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d004      	beq.n	8006158 <HAL_DMA_Init+0x174>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a21      	ldr	r2, [pc, #132]	; (80061d8 <HAL_DMA_Init+0x1f4>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d108      	bne.n	800616a <HAL_DMA_Init+0x186>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 0201 	bic.w	r2, r2, #1
 8006166:	601a      	str	r2, [r3, #0]
 8006168:	e007      	b.n	800617a <HAL_DMA_Init+0x196>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f022 0201 	bic.w	r2, r2, #1
 8006178:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800617a:	e02f      	b.n	80061dc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800617c:	f7fd fc30 	bl	80039e0 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	2b05      	cmp	r3, #5
 8006188:	d928      	bls.n	80061dc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2220      	movs	r2, #32
 800618e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2203      	movs	r2, #3
 8006194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e242      	b.n	8006622 <HAL_DMA_Init+0x63e>
 800619c:	40020010 	.word	0x40020010
 80061a0:	40020028 	.word	0x40020028
 80061a4:	40020040 	.word	0x40020040
 80061a8:	40020058 	.word	0x40020058
 80061ac:	40020070 	.word	0x40020070
 80061b0:	40020088 	.word	0x40020088
 80061b4:	400200a0 	.word	0x400200a0
 80061b8:	400200b8 	.word	0x400200b8
 80061bc:	40020410 	.word	0x40020410
 80061c0:	40020428 	.word	0x40020428
 80061c4:	40020440 	.word	0x40020440
 80061c8:	40020458 	.word	0x40020458
 80061cc:	40020470 	.word	0x40020470
 80061d0:	40020488 	.word	0x40020488
 80061d4:	400204a0 	.word	0x400204a0
 80061d8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1c8      	bne.n	800617c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	4b83      	ldr	r3, [pc, #524]	; (8006404 <HAL_DMA_Init+0x420>)
 80061f6:	4013      	ands	r3, r2
 80061f8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006202:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800620e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800621a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	4313      	orrs	r3, r2
 8006226:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622c:	2b04      	cmp	r3, #4
 800622e:	d107      	bne.n	8006240 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006238:	4313      	orrs	r3, r2
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	4313      	orrs	r3, r2
 800623e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	2b28      	cmp	r3, #40	; 0x28
 8006246:	d903      	bls.n	8006250 <HAL_DMA_Init+0x26c>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	2b2e      	cmp	r3, #46	; 0x2e
 800624e:	d91f      	bls.n	8006290 <HAL_DMA_Init+0x2ac>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	2b3e      	cmp	r3, #62	; 0x3e
 8006256:	d903      	bls.n	8006260 <HAL_DMA_Init+0x27c>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	2b42      	cmp	r3, #66	; 0x42
 800625e:	d917      	bls.n	8006290 <HAL_DMA_Init+0x2ac>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	2b46      	cmp	r3, #70	; 0x46
 8006266:	d903      	bls.n	8006270 <HAL_DMA_Init+0x28c>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	2b48      	cmp	r3, #72	; 0x48
 800626e:	d90f      	bls.n	8006290 <HAL_DMA_Init+0x2ac>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	2b4e      	cmp	r3, #78	; 0x4e
 8006276:	d903      	bls.n	8006280 <HAL_DMA_Init+0x29c>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	2b52      	cmp	r3, #82	; 0x52
 800627e:	d907      	bls.n	8006290 <HAL_DMA_Init+0x2ac>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	2b73      	cmp	r3, #115	; 0x73
 8006286:	d905      	bls.n	8006294 <HAL_DMA_Init+0x2b0>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	2b77      	cmp	r3, #119	; 0x77
 800628e:	d801      	bhi.n	8006294 <HAL_DMA_Init+0x2b0>
 8006290:	2301      	movs	r3, #1
 8006292:	e000      	b.n	8006296 <HAL_DMA_Init+0x2b2>
 8006294:	2300      	movs	r3, #0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062a0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	f023 0307 	bic.w	r3, r3, #7
 80062b8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c8:	2b04      	cmp	r3, #4
 80062ca:	d117      	bne.n	80062fc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00e      	beq.n	80062fc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f002 f810 	bl	8008304 <DMA_CheckFifoParam>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d008      	beq.n	80062fc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2240      	movs	r2, #64	; 0x40
 80062ee:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e192      	b.n	8006622 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f001 ff4b 	bl	80081a0 <DMA_CalcBaseAndBitshift>
 800630a:	4603      	mov	r3, r0
 800630c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006312:	f003 031f 	and.w	r3, r3, #31
 8006316:	223f      	movs	r2, #63	; 0x3f
 8006318:	409a      	lsls	r2, r3
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	609a      	str	r2, [r3, #8]
 800631e:	e0c8      	b.n	80064b2 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a38      	ldr	r2, [pc, #224]	; (8006408 <HAL_DMA_Init+0x424>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d022      	beq.n	8006370 <HAL_DMA_Init+0x38c>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a37      	ldr	r2, [pc, #220]	; (800640c <HAL_DMA_Init+0x428>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d01d      	beq.n	8006370 <HAL_DMA_Init+0x38c>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a35      	ldr	r2, [pc, #212]	; (8006410 <HAL_DMA_Init+0x42c>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d018      	beq.n	8006370 <HAL_DMA_Init+0x38c>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a34      	ldr	r2, [pc, #208]	; (8006414 <HAL_DMA_Init+0x430>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d013      	beq.n	8006370 <HAL_DMA_Init+0x38c>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a32      	ldr	r2, [pc, #200]	; (8006418 <HAL_DMA_Init+0x434>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d00e      	beq.n	8006370 <HAL_DMA_Init+0x38c>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a31      	ldr	r2, [pc, #196]	; (800641c <HAL_DMA_Init+0x438>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d009      	beq.n	8006370 <HAL_DMA_Init+0x38c>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a2f      	ldr	r2, [pc, #188]	; (8006420 <HAL_DMA_Init+0x43c>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d004      	beq.n	8006370 <HAL_DMA_Init+0x38c>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a2e      	ldr	r2, [pc, #184]	; (8006424 <HAL_DMA_Init+0x440>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d101      	bne.n	8006374 <HAL_DMA_Init+0x390>
 8006370:	2301      	movs	r3, #1
 8006372:	e000      	b.n	8006376 <HAL_DMA_Init+0x392>
 8006374:	2300      	movs	r3, #0
 8006376:	2b00      	cmp	r3, #0
 8006378:	f000 8092 	beq.w	80064a0 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a21      	ldr	r2, [pc, #132]	; (8006408 <HAL_DMA_Init+0x424>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d021      	beq.n	80063ca <HAL_DMA_Init+0x3e6>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a20      	ldr	r2, [pc, #128]	; (800640c <HAL_DMA_Init+0x428>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d01c      	beq.n	80063ca <HAL_DMA_Init+0x3e6>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a1e      	ldr	r2, [pc, #120]	; (8006410 <HAL_DMA_Init+0x42c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d017      	beq.n	80063ca <HAL_DMA_Init+0x3e6>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a1d      	ldr	r2, [pc, #116]	; (8006414 <HAL_DMA_Init+0x430>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d012      	beq.n	80063ca <HAL_DMA_Init+0x3e6>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a1b      	ldr	r2, [pc, #108]	; (8006418 <HAL_DMA_Init+0x434>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d00d      	beq.n	80063ca <HAL_DMA_Init+0x3e6>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a1a      	ldr	r2, [pc, #104]	; (800641c <HAL_DMA_Init+0x438>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d008      	beq.n	80063ca <HAL_DMA_Init+0x3e6>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a18      	ldr	r2, [pc, #96]	; (8006420 <HAL_DMA_Init+0x43c>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d003      	beq.n	80063ca <HAL_DMA_Init+0x3e6>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a17      	ldr	r2, [pc, #92]	; (8006424 <HAL_DMA_Init+0x440>)
 80063c8:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2202      	movs	r2, #2
 80063ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	4b10      	ldr	r3, [pc, #64]	; (8006428 <HAL_DMA_Init+0x444>)
 80063e6:	4013      	ands	r3, r2
 80063e8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	2b40      	cmp	r3, #64	; 0x40
 80063f0:	d01c      	beq.n	800642c <HAL_DMA_Init+0x448>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	2b80      	cmp	r3, #128	; 0x80
 80063f8:	d102      	bne.n	8006400 <HAL_DMA_Init+0x41c>
 80063fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80063fe:	e016      	b.n	800642e <HAL_DMA_Init+0x44a>
 8006400:	2300      	movs	r3, #0
 8006402:	e014      	b.n	800642e <HAL_DMA_Init+0x44a>
 8006404:	fe10803f 	.word	0xfe10803f
 8006408:	58025408 	.word	0x58025408
 800640c:	5802541c 	.word	0x5802541c
 8006410:	58025430 	.word	0x58025430
 8006414:	58025444 	.word	0x58025444
 8006418:	58025458 	.word	0x58025458
 800641c:	5802546c 	.word	0x5802546c
 8006420:	58025480 	.word	0x58025480
 8006424:	58025494 	.word	0x58025494
 8006428:	fffe000f 	.word	0xfffe000f
 800642c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	68d2      	ldr	r2, [r2, #12]
 8006432:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006434:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800643c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006444:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800644c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	69db      	ldr	r3, [r3, #28]
 8006452:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006454:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800645c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	4313      	orrs	r3, r2
 8006462:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	461a      	mov	r2, r3
 8006472:	4b6e      	ldr	r3, [pc, #440]	; (800662c <HAL_DMA_Init+0x648>)
 8006474:	4413      	add	r3, r2
 8006476:	4a6e      	ldr	r2, [pc, #440]	; (8006630 <HAL_DMA_Init+0x64c>)
 8006478:	fba2 2303 	umull	r2, r3, r2, r3
 800647c:	091b      	lsrs	r3, r3, #4
 800647e:	009a      	lsls	r2, r3, #2
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f001 fe8b 	bl	80081a0 <DMA_CalcBaseAndBitshift>
 800648a:	4603      	mov	r3, r0
 800648c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006492:	f003 031f 	and.w	r3, r3, #31
 8006496:	2201      	movs	r2, #1
 8006498:	409a      	lsls	r2, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	605a      	str	r2, [r3, #4]
 800649e:	e008      	b.n	80064b2 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2240      	movs	r2, #64	; 0x40
 80064a4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2203      	movs	r2, #3
 80064aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e0b7      	b.n	8006622 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a5f      	ldr	r2, [pc, #380]	; (8006634 <HAL_DMA_Init+0x650>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d072      	beq.n	80065a2 <HAL_DMA_Init+0x5be>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a5d      	ldr	r2, [pc, #372]	; (8006638 <HAL_DMA_Init+0x654>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d06d      	beq.n	80065a2 <HAL_DMA_Init+0x5be>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a5c      	ldr	r2, [pc, #368]	; (800663c <HAL_DMA_Init+0x658>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d068      	beq.n	80065a2 <HAL_DMA_Init+0x5be>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a5a      	ldr	r2, [pc, #360]	; (8006640 <HAL_DMA_Init+0x65c>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d063      	beq.n	80065a2 <HAL_DMA_Init+0x5be>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a59      	ldr	r2, [pc, #356]	; (8006644 <HAL_DMA_Init+0x660>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d05e      	beq.n	80065a2 <HAL_DMA_Init+0x5be>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a57      	ldr	r2, [pc, #348]	; (8006648 <HAL_DMA_Init+0x664>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d059      	beq.n	80065a2 <HAL_DMA_Init+0x5be>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a56      	ldr	r2, [pc, #344]	; (800664c <HAL_DMA_Init+0x668>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d054      	beq.n	80065a2 <HAL_DMA_Init+0x5be>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a54      	ldr	r2, [pc, #336]	; (8006650 <HAL_DMA_Init+0x66c>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d04f      	beq.n	80065a2 <HAL_DMA_Init+0x5be>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a53      	ldr	r2, [pc, #332]	; (8006654 <HAL_DMA_Init+0x670>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d04a      	beq.n	80065a2 <HAL_DMA_Init+0x5be>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a51      	ldr	r2, [pc, #324]	; (8006658 <HAL_DMA_Init+0x674>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d045      	beq.n	80065a2 <HAL_DMA_Init+0x5be>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a50      	ldr	r2, [pc, #320]	; (800665c <HAL_DMA_Init+0x678>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d040      	beq.n	80065a2 <HAL_DMA_Init+0x5be>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a4e      	ldr	r2, [pc, #312]	; (8006660 <HAL_DMA_Init+0x67c>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d03b      	beq.n	80065a2 <HAL_DMA_Init+0x5be>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a4d      	ldr	r2, [pc, #308]	; (8006664 <HAL_DMA_Init+0x680>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d036      	beq.n	80065a2 <HAL_DMA_Init+0x5be>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a4b      	ldr	r2, [pc, #300]	; (8006668 <HAL_DMA_Init+0x684>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d031      	beq.n	80065a2 <HAL_DMA_Init+0x5be>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a4a      	ldr	r2, [pc, #296]	; (800666c <HAL_DMA_Init+0x688>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d02c      	beq.n	80065a2 <HAL_DMA_Init+0x5be>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a48      	ldr	r2, [pc, #288]	; (8006670 <HAL_DMA_Init+0x68c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d027      	beq.n	80065a2 <HAL_DMA_Init+0x5be>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a47      	ldr	r2, [pc, #284]	; (8006674 <HAL_DMA_Init+0x690>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d022      	beq.n	80065a2 <HAL_DMA_Init+0x5be>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a45      	ldr	r2, [pc, #276]	; (8006678 <HAL_DMA_Init+0x694>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d01d      	beq.n	80065a2 <HAL_DMA_Init+0x5be>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a44      	ldr	r2, [pc, #272]	; (800667c <HAL_DMA_Init+0x698>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d018      	beq.n	80065a2 <HAL_DMA_Init+0x5be>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a42      	ldr	r2, [pc, #264]	; (8006680 <HAL_DMA_Init+0x69c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d013      	beq.n	80065a2 <HAL_DMA_Init+0x5be>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a41      	ldr	r2, [pc, #260]	; (8006684 <HAL_DMA_Init+0x6a0>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d00e      	beq.n	80065a2 <HAL_DMA_Init+0x5be>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a3f      	ldr	r2, [pc, #252]	; (8006688 <HAL_DMA_Init+0x6a4>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d009      	beq.n	80065a2 <HAL_DMA_Init+0x5be>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a3e      	ldr	r2, [pc, #248]	; (800668c <HAL_DMA_Init+0x6a8>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d004      	beq.n	80065a2 <HAL_DMA_Init+0x5be>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a3c      	ldr	r2, [pc, #240]	; (8006690 <HAL_DMA_Init+0x6ac>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d101      	bne.n	80065a6 <HAL_DMA_Init+0x5c2>
 80065a2:	2301      	movs	r3, #1
 80065a4:	e000      	b.n	80065a8 <HAL_DMA_Init+0x5c4>
 80065a6:	2300      	movs	r3, #0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d032      	beq.n	8006612 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f001 ff25 	bl	80083fc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	2b80      	cmp	r3, #128	; 0x80
 80065b8:	d102      	bne.n	80065c0 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065c8:	b2d2      	uxtb	r2, r2
 80065ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80065d4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d010      	beq.n	8006600 <HAL_DMA_Init+0x61c>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	2b08      	cmp	r3, #8
 80065e4:	d80c      	bhi.n	8006600 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f001 ffa2 	bl	8008530 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065f0:	2200      	movs	r2, #0
 80065f2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80065fc:	605a      	str	r2, [r3, #4]
 80065fe:	e008      	b.n	8006612 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3718      	adds	r7, #24
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	a7fdabf8 	.word	0xa7fdabf8
 8006630:	cccccccd 	.word	0xcccccccd
 8006634:	40020010 	.word	0x40020010
 8006638:	40020028 	.word	0x40020028
 800663c:	40020040 	.word	0x40020040
 8006640:	40020058 	.word	0x40020058
 8006644:	40020070 	.word	0x40020070
 8006648:	40020088 	.word	0x40020088
 800664c:	400200a0 	.word	0x400200a0
 8006650:	400200b8 	.word	0x400200b8
 8006654:	40020410 	.word	0x40020410
 8006658:	40020428 	.word	0x40020428
 800665c:	40020440 	.word	0x40020440
 8006660:	40020458 	.word	0x40020458
 8006664:	40020470 	.word	0x40020470
 8006668:	40020488 	.word	0x40020488
 800666c:	400204a0 	.word	0x400204a0
 8006670:	400204b8 	.word	0x400204b8
 8006674:	58025408 	.word	0x58025408
 8006678:	5802541c 	.word	0x5802541c
 800667c:	58025430 	.word	0x58025430
 8006680:	58025444 	.word	0x58025444
 8006684:	58025458 	.word	0x58025458
 8006688:	5802546c 	.word	0x5802546c
 800668c:	58025480 	.word	0x58025480
 8006690:	58025494 	.word	0x58025494

08006694 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b086      	sub	sp, #24
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
 80066a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d101      	bne.n	80066b0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e226      	b.n	8006afe <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d101      	bne.n	80066be <HAL_DMA_Start_IT+0x2a>
 80066ba:	2302      	movs	r3, #2
 80066bc:	e21f      	b.n	8006afe <HAL_DMA_Start_IT+0x46a>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	f040 820a 	bne.w	8006ae8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2202      	movs	r2, #2
 80066d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a68      	ldr	r2, [pc, #416]	; (8006888 <HAL_DMA_Start_IT+0x1f4>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d04a      	beq.n	8006782 <HAL_DMA_Start_IT+0xee>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a66      	ldr	r2, [pc, #408]	; (800688c <HAL_DMA_Start_IT+0x1f8>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d045      	beq.n	8006782 <HAL_DMA_Start_IT+0xee>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a65      	ldr	r2, [pc, #404]	; (8006890 <HAL_DMA_Start_IT+0x1fc>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d040      	beq.n	8006782 <HAL_DMA_Start_IT+0xee>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a63      	ldr	r2, [pc, #396]	; (8006894 <HAL_DMA_Start_IT+0x200>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d03b      	beq.n	8006782 <HAL_DMA_Start_IT+0xee>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a62      	ldr	r2, [pc, #392]	; (8006898 <HAL_DMA_Start_IT+0x204>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d036      	beq.n	8006782 <HAL_DMA_Start_IT+0xee>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a60      	ldr	r2, [pc, #384]	; (800689c <HAL_DMA_Start_IT+0x208>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d031      	beq.n	8006782 <HAL_DMA_Start_IT+0xee>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a5f      	ldr	r2, [pc, #380]	; (80068a0 <HAL_DMA_Start_IT+0x20c>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d02c      	beq.n	8006782 <HAL_DMA_Start_IT+0xee>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a5d      	ldr	r2, [pc, #372]	; (80068a4 <HAL_DMA_Start_IT+0x210>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d027      	beq.n	8006782 <HAL_DMA_Start_IT+0xee>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a5c      	ldr	r2, [pc, #368]	; (80068a8 <HAL_DMA_Start_IT+0x214>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d022      	beq.n	8006782 <HAL_DMA_Start_IT+0xee>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a5a      	ldr	r2, [pc, #360]	; (80068ac <HAL_DMA_Start_IT+0x218>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d01d      	beq.n	8006782 <HAL_DMA_Start_IT+0xee>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a59      	ldr	r2, [pc, #356]	; (80068b0 <HAL_DMA_Start_IT+0x21c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d018      	beq.n	8006782 <HAL_DMA_Start_IT+0xee>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a57      	ldr	r2, [pc, #348]	; (80068b4 <HAL_DMA_Start_IT+0x220>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d013      	beq.n	8006782 <HAL_DMA_Start_IT+0xee>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a56      	ldr	r2, [pc, #344]	; (80068b8 <HAL_DMA_Start_IT+0x224>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d00e      	beq.n	8006782 <HAL_DMA_Start_IT+0xee>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a54      	ldr	r2, [pc, #336]	; (80068bc <HAL_DMA_Start_IT+0x228>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d009      	beq.n	8006782 <HAL_DMA_Start_IT+0xee>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a53      	ldr	r2, [pc, #332]	; (80068c0 <HAL_DMA_Start_IT+0x22c>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d004      	beq.n	8006782 <HAL_DMA_Start_IT+0xee>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a51      	ldr	r2, [pc, #324]	; (80068c4 <HAL_DMA_Start_IT+0x230>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d108      	bne.n	8006794 <HAL_DMA_Start_IT+0x100>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f022 0201 	bic.w	r2, r2, #1
 8006790:	601a      	str	r2, [r3, #0]
 8006792:	e007      	b.n	80067a4 <HAL_DMA_Start_IT+0x110>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f022 0201 	bic.w	r2, r2, #1
 80067a2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	68b9      	ldr	r1, [r7, #8]
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f001 fb4c 	bl	8007e48 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a34      	ldr	r2, [pc, #208]	; (8006888 <HAL_DMA_Start_IT+0x1f4>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d04a      	beq.n	8006850 <HAL_DMA_Start_IT+0x1bc>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a33      	ldr	r2, [pc, #204]	; (800688c <HAL_DMA_Start_IT+0x1f8>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d045      	beq.n	8006850 <HAL_DMA_Start_IT+0x1bc>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a31      	ldr	r2, [pc, #196]	; (8006890 <HAL_DMA_Start_IT+0x1fc>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d040      	beq.n	8006850 <HAL_DMA_Start_IT+0x1bc>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a30      	ldr	r2, [pc, #192]	; (8006894 <HAL_DMA_Start_IT+0x200>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d03b      	beq.n	8006850 <HAL_DMA_Start_IT+0x1bc>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a2e      	ldr	r2, [pc, #184]	; (8006898 <HAL_DMA_Start_IT+0x204>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d036      	beq.n	8006850 <HAL_DMA_Start_IT+0x1bc>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a2d      	ldr	r2, [pc, #180]	; (800689c <HAL_DMA_Start_IT+0x208>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d031      	beq.n	8006850 <HAL_DMA_Start_IT+0x1bc>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a2b      	ldr	r2, [pc, #172]	; (80068a0 <HAL_DMA_Start_IT+0x20c>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d02c      	beq.n	8006850 <HAL_DMA_Start_IT+0x1bc>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a2a      	ldr	r2, [pc, #168]	; (80068a4 <HAL_DMA_Start_IT+0x210>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d027      	beq.n	8006850 <HAL_DMA_Start_IT+0x1bc>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a28      	ldr	r2, [pc, #160]	; (80068a8 <HAL_DMA_Start_IT+0x214>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d022      	beq.n	8006850 <HAL_DMA_Start_IT+0x1bc>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a27      	ldr	r2, [pc, #156]	; (80068ac <HAL_DMA_Start_IT+0x218>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d01d      	beq.n	8006850 <HAL_DMA_Start_IT+0x1bc>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a25      	ldr	r2, [pc, #148]	; (80068b0 <HAL_DMA_Start_IT+0x21c>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d018      	beq.n	8006850 <HAL_DMA_Start_IT+0x1bc>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a24      	ldr	r2, [pc, #144]	; (80068b4 <HAL_DMA_Start_IT+0x220>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d013      	beq.n	8006850 <HAL_DMA_Start_IT+0x1bc>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a22      	ldr	r2, [pc, #136]	; (80068b8 <HAL_DMA_Start_IT+0x224>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d00e      	beq.n	8006850 <HAL_DMA_Start_IT+0x1bc>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a21      	ldr	r2, [pc, #132]	; (80068bc <HAL_DMA_Start_IT+0x228>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d009      	beq.n	8006850 <HAL_DMA_Start_IT+0x1bc>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a1f      	ldr	r2, [pc, #124]	; (80068c0 <HAL_DMA_Start_IT+0x22c>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d004      	beq.n	8006850 <HAL_DMA_Start_IT+0x1bc>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a1e      	ldr	r2, [pc, #120]	; (80068c4 <HAL_DMA_Start_IT+0x230>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d101      	bne.n	8006854 <HAL_DMA_Start_IT+0x1c0>
 8006850:	2301      	movs	r3, #1
 8006852:	e000      	b.n	8006856 <HAL_DMA_Start_IT+0x1c2>
 8006854:	2300      	movs	r3, #0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d036      	beq.n	80068c8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f023 021e 	bic.w	r2, r3, #30
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f042 0216 	orr.w	r2, r2, #22
 800686c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006872:	2b00      	cmp	r3, #0
 8006874:	d03e      	beq.n	80068f4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f042 0208 	orr.w	r2, r2, #8
 8006884:	601a      	str	r2, [r3, #0]
 8006886:	e035      	b.n	80068f4 <HAL_DMA_Start_IT+0x260>
 8006888:	40020010 	.word	0x40020010
 800688c:	40020028 	.word	0x40020028
 8006890:	40020040 	.word	0x40020040
 8006894:	40020058 	.word	0x40020058
 8006898:	40020070 	.word	0x40020070
 800689c:	40020088 	.word	0x40020088
 80068a0:	400200a0 	.word	0x400200a0
 80068a4:	400200b8 	.word	0x400200b8
 80068a8:	40020410 	.word	0x40020410
 80068ac:	40020428 	.word	0x40020428
 80068b0:	40020440 	.word	0x40020440
 80068b4:	40020458 	.word	0x40020458
 80068b8:	40020470 	.word	0x40020470
 80068bc:	40020488 	.word	0x40020488
 80068c0:	400204a0 	.word	0x400204a0
 80068c4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f023 020e 	bic.w	r2, r3, #14
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f042 020a 	orr.w	r2, r2, #10
 80068da:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d007      	beq.n	80068f4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f042 0204 	orr.w	r2, r2, #4
 80068f2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a83      	ldr	r2, [pc, #524]	; (8006b08 <HAL_DMA_Start_IT+0x474>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d072      	beq.n	80069e4 <HAL_DMA_Start_IT+0x350>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a82      	ldr	r2, [pc, #520]	; (8006b0c <HAL_DMA_Start_IT+0x478>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d06d      	beq.n	80069e4 <HAL_DMA_Start_IT+0x350>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a80      	ldr	r2, [pc, #512]	; (8006b10 <HAL_DMA_Start_IT+0x47c>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d068      	beq.n	80069e4 <HAL_DMA_Start_IT+0x350>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a7f      	ldr	r2, [pc, #508]	; (8006b14 <HAL_DMA_Start_IT+0x480>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d063      	beq.n	80069e4 <HAL_DMA_Start_IT+0x350>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a7d      	ldr	r2, [pc, #500]	; (8006b18 <HAL_DMA_Start_IT+0x484>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d05e      	beq.n	80069e4 <HAL_DMA_Start_IT+0x350>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a7c      	ldr	r2, [pc, #496]	; (8006b1c <HAL_DMA_Start_IT+0x488>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d059      	beq.n	80069e4 <HAL_DMA_Start_IT+0x350>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a7a      	ldr	r2, [pc, #488]	; (8006b20 <HAL_DMA_Start_IT+0x48c>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d054      	beq.n	80069e4 <HAL_DMA_Start_IT+0x350>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a79      	ldr	r2, [pc, #484]	; (8006b24 <HAL_DMA_Start_IT+0x490>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d04f      	beq.n	80069e4 <HAL_DMA_Start_IT+0x350>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a77      	ldr	r2, [pc, #476]	; (8006b28 <HAL_DMA_Start_IT+0x494>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d04a      	beq.n	80069e4 <HAL_DMA_Start_IT+0x350>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a76      	ldr	r2, [pc, #472]	; (8006b2c <HAL_DMA_Start_IT+0x498>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d045      	beq.n	80069e4 <HAL_DMA_Start_IT+0x350>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a74      	ldr	r2, [pc, #464]	; (8006b30 <HAL_DMA_Start_IT+0x49c>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d040      	beq.n	80069e4 <HAL_DMA_Start_IT+0x350>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a73      	ldr	r2, [pc, #460]	; (8006b34 <HAL_DMA_Start_IT+0x4a0>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d03b      	beq.n	80069e4 <HAL_DMA_Start_IT+0x350>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a71      	ldr	r2, [pc, #452]	; (8006b38 <HAL_DMA_Start_IT+0x4a4>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d036      	beq.n	80069e4 <HAL_DMA_Start_IT+0x350>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a70      	ldr	r2, [pc, #448]	; (8006b3c <HAL_DMA_Start_IT+0x4a8>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d031      	beq.n	80069e4 <HAL_DMA_Start_IT+0x350>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a6e      	ldr	r2, [pc, #440]	; (8006b40 <HAL_DMA_Start_IT+0x4ac>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d02c      	beq.n	80069e4 <HAL_DMA_Start_IT+0x350>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a6d      	ldr	r2, [pc, #436]	; (8006b44 <HAL_DMA_Start_IT+0x4b0>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d027      	beq.n	80069e4 <HAL_DMA_Start_IT+0x350>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a6b      	ldr	r2, [pc, #428]	; (8006b48 <HAL_DMA_Start_IT+0x4b4>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d022      	beq.n	80069e4 <HAL_DMA_Start_IT+0x350>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a6a      	ldr	r2, [pc, #424]	; (8006b4c <HAL_DMA_Start_IT+0x4b8>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d01d      	beq.n	80069e4 <HAL_DMA_Start_IT+0x350>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a68      	ldr	r2, [pc, #416]	; (8006b50 <HAL_DMA_Start_IT+0x4bc>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d018      	beq.n	80069e4 <HAL_DMA_Start_IT+0x350>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a67      	ldr	r2, [pc, #412]	; (8006b54 <HAL_DMA_Start_IT+0x4c0>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d013      	beq.n	80069e4 <HAL_DMA_Start_IT+0x350>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a65      	ldr	r2, [pc, #404]	; (8006b58 <HAL_DMA_Start_IT+0x4c4>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d00e      	beq.n	80069e4 <HAL_DMA_Start_IT+0x350>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a64      	ldr	r2, [pc, #400]	; (8006b5c <HAL_DMA_Start_IT+0x4c8>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d009      	beq.n	80069e4 <HAL_DMA_Start_IT+0x350>
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a62      	ldr	r2, [pc, #392]	; (8006b60 <HAL_DMA_Start_IT+0x4cc>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d004      	beq.n	80069e4 <HAL_DMA_Start_IT+0x350>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a61      	ldr	r2, [pc, #388]	; (8006b64 <HAL_DMA_Start_IT+0x4d0>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d101      	bne.n	80069e8 <HAL_DMA_Start_IT+0x354>
 80069e4:	2301      	movs	r3, #1
 80069e6:	e000      	b.n	80069ea <HAL_DMA_Start_IT+0x356>
 80069e8:	2300      	movs	r3, #0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d01a      	beq.n	8006a24 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d007      	beq.n	8006a0c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a0a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d007      	beq.n	8006a24 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a22:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a37      	ldr	r2, [pc, #220]	; (8006b08 <HAL_DMA_Start_IT+0x474>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d04a      	beq.n	8006ac4 <HAL_DMA_Start_IT+0x430>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a36      	ldr	r2, [pc, #216]	; (8006b0c <HAL_DMA_Start_IT+0x478>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d045      	beq.n	8006ac4 <HAL_DMA_Start_IT+0x430>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a34      	ldr	r2, [pc, #208]	; (8006b10 <HAL_DMA_Start_IT+0x47c>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d040      	beq.n	8006ac4 <HAL_DMA_Start_IT+0x430>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a33      	ldr	r2, [pc, #204]	; (8006b14 <HAL_DMA_Start_IT+0x480>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d03b      	beq.n	8006ac4 <HAL_DMA_Start_IT+0x430>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a31      	ldr	r2, [pc, #196]	; (8006b18 <HAL_DMA_Start_IT+0x484>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d036      	beq.n	8006ac4 <HAL_DMA_Start_IT+0x430>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a30      	ldr	r2, [pc, #192]	; (8006b1c <HAL_DMA_Start_IT+0x488>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d031      	beq.n	8006ac4 <HAL_DMA_Start_IT+0x430>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a2e      	ldr	r2, [pc, #184]	; (8006b20 <HAL_DMA_Start_IT+0x48c>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d02c      	beq.n	8006ac4 <HAL_DMA_Start_IT+0x430>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a2d      	ldr	r2, [pc, #180]	; (8006b24 <HAL_DMA_Start_IT+0x490>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d027      	beq.n	8006ac4 <HAL_DMA_Start_IT+0x430>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a2b      	ldr	r2, [pc, #172]	; (8006b28 <HAL_DMA_Start_IT+0x494>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d022      	beq.n	8006ac4 <HAL_DMA_Start_IT+0x430>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a2a      	ldr	r2, [pc, #168]	; (8006b2c <HAL_DMA_Start_IT+0x498>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d01d      	beq.n	8006ac4 <HAL_DMA_Start_IT+0x430>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a28      	ldr	r2, [pc, #160]	; (8006b30 <HAL_DMA_Start_IT+0x49c>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d018      	beq.n	8006ac4 <HAL_DMA_Start_IT+0x430>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a27      	ldr	r2, [pc, #156]	; (8006b34 <HAL_DMA_Start_IT+0x4a0>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d013      	beq.n	8006ac4 <HAL_DMA_Start_IT+0x430>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a25      	ldr	r2, [pc, #148]	; (8006b38 <HAL_DMA_Start_IT+0x4a4>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d00e      	beq.n	8006ac4 <HAL_DMA_Start_IT+0x430>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a24      	ldr	r2, [pc, #144]	; (8006b3c <HAL_DMA_Start_IT+0x4a8>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d009      	beq.n	8006ac4 <HAL_DMA_Start_IT+0x430>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a22      	ldr	r2, [pc, #136]	; (8006b40 <HAL_DMA_Start_IT+0x4ac>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d004      	beq.n	8006ac4 <HAL_DMA_Start_IT+0x430>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a21      	ldr	r2, [pc, #132]	; (8006b44 <HAL_DMA_Start_IT+0x4b0>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d108      	bne.n	8006ad6 <HAL_DMA_Start_IT+0x442>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f042 0201 	orr.w	r2, r2, #1
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	e012      	b.n	8006afc <HAL_DMA_Start_IT+0x468>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f042 0201 	orr.w	r2, r2, #1
 8006ae4:	601a      	str	r2, [r3, #0]
 8006ae6:	e009      	b.n	8006afc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006aee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3718      	adds	r7, #24
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	40020010 	.word	0x40020010
 8006b0c:	40020028 	.word	0x40020028
 8006b10:	40020040 	.word	0x40020040
 8006b14:	40020058 	.word	0x40020058
 8006b18:	40020070 	.word	0x40020070
 8006b1c:	40020088 	.word	0x40020088
 8006b20:	400200a0 	.word	0x400200a0
 8006b24:	400200b8 	.word	0x400200b8
 8006b28:	40020410 	.word	0x40020410
 8006b2c:	40020428 	.word	0x40020428
 8006b30:	40020440 	.word	0x40020440
 8006b34:	40020458 	.word	0x40020458
 8006b38:	40020470 	.word	0x40020470
 8006b3c:	40020488 	.word	0x40020488
 8006b40:	400204a0 	.word	0x400204a0
 8006b44:	400204b8 	.word	0x400204b8
 8006b48:	58025408 	.word	0x58025408
 8006b4c:	5802541c 	.word	0x5802541c
 8006b50:	58025430 	.word	0x58025430
 8006b54:	58025444 	.word	0x58025444
 8006b58:	58025458 	.word	0x58025458
 8006b5c:	5802546c 	.word	0x5802546c
 8006b60:	58025480 	.word	0x58025480
 8006b64:	58025494 	.word	0x58025494

08006b68 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e237      	b.n	8006fea <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d004      	beq.n	8006b90 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2280      	movs	r2, #128	; 0x80
 8006b8a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e22c      	b.n	8006fea <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a5c      	ldr	r2, [pc, #368]	; (8006d08 <HAL_DMA_Abort_IT+0x1a0>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d04a      	beq.n	8006c30 <HAL_DMA_Abort_IT+0xc8>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a5b      	ldr	r2, [pc, #364]	; (8006d0c <HAL_DMA_Abort_IT+0x1a4>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d045      	beq.n	8006c30 <HAL_DMA_Abort_IT+0xc8>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a59      	ldr	r2, [pc, #356]	; (8006d10 <HAL_DMA_Abort_IT+0x1a8>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d040      	beq.n	8006c30 <HAL_DMA_Abort_IT+0xc8>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a58      	ldr	r2, [pc, #352]	; (8006d14 <HAL_DMA_Abort_IT+0x1ac>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d03b      	beq.n	8006c30 <HAL_DMA_Abort_IT+0xc8>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a56      	ldr	r2, [pc, #344]	; (8006d18 <HAL_DMA_Abort_IT+0x1b0>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d036      	beq.n	8006c30 <HAL_DMA_Abort_IT+0xc8>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a55      	ldr	r2, [pc, #340]	; (8006d1c <HAL_DMA_Abort_IT+0x1b4>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d031      	beq.n	8006c30 <HAL_DMA_Abort_IT+0xc8>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a53      	ldr	r2, [pc, #332]	; (8006d20 <HAL_DMA_Abort_IT+0x1b8>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d02c      	beq.n	8006c30 <HAL_DMA_Abort_IT+0xc8>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a52      	ldr	r2, [pc, #328]	; (8006d24 <HAL_DMA_Abort_IT+0x1bc>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d027      	beq.n	8006c30 <HAL_DMA_Abort_IT+0xc8>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a50      	ldr	r2, [pc, #320]	; (8006d28 <HAL_DMA_Abort_IT+0x1c0>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d022      	beq.n	8006c30 <HAL_DMA_Abort_IT+0xc8>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a4f      	ldr	r2, [pc, #316]	; (8006d2c <HAL_DMA_Abort_IT+0x1c4>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d01d      	beq.n	8006c30 <HAL_DMA_Abort_IT+0xc8>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a4d      	ldr	r2, [pc, #308]	; (8006d30 <HAL_DMA_Abort_IT+0x1c8>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d018      	beq.n	8006c30 <HAL_DMA_Abort_IT+0xc8>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a4c      	ldr	r2, [pc, #304]	; (8006d34 <HAL_DMA_Abort_IT+0x1cc>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d013      	beq.n	8006c30 <HAL_DMA_Abort_IT+0xc8>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a4a      	ldr	r2, [pc, #296]	; (8006d38 <HAL_DMA_Abort_IT+0x1d0>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d00e      	beq.n	8006c30 <HAL_DMA_Abort_IT+0xc8>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a49      	ldr	r2, [pc, #292]	; (8006d3c <HAL_DMA_Abort_IT+0x1d4>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d009      	beq.n	8006c30 <HAL_DMA_Abort_IT+0xc8>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a47      	ldr	r2, [pc, #284]	; (8006d40 <HAL_DMA_Abort_IT+0x1d8>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d004      	beq.n	8006c30 <HAL_DMA_Abort_IT+0xc8>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a46      	ldr	r2, [pc, #280]	; (8006d44 <HAL_DMA_Abort_IT+0x1dc>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d101      	bne.n	8006c34 <HAL_DMA_Abort_IT+0xcc>
 8006c30:	2301      	movs	r3, #1
 8006c32:	e000      	b.n	8006c36 <HAL_DMA_Abort_IT+0xce>
 8006c34:	2300      	movs	r3, #0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f000 8086 	beq.w	8006d48 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2204      	movs	r2, #4
 8006c40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a2f      	ldr	r2, [pc, #188]	; (8006d08 <HAL_DMA_Abort_IT+0x1a0>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d04a      	beq.n	8006ce4 <HAL_DMA_Abort_IT+0x17c>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a2e      	ldr	r2, [pc, #184]	; (8006d0c <HAL_DMA_Abort_IT+0x1a4>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d045      	beq.n	8006ce4 <HAL_DMA_Abort_IT+0x17c>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a2c      	ldr	r2, [pc, #176]	; (8006d10 <HAL_DMA_Abort_IT+0x1a8>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d040      	beq.n	8006ce4 <HAL_DMA_Abort_IT+0x17c>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a2b      	ldr	r2, [pc, #172]	; (8006d14 <HAL_DMA_Abort_IT+0x1ac>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d03b      	beq.n	8006ce4 <HAL_DMA_Abort_IT+0x17c>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a29      	ldr	r2, [pc, #164]	; (8006d18 <HAL_DMA_Abort_IT+0x1b0>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d036      	beq.n	8006ce4 <HAL_DMA_Abort_IT+0x17c>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a28      	ldr	r2, [pc, #160]	; (8006d1c <HAL_DMA_Abort_IT+0x1b4>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d031      	beq.n	8006ce4 <HAL_DMA_Abort_IT+0x17c>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a26      	ldr	r2, [pc, #152]	; (8006d20 <HAL_DMA_Abort_IT+0x1b8>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d02c      	beq.n	8006ce4 <HAL_DMA_Abort_IT+0x17c>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a25      	ldr	r2, [pc, #148]	; (8006d24 <HAL_DMA_Abort_IT+0x1bc>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d027      	beq.n	8006ce4 <HAL_DMA_Abort_IT+0x17c>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a23      	ldr	r2, [pc, #140]	; (8006d28 <HAL_DMA_Abort_IT+0x1c0>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d022      	beq.n	8006ce4 <HAL_DMA_Abort_IT+0x17c>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a22      	ldr	r2, [pc, #136]	; (8006d2c <HAL_DMA_Abort_IT+0x1c4>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d01d      	beq.n	8006ce4 <HAL_DMA_Abort_IT+0x17c>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a20      	ldr	r2, [pc, #128]	; (8006d30 <HAL_DMA_Abort_IT+0x1c8>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d018      	beq.n	8006ce4 <HAL_DMA_Abort_IT+0x17c>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a1f      	ldr	r2, [pc, #124]	; (8006d34 <HAL_DMA_Abort_IT+0x1cc>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d013      	beq.n	8006ce4 <HAL_DMA_Abort_IT+0x17c>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a1d      	ldr	r2, [pc, #116]	; (8006d38 <HAL_DMA_Abort_IT+0x1d0>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d00e      	beq.n	8006ce4 <HAL_DMA_Abort_IT+0x17c>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a1c      	ldr	r2, [pc, #112]	; (8006d3c <HAL_DMA_Abort_IT+0x1d4>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d009      	beq.n	8006ce4 <HAL_DMA_Abort_IT+0x17c>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a1a      	ldr	r2, [pc, #104]	; (8006d40 <HAL_DMA_Abort_IT+0x1d8>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d004      	beq.n	8006ce4 <HAL_DMA_Abort_IT+0x17c>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a19      	ldr	r2, [pc, #100]	; (8006d44 <HAL_DMA_Abort_IT+0x1dc>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d108      	bne.n	8006cf6 <HAL_DMA_Abort_IT+0x18e>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f022 0201 	bic.w	r2, r2, #1
 8006cf2:	601a      	str	r2, [r3, #0]
 8006cf4:	e178      	b.n	8006fe8 <HAL_DMA_Abort_IT+0x480>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f022 0201 	bic.w	r2, r2, #1
 8006d04:	601a      	str	r2, [r3, #0]
 8006d06:	e16f      	b.n	8006fe8 <HAL_DMA_Abort_IT+0x480>
 8006d08:	40020010 	.word	0x40020010
 8006d0c:	40020028 	.word	0x40020028
 8006d10:	40020040 	.word	0x40020040
 8006d14:	40020058 	.word	0x40020058
 8006d18:	40020070 	.word	0x40020070
 8006d1c:	40020088 	.word	0x40020088
 8006d20:	400200a0 	.word	0x400200a0
 8006d24:	400200b8 	.word	0x400200b8
 8006d28:	40020410 	.word	0x40020410
 8006d2c:	40020428 	.word	0x40020428
 8006d30:	40020440 	.word	0x40020440
 8006d34:	40020458 	.word	0x40020458
 8006d38:	40020470 	.word	0x40020470
 8006d3c:	40020488 	.word	0x40020488
 8006d40:	400204a0 	.word	0x400204a0
 8006d44:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f022 020e 	bic.w	r2, r2, #14
 8006d56:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a6c      	ldr	r2, [pc, #432]	; (8006f10 <HAL_DMA_Abort_IT+0x3a8>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d04a      	beq.n	8006df8 <HAL_DMA_Abort_IT+0x290>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a6b      	ldr	r2, [pc, #428]	; (8006f14 <HAL_DMA_Abort_IT+0x3ac>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d045      	beq.n	8006df8 <HAL_DMA_Abort_IT+0x290>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a69      	ldr	r2, [pc, #420]	; (8006f18 <HAL_DMA_Abort_IT+0x3b0>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d040      	beq.n	8006df8 <HAL_DMA_Abort_IT+0x290>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a68      	ldr	r2, [pc, #416]	; (8006f1c <HAL_DMA_Abort_IT+0x3b4>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d03b      	beq.n	8006df8 <HAL_DMA_Abort_IT+0x290>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a66      	ldr	r2, [pc, #408]	; (8006f20 <HAL_DMA_Abort_IT+0x3b8>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d036      	beq.n	8006df8 <HAL_DMA_Abort_IT+0x290>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a65      	ldr	r2, [pc, #404]	; (8006f24 <HAL_DMA_Abort_IT+0x3bc>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d031      	beq.n	8006df8 <HAL_DMA_Abort_IT+0x290>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a63      	ldr	r2, [pc, #396]	; (8006f28 <HAL_DMA_Abort_IT+0x3c0>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d02c      	beq.n	8006df8 <HAL_DMA_Abort_IT+0x290>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a62      	ldr	r2, [pc, #392]	; (8006f2c <HAL_DMA_Abort_IT+0x3c4>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d027      	beq.n	8006df8 <HAL_DMA_Abort_IT+0x290>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a60      	ldr	r2, [pc, #384]	; (8006f30 <HAL_DMA_Abort_IT+0x3c8>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d022      	beq.n	8006df8 <HAL_DMA_Abort_IT+0x290>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a5f      	ldr	r2, [pc, #380]	; (8006f34 <HAL_DMA_Abort_IT+0x3cc>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d01d      	beq.n	8006df8 <HAL_DMA_Abort_IT+0x290>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a5d      	ldr	r2, [pc, #372]	; (8006f38 <HAL_DMA_Abort_IT+0x3d0>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d018      	beq.n	8006df8 <HAL_DMA_Abort_IT+0x290>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a5c      	ldr	r2, [pc, #368]	; (8006f3c <HAL_DMA_Abort_IT+0x3d4>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d013      	beq.n	8006df8 <HAL_DMA_Abort_IT+0x290>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a5a      	ldr	r2, [pc, #360]	; (8006f40 <HAL_DMA_Abort_IT+0x3d8>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d00e      	beq.n	8006df8 <HAL_DMA_Abort_IT+0x290>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a59      	ldr	r2, [pc, #356]	; (8006f44 <HAL_DMA_Abort_IT+0x3dc>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d009      	beq.n	8006df8 <HAL_DMA_Abort_IT+0x290>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a57      	ldr	r2, [pc, #348]	; (8006f48 <HAL_DMA_Abort_IT+0x3e0>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d004      	beq.n	8006df8 <HAL_DMA_Abort_IT+0x290>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a56      	ldr	r2, [pc, #344]	; (8006f4c <HAL_DMA_Abort_IT+0x3e4>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d108      	bne.n	8006e0a <HAL_DMA_Abort_IT+0x2a2>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f022 0201 	bic.w	r2, r2, #1
 8006e06:	601a      	str	r2, [r3, #0]
 8006e08:	e007      	b.n	8006e1a <HAL_DMA_Abort_IT+0x2b2>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f022 0201 	bic.w	r2, r2, #1
 8006e18:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a3c      	ldr	r2, [pc, #240]	; (8006f10 <HAL_DMA_Abort_IT+0x3a8>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d072      	beq.n	8006f0a <HAL_DMA_Abort_IT+0x3a2>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a3a      	ldr	r2, [pc, #232]	; (8006f14 <HAL_DMA_Abort_IT+0x3ac>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d06d      	beq.n	8006f0a <HAL_DMA_Abort_IT+0x3a2>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a39      	ldr	r2, [pc, #228]	; (8006f18 <HAL_DMA_Abort_IT+0x3b0>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d068      	beq.n	8006f0a <HAL_DMA_Abort_IT+0x3a2>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a37      	ldr	r2, [pc, #220]	; (8006f1c <HAL_DMA_Abort_IT+0x3b4>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d063      	beq.n	8006f0a <HAL_DMA_Abort_IT+0x3a2>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a36      	ldr	r2, [pc, #216]	; (8006f20 <HAL_DMA_Abort_IT+0x3b8>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d05e      	beq.n	8006f0a <HAL_DMA_Abort_IT+0x3a2>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a34      	ldr	r2, [pc, #208]	; (8006f24 <HAL_DMA_Abort_IT+0x3bc>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d059      	beq.n	8006f0a <HAL_DMA_Abort_IT+0x3a2>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a33      	ldr	r2, [pc, #204]	; (8006f28 <HAL_DMA_Abort_IT+0x3c0>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d054      	beq.n	8006f0a <HAL_DMA_Abort_IT+0x3a2>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a31      	ldr	r2, [pc, #196]	; (8006f2c <HAL_DMA_Abort_IT+0x3c4>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d04f      	beq.n	8006f0a <HAL_DMA_Abort_IT+0x3a2>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a30      	ldr	r2, [pc, #192]	; (8006f30 <HAL_DMA_Abort_IT+0x3c8>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d04a      	beq.n	8006f0a <HAL_DMA_Abort_IT+0x3a2>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a2e      	ldr	r2, [pc, #184]	; (8006f34 <HAL_DMA_Abort_IT+0x3cc>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d045      	beq.n	8006f0a <HAL_DMA_Abort_IT+0x3a2>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a2d      	ldr	r2, [pc, #180]	; (8006f38 <HAL_DMA_Abort_IT+0x3d0>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d040      	beq.n	8006f0a <HAL_DMA_Abort_IT+0x3a2>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a2b      	ldr	r2, [pc, #172]	; (8006f3c <HAL_DMA_Abort_IT+0x3d4>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d03b      	beq.n	8006f0a <HAL_DMA_Abort_IT+0x3a2>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a2a      	ldr	r2, [pc, #168]	; (8006f40 <HAL_DMA_Abort_IT+0x3d8>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d036      	beq.n	8006f0a <HAL_DMA_Abort_IT+0x3a2>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a28      	ldr	r2, [pc, #160]	; (8006f44 <HAL_DMA_Abort_IT+0x3dc>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d031      	beq.n	8006f0a <HAL_DMA_Abort_IT+0x3a2>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a27      	ldr	r2, [pc, #156]	; (8006f48 <HAL_DMA_Abort_IT+0x3e0>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d02c      	beq.n	8006f0a <HAL_DMA_Abort_IT+0x3a2>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a25      	ldr	r2, [pc, #148]	; (8006f4c <HAL_DMA_Abort_IT+0x3e4>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d027      	beq.n	8006f0a <HAL_DMA_Abort_IT+0x3a2>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a24      	ldr	r2, [pc, #144]	; (8006f50 <HAL_DMA_Abort_IT+0x3e8>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d022      	beq.n	8006f0a <HAL_DMA_Abort_IT+0x3a2>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a22      	ldr	r2, [pc, #136]	; (8006f54 <HAL_DMA_Abort_IT+0x3ec>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d01d      	beq.n	8006f0a <HAL_DMA_Abort_IT+0x3a2>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a21      	ldr	r2, [pc, #132]	; (8006f58 <HAL_DMA_Abort_IT+0x3f0>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d018      	beq.n	8006f0a <HAL_DMA_Abort_IT+0x3a2>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a1f      	ldr	r2, [pc, #124]	; (8006f5c <HAL_DMA_Abort_IT+0x3f4>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d013      	beq.n	8006f0a <HAL_DMA_Abort_IT+0x3a2>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a1e      	ldr	r2, [pc, #120]	; (8006f60 <HAL_DMA_Abort_IT+0x3f8>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d00e      	beq.n	8006f0a <HAL_DMA_Abort_IT+0x3a2>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a1c      	ldr	r2, [pc, #112]	; (8006f64 <HAL_DMA_Abort_IT+0x3fc>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d009      	beq.n	8006f0a <HAL_DMA_Abort_IT+0x3a2>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a1b      	ldr	r2, [pc, #108]	; (8006f68 <HAL_DMA_Abort_IT+0x400>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d004      	beq.n	8006f0a <HAL_DMA_Abort_IT+0x3a2>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a19      	ldr	r2, [pc, #100]	; (8006f6c <HAL_DMA_Abort_IT+0x404>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d132      	bne.n	8006f70 <HAL_DMA_Abort_IT+0x408>
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e031      	b.n	8006f72 <HAL_DMA_Abort_IT+0x40a>
 8006f0e:	bf00      	nop
 8006f10:	40020010 	.word	0x40020010
 8006f14:	40020028 	.word	0x40020028
 8006f18:	40020040 	.word	0x40020040
 8006f1c:	40020058 	.word	0x40020058
 8006f20:	40020070 	.word	0x40020070
 8006f24:	40020088 	.word	0x40020088
 8006f28:	400200a0 	.word	0x400200a0
 8006f2c:	400200b8 	.word	0x400200b8
 8006f30:	40020410 	.word	0x40020410
 8006f34:	40020428 	.word	0x40020428
 8006f38:	40020440 	.word	0x40020440
 8006f3c:	40020458 	.word	0x40020458
 8006f40:	40020470 	.word	0x40020470
 8006f44:	40020488 	.word	0x40020488
 8006f48:	400204a0 	.word	0x400204a0
 8006f4c:	400204b8 	.word	0x400204b8
 8006f50:	58025408 	.word	0x58025408
 8006f54:	5802541c 	.word	0x5802541c
 8006f58:	58025430 	.word	0x58025430
 8006f5c:	58025444 	.word	0x58025444
 8006f60:	58025458 	.word	0x58025458
 8006f64:	5802546c 	.word	0x5802546c
 8006f68:	58025480 	.word	0x58025480
 8006f6c:	58025494 	.word	0x58025494
 8006f70:	2300      	movs	r3, #0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d028      	beq.n	8006fc8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f84:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f8a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f90:	f003 031f 	and.w	r3, r3, #31
 8006f94:	2201      	movs	r2, #1
 8006f96:	409a      	lsls	r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006fa4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00c      	beq.n	8006fc8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fbc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006fc6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d003      	beq.n	8006fe8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop

08006ff4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b08a      	sub	sp, #40	; 0x28
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007000:	4b67      	ldr	r3, [pc, #412]	; (80071a0 <HAL_DMA_IRQHandler+0x1ac>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a67      	ldr	r2, [pc, #412]	; (80071a4 <HAL_DMA_IRQHandler+0x1b0>)
 8007006:	fba2 2303 	umull	r2, r3, r2, r3
 800700a:	0a9b      	lsrs	r3, r3, #10
 800700c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007012:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007018:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800701a:	6a3b      	ldr	r3, [r7, #32]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a5f      	ldr	r2, [pc, #380]	; (80071a8 <HAL_DMA_IRQHandler+0x1b4>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d04a      	beq.n	80070c6 <HAL_DMA_IRQHandler+0xd2>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a5d      	ldr	r2, [pc, #372]	; (80071ac <HAL_DMA_IRQHandler+0x1b8>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d045      	beq.n	80070c6 <HAL_DMA_IRQHandler+0xd2>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a5c      	ldr	r2, [pc, #368]	; (80071b0 <HAL_DMA_IRQHandler+0x1bc>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d040      	beq.n	80070c6 <HAL_DMA_IRQHandler+0xd2>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a5a      	ldr	r2, [pc, #360]	; (80071b4 <HAL_DMA_IRQHandler+0x1c0>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d03b      	beq.n	80070c6 <HAL_DMA_IRQHandler+0xd2>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a59      	ldr	r2, [pc, #356]	; (80071b8 <HAL_DMA_IRQHandler+0x1c4>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d036      	beq.n	80070c6 <HAL_DMA_IRQHandler+0xd2>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a57      	ldr	r2, [pc, #348]	; (80071bc <HAL_DMA_IRQHandler+0x1c8>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d031      	beq.n	80070c6 <HAL_DMA_IRQHandler+0xd2>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a56      	ldr	r2, [pc, #344]	; (80071c0 <HAL_DMA_IRQHandler+0x1cc>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d02c      	beq.n	80070c6 <HAL_DMA_IRQHandler+0xd2>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a54      	ldr	r2, [pc, #336]	; (80071c4 <HAL_DMA_IRQHandler+0x1d0>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d027      	beq.n	80070c6 <HAL_DMA_IRQHandler+0xd2>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a53      	ldr	r2, [pc, #332]	; (80071c8 <HAL_DMA_IRQHandler+0x1d4>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d022      	beq.n	80070c6 <HAL_DMA_IRQHandler+0xd2>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a51      	ldr	r2, [pc, #324]	; (80071cc <HAL_DMA_IRQHandler+0x1d8>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d01d      	beq.n	80070c6 <HAL_DMA_IRQHandler+0xd2>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a50      	ldr	r2, [pc, #320]	; (80071d0 <HAL_DMA_IRQHandler+0x1dc>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d018      	beq.n	80070c6 <HAL_DMA_IRQHandler+0xd2>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a4e      	ldr	r2, [pc, #312]	; (80071d4 <HAL_DMA_IRQHandler+0x1e0>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d013      	beq.n	80070c6 <HAL_DMA_IRQHandler+0xd2>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a4d      	ldr	r2, [pc, #308]	; (80071d8 <HAL_DMA_IRQHandler+0x1e4>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d00e      	beq.n	80070c6 <HAL_DMA_IRQHandler+0xd2>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a4b      	ldr	r2, [pc, #300]	; (80071dc <HAL_DMA_IRQHandler+0x1e8>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d009      	beq.n	80070c6 <HAL_DMA_IRQHandler+0xd2>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a4a      	ldr	r2, [pc, #296]	; (80071e0 <HAL_DMA_IRQHandler+0x1ec>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d004      	beq.n	80070c6 <HAL_DMA_IRQHandler+0xd2>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a48      	ldr	r2, [pc, #288]	; (80071e4 <HAL_DMA_IRQHandler+0x1f0>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d101      	bne.n	80070ca <HAL_DMA_IRQHandler+0xd6>
 80070c6:	2301      	movs	r3, #1
 80070c8:	e000      	b.n	80070cc <HAL_DMA_IRQHandler+0xd8>
 80070ca:	2300      	movs	r3, #0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 842b 	beq.w	8007928 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070d6:	f003 031f 	and.w	r3, r3, #31
 80070da:	2208      	movs	r2, #8
 80070dc:	409a      	lsls	r2, r3
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	4013      	ands	r3, r2
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f000 80a2 	beq.w	800722c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a2e      	ldr	r2, [pc, #184]	; (80071a8 <HAL_DMA_IRQHandler+0x1b4>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d04a      	beq.n	8007188 <HAL_DMA_IRQHandler+0x194>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a2d      	ldr	r2, [pc, #180]	; (80071ac <HAL_DMA_IRQHandler+0x1b8>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d045      	beq.n	8007188 <HAL_DMA_IRQHandler+0x194>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a2b      	ldr	r2, [pc, #172]	; (80071b0 <HAL_DMA_IRQHandler+0x1bc>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d040      	beq.n	8007188 <HAL_DMA_IRQHandler+0x194>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a2a      	ldr	r2, [pc, #168]	; (80071b4 <HAL_DMA_IRQHandler+0x1c0>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d03b      	beq.n	8007188 <HAL_DMA_IRQHandler+0x194>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a28      	ldr	r2, [pc, #160]	; (80071b8 <HAL_DMA_IRQHandler+0x1c4>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d036      	beq.n	8007188 <HAL_DMA_IRQHandler+0x194>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a27      	ldr	r2, [pc, #156]	; (80071bc <HAL_DMA_IRQHandler+0x1c8>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d031      	beq.n	8007188 <HAL_DMA_IRQHandler+0x194>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a25      	ldr	r2, [pc, #148]	; (80071c0 <HAL_DMA_IRQHandler+0x1cc>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d02c      	beq.n	8007188 <HAL_DMA_IRQHandler+0x194>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a24      	ldr	r2, [pc, #144]	; (80071c4 <HAL_DMA_IRQHandler+0x1d0>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d027      	beq.n	8007188 <HAL_DMA_IRQHandler+0x194>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a22      	ldr	r2, [pc, #136]	; (80071c8 <HAL_DMA_IRQHandler+0x1d4>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d022      	beq.n	8007188 <HAL_DMA_IRQHandler+0x194>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a21      	ldr	r2, [pc, #132]	; (80071cc <HAL_DMA_IRQHandler+0x1d8>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d01d      	beq.n	8007188 <HAL_DMA_IRQHandler+0x194>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a1f      	ldr	r2, [pc, #124]	; (80071d0 <HAL_DMA_IRQHandler+0x1dc>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d018      	beq.n	8007188 <HAL_DMA_IRQHandler+0x194>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a1e      	ldr	r2, [pc, #120]	; (80071d4 <HAL_DMA_IRQHandler+0x1e0>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d013      	beq.n	8007188 <HAL_DMA_IRQHandler+0x194>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a1c      	ldr	r2, [pc, #112]	; (80071d8 <HAL_DMA_IRQHandler+0x1e4>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d00e      	beq.n	8007188 <HAL_DMA_IRQHandler+0x194>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a1b      	ldr	r2, [pc, #108]	; (80071dc <HAL_DMA_IRQHandler+0x1e8>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d009      	beq.n	8007188 <HAL_DMA_IRQHandler+0x194>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a19      	ldr	r2, [pc, #100]	; (80071e0 <HAL_DMA_IRQHandler+0x1ec>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d004      	beq.n	8007188 <HAL_DMA_IRQHandler+0x194>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a18      	ldr	r2, [pc, #96]	; (80071e4 <HAL_DMA_IRQHandler+0x1f0>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d12f      	bne.n	80071e8 <HAL_DMA_IRQHandler+0x1f4>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 0304 	and.w	r3, r3, #4
 8007192:	2b00      	cmp	r3, #0
 8007194:	bf14      	ite	ne
 8007196:	2301      	movne	r3, #1
 8007198:	2300      	moveq	r3, #0
 800719a:	b2db      	uxtb	r3, r3
 800719c:	e02e      	b.n	80071fc <HAL_DMA_IRQHandler+0x208>
 800719e:	bf00      	nop
 80071a0:	24000000 	.word	0x24000000
 80071a4:	1b4e81b5 	.word	0x1b4e81b5
 80071a8:	40020010 	.word	0x40020010
 80071ac:	40020028 	.word	0x40020028
 80071b0:	40020040 	.word	0x40020040
 80071b4:	40020058 	.word	0x40020058
 80071b8:	40020070 	.word	0x40020070
 80071bc:	40020088 	.word	0x40020088
 80071c0:	400200a0 	.word	0x400200a0
 80071c4:	400200b8 	.word	0x400200b8
 80071c8:	40020410 	.word	0x40020410
 80071cc:	40020428 	.word	0x40020428
 80071d0:	40020440 	.word	0x40020440
 80071d4:	40020458 	.word	0x40020458
 80071d8:	40020470 	.word	0x40020470
 80071dc:	40020488 	.word	0x40020488
 80071e0:	400204a0 	.word	0x400204a0
 80071e4:	400204b8 	.word	0x400204b8
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0308 	and.w	r3, r3, #8
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	bf14      	ite	ne
 80071f6:	2301      	movne	r3, #1
 80071f8:	2300      	moveq	r3, #0
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d015      	beq.n	800722c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f022 0204 	bic.w	r2, r2, #4
 800720e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007214:	f003 031f 	and.w	r3, r3, #31
 8007218:	2208      	movs	r2, #8
 800721a:	409a      	lsls	r2, r3
 800721c:	6a3b      	ldr	r3, [r7, #32]
 800721e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007224:	f043 0201 	orr.w	r2, r3, #1
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007230:	f003 031f 	and.w	r3, r3, #31
 8007234:	69ba      	ldr	r2, [r7, #24]
 8007236:	fa22 f303 	lsr.w	r3, r2, r3
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	2b00      	cmp	r3, #0
 8007240:	d06e      	beq.n	8007320 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a69      	ldr	r2, [pc, #420]	; (80073ec <HAL_DMA_IRQHandler+0x3f8>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d04a      	beq.n	80072e2 <HAL_DMA_IRQHandler+0x2ee>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a67      	ldr	r2, [pc, #412]	; (80073f0 <HAL_DMA_IRQHandler+0x3fc>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d045      	beq.n	80072e2 <HAL_DMA_IRQHandler+0x2ee>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a66      	ldr	r2, [pc, #408]	; (80073f4 <HAL_DMA_IRQHandler+0x400>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d040      	beq.n	80072e2 <HAL_DMA_IRQHandler+0x2ee>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a64      	ldr	r2, [pc, #400]	; (80073f8 <HAL_DMA_IRQHandler+0x404>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d03b      	beq.n	80072e2 <HAL_DMA_IRQHandler+0x2ee>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a63      	ldr	r2, [pc, #396]	; (80073fc <HAL_DMA_IRQHandler+0x408>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d036      	beq.n	80072e2 <HAL_DMA_IRQHandler+0x2ee>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a61      	ldr	r2, [pc, #388]	; (8007400 <HAL_DMA_IRQHandler+0x40c>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d031      	beq.n	80072e2 <HAL_DMA_IRQHandler+0x2ee>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a60      	ldr	r2, [pc, #384]	; (8007404 <HAL_DMA_IRQHandler+0x410>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d02c      	beq.n	80072e2 <HAL_DMA_IRQHandler+0x2ee>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a5e      	ldr	r2, [pc, #376]	; (8007408 <HAL_DMA_IRQHandler+0x414>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d027      	beq.n	80072e2 <HAL_DMA_IRQHandler+0x2ee>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a5d      	ldr	r2, [pc, #372]	; (800740c <HAL_DMA_IRQHandler+0x418>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d022      	beq.n	80072e2 <HAL_DMA_IRQHandler+0x2ee>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a5b      	ldr	r2, [pc, #364]	; (8007410 <HAL_DMA_IRQHandler+0x41c>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d01d      	beq.n	80072e2 <HAL_DMA_IRQHandler+0x2ee>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a5a      	ldr	r2, [pc, #360]	; (8007414 <HAL_DMA_IRQHandler+0x420>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d018      	beq.n	80072e2 <HAL_DMA_IRQHandler+0x2ee>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a58      	ldr	r2, [pc, #352]	; (8007418 <HAL_DMA_IRQHandler+0x424>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d013      	beq.n	80072e2 <HAL_DMA_IRQHandler+0x2ee>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a57      	ldr	r2, [pc, #348]	; (800741c <HAL_DMA_IRQHandler+0x428>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d00e      	beq.n	80072e2 <HAL_DMA_IRQHandler+0x2ee>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a55      	ldr	r2, [pc, #340]	; (8007420 <HAL_DMA_IRQHandler+0x42c>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d009      	beq.n	80072e2 <HAL_DMA_IRQHandler+0x2ee>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a54      	ldr	r2, [pc, #336]	; (8007424 <HAL_DMA_IRQHandler+0x430>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d004      	beq.n	80072e2 <HAL_DMA_IRQHandler+0x2ee>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a52      	ldr	r2, [pc, #328]	; (8007428 <HAL_DMA_IRQHandler+0x434>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d10a      	bne.n	80072f8 <HAL_DMA_IRQHandler+0x304>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	695b      	ldr	r3, [r3, #20]
 80072e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	bf14      	ite	ne
 80072f0:	2301      	movne	r3, #1
 80072f2:	2300      	moveq	r3, #0
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	e003      	b.n	8007300 <HAL_DMA_IRQHandler+0x30c>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2300      	movs	r3, #0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00d      	beq.n	8007320 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007308:	f003 031f 	and.w	r3, r3, #31
 800730c:	2201      	movs	r2, #1
 800730e:	409a      	lsls	r2, r3
 8007310:	6a3b      	ldr	r3, [r7, #32]
 8007312:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007318:	f043 0202 	orr.w	r2, r3, #2
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007324:	f003 031f 	and.w	r3, r3, #31
 8007328:	2204      	movs	r2, #4
 800732a:	409a      	lsls	r2, r3
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	4013      	ands	r3, r2
 8007330:	2b00      	cmp	r3, #0
 8007332:	f000 808f 	beq.w	8007454 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a2c      	ldr	r2, [pc, #176]	; (80073ec <HAL_DMA_IRQHandler+0x3f8>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d04a      	beq.n	80073d6 <HAL_DMA_IRQHandler+0x3e2>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a2a      	ldr	r2, [pc, #168]	; (80073f0 <HAL_DMA_IRQHandler+0x3fc>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d045      	beq.n	80073d6 <HAL_DMA_IRQHandler+0x3e2>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a29      	ldr	r2, [pc, #164]	; (80073f4 <HAL_DMA_IRQHandler+0x400>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d040      	beq.n	80073d6 <HAL_DMA_IRQHandler+0x3e2>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a27      	ldr	r2, [pc, #156]	; (80073f8 <HAL_DMA_IRQHandler+0x404>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d03b      	beq.n	80073d6 <HAL_DMA_IRQHandler+0x3e2>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a26      	ldr	r2, [pc, #152]	; (80073fc <HAL_DMA_IRQHandler+0x408>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d036      	beq.n	80073d6 <HAL_DMA_IRQHandler+0x3e2>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a24      	ldr	r2, [pc, #144]	; (8007400 <HAL_DMA_IRQHandler+0x40c>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d031      	beq.n	80073d6 <HAL_DMA_IRQHandler+0x3e2>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a23      	ldr	r2, [pc, #140]	; (8007404 <HAL_DMA_IRQHandler+0x410>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d02c      	beq.n	80073d6 <HAL_DMA_IRQHandler+0x3e2>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a21      	ldr	r2, [pc, #132]	; (8007408 <HAL_DMA_IRQHandler+0x414>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d027      	beq.n	80073d6 <HAL_DMA_IRQHandler+0x3e2>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a20      	ldr	r2, [pc, #128]	; (800740c <HAL_DMA_IRQHandler+0x418>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d022      	beq.n	80073d6 <HAL_DMA_IRQHandler+0x3e2>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a1e      	ldr	r2, [pc, #120]	; (8007410 <HAL_DMA_IRQHandler+0x41c>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d01d      	beq.n	80073d6 <HAL_DMA_IRQHandler+0x3e2>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a1d      	ldr	r2, [pc, #116]	; (8007414 <HAL_DMA_IRQHandler+0x420>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d018      	beq.n	80073d6 <HAL_DMA_IRQHandler+0x3e2>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a1b      	ldr	r2, [pc, #108]	; (8007418 <HAL_DMA_IRQHandler+0x424>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d013      	beq.n	80073d6 <HAL_DMA_IRQHandler+0x3e2>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a1a      	ldr	r2, [pc, #104]	; (800741c <HAL_DMA_IRQHandler+0x428>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d00e      	beq.n	80073d6 <HAL_DMA_IRQHandler+0x3e2>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a18      	ldr	r2, [pc, #96]	; (8007420 <HAL_DMA_IRQHandler+0x42c>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d009      	beq.n	80073d6 <HAL_DMA_IRQHandler+0x3e2>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a17      	ldr	r2, [pc, #92]	; (8007424 <HAL_DMA_IRQHandler+0x430>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d004      	beq.n	80073d6 <HAL_DMA_IRQHandler+0x3e2>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a15      	ldr	r2, [pc, #84]	; (8007428 <HAL_DMA_IRQHandler+0x434>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d12a      	bne.n	800742c <HAL_DMA_IRQHandler+0x438>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 0302 	and.w	r3, r3, #2
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	bf14      	ite	ne
 80073e4:	2301      	movne	r3, #1
 80073e6:	2300      	moveq	r3, #0
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	e023      	b.n	8007434 <HAL_DMA_IRQHandler+0x440>
 80073ec:	40020010 	.word	0x40020010
 80073f0:	40020028 	.word	0x40020028
 80073f4:	40020040 	.word	0x40020040
 80073f8:	40020058 	.word	0x40020058
 80073fc:	40020070 	.word	0x40020070
 8007400:	40020088 	.word	0x40020088
 8007404:	400200a0 	.word	0x400200a0
 8007408:	400200b8 	.word	0x400200b8
 800740c:	40020410 	.word	0x40020410
 8007410:	40020428 	.word	0x40020428
 8007414:	40020440 	.word	0x40020440
 8007418:	40020458 	.word	0x40020458
 800741c:	40020470 	.word	0x40020470
 8007420:	40020488 	.word	0x40020488
 8007424:	400204a0 	.word	0x400204a0
 8007428:	400204b8 	.word	0x400204b8
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2300      	movs	r3, #0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00d      	beq.n	8007454 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800743c:	f003 031f 	and.w	r3, r3, #31
 8007440:	2204      	movs	r2, #4
 8007442:	409a      	lsls	r2, r3
 8007444:	6a3b      	ldr	r3, [r7, #32]
 8007446:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800744c:	f043 0204 	orr.w	r2, r3, #4
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007458:	f003 031f 	and.w	r3, r3, #31
 800745c:	2210      	movs	r2, #16
 800745e:	409a      	lsls	r2, r3
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	4013      	ands	r3, r2
 8007464:	2b00      	cmp	r3, #0
 8007466:	f000 80a6 	beq.w	80075b6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a85      	ldr	r2, [pc, #532]	; (8007684 <HAL_DMA_IRQHandler+0x690>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d04a      	beq.n	800750a <HAL_DMA_IRQHandler+0x516>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a83      	ldr	r2, [pc, #524]	; (8007688 <HAL_DMA_IRQHandler+0x694>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d045      	beq.n	800750a <HAL_DMA_IRQHandler+0x516>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a82      	ldr	r2, [pc, #520]	; (800768c <HAL_DMA_IRQHandler+0x698>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d040      	beq.n	800750a <HAL_DMA_IRQHandler+0x516>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a80      	ldr	r2, [pc, #512]	; (8007690 <HAL_DMA_IRQHandler+0x69c>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d03b      	beq.n	800750a <HAL_DMA_IRQHandler+0x516>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a7f      	ldr	r2, [pc, #508]	; (8007694 <HAL_DMA_IRQHandler+0x6a0>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d036      	beq.n	800750a <HAL_DMA_IRQHandler+0x516>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a7d      	ldr	r2, [pc, #500]	; (8007698 <HAL_DMA_IRQHandler+0x6a4>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d031      	beq.n	800750a <HAL_DMA_IRQHandler+0x516>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a7c      	ldr	r2, [pc, #496]	; (800769c <HAL_DMA_IRQHandler+0x6a8>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d02c      	beq.n	800750a <HAL_DMA_IRQHandler+0x516>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a7a      	ldr	r2, [pc, #488]	; (80076a0 <HAL_DMA_IRQHandler+0x6ac>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d027      	beq.n	800750a <HAL_DMA_IRQHandler+0x516>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a79      	ldr	r2, [pc, #484]	; (80076a4 <HAL_DMA_IRQHandler+0x6b0>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d022      	beq.n	800750a <HAL_DMA_IRQHandler+0x516>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a77      	ldr	r2, [pc, #476]	; (80076a8 <HAL_DMA_IRQHandler+0x6b4>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d01d      	beq.n	800750a <HAL_DMA_IRQHandler+0x516>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a76      	ldr	r2, [pc, #472]	; (80076ac <HAL_DMA_IRQHandler+0x6b8>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d018      	beq.n	800750a <HAL_DMA_IRQHandler+0x516>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a74      	ldr	r2, [pc, #464]	; (80076b0 <HAL_DMA_IRQHandler+0x6bc>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d013      	beq.n	800750a <HAL_DMA_IRQHandler+0x516>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a73      	ldr	r2, [pc, #460]	; (80076b4 <HAL_DMA_IRQHandler+0x6c0>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d00e      	beq.n	800750a <HAL_DMA_IRQHandler+0x516>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a71      	ldr	r2, [pc, #452]	; (80076b8 <HAL_DMA_IRQHandler+0x6c4>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d009      	beq.n	800750a <HAL_DMA_IRQHandler+0x516>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a70      	ldr	r2, [pc, #448]	; (80076bc <HAL_DMA_IRQHandler+0x6c8>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d004      	beq.n	800750a <HAL_DMA_IRQHandler+0x516>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a6e      	ldr	r2, [pc, #440]	; (80076c0 <HAL_DMA_IRQHandler+0x6cc>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d10a      	bne.n	8007520 <HAL_DMA_IRQHandler+0x52c>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 0308 	and.w	r3, r3, #8
 8007514:	2b00      	cmp	r3, #0
 8007516:	bf14      	ite	ne
 8007518:	2301      	movne	r3, #1
 800751a:	2300      	moveq	r3, #0
 800751c:	b2db      	uxtb	r3, r3
 800751e:	e009      	b.n	8007534 <HAL_DMA_IRQHandler+0x540>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 0304 	and.w	r3, r3, #4
 800752a:	2b00      	cmp	r3, #0
 800752c:	bf14      	ite	ne
 800752e:	2301      	movne	r3, #1
 8007530:	2300      	moveq	r3, #0
 8007532:	b2db      	uxtb	r3, r3
 8007534:	2b00      	cmp	r3, #0
 8007536:	d03e      	beq.n	80075b6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800753c:	f003 031f 	and.w	r3, r3, #31
 8007540:	2210      	movs	r2, #16
 8007542:	409a      	lsls	r2, r3
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007552:	2b00      	cmp	r3, #0
 8007554:	d018      	beq.n	8007588 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007560:	2b00      	cmp	r3, #0
 8007562:	d108      	bne.n	8007576 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007568:	2b00      	cmp	r3, #0
 800756a:	d024      	beq.n	80075b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	4798      	blx	r3
 8007574:	e01f      	b.n	80075b6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800757a:	2b00      	cmp	r3, #0
 800757c:	d01b      	beq.n	80075b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	4798      	blx	r3
 8007586:	e016      	b.n	80075b6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007592:	2b00      	cmp	r3, #0
 8007594:	d107      	bne.n	80075a6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f022 0208 	bic.w	r2, r2, #8
 80075a4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d003      	beq.n	80075b6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ba:	f003 031f 	and.w	r3, r3, #31
 80075be:	2220      	movs	r2, #32
 80075c0:	409a      	lsls	r2, r3
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	4013      	ands	r3, r2
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	f000 8110 	beq.w	80077ec <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a2c      	ldr	r2, [pc, #176]	; (8007684 <HAL_DMA_IRQHandler+0x690>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d04a      	beq.n	800766c <HAL_DMA_IRQHandler+0x678>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a2b      	ldr	r2, [pc, #172]	; (8007688 <HAL_DMA_IRQHandler+0x694>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d045      	beq.n	800766c <HAL_DMA_IRQHandler+0x678>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a29      	ldr	r2, [pc, #164]	; (800768c <HAL_DMA_IRQHandler+0x698>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d040      	beq.n	800766c <HAL_DMA_IRQHandler+0x678>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a28      	ldr	r2, [pc, #160]	; (8007690 <HAL_DMA_IRQHandler+0x69c>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d03b      	beq.n	800766c <HAL_DMA_IRQHandler+0x678>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a26      	ldr	r2, [pc, #152]	; (8007694 <HAL_DMA_IRQHandler+0x6a0>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d036      	beq.n	800766c <HAL_DMA_IRQHandler+0x678>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a25      	ldr	r2, [pc, #148]	; (8007698 <HAL_DMA_IRQHandler+0x6a4>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d031      	beq.n	800766c <HAL_DMA_IRQHandler+0x678>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a23      	ldr	r2, [pc, #140]	; (800769c <HAL_DMA_IRQHandler+0x6a8>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d02c      	beq.n	800766c <HAL_DMA_IRQHandler+0x678>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a22      	ldr	r2, [pc, #136]	; (80076a0 <HAL_DMA_IRQHandler+0x6ac>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d027      	beq.n	800766c <HAL_DMA_IRQHandler+0x678>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a20      	ldr	r2, [pc, #128]	; (80076a4 <HAL_DMA_IRQHandler+0x6b0>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d022      	beq.n	800766c <HAL_DMA_IRQHandler+0x678>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a1f      	ldr	r2, [pc, #124]	; (80076a8 <HAL_DMA_IRQHandler+0x6b4>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d01d      	beq.n	800766c <HAL_DMA_IRQHandler+0x678>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a1d      	ldr	r2, [pc, #116]	; (80076ac <HAL_DMA_IRQHandler+0x6b8>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d018      	beq.n	800766c <HAL_DMA_IRQHandler+0x678>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a1c      	ldr	r2, [pc, #112]	; (80076b0 <HAL_DMA_IRQHandler+0x6bc>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d013      	beq.n	800766c <HAL_DMA_IRQHandler+0x678>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a1a      	ldr	r2, [pc, #104]	; (80076b4 <HAL_DMA_IRQHandler+0x6c0>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d00e      	beq.n	800766c <HAL_DMA_IRQHandler+0x678>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a19      	ldr	r2, [pc, #100]	; (80076b8 <HAL_DMA_IRQHandler+0x6c4>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d009      	beq.n	800766c <HAL_DMA_IRQHandler+0x678>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a17      	ldr	r2, [pc, #92]	; (80076bc <HAL_DMA_IRQHandler+0x6c8>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d004      	beq.n	800766c <HAL_DMA_IRQHandler+0x678>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a16      	ldr	r2, [pc, #88]	; (80076c0 <HAL_DMA_IRQHandler+0x6cc>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d12b      	bne.n	80076c4 <HAL_DMA_IRQHandler+0x6d0>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 0310 	and.w	r3, r3, #16
 8007676:	2b00      	cmp	r3, #0
 8007678:	bf14      	ite	ne
 800767a:	2301      	movne	r3, #1
 800767c:	2300      	moveq	r3, #0
 800767e:	b2db      	uxtb	r3, r3
 8007680:	e02a      	b.n	80076d8 <HAL_DMA_IRQHandler+0x6e4>
 8007682:	bf00      	nop
 8007684:	40020010 	.word	0x40020010
 8007688:	40020028 	.word	0x40020028
 800768c:	40020040 	.word	0x40020040
 8007690:	40020058 	.word	0x40020058
 8007694:	40020070 	.word	0x40020070
 8007698:	40020088 	.word	0x40020088
 800769c:	400200a0 	.word	0x400200a0
 80076a0:	400200b8 	.word	0x400200b8
 80076a4:	40020410 	.word	0x40020410
 80076a8:	40020428 	.word	0x40020428
 80076ac:	40020440 	.word	0x40020440
 80076b0:	40020458 	.word	0x40020458
 80076b4:	40020470 	.word	0x40020470
 80076b8:	40020488 	.word	0x40020488
 80076bc:	400204a0 	.word	0x400204a0
 80076c0:	400204b8 	.word	0x400204b8
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0302 	and.w	r3, r3, #2
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	bf14      	ite	ne
 80076d2:	2301      	movne	r3, #1
 80076d4:	2300      	moveq	r3, #0
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	2b00      	cmp	r3, #0
 80076da:	f000 8087 	beq.w	80077ec <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076e2:	f003 031f 	and.w	r3, r3, #31
 80076e6:	2220      	movs	r2, #32
 80076e8:	409a      	lsls	r2, r3
 80076ea:	6a3b      	ldr	r3, [r7, #32]
 80076ec:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	2b04      	cmp	r3, #4
 80076f8:	d139      	bne.n	800776e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f022 0216 	bic.w	r2, r2, #22
 8007708:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	695a      	ldr	r2, [r3, #20]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007718:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771e:	2b00      	cmp	r3, #0
 8007720:	d103      	bne.n	800772a <HAL_DMA_IRQHandler+0x736>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007726:	2b00      	cmp	r3, #0
 8007728:	d007      	beq.n	800773a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f022 0208 	bic.w	r2, r2, #8
 8007738:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800773e:	f003 031f 	and.w	r3, r3, #31
 8007742:	223f      	movs	r2, #63	; 0x3f
 8007744:	409a      	lsls	r2, r3
 8007746:	6a3b      	ldr	r3, [r7, #32]
 8007748:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800775e:	2b00      	cmp	r3, #0
 8007760:	f000 834a 	beq.w	8007df8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	4798      	blx	r3
          }
          return;
 800776c:	e344      	b.n	8007df8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007778:	2b00      	cmp	r3, #0
 800777a:	d018      	beq.n	80077ae <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007786:	2b00      	cmp	r3, #0
 8007788:	d108      	bne.n	800779c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800778e:	2b00      	cmp	r3, #0
 8007790:	d02c      	beq.n	80077ec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	4798      	blx	r3
 800779a:	e027      	b.n	80077ec <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d023      	beq.n	80077ec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	4798      	blx	r3
 80077ac:	e01e      	b.n	80077ec <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10f      	bne.n	80077dc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f022 0210 	bic.w	r2, r2, #16
 80077ca:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d003      	beq.n	80077ec <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f000 8306 	beq.w	8007e02 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077fa:	f003 0301 	and.w	r3, r3, #1
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f000 8088 	beq.w	8007914 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2204      	movs	r2, #4
 8007808:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a7a      	ldr	r2, [pc, #488]	; (80079fc <HAL_DMA_IRQHandler+0xa08>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d04a      	beq.n	80078ac <HAL_DMA_IRQHandler+0x8b8>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a79      	ldr	r2, [pc, #484]	; (8007a00 <HAL_DMA_IRQHandler+0xa0c>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d045      	beq.n	80078ac <HAL_DMA_IRQHandler+0x8b8>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a77      	ldr	r2, [pc, #476]	; (8007a04 <HAL_DMA_IRQHandler+0xa10>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d040      	beq.n	80078ac <HAL_DMA_IRQHandler+0x8b8>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a76      	ldr	r2, [pc, #472]	; (8007a08 <HAL_DMA_IRQHandler+0xa14>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d03b      	beq.n	80078ac <HAL_DMA_IRQHandler+0x8b8>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a74      	ldr	r2, [pc, #464]	; (8007a0c <HAL_DMA_IRQHandler+0xa18>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d036      	beq.n	80078ac <HAL_DMA_IRQHandler+0x8b8>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a73      	ldr	r2, [pc, #460]	; (8007a10 <HAL_DMA_IRQHandler+0xa1c>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d031      	beq.n	80078ac <HAL_DMA_IRQHandler+0x8b8>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a71      	ldr	r2, [pc, #452]	; (8007a14 <HAL_DMA_IRQHandler+0xa20>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d02c      	beq.n	80078ac <HAL_DMA_IRQHandler+0x8b8>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a70      	ldr	r2, [pc, #448]	; (8007a18 <HAL_DMA_IRQHandler+0xa24>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d027      	beq.n	80078ac <HAL_DMA_IRQHandler+0x8b8>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a6e      	ldr	r2, [pc, #440]	; (8007a1c <HAL_DMA_IRQHandler+0xa28>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d022      	beq.n	80078ac <HAL_DMA_IRQHandler+0x8b8>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a6d      	ldr	r2, [pc, #436]	; (8007a20 <HAL_DMA_IRQHandler+0xa2c>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d01d      	beq.n	80078ac <HAL_DMA_IRQHandler+0x8b8>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a6b      	ldr	r2, [pc, #428]	; (8007a24 <HAL_DMA_IRQHandler+0xa30>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d018      	beq.n	80078ac <HAL_DMA_IRQHandler+0x8b8>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a6a      	ldr	r2, [pc, #424]	; (8007a28 <HAL_DMA_IRQHandler+0xa34>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d013      	beq.n	80078ac <HAL_DMA_IRQHandler+0x8b8>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a68      	ldr	r2, [pc, #416]	; (8007a2c <HAL_DMA_IRQHandler+0xa38>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d00e      	beq.n	80078ac <HAL_DMA_IRQHandler+0x8b8>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a67      	ldr	r2, [pc, #412]	; (8007a30 <HAL_DMA_IRQHandler+0xa3c>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d009      	beq.n	80078ac <HAL_DMA_IRQHandler+0x8b8>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a65      	ldr	r2, [pc, #404]	; (8007a34 <HAL_DMA_IRQHandler+0xa40>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d004      	beq.n	80078ac <HAL_DMA_IRQHandler+0x8b8>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a64      	ldr	r2, [pc, #400]	; (8007a38 <HAL_DMA_IRQHandler+0xa44>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d108      	bne.n	80078be <HAL_DMA_IRQHandler+0x8ca>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f022 0201 	bic.w	r2, r2, #1
 80078ba:	601a      	str	r2, [r3, #0]
 80078bc:	e007      	b.n	80078ce <HAL_DMA_IRQHandler+0x8da>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f022 0201 	bic.w	r2, r2, #1
 80078cc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	3301      	adds	r3, #1
 80078d2:	60fb      	str	r3, [r7, #12]
 80078d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d307      	bcc.n	80078ea <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 0301 	and.w	r3, r3, #1
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1f2      	bne.n	80078ce <HAL_DMA_IRQHandler+0x8da>
 80078e8:	e000      	b.n	80078ec <HAL_DMA_IRQHandler+0x8f8>
            break;
 80078ea:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 0301 	and.w	r3, r3, #1
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d004      	beq.n	8007904 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2203      	movs	r2, #3
 80078fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007902:	e003      	b.n	800790c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007918:	2b00      	cmp	r3, #0
 800791a:	f000 8272 	beq.w	8007e02 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	4798      	blx	r3
 8007926:	e26c      	b.n	8007e02 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a43      	ldr	r2, [pc, #268]	; (8007a3c <HAL_DMA_IRQHandler+0xa48>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d022      	beq.n	8007978 <HAL_DMA_IRQHandler+0x984>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a42      	ldr	r2, [pc, #264]	; (8007a40 <HAL_DMA_IRQHandler+0xa4c>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d01d      	beq.n	8007978 <HAL_DMA_IRQHandler+0x984>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a40      	ldr	r2, [pc, #256]	; (8007a44 <HAL_DMA_IRQHandler+0xa50>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d018      	beq.n	8007978 <HAL_DMA_IRQHandler+0x984>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a3f      	ldr	r2, [pc, #252]	; (8007a48 <HAL_DMA_IRQHandler+0xa54>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d013      	beq.n	8007978 <HAL_DMA_IRQHandler+0x984>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a3d      	ldr	r2, [pc, #244]	; (8007a4c <HAL_DMA_IRQHandler+0xa58>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d00e      	beq.n	8007978 <HAL_DMA_IRQHandler+0x984>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a3c      	ldr	r2, [pc, #240]	; (8007a50 <HAL_DMA_IRQHandler+0xa5c>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d009      	beq.n	8007978 <HAL_DMA_IRQHandler+0x984>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a3a      	ldr	r2, [pc, #232]	; (8007a54 <HAL_DMA_IRQHandler+0xa60>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d004      	beq.n	8007978 <HAL_DMA_IRQHandler+0x984>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a39      	ldr	r2, [pc, #228]	; (8007a58 <HAL_DMA_IRQHandler+0xa64>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d101      	bne.n	800797c <HAL_DMA_IRQHandler+0x988>
 8007978:	2301      	movs	r3, #1
 800797a:	e000      	b.n	800797e <HAL_DMA_IRQHandler+0x98a>
 800797c:	2300      	movs	r3, #0
 800797e:	2b00      	cmp	r3, #0
 8007980:	f000 823f 	beq.w	8007e02 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007990:	f003 031f 	and.w	r3, r3, #31
 8007994:	2204      	movs	r2, #4
 8007996:	409a      	lsls	r2, r3
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	4013      	ands	r3, r2
 800799c:	2b00      	cmp	r3, #0
 800799e:	f000 80cd 	beq.w	8007b3c <HAL_DMA_IRQHandler+0xb48>
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	f003 0304 	and.w	r3, r3, #4
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f000 80c7 	beq.w	8007b3c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079b2:	f003 031f 	and.w	r3, r3, #31
 80079b6:	2204      	movs	r2, #4
 80079b8:	409a      	lsls	r2, r3
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d049      	beq.n	8007a5c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d109      	bne.n	80079e6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 8210 	beq.w	8007dfc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079e4:	e20a      	b.n	8007dfc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f000 8206 	beq.w	8007dfc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079f8:	e200      	b.n	8007dfc <HAL_DMA_IRQHandler+0xe08>
 80079fa:	bf00      	nop
 80079fc:	40020010 	.word	0x40020010
 8007a00:	40020028 	.word	0x40020028
 8007a04:	40020040 	.word	0x40020040
 8007a08:	40020058 	.word	0x40020058
 8007a0c:	40020070 	.word	0x40020070
 8007a10:	40020088 	.word	0x40020088
 8007a14:	400200a0 	.word	0x400200a0
 8007a18:	400200b8 	.word	0x400200b8
 8007a1c:	40020410 	.word	0x40020410
 8007a20:	40020428 	.word	0x40020428
 8007a24:	40020440 	.word	0x40020440
 8007a28:	40020458 	.word	0x40020458
 8007a2c:	40020470 	.word	0x40020470
 8007a30:	40020488 	.word	0x40020488
 8007a34:	400204a0 	.word	0x400204a0
 8007a38:	400204b8 	.word	0x400204b8
 8007a3c:	58025408 	.word	0x58025408
 8007a40:	5802541c 	.word	0x5802541c
 8007a44:	58025430 	.word	0x58025430
 8007a48:	58025444 	.word	0x58025444
 8007a4c:	58025458 	.word	0x58025458
 8007a50:	5802546c 	.word	0x5802546c
 8007a54:	58025480 	.word	0x58025480
 8007a58:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	f003 0320 	and.w	r3, r3, #32
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d160      	bne.n	8007b28 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a7f      	ldr	r2, [pc, #508]	; (8007c68 <HAL_DMA_IRQHandler+0xc74>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d04a      	beq.n	8007b06 <HAL_DMA_IRQHandler+0xb12>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a7d      	ldr	r2, [pc, #500]	; (8007c6c <HAL_DMA_IRQHandler+0xc78>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d045      	beq.n	8007b06 <HAL_DMA_IRQHandler+0xb12>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a7c      	ldr	r2, [pc, #496]	; (8007c70 <HAL_DMA_IRQHandler+0xc7c>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d040      	beq.n	8007b06 <HAL_DMA_IRQHandler+0xb12>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a7a      	ldr	r2, [pc, #488]	; (8007c74 <HAL_DMA_IRQHandler+0xc80>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d03b      	beq.n	8007b06 <HAL_DMA_IRQHandler+0xb12>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a79      	ldr	r2, [pc, #484]	; (8007c78 <HAL_DMA_IRQHandler+0xc84>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d036      	beq.n	8007b06 <HAL_DMA_IRQHandler+0xb12>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a77      	ldr	r2, [pc, #476]	; (8007c7c <HAL_DMA_IRQHandler+0xc88>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d031      	beq.n	8007b06 <HAL_DMA_IRQHandler+0xb12>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a76      	ldr	r2, [pc, #472]	; (8007c80 <HAL_DMA_IRQHandler+0xc8c>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d02c      	beq.n	8007b06 <HAL_DMA_IRQHandler+0xb12>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a74      	ldr	r2, [pc, #464]	; (8007c84 <HAL_DMA_IRQHandler+0xc90>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d027      	beq.n	8007b06 <HAL_DMA_IRQHandler+0xb12>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a73      	ldr	r2, [pc, #460]	; (8007c88 <HAL_DMA_IRQHandler+0xc94>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d022      	beq.n	8007b06 <HAL_DMA_IRQHandler+0xb12>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a71      	ldr	r2, [pc, #452]	; (8007c8c <HAL_DMA_IRQHandler+0xc98>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d01d      	beq.n	8007b06 <HAL_DMA_IRQHandler+0xb12>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a70      	ldr	r2, [pc, #448]	; (8007c90 <HAL_DMA_IRQHandler+0xc9c>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d018      	beq.n	8007b06 <HAL_DMA_IRQHandler+0xb12>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a6e      	ldr	r2, [pc, #440]	; (8007c94 <HAL_DMA_IRQHandler+0xca0>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d013      	beq.n	8007b06 <HAL_DMA_IRQHandler+0xb12>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a6d      	ldr	r2, [pc, #436]	; (8007c98 <HAL_DMA_IRQHandler+0xca4>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d00e      	beq.n	8007b06 <HAL_DMA_IRQHandler+0xb12>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a6b      	ldr	r2, [pc, #428]	; (8007c9c <HAL_DMA_IRQHandler+0xca8>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d009      	beq.n	8007b06 <HAL_DMA_IRQHandler+0xb12>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a6a      	ldr	r2, [pc, #424]	; (8007ca0 <HAL_DMA_IRQHandler+0xcac>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d004      	beq.n	8007b06 <HAL_DMA_IRQHandler+0xb12>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a68      	ldr	r2, [pc, #416]	; (8007ca4 <HAL_DMA_IRQHandler+0xcb0>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d108      	bne.n	8007b18 <HAL_DMA_IRQHandler+0xb24>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f022 0208 	bic.w	r2, r2, #8
 8007b14:	601a      	str	r2, [r3, #0]
 8007b16:	e007      	b.n	8007b28 <HAL_DMA_IRQHandler+0xb34>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f022 0204 	bic.w	r2, r2, #4
 8007b26:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f000 8165 	beq.w	8007dfc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b3a:	e15f      	b.n	8007dfc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b40:	f003 031f 	and.w	r3, r3, #31
 8007b44:	2202      	movs	r2, #2
 8007b46:	409a      	lsls	r2, r3
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f000 80c5 	beq.w	8007cdc <HAL_DMA_IRQHandler+0xce8>
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	f003 0302 	and.w	r3, r3, #2
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 80bf 	beq.w	8007cdc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b62:	f003 031f 	and.w	r3, r3, #31
 8007b66:	2202      	movs	r2, #2
 8007b68:	409a      	lsls	r2, r3
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d018      	beq.n	8007baa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d109      	bne.n	8007b96 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f000 813a 	beq.w	8007e00 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b94:	e134      	b.n	8007e00 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	f000 8130 	beq.w	8007e00 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ba8:	e12a      	b.n	8007e00 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	f003 0320 	and.w	r3, r3, #32
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	f040 8089 	bne.w	8007cc8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a2b      	ldr	r2, [pc, #172]	; (8007c68 <HAL_DMA_IRQHandler+0xc74>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d04a      	beq.n	8007c56 <HAL_DMA_IRQHandler+0xc62>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a29      	ldr	r2, [pc, #164]	; (8007c6c <HAL_DMA_IRQHandler+0xc78>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d045      	beq.n	8007c56 <HAL_DMA_IRQHandler+0xc62>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a28      	ldr	r2, [pc, #160]	; (8007c70 <HAL_DMA_IRQHandler+0xc7c>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d040      	beq.n	8007c56 <HAL_DMA_IRQHandler+0xc62>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a26      	ldr	r2, [pc, #152]	; (8007c74 <HAL_DMA_IRQHandler+0xc80>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d03b      	beq.n	8007c56 <HAL_DMA_IRQHandler+0xc62>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a25      	ldr	r2, [pc, #148]	; (8007c78 <HAL_DMA_IRQHandler+0xc84>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d036      	beq.n	8007c56 <HAL_DMA_IRQHandler+0xc62>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a23      	ldr	r2, [pc, #140]	; (8007c7c <HAL_DMA_IRQHandler+0xc88>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d031      	beq.n	8007c56 <HAL_DMA_IRQHandler+0xc62>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a22      	ldr	r2, [pc, #136]	; (8007c80 <HAL_DMA_IRQHandler+0xc8c>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d02c      	beq.n	8007c56 <HAL_DMA_IRQHandler+0xc62>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a20      	ldr	r2, [pc, #128]	; (8007c84 <HAL_DMA_IRQHandler+0xc90>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d027      	beq.n	8007c56 <HAL_DMA_IRQHandler+0xc62>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a1f      	ldr	r2, [pc, #124]	; (8007c88 <HAL_DMA_IRQHandler+0xc94>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d022      	beq.n	8007c56 <HAL_DMA_IRQHandler+0xc62>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a1d      	ldr	r2, [pc, #116]	; (8007c8c <HAL_DMA_IRQHandler+0xc98>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d01d      	beq.n	8007c56 <HAL_DMA_IRQHandler+0xc62>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a1c      	ldr	r2, [pc, #112]	; (8007c90 <HAL_DMA_IRQHandler+0xc9c>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d018      	beq.n	8007c56 <HAL_DMA_IRQHandler+0xc62>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a1a      	ldr	r2, [pc, #104]	; (8007c94 <HAL_DMA_IRQHandler+0xca0>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d013      	beq.n	8007c56 <HAL_DMA_IRQHandler+0xc62>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a19      	ldr	r2, [pc, #100]	; (8007c98 <HAL_DMA_IRQHandler+0xca4>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d00e      	beq.n	8007c56 <HAL_DMA_IRQHandler+0xc62>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a17      	ldr	r2, [pc, #92]	; (8007c9c <HAL_DMA_IRQHandler+0xca8>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d009      	beq.n	8007c56 <HAL_DMA_IRQHandler+0xc62>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a16      	ldr	r2, [pc, #88]	; (8007ca0 <HAL_DMA_IRQHandler+0xcac>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d004      	beq.n	8007c56 <HAL_DMA_IRQHandler+0xc62>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a14      	ldr	r2, [pc, #80]	; (8007ca4 <HAL_DMA_IRQHandler+0xcb0>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d128      	bne.n	8007ca8 <HAL_DMA_IRQHandler+0xcb4>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f022 0214 	bic.w	r2, r2, #20
 8007c64:	601a      	str	r2, [r3, #0]
 8007c66:	e027      	b.n	8007cb8 <HAL_DMA_IRQHandler+0xcc4>
 8007c68:	40020010 	.word	0x40020010
 8007c6c:	40020028 	.word	0x40020028
 8007c70:	40020040 	.word	0x40020040
 8007c74:	40020058 	.word	0x40020058
 8007c78:	40020070 	.word	0x40020070
 8007c7c:	40020088 	.word	0x40020088
 8007c80:	400200a0 	.word	0x400200a0
 8007c84:	400200b8 	.word	0x400200b8
 8007c88:	40020410 	.word	0x40020410
 8007c8c:	40020428 	.word	0x40020428
 8007c90:	40020440 	.word	0x40020440
 8007c94:	40020458 	.word	0x40020458
 8007c98:	40020470 	.word	0x40020470
 8007c9c:	40020488 	.word	0x40020488
 8007ca0:	400204a0 	.word	0x400204a0
 8007ca4:	400204b8 	.word	0x400204b8
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f022 020a 	bic.w	r2, r2, #10
 8007cb6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f000 8097 	beq.w	8007e00 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007cda:	e091      	b.n	8007e00 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ce0:	f003 031f 	and.w	r3, r3, #31
 8007ce4:	2208      	movs	r2, #8
 8007ce6:	409a      	lsls	r2, r3
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	4013      	ands	r3, r2
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f000 8088 	beq.w	8007e02 <HAL_DMA_IRQHandler+0xe0e>
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	f003 0308 	and.w	r3, r3, #8
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f000 8082 	beq.w	8007e02 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a41      	ldr	r2, [pc, #260]	; (8007e08 <HAL_DMA_IRQHandler+0xe14>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d04a      	beq.n	8007d9e <HAL_DMA_IRQHandler+0xdaa>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a3f      	ldr	r2, [pc, #252]	; (8007e0c <HAL_DMA_IRQHandler+0xe18>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d045      	beq.n	8007d9e <HAL_DMA_IRQHandler+0xdaa>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a3e      	ldr	r2, [pc, #248]	; (8007e10 <HAL_DMA_IRQHandler+0xe1c>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d040      	beq.n	8007d9e <HAL_DMA_IRQHandler+0xdaa>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a3c      	ldr	r2, [pc, #240]	; (8007e14 <HAL_DMA_IRQHandler+0xe20>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d03b      	beq.n	8007d9e <HAL_DMA_IRQHandler+0xdaa>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a3b      	ldr	r2, [pc, #236]	; (8007e18 <HAL_DMA_IRQHandler+0xe24>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d036      	beq.n	8007d9e <HAL_DMA_IRQHandler+0xdaa>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a39      	ldr	r2, [pc, #228]	; (8007e1c <HAL_DMA_IRQHandler+0xe28>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d031      	beq.n	8007d9e <HAL_DMA_IRQHandler+0xdaa>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a38      	ldr	r2, [pc, #224]	; (8007e20 <HAL_DMA_IRQHandler+0xe2c>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d02c      	beq.n	8007d9e <HAL_DMA_IRQHandler+0xdaa>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a36      	ldr	r2, [pc, #216]	; (8007e24 <HAL_DMA_IRQHandler+0xe30>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d027      	beq.n	8007d9e <HAL_DMA_IRQHandler+0xdaa>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a35      	ldr	r2, [pc, #212]	; (8007e28 <HAL_DMA_IRQHandler+0xe34>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d022      	beq.n	8007d9e <HAL_DMA_IRQHandler+0xdaa>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a33      	ldr	r2, [pc, #204]	; (8007e2c <HAL_DMA_IRQHandler+0xe38>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d01d      	beq.n	8007d9e <HAL_DMA_IRQHandler+0xdaa>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a32      	ldr	r2, [pc, #200]	; (8007e30 <HAL_DMA_IRQHandler+0xe3c>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d018      	beq.n	8007d9e <HAL_DMA_IRQHandler+0xdaa>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a30      	ldr	r2, [pc, #192]	; (8007e34 <HAL_DMA_IRQHandler+0xe40>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d013      	beq.n	8007d9e <HAL_DMA_IRQHandler+0xdaa>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a2f      	ldr	r2, [pc, #188]	; (8007e38 <HAL_DMA_IRQHandler+0xe44>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d00e      	beq.n	8007d9e <HAL_DMA_IRQHandler+0xdaa>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a2d      	ldr	r2, [pc, #180]	; (8007e3c <HAL_DMA_IRQHandler+0xe48>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d009      	beq.n	8007d9e <HAL_DMA_IRQHandler+0xdaa>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a2c      	ldr	r2, [pc, #176]	; (8007e40 <HAL_DMA_IRQHandler+0xe4c>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d004      	beq.n	8007d9e <HAL_DMA_IRQHandler+0xdaa>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a2a      	ldr	r2, [pc, #168]	; (8007e44 <HAL_DMA_IRQHandler+0xe50>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d108      	bne.n	8007db0 <HAL_DMA_IRQHandler+0xdbc>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f022 021c 	bic.w	r2, r2, #28
 8007dac:	601a      	str	r2, [r3, #0]
 8007dae:	e007      	b.n	8007dc0 <HAL_DMA_IRQHandler+0xdcc>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f022 020e 	bic.w	r2, r2, #14
 8007dbe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dc4:	f003 031f 	and.w	r3, r3, #31
 8007dc8:	2201      	movs	r2, #1
 8007dca:	409a      	lsls	r2, r3
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d009      	beq.n	8007e02 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	4798      	blx	r3
 8007df6:	e004      	b.n	8007e02 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007df8:	bf00      	nop
 8007dfa:	e002      	b.n	8007e02 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007dfc:	bf00      	nop
 8007dfe:	e000      	b.n	8007e02 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e00:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007e02:	3728      	adds	r7, #40	; 0x28
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	40020010 	.word	0x40020010
 8007e0c:	40020028 	.word	0x40020028
 8007e10:	40020040 	.word	0x40020040
 8007e14:	40020058 	.word	0x40020058
 8007e18:	40020070 	.word	0x40020070
 8007e1c:	40020088 	.word	0x40020088
 8007e20:	400200a0 	.word	0x400200a0
 8007e24:	400200b8 	.word	0x400200b8
 8007e28:	40020410 	.word	0x40020410
 8007e2c:	40020428 	.word	0x40020428
 8007e30:	40020440 	.word	0x40020440
 8007e34:	40020458 	.word	0x40020458
 8007e38:	40020470 	.word	0x40020470
 8007e3c:	40020488 	.word	0x40020488
 8007e40:	400204a0 	.word	0x400204a0
 8007e44:	400204b8 	.word	0x400204b8

08007e48 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b087      	sub	sp, #28
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	607a      	str	r2, [r7, #4]
 8007e54:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e5a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e60:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a7f      	ldr	r2, [pc, #508]	; (8008064 <DMA_SetConfig+0x21c>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d072      	beq.n	8007f52 <DMA_SetConfig+0x10a>
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a7d      	ldr	r2, [pc, #500]	; (8008068 <DMA_SetConfig+0x220>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d06d      	beq.n	8007f52 <DMA_SetConfig+0x10a>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a7c      	ldr	r2, [pc, #496]	; (800806c <DMA_SetConfig+0x224>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d068      	beq.n	8007f52 <DMA_SetConfig+0x10a>
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a7a      	ldr	r2, [pc, #488]	; (8008070 <DMA_SetConfig+0x228>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d063      	beq.n	8007f52 <DMA_SetConfig+0x10a>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a79      	ldr	r2, [pc, #484]	; (8008074 <DMA_SetConfig+0x22c>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d05e      	beq.n	8007f52 <DMA_SetConfig+0x10a>
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a77      	ldr	r2, [pc, #476]	; (8008078 <DMA_SetConfig+0x230>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d059      	beq.n	8007f52 <DMA_SetConfig+0x10a>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a76      	ldr	r2, [pc, #472]	; (800807c <DMA_SetConfig+0x234>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d054      	beq.n	8007f52 <DMA_SetConfig+0x10a>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a74      	ldr	r2, [pc, #464]	; (8008080 <DMA_SetConfig+0x238>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d04f      	beq.n	8007f52 <DMA_SetConfig+0x10a>
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a73      	ldr	r2, [pc, #460]	; (8008084 <DMA_SetConfig+0x23c>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d04a      	beq.n	8007f52 <DMA_SetConfig+0x10a>
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a71      	ldr	r2, [pc, #452]	; (8008088 <DMA_SetConfig+0x240>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d045      	beq.n	8007f52 <DMA_SetConfig+0x10a>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a70      	ldr	r2, [pc, #448]	; (800808c <DMA_SetConfig+0x244>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d040      	beq.n	8007f52 <DMA_SetConfig+0x10a>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a6e      	ldr	r2, [pc, #440]	; (8008090 <DMA_SetConfig+0x248>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d03b      	beq.n	8007f52 <DMA_SetConfig+0x10a>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a6d      	ldr	r2, [pc, #436]	; (8008094 <DMA_SetConfig+0x24c>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d036      	beq.n	8007f52 <DMA_SetConfig+0x10a>
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a6b      	ldr	r2, [pc, #428]	; (8008098 <DMA_SetConfig+0x250>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d031      	beq.n	8007f52 <DMA_SetConfig+0x10a>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a6a      	ldr	r2, [pc, #424]	; (800809c <DMA_SetConfig+0x254>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d02c      	beq.n	8007f52 <DMA_SetConfig+0x10a>
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a68      	ldr	r2, [pc, #416]	; (80080a0 <DMA_SetConfig+0x258>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d027      	beq.n	8007f52 <DMA_SetConfig+0x10a>
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a67      	ldr	r2, [pc, #412]	; (80080a4 <DMA_SetConfig+0x25c>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d022      	beq.n	8007f52 <DMA_SetConfig+0x10a>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a65      	ldr	r2, [pc, #404]	; (80080a8 <DMA_SetConfig+0x260>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d01d      	beq.n	8007f52 <DMA_SetConfig+0x10a>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a64      	ldr	r2, [pc, #400]	; (80080ac <DMA_SetConfig+0x264>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d018      	beq.n	8007f52 <DMA_SetConfig+0x10a>
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a62      	ldr	r2, [pc, #392]	; (80080b0 <DMA_SetConfig+0x268>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d013      	beq.n	8007f52 <DMA_SetConfig+0x10a>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a61      	ldr	r2, [pc, #388]	; (80080b4 <DMA_SetConfig+0x26c>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d00e      	beq.n	8007f52 <DMA_SetConfig+0x10a>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a5f      	ldr	r2, [pc, #380]	; (80080b8 <DMA_SetConfig+0x270>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d009      	beq.n	8007f52 <DMA_SetConfig+0x10a>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a5e      	ldr	r2, [pc, #376]	; (80080bc <DMA_SetConfig+0x274>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d004      	beq.n	8007f52 <DMA_SetConfig+0x10a>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a5c      	ldr	r2, [pc, #368]	; (80080c0 <DMA_SetConfig+0x278>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d101      	bne.n	8007f56 <DMA_SetConfig+0x10e>
 8007f52:	2301      	movs	r3, #1
 8007f54:	e000      	b.n	8007f58 <DMA_SetConfig+0x110>
 8007f56:	2300      	movs	r3, #0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00d      	beq.n	8007f78 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007f64:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d004      	beq.n	8007f78 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007f76:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a39      	ldr	r2, [pc, #228]	; (8008064 <DMA_SetConfig+0x21c>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d04a      	beq.n	8008018 <DMA_SetConfig+0x1d0>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a38      	ldr	r2, [pc, #224]	; (8008068 <DMA_SetConfig+0x220>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d045      	beq.n	8008018 <DMA_SetConfig+0x1d0>
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a36      	ldr	r2, [pc, #216]	; (800806c <DMA_SetConfig+0x224>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d040      	beq.n	8008018 <DMA_SetConfig+0x1d0>
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a35      	ldr	r2, [pc, #212]	; (8008070 <DMA_SetConfig+0x228>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d03b      	beq.n	8008018 <DMA_SetConfig+0x1d0>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a33      	ldr	r2, [pc, #204]	; (8008074 <DMA_SetConfig+0x22c>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d036      	beq.n	8008018 <DMA_SetConfig+0x1d0>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a32      	ldr	r2, [pc, #200]	; (8008078 <DMA_SetConfig+0x230>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d031      	beq.n	8008018 <DMA_SetConfig+0x1d0>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a30      	ldr	r2, [pc, #192]	; (800807c <DMA_SetConfig+0x234>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d02c      	beq.n	8008018 <DMA_SetConfig+0x1d0>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a2f      	ldr	r2, [pc, #188]	; (8008080 <DMA_SetConfig+0x238>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d027      	beq.n	8008018 <DMA_SetConfig+0x1d0>
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a2d      	ldr	r2, [pc, #180]	; (8008084 <DMA_SetConfig+0x23c>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d022      	beq.n	8008018 <DMA_SetConfig+0x1d0>
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a2c      	ldr	r2, [pc, #176]	; (8008088 <DMA_SetConfig+0x240>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d01d      	beq.n	8008018 <DMA_SetConfig+0x1d0>
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a2a      	ldr	r2, [pc, #168]	; (800808c <DMA_SetConfig+0x244>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d018      	beq.n	8008018 <DMA_SetConfig+0x1d0>
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a29      	ldr	r2, [pc, #164]	; (8008090 <DMA_SetConfig+0x248>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d013      	beq.n	8008018 <DMA_SetConfig+0x1d0>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a27      	ldr	r2, [pc, #156]	; (8008094 <DMA_SetConfig+0x24c>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d00e      	beq.n	8008018 <DMA_SetConfig+0x1d0>
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a26      	ldr	r2, [pc, #152]	; (8008098 <DMA_SetConfig+0x250>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d009      	beq.n	8008018 <DMA_SetConfig+0x1d0>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a24      	ldr	r2, [pc, #144]	; (800809c <DMA_SetConfig+0x254>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d004      	beq.n	8008018 <DMA_SetConfig+0x1d0>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a23      	ldr	r2, [pc, #140]	; (80080a0 <DMA_SetConfig+0x258>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d101      	bne.n	800801c <DMA_SetConfig+0x1d4>
 8008018:	2301      	movs	r3, #1
 800801a:	e000      	b.n	800801e <DMA_SetConfig+0x1d6>
 800801c:	2300      	movs	r3, #0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d059      	beq.n	80080d6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008026:	f003 031f 	and.w	r3, r3, #31
 800802a:	223f      	movs	r2, #63	; 0x3f
 800802c:	409a      	lsls	r2, r3
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008040:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	683a      	ldr	r2, [r7, #0]
 8008048:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	2b40      	cmp	r3, #64	; 0x40
 8008050:	d138      	bne.n	80080c4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68ba      	ldr	r2, [r7, #8]
 8008060:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008062:	e086      	b.n	8008172 <DMA_SetConfig+0x32a>
 8008064:	40020010 	.word	0x40020010
 8008068:	40020028 	.word	0x40020028
 800806c:	40020040 	.word	0x40020040
 8008070:	40020058 	.word	0x40020058
 8008074:	40020070 	.word	0x40020070
 8008078:	40020088 	.word	0x40020088
 800807c:	400200a0 	.word	0x400200a0
 8008080:	400200b8 	.word	0x400200b8
 8008084:	40020410 	.word	0x40020410
 8008088:	40020428 	.word	0x40020428
 800808c:	40020440 	.word	0x40020440
 8008090:	40020458 	.word	0x40020458
 8008094:	40020470 	.word	0x40020470
 8008098:	40020488 	.word	0x40020488
 800809c:	400204a0 	.word	0x400204a0
 80080a0:	400204b8 	.word	0x400204b8
 80080a4:	58025408 	.word	0x58025408
 80080a8:	5802541c 	.word	0x5802541c
 80080ac:	58025430 	.word	0x58025430
 80080b0:	58025444 	.word	0x58025444
 80080b4:	58025458 	.word	0x58025458
 80080b8:	5802546c 	.word	0x5802546c
 80080bc:	58025480 	.word	0x58025480
 80080c0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	60da      	str	r2, [r3, #12]
}
 80080d4:	e04d      	b.n	8008172 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a29      	ldr	r2, [pc, #164]	; (8008180 <DMA_SetConfig+0x338>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d022      	beq.n	8008126 <DMA_SetConfig+0x2de>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a27      	ldr	r2, [pc, #156]	; (8008184 <DMA_SetConfig+0x33c>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d01d      	beq.n	8008126 <DMA_SetConfig+0x2de>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a26      	ldr	r2, [pc, #152]	; (8008188 <DMA_SetConfig+0x340>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d018      	beq.n	8008126 <DMA_SetConfig+0x2de>
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a24      	ldr	r2, [pc, #144]	; (800818c <DMA_SetConfig+0x344>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d013      	beq.n	8008126 <DMA_SetConfig+0x2de>
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a23      	ldr	r2, [pc, #140]	; (8008190 <DMA_SetConfig+0x348>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d00e      	beq.n	8008126 <DMA_SetConfig+0x2de>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a21      	ldr	r2, [pc, #132]	; (8008194 <DMA_SetConfig+0x34c>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d009      	beq.n	8008126 <DMA_SetConfig+0x2de>
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a20      	ldr	r2, [pc, #128]	; (8008198 <DMA_SetConfig+0x350>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d004      	beq.n	8008126 <DMA_SetConfig+0x2de>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a1e      	ldr	r2, [pc, #120]	; (800819c <DMA_SetConfig+0x354>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d101      	bne.n	800812a <DMA_SetConfig+0x2e2>
 8008126:	2301      	movs	r3, #1
 8008128:	e000      	b.n	800812c <DMA_SetConfig+0x2e4>
 800812a:	2300      	movs	r3, #0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d020      	beq.n	8008172 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008134:	f003 031f 	and.w	r3, r3, #31
 8008138:	2201      	movs	r2, #1
 800813a:	409a      	lsls	r2, r3
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	683a      	ldr	r2, [r7, #0]
 8008146:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	2b40      	cmp	r3, #64	; 0x40
 800814e:	d108      	bne.n	8008162 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	60da      	str	r2, [r3, #12]
}
 8008160:	e007      	b.n	8008172 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	60da      	str	r2, [r3, #12]
}
 8008172:	bf00      	nop
 8008174:	371c      	adds	r7, #28
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	58025408 	.word	0x58025408
 8008184:	5802541c 	.word	0x5802541c
 8008188:	58025430 	.word	0x58025430
 800818c:	58025444 	.word	0x58025444
 8008190:	58025458 	.word	0x58025458
 8008194:	5802546c 	.word	0x5802546c
 8008198:	58025480 	.word	0x58025480
 800819c:	58025494 	.word	0x58025494

080081a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a42      	ldr	r2, [pc, #264]	; (80082b8 <DMA_CalcBaseAndBitshift+0x118>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d04a      	beq.n	8008248 <DMA_CalcBaseAndBitshift+0xa8>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a41      	ldr	r2, [pc, #260]	; (80082bc <DMA_CalcBaseAndBitshift+0x11c>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d045      	beq.n	8008248 <DMA_CalcBaseAndBitshift+0xa8>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a3f      	ldr	r2, [pc, #252]	; (80082c0 <DMA_CalcBaseAndBitshift+0x120>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d040      	beq.n	8008248 <DMA_CalcBaseAndBitshift+0xa8>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a3e      	ldr	r2, [pc, #248]	; (80082c4 <DMA_CalcBaseAndBitshift+0x124>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d03b      	beq.n	8008248 <DMA_CalcBaseAndBitshift+0xa8>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a3c      	ldr	r2, [pc, #240]	; (80082c8 <DMA_CalcBaseAndBitshift+0x128>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d036      	beq.n	8008248 <DMA_CalcBaseAndBitshift+0xa8>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a3b      	ldr	r2, [pc, #236]	; (80082cc <DMA_CalcBaseAndBitshift+0x12c>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d031      	beq.n	8008248 <DMA_CalcBaseAndBitshift+0xa8>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a39      	ldr	r2, [pc, #228]	; (80082d0 <DMA_CalcBaseAndBitshift+0x130>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d02c      	beq.n	8008248 <DMA_CalcBaseAndBitshift+0xa8>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a38      	ldr	r2, [pc, #224]	; (80082d4 <DMA_CalcBaseAndBitshift+0x134>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d027      	beq.n	8008248 <DMA_CalcBaseAndBitshift+0xa8>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a36      	ldr	r2, [pc, #216]	; (80082d8 <DMA_CalcBaseAndBitshift+0x138>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d022      	beq.n	8008248 <DMA_CalcBaseAndBitshift+0xa8>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a35      	ldr	r2, [pc, #212]	; (80082dc <DMA_CalcBaseAndBitshift+0x13c>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d01d      	beq.n	8008248 <DMA_CalcBaseAndBitshift+0xa8>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a33      	ldr	r2, [pc, #204]	; (80082e0 <DMA_CalcBaseAndBitshift+0x140>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d018      	beq.n	8008248 <DMA_CalcBaseAndBitshift+0xa8>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a32      	ldr	r2, [pc, #200]	; (80082e4 <DMA_CalcBaseAndBitshift+0x144>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d013      	beq.n	8008248 <DMA_CalcBaseAndBitshift+0xa8>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a30      	ldr	r2, [pc, #192]	; (80082e8 <DMA_CalcBaseAndBitshift+0x148>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d00e      	beq.n	8008248 <DMA_CalcBaseAndBitshift+0xa8>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a2f      	ldr	r2, [pc, #188]	; (80082ec <DMA_CalcBaseAndBitshift+0x14c>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d009      	beq.n	8008248 <DMA_CalcBaseAndBitshift+0xa8>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a2d      	ldr	r2, [pc, #180]	; (80082f0 <DMA_CalcBaseAndBitshift+0x150>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d004      	beq.n	8008248 <DMA_CalcBaseAndBitshift+0xa8>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a2c      	ldr	r2, [pc, #176]	; (80082f4 <DMA_CalcBaseAndBitshift+0x154>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d101      	bne.n	800824c <DMA_CalcBaseAndBitshift+0xac>
 8008248:	2301      	movs	r3, #1
 800824a:	e000      	b.n	800824e <DMA_CalcBaseAndBitshift+0xae>
 800824c:	2300      	movs	r3, #0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d024      	beq.n	800829c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	b2db      	uxtb	r3, r3
 8008258:	3b10      	subs	r3, #16
 800825a:	4a27      	ldr	r2, [pc, #156]	; (80082f8 <DMA_CalcBaseAndBitshift+0x158>)
 800825c:	fba2 2303 	umull	r2, r3, r2, r3
 8008260:	091b      	lsrs	r3, r3, #4
 8008262:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f003 0307 	and.w	r3, r3, #7
 800826a:	4a24      	ldr	r2, [pc, #144]	; (80082fc <DMA_CalcBaseAndBitshift+0x15c>)
 800826c:	5cd3      	ldrb	r3, [r2, r3]
 800826e:	461a      	mov	r2, r3
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2b03      	cmp	r3, #3
 8008278:	d908      	bls.n	800828c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	461a      	mov	r2, r3
 8008280:	4b1f      	ldr	r3, [pc, #124]	; (8008300 <DMA_CalcBaseAndBitshift+0x160>)
 8008282:	4013      	ands	r3, r2
 8008284:	1d1a      	adds	r2, r3, #4
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	659a      	str	r2, [r3, #88]	; 0x58
 800828a:	e00d      	b.n	80082a8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	461a      	mov	r2, r3
 8008292:	4b1b      	ldr	r3, [pc, #108]	; (8008300 <DMA_CalcBaseAndBitshift+0x160>)
 8008294:	4013      	ands	r3, r2
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	6593      	str	r3, [r2, #88]	; 0x58
 800829a:	e005      	b.n	80082a8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3714      	adds	r7, #20
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr
 80082b8:	40020010 	.word	0x40020010
 80082bc:	40020028 	.word	0x40020028
 80082c0:	40020040 	.word	0x40020040
 80082c4:	40020058 	.word	0x40020058
 80082c8:	40020070 	.word	0x40020070
 80082cc:	40020088 	.word	0x40020088
 80082d0:	400200a0 	.word	0x400200a0
 80082d4:	400200b8 	.word	0x400200b8
 80082d8:	40020410 	.word	0x40020410
 80082dc:	40020428 	.word	0x40020428
 80082e0:	40020440 	.word	0x40020440
 80082e4:	40020458 	.word	0x40020458
 80082e8:	40020470 	.word	0x40020470
 80082ec:	40020488 	.word	0x40020488
 80082f0:	400204a0 	.word	0x400204a0
 80082f4:	400204b8 	.word	0x400204b8
 80082f8:	aaaaaaab 	.word	0xaaaaaaab
 80082fc:	080156e4 	.word	0x080156e4
 8008300:	fffffc00 	.word	0xfffffc00

08008304 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800830c:	2300      	movs	r3, #0
 800830e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d120      	bne.n	800835a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800831c:	2b03      	cmp	r3, #3
 800831e:	d858      	bhi.n	80083d2 <DMA_CheckFifoParam+0xce>
 8008320:	a201      	add	r2, pc, #4	; (adr r2, 8008328 <DMA_CheckFifoParam+0x24>)
 8008322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008326:	bf00      	nop
 8008328:	08008339 	.word	0x08008339
 800832c:	0800834b 	.word	0x0800834b
 8008330:	08008339 	.word	0x08008339
 8008334:	080083d3 	.word	0x080083d3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008340:	2b00      	cmp	r3, #0
 8008342:	d048      	beq.n	80083d6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008348:	e045      	b.n	80083d6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800834e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008352:	d142      	bne.n	80083da <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008358:	e03f      	b.n	80083da <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008362:	d123      	bne.n	80083ac <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008368:	2b03      	cmp	r3, #3
 800836a:	d838      	bhi.n	80083de <DMA_CheckFifoParam+0xda>
 800836c:	a201      	add	r2, pc, #4	; (adr r2, 8008374 <DMA_CheckFifoParam+0x70>)
 800836e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008372:	bf00      	nop
 8008374:	08008385 	.word	0x08008385
 8008378:	0800838b 	.word	0x0800838b
 800837c:	08008385 	.word	0x08008385
 8008380:	0800839d 	.word	0x0800839d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	73fb      	strb	r3, [r7, #15]
        break;
 8008388:	e030      	b.n	80083ec <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008392:	2b00      	cmp	r3, #0
 8008394:	d025      	beq.n	80083e2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800839a:	e022      	b.n	80083e2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80083a4:	d11f      	bne.n	80083e6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80083aa:	e01c      	b.n	80083e6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b0:	2b02      	cmp	r3, #2
 80083b2:	d902      	bls.n	80083ba <DMA_CheckFifoParam+0xb6>
 80083b4:	2b03      	cmp	r3, #3
 80083b6:	d003      	beq.n	80083c0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80083b8:	e018      	b.n	80083ec <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	73fb      	strb	r3, [r7, #15]
        break;
 80083be:	e015      	b.n	80083ec <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d00e      	beq.n	80083ea <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	73fb      	strb	r3, [r7, #15]
    break;
 80083d0:	e00b      	b.n	80083ea <DMA_CheckFifoParam+0xe6>
        break;
 80083d2:	bf00      	nop
 80083d4:	e00a      	b.n	80083ec <DMA_CheckFifoParam+0xe8>
        break;
 80083d6:	bf00      	nop
 80083d8:	e008      	b.n	80083ec <DMA_CheckFifoParam+0xe8>
        break;
 80083da:	bf00      	nop
 80083dc:	e006      	b.n	80083ec <DMA_CheckFifoParam+0xe8>
        break;
 80083de:	bf00      	nop
 80083e0:	e004      	b.n	80083ec <DMA_CheckFifoParam+0xe8>
        break;
 80083e2:	bf00      	nop
 80083e4:	e002      	b.n	80083ec <DMA_CheckFifoParam+0xe8>
        break;
 80083e6:	bf00      	nop
 80083e8:	e000      	b.n	80083ec <DMA_CheckFifoParam+0xe8>
    break;
 80083ea:	bf00      	nop
    }
  }

  return status;
 80083ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3714      	adds	r7, #20
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop

080083fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b085      	sub	sp, #20
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a38      	ldr	r2, [pc, #224]	; (80084f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d022      	beq.n	800845a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a36      	ldr	r2, [pc, #216]	; (80084f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d01d      	beq.n	800845a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a35      	ldr	r2, [pc, #212]	; (80084f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d018      	beq.n	800845a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a33      	ldr	r2, [pc, #204]	; (80084fc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d013      	beq.n	800845a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a32      	ldr	r2, [pc, #200]	; (8008500 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d00e      	beq.n	800845a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a30      	ldr	r2, [pc, #192]	; (8008504 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d009      	beq.n	800845a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a2f      	ldr	r2, [pc, #188]	; (8008508 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d004      	beq.n	800845a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a2d      	ldr	r2, [pc, #180]	; (800850c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d101      	bne.n	800845e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800845a:	2301      	movs	r3, #1
 800845c:	e000      	b.n	8008460 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800845e:	2300      	movs	r3, #0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d01a      	beq.n	800849a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	b2db      	uxtb	r3, r3
 800846a:	3b08      	subs	r3, #8
 800846c:	4a28      	ldr	r2, [pc, #160]	; (8008510 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800846e:	fba2 2303 	umull	r2, r3, r2, r3
 8008472:	091b      	lsrs	r3, r3, #4
 8008474:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	4b26      	ldr	r3, [pc, #152]	; (8008514 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800847a:	4413      	add	r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	461a      	mov	r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a24      	ldr	r2, [pc, #144]	; (8008518 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008488:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f003 031f 	and.w	r3, r3, #31
 8008490:	2201      	movs	r2, #1
 8008492:	409a      	lsls	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008498:	e024      	b.n	80084e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	3b10      	subs	r3, #16
 80084a2:	4a1e      	ldr	r2, [pc, #120]	; (800851c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80084a4:	fba2 2303 	umull	r2, r3, r2, r3
 80084a8:	091b      	lsrs	r3, r3, #4
 80084aa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	4a1c      	ldr	r2, [pc, #112]	; (8008520 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d806      	bhi.n	80084c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	4a1b      	ldr	r2, [pc, #108]	; (8008524 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d902      	bls.n	80084c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	3308      	adds	r3, #8
 80084c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80084c2:	68fa      	ldr	r2, [r7, #12]
 80084c4:	4b18      	ldr	r3, [pc, #96]	; (8008528 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80084c6:	4413      	add	r3, r2
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	461a      	mov	r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	4a16      	ldr	r2, [pc, #88]	; (800852c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80084d4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f003 031f 	and.w	r3, r3, #31
 80084dc:	2201      	movs	r2, #1
 80084de:	409a      	lsls	r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80084e4:	bf00      	nop
 80084e6:	3714      	adds	r7, #20
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr
 80084f0:	58025408 	.word	0x58025408
 80084f4:	5802541c 	.word	0x5802541c
 80084f8:	58025430 	.word	0x58025430
 80084fc:	58025444 	.word	0x58025444
 8008500:	58025458 	.word	0x58025458
 8008504:	5802546c 	.word	0x5802546c
 8008508:	58025480 	.word	0x58025480
 800850c:	58025494 	.word	0x58025494
 8008510:	cccccccd 	.word	0xcccccccd
 8008514:	16009600 	.word	0x16009600
 8008518:	58025880 	.word	0x58025880
 800851c:	aaaaaaab 	.word	0xaaaaaaab
 8008520:	400204b8 	.word	0x400204b8
 8008524:	4002040f 	.word	0x4002040f
 8008528:	10008200 	.word	0x10008200
 800852c:	40020880 	.word	0x40020880

08008530 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	b2db      	uxtb	r3, r3
 800853e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d04a      	beq.n	80085dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2b08      	cmp	r3, #8
 800854a:	d847      	bhi.n	80085dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a25      	ldr	r2, [pc, #148]	; (80085e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d022      	beq.n	800859c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a24      	ldr	r2, [pc, #144]	; (80085ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d01d      	beq.n	800859c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a22      	ldr	r2, [pc, #136]	; (80085f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d018      	beq.n	800859c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a21      	ldr	r2, [pc, #132]	; (80085f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d013      	beq.n	800859c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a1f      	ldr	r2, [pc, #124]	; (80085f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d00e      	beq.n	800859c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a1e      	ldr	r2, [pc, #120]	; (80085fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d009      	beq.n	800859c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a1c      	ldr	r2, [pc, #112]	; (8008600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d004      	beq.n	800859c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a1b      	ldr	r2, [pc, #108]	; (8008604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d101      	bne.n	80085a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800859c:	2301      	movs	r3, #1
 800859e:	e000      	b.n	80085a2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80085a0:	2300      	movs	r3, #0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d00a      	beq.n	80085bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	4b17      	ldr	r3, [pc, #92]	; (8008608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80085aa:	4413      	add	r3, r2
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	461a      	mov	r2, r3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a15      	ldr	r2, [pc, #84]	; (800860c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80085b8:	671a      	str	r2, [r3, #112]	; 0x70
 80085ba:	e009      	b.n	80085d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	4b14      	ldr	r3, [pc, #80]	; (8008610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80085c0:	4413      	add	r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	461a      	mov	r2, r3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a11      	ldr	r2, [pc, #68]	; (8008614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80085ce:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	3b01      	subs	r3, #1
 80085d4:	2201      	movs	r2, #1
 80085d6:	409a      	lsls	r2, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80085dc:	bf00      	nop
 80085de:	3714      	adds	r7, #20
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr
 80085e8:	58025408 	.word	0x58025408
 80085ec:	5802541c 	.word	0x5802541c
 80085f0:	58025430 	.word	0x58025430
 80085f4:	58025444 	.word	0x58025444
 80085f8:	58025458 	.word	0x58025458
 80085fc:	5802546c 	.word	0x5802546c
 8008600:	58025480 	.word	0x58025480
 8008604:	58025494 	.word	0x58025494
 8008608:	1600963f 	.word	0x1600963f
 800860c:	58025940 	.word	0x58025940
 8008610:	1000823f 	.word	0x1000823f
 8008614:	40020940 	.word	0x40020940

08008618 <HAL_DTS_Init>:
  *         parameters in the DTS_InitTypeDef and initialize the associated handle.
  * @param  hdts  DTS handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DTS_Init(DTS_HandleTypeDef *hdts)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  /* Check the DTS handle allocation */
  if (hdts == NULL)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d101      	bne.n	800862a <HAL_DTS_Init+0x12>
  {
    return HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	e089      	b.n	800873e <HAL_DTS_Init+0x126>
  assert_param(IS_DTS_TRIGGERINPUT(hdts->Init.TriggerInput));
  assert_param(IS_DTS_SAMPLINGTIME(hdts->Init.SamplingTime));
  assert_param(IS_DTS_THRESHOLD(hdts->Init.HighThreshold));
  assert_param(IS_DTS_THRESHOLD(hdts->Init.LowThreshold));

  if (hdts->State == HAL_DTS_STATE_RESET)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008630:	b2db      	uxtb	r3, r3
 8008632:	2b00      	cmp	r3, #0
 8008634:	d102      	bne.n	800863c <HAL_DTS_Init+0x24>

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hdts->MspInitCallback(hdts);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_DTS_MspInit(hdts);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f7fa fbf6 	bl	8002e28 <HAL_DTS_MspInit>
#endif /* USE_HAL_DTS_REGISTER_CALLBACKS */
  }

  /* Change the DTS state */
  hdts->State = HAL_DTS_STATE_BUSY;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2202      	movs	r2, #2
 8008640:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check ramp coefficient */
  if (hdts->Instance->RAMPVALR == 0UL)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d101      	bne.n	8008652 <HAL_DTS_Init+0x3a>
  {
    return HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	e075      	b.n	800873e <HAL_DTS_Init+0x126>
  }

  /* Check factory calibration temperature  */
  if (hdts->Instance->T0VALR1 == 0UL)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d101      	bne.n	8008660 <HAL_DTS_Init+0x48>
  {
    return HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	e06e      	b.n	800873e <HAL_DTS_Init+0x126>
  }

  /* Check Quick Measure option is enabled or disabled */
  if (hdts->Init.QuickMeasure == DTS_QUICKMEAS_DISABLE)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d108      	bne.n	800867a <HAL_DTS_Init+0x62>
    if (hdts->Init.RefClock == DTS_REFCLKSEL_PCLK)
    {
      assert_param(IS_DTS_DIVIDER_RATIO_NUMBER(hdts->Init.Divider));
    }
    /* Quick measurement mode disabled */
    CLEAR_BIT(hdts->Instance->CFGR1, DTS_CFGR1_Q_MEAS_OPT);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8008676:	601a      	str	r2, [r3, #0]
 8008678:	e00e      	b.n	8008698 <HAL_DTS_Init+0x80>
  }
  else
  {
    /* DTS_QUICKMEAS_ENABLE shall be used only when the LSE clock is
       selected as reference clock */
    if (hdts->Init.RefClock != DTS_REFCLKSEL_LSE)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008682:	d001      	beq.n	8008688 <HAL_DTS_Init+0x70>
    {
      return HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	e05a      	b.n	800873e <HAL_DTS_Init+0x126>
    }

    /* Quick measurement mode enabled - no calibration needed */
    SET_BIT(hdts->Instance->CFGR1, DTS_CFGR1_Q_MEAS_OPT);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8008696:	601a      	str	r2, [r3, #0]
  }

  /* set the DTS clk source */
  if (hdts->Init.RefClock == DTS_REFCLKSEL_LSE)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086a0:	d108      	bne.n	80086b4 <HAL_DTS_Init+0x9c>
  {
    SET_BIT(hdts->Instance->CFGR1, DTS_CFGR1_REFCLK_SEL);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80086b0:	601a      	str	r2, [r3, #0]
 80086b2:	e007      	b.n	80086c4 <HAL_DTS_Init+0xac>
  }
  else
  {
    CLEAR_BIT(hdts->Instance->CFGR1, DTS_CFGR1_REFCLK_SEL);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80086c2:	601a      	str	r2, [r3, #0]
  }

  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_HSREF_CLK_DIV, (hdts->Init.Divider << DTS_CFGR1_HSREF_CLK_DIV_Pos));
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f023 41fe 	bic.w	r1, r3, #2130706432	; 0x7f000000
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	695b      	ldr	r3, [r3, #20]
 80086d2:	061a      	lsls	r2, r3, #24
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	430a      	orrs	r2, r1
 80086da:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_TS1_SMP_TIME, hdts->Init.SamplingTime);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	691a      	ldr	r2, [r3, #16]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	430a      	orrs	r2, r1
 80086f0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_TS1_INTRIG_SEL, hdts->Init.TriggerInput);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	68da      	ldr	r2, [r3, #12]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	430a      	orrs	r2, r1
 8008706:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->ITR1, DTS_ITR1_TS1_HITTHD, (hdts->Init.HighThreshold << DTS_ITR1_TS1_HITTHD_Pos));
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	695b      	ldr	r3, [r3, #20]
 800870e:	b299      	uxth	r1, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	699b      	ldr	r3, [r3, #24]
 8008714:	041a      	lsls	r2, r3, #16
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	430a      	orrs	r2, r1
 800871c:	615a      	str	r2, [r3, #20]
  MODIFY_REG(hdts->Instance->ITR1, DTS_ITR1_TS1_LITTHD, hdts->Init.LowThreshold);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	695a      	ldr	r2, [r3, #20]
 8008724:	4b08      	ldr	r3, [pc, #32]	; (8008748 <HAL_DTS_Init+0x130>)
 8008726:	4013      	ands	r3, r2
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	69d1      	ldr	r1, [r2, #28]
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	6812      	ldr	r2, [r2, #0]
 8008730:	430b      	orrs	r3, r1
 8008732:	6153      	str	r3, [r2, #20]

  /* Change the DTS state */
  hdts->State = HAL_DTS_STATE_READY;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3708      	adds	r7, #8
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	ffff0000 	.word	0xffff0000

0800874c <HAL_DTS_Start>:
  * @brief  Start the DTS sensor.
  * @param  hdts  DTS handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DTS_Start(DTS_HandleTypeDef *hdts)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  uint32_t Ref_Time;

  /* Check the DTS handle allocation */
  if (hdts == NULL)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d101      	bne.n	800875e <HAL_DTS_Start+0x12>
  {
    return HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	e03f      	b.n	80087de <HAL_DTS_Start+0x92>
  }

  if (hdts->State == HAL_DTS_STATE_READY)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008764:	b2db      	uxtb	r3, r3
 8008766:	2b01      	cmp	r3, #1
 8008768:	d138      	bne.n	80087dc <HAL_DTS_Start+0x90>
  {
    hdts->State = HAL_DTS_STATE_BUSY;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2202      	movs	r2, #2
 800876e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Enable DTS sensor */
    __HAL_DTS_ENABLE(hdts);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f042 0201 	orr.w	r2, r2, #1
 8008780:	601a      	str	r2, [r3, #0]

    /* Get Start Tick*/
    Ref_Time = HAL_GetTick();
 8008782:	f7fb f92d 	bl	80039e0 <HAL_GetTick>
 8008786:	60f8      	str	r0, [r7, #12]

    /* Wait till TS1_RDY flag is set */
    while (__HAL_DTS_GET_FLAG(hdts, DTS_FLAG_TS1_RDY) == RESET)
 8008788:	e008      	b.n	800879c <HAL_DTS_Start+0x50>
    {
      if ((HAL_GetTick() - Ref_Time) > DTS_DELAY_STARTUP)
 800878a:	f7fb f929 	bl	80039e0 <HAL_GetTick>
 800878e:	4602      	mov	r2, r0
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	2b01      	cmp	r3, #1
 8008796:	d901      	bls.n	800879c <HAL_DTS_Start+0x50>
      {
        return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e020      	b.n	80087de <HAL_DTS_Start+0x92>
    while (__HAL_DTS_GET_FLAG(hdts, DTS_FLAG_TS1_RDY) == RESET)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	6a1b      	ldr	r3, [r3, #32]
 80087a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087aa:	d1ee      	bne.n	800878a <HAL_DTS_Start+0x3e>
      }
    }

    if (__HAL_DTS_GET_TRIGGER(hdts) == DTS_TRIGGER_HW_NONE)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d10a      	bne.n	80087d0 <HAL_DTS_Start+0x84>
    {
      /* Start continuous measures */
      SET_BIT(hdts->Instance->CFGR1, DTS_CFGR1_TS1_START);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f042 0210 	orr.w	r2, r2, #16
 80087c8:	601a      	str	r2, [r3, #0]

      /* Ensure start is taken into account */
      HAL_Delay(TS_TIMEOUT_MS);
 80087ca:	2005      	movs	r0, #5
 80087cc:	f7fb f914 	bl	80039f8 <HAL_Delay>
    }

    hdts->State = HAL_DTS_STATE_READY;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  else
  {
    return HAL_BUSY;
  }

  return HAL_OK;
 80087d8:	2300      	movs	r3, #0
 80087da:	e000      	b.n	80087de <HAL_DTS_Start+0x92>
    return HAL_BUSY;
 80087dc:	2302      	movs	r3, #2
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
	...

080087e8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b098      	sub	sp, #96	; 0x60
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80087f0:	4a84      	ldr	r2, [pc, #528]	; (8008a04 <HAL_FDCAN_Init+0x21c>)
 80087f2:	f107 030c 	add.w	r3, r7, #12
 80087f6:	4611      	mov	r1, r2
 80087f8:	224c      	movs	r2, #76	; 0x4c
 80087fa:	4618      	mov	r0, r3
 80087fc:	f009 fb4c 	bl	8011e98 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d101      	bne.n	800880a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8008806:	2301      	movs	r3, #1
 8008808:	e1c6      	b.n	8008b98 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a7e      	ldr	r2, [pc, #504]	; (8008a08 <HAL_FDCAN_Init+0x220>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d106      	bne.n	8008822 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800881c:	461a      	mov	r2, r3
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008828:	b2db      	uxtb	r3, r3
 800882a:	2b00      	cmp	r3, #0
 800882c:	d106      	bne.n	800883c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f7fa fb18 	bl	8002e6c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	699a      	ldr	r2, [r3, #24]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f022 0210 	bic.w	r2, r2, #16
 800884a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800884c:	f7fb f8c8 	bl	80039e0 <HAL_GetTick>
 8008850:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008852:	e014      	b.n	800887e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008854:	f7fb f8c4 	bl	80039e0 <HAL_GetTick>
 8008858:	4602      	mov	r2, r0
 800885a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800885c:	1ad3      	subs	r3, r2, r3
 800885e:	2b0a      	cmp	r3, #10
 8008860:	d90d      	bls.n	800887e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008868:	f043 0201 	orr.w	r2, r3, #1
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2203      	movs	r2, #3
 8008876:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	e18c      	b.n	8008b98 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	699b      	ldr	r3, [r3, #24]
 8008884:	f003 0308 	and.w	r3, r3, #8
 8008888:	2b08      	cmp	r3, #8
 800888a:	d0e3      	beq.n	8008854 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	699a      	ldr	r2, [r3, #24]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f042 0201 	orr.w	r2, r2, #1
 800889a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800889c:	f7fb f8a0 	bl	80039e0 <HAL_GetTick>
 80088a0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80088a2:	e014      	b.n	80088ce <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80088a4:	f7fb f89c 	bl	80039e0 <HAL_GetTick>
 80088a8:	4602      	mov	r2, r0
 80088aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088ac:	1ad3      	subs	r3, r2, r3
 80088ae:	2b0a      	cmp	r3, #10
 80088b0:	d90d      	bls.n	80088ce <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80088b8:	f043 0201 	orr.w	r2, r3, #1
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2203      	movs	r2, #3
 80088c6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	e164      	b.n	8008b98 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	699b      	ldr	r3, [r3, #24]
 80088d4:	f003 0301 	and.w	r3, r3, #1
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d0e3      	beq.n	80088a4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	699a      	ldr	r2, [r3, #24]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f042 0202 	orr.w	r2, r2, #2
 80088ea:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	7c1b      	ldrb	r3, [r3, #16]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d108      	bne.n	8008906 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	699a      	ldr	r2, [r3, #24]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008902:	619a      	str	r2, [r3, #24]
 8008904:	e007      	b.n	8008916 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	699a      	ldr	r2, [r3, #24]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008914:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	7c5b      	ldrb	r3, [r3, #17]
 800891a:	2b01      	cmp	r3, #1
 800891c:	d108      	bne.n	8008930 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	699a      	ldr	r2, [r3, #24]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800892c:	619a      	str	r2, [r3, #24]
 800892e:	e007      	b.n	8008940 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	699a      	ldr	r2, [r3, #24]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800893e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	7c9b      	ldrb	r3, [r3, #18]
 8008944:	2b01      	cmp	r3, #1
 8008946:	d108      	bne.n	800895a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	699a      	ldr	r2, [r3, #24]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008956:	619a      	str	r2, [r3, #24]
 8008958:	e007      	b.n	800896a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	699a      	ldr	r2, [r3, #24]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008968:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	699b      	ldr	r3, [r3, #24]
 8008970:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	689a      	ldr	r2, [r3, #8]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	430a      	orrs	r2, r1
 800897e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	699a      	ldr	r2, [r3, #24]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800898e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	691a      	ldr	r2, [r3, #16]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f022 0210 	bic.w	r2, r2, #16
 800899e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d108      	bne.n	80089ba <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	699a      	ldr	r2, [r3, #24]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f042 0204 	orr.w	r2, r2, #4
 80089b6:	619a      	str	r2, [r3, #24]
 80089b8:	e030      	b.n	8008a1c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d02c      	beq.n	8008a1c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d020      	beq.n	8008a0c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	699a      	ldr	r2, [r3, #24]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80089d8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	691a      	ldr	r2, [r3, #16]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f042 0210 	orr.w	r2, r2, #16
 80089e8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	2b03      	cmp	r3, #3
 80089f0:	d114      	bne.n	8008a1c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	699a      	ldr	r2, [r3, #24]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f042 0220 	orr.w	r2, r2, #32
 8008a00:	619a      	str	r2, [r3, #24]
 8008a02:	e00b      	b.n	8008a1c <HAL_FDCAN_Init+0x234>
 8008a04:	08015688 	.word	0x08015688
 8008a08:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	699a      	ldr	r2, [r3, #24]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f042 0220 	orr.w	r2, r2, #32
 8008a1a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	699b      	ldr	r3, [r3, #24]
 8008a20:	3b01      	subs	r3, #1
 8008a22:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	69db      	ldr	r3, [r3, #28]
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008a2c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a1b      	ldr	r3, [r3, #32]
 8008a32:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008a34:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	695b      	ldr	r3, [r3, #20]
 8008a3c:	3b01      	subs	r3, #1
 8008a3e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008a44:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008a46:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a50:	d115      	bne.n	8008a7e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a56:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008a60:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a66:	3b01      	subs	r3, #1
 8008a68:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8008a6a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a72:	3b01      	subs	r3, #1
 8008a74:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8008a7a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008a7c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00a      	beq.n	8008a9c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	430a      	orrs	r2, r1
 8008a98:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008aa4:	4413      	add	r3, r2
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d011      	beq.n	8008ace <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008ab2:	f023 0107 	bic.w	r1, r3, #7
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	3360      	adds	r3, #96	; 0x60
 8008abe:	443b      	add	r3, r7
 8008ac0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	430a      	orrs	r2, r1
 8008aca:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d011      	beq.n	8008afa <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008ade:	f023 0107 	bic.w	r1, r3, #7
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	3360      	adds	r3, #96	; 0x60
 8008aea:	443b      	add	r3, r7
 8008aec:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	430a      	orrs	r2, r1
 8008af6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d012      	beq.n	8008b28 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008b0a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	3360      	adds	r3, #96	; 0x60
 8008b16:	443b      	add	r3, r7
 8008b18:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008b1c:	011a      	lsls	r2, r3, #4
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	430a      	orrs	r2, r1
 8008b24:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d012      	beq.n	8008b56 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008b38:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	3360      	adds	r3, #96	; 0x60
 8008b44:	443b      	add	r3, r7
 8008b46:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008b4a:	021a      	lsls	r2, r3, #8
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	430a      	orrs	r2, r1
 8008b52:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a11      	ldr	r2, [pc, #68]	; (8008ba0 <HAL_FDCAN_Init+0x3b8>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d107      	bne.n	8008b70 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	689a      	ldr	r2, [r3, #8]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	f022 0203 	bic.w	r2, r2, #3
 8008b6e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 f80b 	bl	8008ba4 <FDCAN_CalcultateRamBlockAddresses>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8008b94:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3760      	adds	r7, #96	; 0x60
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	4000a000 	.word	0x4000a000

08008ba4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bb0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008bba:	4ba7      	ldr	r3, [pc, #668]	; (8008e58 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008bbc:	4013      	ands	r3, r2
 8008bbe:	68ba      	ldr	r2, [r7, #8]
 8008bc0:	0091      	lsls	r1, r2, #2
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	6812      	ldr	r2, [r2, #0]
 8008bc6:	430b      	orrs	r3, r1
 8008bc8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bd4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bdc:	041a      	lsls	r2, r3, #16
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	430a      	orrs	r2, r1
 8008be4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bec:	68ba      	ldr	r2, [r7, #8]
 8008bee:	4413      	add	r3, r2
 8008bf0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008bfa:	4b97      	ldr	r3, [pc, #604]	; (8008e58 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008bfc:	4013      	ands	r3, r2
 8008bfe:	68ba      	ldr	r2, [r7, #8]
 8008c00:	0091      	lsls	r1, r2, #2
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	6812      	ldr	r2, [r2, #0]
 8008c06:	430b      	orrs	r3, r1
 8008c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c14:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c1c:	041a      	lsls	r2, r3, #16
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c2c:	005b      	lsls	r3, r3, #1
 8008c2e:	68ba      	ldr	r2, [r7, #8]
 8008c30:	4413      	add	r3, r2
 8008c32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008c3c:	4b86      	ldr	r3, [pc, #536]	; (8008e58 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008c3e:	4013      	ands	r3, r2
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	0091      	lsls	r1, r2, #2
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	6812      	ldr	r2, [r2, #0]
 8008c48:	430b      	orrs	r3, r1
 8008c4a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008c56:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c5e:	041a      	lsls	r2, r3, #16
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	430a      	orrs	r2, r1
 8008c66:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008c72:	fb02 f303 	mul.w	r3, r2, r3
 8008c76:	68ba      	ldr	r2, [r7, #8]
 8008c78:	4413      	add	r3, r2
 8008c7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008c84:	4b74      	ldr	r3, [pc, #464]	; (8008e58 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008c86:	4013      	ands	r3, r2
 8008c88:	68ba      	ldr	r2, [r7, #8]
 8008c8a:	0091      	lsls	r1, r2, #2
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	6812      	ldr	r2, [r2, #0]
 8008c90:	430b      	orrs	r3, r1
 8008c92:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008c9e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ca6:	041a      	lsls	r2, r3, #16
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	430a      	orrs	r2, r1
 8008cae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008cba:	fb02 f303 	mul.w	r3, r2, r3
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8008ccc:	4b62      	ldr	r3, [pc, #392]	; (8008e58 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008cce:	4013      	ands	r3, r2
 8008cd0:	68ba      	ldr	r2, [r7, #8]
 8008cd2:	0091      	lsls	r1, r2, #2
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	6812      	ldr	r2, [r2, #0]
 8008cd8:	430b      	orrs	r3, r1
 8008cda:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008ce6:	fb02 f303 	mul.w	r3, r2, r3
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	4413      	add	r3, r2
 8008cee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8008cf8:	4b57      	ldr	r3, [pc, #348]	; (8008e58 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008cfa:	4013      	ands	r3, r2
 8008cfc:	68ba      	ldr	r2, [r7, #8]
 8008cfe:	0091      	lsls	r1, r2, #2
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	6812      	ldr	r2, [r2, #0]
 8008d04:	430b      	orrs	r3, r1
 8008d06:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008d12:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d1a:	041a      	lsls	r2, r3, #16
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	430a      	orrs	r2, r1
 8008d22:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d2a:	005b      	lsls	r3, r3, #1
 8008d2c:	68ba      	ldr	r2, [r7, #8]
 8008d2e:	4413      	add	r3, r2
 8008d30:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8008d3a:	4b47      	ldr	r3, [pc, #284]	; (8008e58 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008d3c:	4013      	ands	r3, r2
 8008d3e:	68ba      	ldr	r2, [r7, #8]
 8008d40:	0091      	lsls	r1, r2, #2
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	6812      	ldr	r2, [r2, #0]
 8008d46:	430b      	orrs	r3, r1
 8008d48:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008d54:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d5c:	041a      	lsls	r2, r3, #16
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	430a      	orrs	r2, r1
 8008d64:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008d70:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d78:	061a      	lsls	r2, r3, #24
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	430a      	orrs	r2, r1
 8008d80:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d88:	4b34      	ldr	r3, [pc, #208]	; (8008e5c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8008d8a:	4413      	add	r3, r2
 8008d8c:	009a      	lsls	r2, r3, #2
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	441a      	add	r2, r3
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008daa:	00db      	lsls	r3, r3, #3
 8008dac:	441a      	add	r2, r3
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dba:	6879      	ldr	r1, [r7, #4]
 8008dbc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8008dbe:	fb01 f303 	mul.w	r3, r1, r3
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	441a      	add	r2, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dd2:	6879      	ldr	r1, [r7, #4]
 8008dd4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8008dd6:	fb01 f303 	mul.w	r3, r1, r3
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	441a      	add	r2, r3
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dea:	6879      	ldr	r1, [r7, #4]
 8008dec:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8008dee:	fb01 f303 	mul.w	r3, r1, r3
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	441a      	add	r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e06:	00db      	lsls	r3, r3, #3
 8008e08:	441a      	add	r2, r3
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e1a:	6879      	ldr	r1, [r7, #4]
 8008e1c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8008e1e:	fb01 f303 	mul.w	r3, r1, r3
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	441a      	add	r2, r3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e36:	6879      	ldr	r1, [r7, #4]
 8008e38:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8008e3a:	fb01 f303 	mul.w	r3, r1, r3
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	441a      	add	r2, r3
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e4e:	4a04      	ldr	r2, [pc, #16]	; (8008e60 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d915      	bls.n	8008e80 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008e54:	e006      	b.n	8008e64 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8008e56:	bf00      	nop
 8008e58:	ffff0003 	.word	0xffff0003
 8008e5c:	10002b00 	.word	0x10002b00
 8008e60:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008e6a:	f043 0220 	orr.w	r2, r3, #32
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2203      	movs	r2, #3
 8008e78:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e010      	b.n	8008ea2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e84:	60fb      	str	r3, [r7, #12]
 8008e86:	e005      	b.n	8008e94 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	3304      	adds	r3, #4
 8008e92:	60fb      	str	r3, [r7, #12]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e9a:	68fa      	ldr	r2, [r7, #12]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d3f3      	bcc.n	8008e88 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3714      	adds	r7, #20
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop

08008eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b089      	sub	sp, #36	; 0x24
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008ebe:	4b86      	ldr	r3, [pc, #536]	; (80090d8 <HAL_GPIO_Init+0x228>)
 8008ec0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008ec2:	e18c      	b.n	80091de <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	2101      	movs	r1, #1
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8008ed0:	4013      	ands	r3, r2
 8008ed2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f000 817e 	beq.w	80091d8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	f003 0303 	and.w	r3, r3, #3
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d005      	beq.n	8008ef4 <HAL_GPIO_Init+0x44>
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	f003 0303 	and.w	r3, r3, #3
 8008ef0:	2b02      	cmp	r3, #2
 8008ef2:	d130      	bne.n	8008f56 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008efa:	69fb      	ldr	r3, [r7, #28]
 8008efc:	005b      	lsls	r3, r3, #1
 8008efe:	2203      	movs	r2, #3
 8008f00:	fa02 f303 	lsl.w	r3, r2, r3
 8008f04:	43db      	mvns	r3, r3
 8008f06:	69ba      	ldr	r2, [r7, #24]
 8008f08:	4013      	ands	r3, r2
 8008f0a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	68da      	ldr	r2, [r3, #12]
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	005b      	lsls	r3, r3, #1
 8008f14:	fa02 f303 	lsl.w	r3, r2, r3
 8008f18:	69ba      	ldr	r2, [r7, #24]
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	69ba      	ldr	r2, [r7, #24]
 8008f22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	69fb      	ldr	r3, [r7, #28]
 8008f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f32:	43db      	mvns	r3, r3
 8008f34:	69ba      	ldr	r2, [r7, #24]
 8008f36:	4013      	ands	r3, r2
 8008f38:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	091b      	lsrs	r3, r3, #4
 8008f40:	f003 0201 	and.w	r2, r3, #1
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	fa02 f303 	lsl.w	r3, r2, r3
 8008f4a:	69ba      	ldr	r2, [r7, #24]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	69ba      	ldr	r2, [r7, #24]
 8008f54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	f003 0303 	and.w	r3, r3, #3
 8008f5e:	2b03      	cmp	r3, #3
 8008f60:	d017      	beq.n	8008f92 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	005b      	lsls	r3, r3, #1
 8008f6c:	2203      	movs	r2, #3
 8008f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f72:	43db      	mvns	r3, r3
 8008f74:	69ba      	ldr	r2, [r7, #24]
 8008f76:	4013      	ands	r3, r2
 8008f78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	689a      	ldr	r2, [r3, #8]
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	005b      	lsls	r3, r3, #1
 8008f82:	fa02 f303 	lsl.w	r3, r2, r3
 8008f86:	69ba      	ldr	r2, [r7, #24]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	69ba      	ldr	r2, [r7, #24]
 8008f90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	f003 0303 	and.w	r3, r3, #3
 8008f9a:	2b02      	cmp	r3, #2
 8008f9c:	d123      	bne.n	8008fe6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	08da      	lsrs	r2, r3, #3
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	3208      	adds	r2, #8
 8008fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	f003 0307 	and.w	r3, r3, #7
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	220f      	movs	r2, #15
 8008fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8008fba:	43db      	mvns	r3, r3
 8008fbc:	69ba      	ldr	r2, [r7, #24]
 8008fbe:	4013      	ands	r3, r2
 8008fc0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	691a      	ldr	r2, [r3, #16]
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	f003 0307 	and.w	r3, r3, #7
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd2:	69ba      	ldr	r2, [r7, #24]
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	08da      	lsrs	r2, r3, #3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	3208      	adds	r2, #8
 8008fe0:	69b9      	ldr	r1, [r7, #24]
 8008fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	005b      	lsls	r3, r3, #1
 8008ff0:	2203      	movs	r2, #3
 8008ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff6:	43db      	mvns	r3, r3
 8008ff8:	69ba      	ldr	r2, [r7, #24]
 8008ffa:	4013      	ands	r3, r2
 8008ffc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	f003 0203 	and.w	r2, r3, #3
 8009006:	69fb      	ldr	r3, [r7, #28]
 8009008:	005b      	lsls	r3, r3, #1
 800900a:	fa02 f303 	lsl.w	r3, r2, r3
 800900e:	69ba      	ldr	r2, [r7, #24]
 8009010:	4313      	orrs	r3, r2
 8009012:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	69ba      	ldr	r2, [r7, #24]
 8009018:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009022:	2b00      	cmp	r3, #0
 8009024:	f000 80d8 	beq.w	80091d8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009028:	4b2c      	ldr	r3, [pc, #176]	; (80090dc <HAL_GPIO_Init+0x22c>)
 800902a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800902e:	4a2b      	ldr	r2, [pc, #172]	; (80090dc <HAL_GPIO_Init+0x22c>)
 8009030:	f043 0302 	orr.w	r3, r3, #2
 8009034:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009038:	4b28      	ldr	r3, [pc, #160]	; (80090dc <HAL_GPIO_Init+0x22c>)
 800903a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800903e:	f003 0302 	and.w	r3, r3, #2
 8009042:	60fb      	str	r3, [r7, #12]
 8009044:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009046:	4a26      	ldr	r2, [pc, #152]	; (80090e0 <HAL_GPIO_Init+0x230>)
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	089b      	lsrs	r3, r3, #2
 800904c:	3302      	adds	r3, #2
 800904e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	f003 0303 	and.w	r3, r3, #3
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	220f      	movs	r2, #15
 800905e:	fa02 f303 	lsl.w	r3, r2, r3
 8009062:	43db      	mvns	r3, r3
 8009064:	69ba      	ldr	r2, [r7, #24]
 8009066:	4013      	ands	r3, r2
 8009068:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	4a1d      	ldr	r2, [pc, #116]	; (80090e4 <HAL_GPIO_Init+0x234>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d04a      	beq.n	8009108 <HAL_GPIO_Init+0x258>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	4a1c      	ldr	r2, [pc, #112]	; (80090e8 <HAL_GPIO_Init+0x238>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d02b      	beq.n	80090d2 <HAL_GPIO_Init+0x222>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4a1b      	ldr	r2, [pc, #108]	; (80090ec <HAL_GPIO_Init+0x23c>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d025      	beq.n	80090ce <HAL_GPIO_Init+0x21e>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4a1a      	ldr	r2, [pc, #104]	; (80090f0 <HAL_GPIO_Init+0x240>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d01f      	beq.n	80090ca <HAL_GPIO_Init+0x21a>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4a19      	ldr	r2, [pc, #100]	; (80090f4 <HAL_GPIO_Init+0x244>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d019      	beq.n	80090c6 <HAL_GPIO_Init+0x216>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a18      	ldr	r2, [pc, #96]	; (80090f8 <HAL_GPIO_Init+0x248>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d013      	beq.n	80090c2 <HAL_GPIO_Init+0x212>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a17      	ldr	r2, [pc, #92]	; (80090fc <HAL_GPIO_Init+0x24c>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d00d      	beq.n	80090be <HAL_GPIO_Init+0x20e>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4a16      	ldr	r2, [pc, #88]	; (8009100 <HAL_GPIO_Init+0x250>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d007      	beq.n	80090ba <HAL_GPIO_Init+0x20a>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4a15      	ldr	r2, [pc, #84]	; (8009104 <HAL_GPIO_Init+0x254>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d101      	bne.n	80090b6 <HAL_GPIO_Init+0x206>
 80090b2:	2309      	movs	r3, #9
 80090b4:	e029      	b.n	800910a <HAL_GPIO_Init+0x25a>
 80090b6:	230a      	movs	r3, #10
 80090b8:	e027      	b.n	800910a <HAL_GPIO_Init+0x25a>
 80090ba:	2307      	movs	r3, #7
 80090bc:	e025      	b.n	800910a <HAL_GPIO_Init+0x25a>
 80090be:	2306      	movs	r3, #6
 80090c0:	e023      	b.n	800910a <HAL_GPIO_Init+0x25a>
 80090c2:	2305      	movs	r3, #5
 80090c4:	e021      	b.n	800910a <HAL_GPIO_Init+0x25a>
 80090c6:	2304      	movs	r3, #4
 80090c8:	e01f      	b.n	800910a <HAL_GPIO_Init+0x25a>
 80090ca:	2303      	movs	r3, #3
 80090cc:	e01d      	b.n	800910a <HAL_GPIO_Init+0x25a>
 80090ce:	2302      	movs	r3, #2
 80090d0:	e01b      	b.n	800910a <HAL_GPIO_Init+0x25a>
 80090d2:	2301      	movs	r3, #1
 80090d4:	e019      	b.n	800910a <HAL_GPIO_Init+0x25a>
 80090d6:	bf00      	nop
 80090d8:	58000080 	.word	0x58000080
 80090dc:	58024400 	.word	0x58024400
 80090e0:	58000400 	.word	0x58000400
 80090e4:	58020000 	.word	0x58020000
 80090e8:	58020400 	.word	0x58020400
 80090ec:	58020800 	.word	0x58020800
 80090f0:	58020c00 	.word	0x58020c00
 80090f4:	58021000 	.word	0x58021000
 80090f8:	58021400 	.word	0x58021400
 80090fc:	58021800 	.word	0x58021800
 8009100:	58021c00 	.word	0x58021c00
 8009104:	58022400 	.word	0x58022400
 8009108:	2300      	movs	r3, #0
 800910a:	69fa      	ldr	r2, [r7, #28]
 800910c:	f002 0203 	and.w	r2, r2, #3
 8009110:	0092      	lsls	r2, r2, #2
 8009112:	4093      	lsls	r3, r2
 8009114:	69ba      	ldr	r2, [r7, #24]
 8009116:	4313      	orrs	r3, r2
 8009118:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800911a:	4938      	ldr	r1, [pc, #224]	; (80091fc <HAL_GPIO_Init+0x34c>)
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	089b      	lsrs	r3, r3, #2
 8009120:	3302      	adds	r3, #2
 8009122:	69ba      	ldr	r2, [r7, #24]
 8009124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	43db      	mvns	r3, r3
 8009134:	69ba      	ldr	r2, [r7, #24]
 8009136:	4013      	ands	r3, r2
 8009138:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009142:	2b00      	cmp	r3, #0
 8009144:	d003      	beq.n	800914e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8009146:	69ba      	ldr	r2, [r7, #24]
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	4313      	orrs	r3, r2
 800914c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800914e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	43db      	mvns	r3, r3
 8009162:	69ba      	ldr	r2, [r7, #24]
 8009164:	4013      	ands	r3, r2
 8009166:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009170:	2b00      	cmp	r3, #0
 8009172:	d003      	beq.n	800917c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8009174:	69ba      	ldr	r2, [r7, #24]
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	4313      	orrs	r3, r2
 800917a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800917c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	43db      	mvns	r3, r3
 800918e:	69ba      	ldr	r2, [r7, #24]
 8009190:	4013      	ands	r3, r2
 8009192:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800919c:	2b00      	cmp	r3, #0
 800919e:	d003      	beq.n	80091a8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80091a0:	69ba      	ldr	r2, [r7, #24]
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	4313      	orrs	r3, r2
 80091a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	69ba      	ldr	r2, [r7, #24]
 80091ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	43db      	mvns	r3, r3
 80091b8:	69ba      	ldr	r2, [r7, #24]
 80091ba:	4013      	ands	r3, r2
 80091bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d003      	beq.n	80091d2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80091ca:	69ba      	ldr	r2, [r7, #24]
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	69ba      	ldr	r2, [r7, #24]
 80091d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	3301      	adds	r3, #1
 80091dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	69fb      	ldr	r3, [r7, #28]
 80091e4:	fa22 f303 	lsr.w	r3, r2, r3
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f47f ae6b 	bne.w	8008ec4 <HAL_GPIO_Init+0x14>
  }
}
 80091ee:	bf00      	nop
 80091f0:	bf00      	nop
 80091f2:	3724      	adds	r7, #36	; 0x24
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr
 80091fc:	58000400 	.word	0x58000400

08009200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	460b      	mov	r3, r1
 800920a:	807b      	strh	r3, [r7, #2]
 800920c:	4613      	mov	r3, r2
 800920e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009210:	787b      	ldrb	r3, [r7, #1]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d003      	beq.n	800921e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009216:	887a      	ldrh	r2, [r7, #2]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800921c:	e003      	b.n	8009226 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800921e:	887b      	ldrh	r3, [r7, #2]
 8009220:	041a      	lsls	r2, r3, #16
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	619a      	str	r2, [r3, #24]
}
 8009226:	bf00      	nop
 8009228:	370c      	adds	r7, #12
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr

08009232 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009232:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009234:	b08f      	sub	sp, #60	; 0x3c
 8009236:	af0a      	add	r7, sp, #40	; 0x28
 8009238:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d101      	bne.n	8009244 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	e116      	b.n	8009472 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8009250:	b2db      	uxtb	r3, r3
 8009252:	2b00      	cmp	r3, #0
 8009254:	d106      	bne.n	8009264 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f7fa f8e4 	bl	800342c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2203      	movs	r2, #3
 8009268:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009274:	2b00      	cmp	r3, #0
 8009276:	d102      	bne.n	800927e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4618      	mov	r0, r3
 8009284:	f007 fb9a 	bl	80109bc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	603b      	str	r3, [r7, #0]
 800928e:	687e      	ldr	r6, [r7, #4]
 8009290:	466d      	mov	r5, sp
 8009292:	f106 0410 	add.w	r4, r6, #16
 8009296:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009298:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800929a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800929c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800929e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80092a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80092a6:	1d33      	adds	r3, r6, #4
 80092a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80092aa:	6838      	ldr	r0, [r7, #0]
 80092ac:	f007 fb18 	bl	80108e0 <USB_CoreInit>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d005      	beq.n	80092c2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2202      	movs	r2, #2
 80092ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	e0d7      	b.n	8009472 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2100      	movs	r1, #0
 80092c8:	4618      	mov	r0, r3
 80092ca:	f007 fb88 	bl	80109de <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80092ce:	2300      	movs	r3, #0
 80092d0:	73fb      	strb	r3, [r7, #15]
 80092d2:	e04a      	b.n	800936a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80092d4:	7bfa      	ldrb	r2, [r7, #15]
 80092d6:	6879      	ldr	r1, [r7, #4]
 80092d8:	4613      	mov	r3, r2
 80092da:	00db      	lsls	r3, r3, #3
 80092dc:	4413      	add	r3, r2
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	440b      	add	r3, r1
 80092e2:	333d      	adds	r3, #61	; 0x3d
 80092e4:	2201      	movs	r2, #1
 80092e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80092e8:	7bfa      	ldrb	r2, [r7, #15]
 80092ea:	6879      	ldr	r1, [r7, #4]
 80092ec:	4613      	mov	r3, r2
 80092ee:	00db      	lsls	r3, r3, #3
 80092f0:	4413      	add	r3, r2
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	440b      	add	r3, r1
 80092f6:	333c      	adds	r3, #60	; 0x3c
 80092f8:	7bfa      	ldrb	r2, [r7, #15]
 80092fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80092fc:	7bfa      	ldrb	r2, [r7, #15]
 80092fe:	7bfb      	ldrb	r3, [r7, #15]
 8009300:	b298      	uxth	r0, r3
 8009302:	6879      	ldr	r1, [r7, #4]
 8009304:	4613      	mov	r3, r2
 8009306:	00db      	lsls	r3, r3, #3
 8009308:	4413      	add	r3, r2
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	440b      	add	r3, r1
 800930e:	3356      	adds	r3, #86	; 0x56
 8009310:	4602      	mov	r2, r0
 8009312:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009314:	7bfa      	ldrb	r2, [r7, #15]
 8009316:	6879      	ldr	r1, [r7, #4]
 8009318:	4613      	mov	r3, r2
 800931a:	00db      	lsls	r3, r3, #3
 800931c:	4413      	add	r3, r2
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	440b      	add	r3, r1
 8009322:	3340      	adds	r3, #64	; 0x40
 8009324:	2200      	movs	r2, #0
 8009326:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009328:	7bfa      	ldrb	r2, [r7, #15]
 800932a:	6879      	ldr	r1, [r7, #4]
 800932c:	4613      	mov	r3, r2
 800932e:	00db      	lsls	r3, r3, #3
 8009330:	4413      	add	r3, r2
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	440b      	add	r3, r1
 8009336:	3344      	adds	r3, #68	; 0x44
 8009338:	2200      	movs	r2, #0
 800933a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800933c:	7bfa      	ldrb	r2, [r7, #15]
 800933e:	6879      	ldr	r1, [r7, #4]
 8009340:	4613      	mov	r3, r2
 8009342:	00db      	lsls	r3, r3, #3
 8009344:	4413      	add	r3, r2
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	440b      	add	r3, r1
 800934a:	3348      	adds	r3, #72	; 0x48
 800934c:	2200      	movs	r2, #0
 800934e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009350:	7bfa      	ldrb	r2, [r7, #15]
 8009352:	6879      	ldr	r1, [r7, #4]
 8009354:	4613      	mov	r3, r2
 8009356:	00db      	lsls	r3, r3, #3
 8009358:	4413      	add	r3, r2
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	440b      	add	r3, r1
 800935e:	334c      	adds	r3, #76	; 0x4c
 8009360:	2200      	movs	r2, #0
 8009362:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009364:	7bfb      	ldrb	r3, [r7, #15]
 8009366:	3301      	adds	r3, #1
 8009368:	73fb      	strb	r3, [r7, #15]
 800936a:	7bfa      	ldrb	r2, [r7, #15]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	429a      	cmp	r2, r3
 8009372:	d3af      	bcc.n	80092d4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009374:	2300      	movs	r3, #0
 8009376:	73fb      	strb	r3, [r7, #15]
 8009378:	e044      	b.n	8009404 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800937a:	7bfa      	ldrb	r2, [r7, #15]
 800937c:	6879      	ldr	r1, [r7, #4]
 800937e:	4613      	mov	r3, r2
 8009380:	00db      	lsls	r3, r3, #3
 8009382:	4413      	add	r3, r2
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	440b      	add	r3, r1
 8009388:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800938c:	2200      	movs	r2, #0
 800938e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009390:	7bfa      	ldrb	r2, [r7, #15]
 8009392:	6879      	ldr	r1, [r7, #4]
 8009394:	4613      	mov	r3, r2
 8009396:	00db      	lsls	r3, r3, #3
 8009398:	4413      	add	r3, r2
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	440b      	add	r3, r1
 800939e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80093a2:	7bfa      	ldrb	r2, [r7, #15]
 80093a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80093a6:	7bfa      	ldrb	r2, [r7, #15]
 80093a8:	6879      	ldr	r1, [r7, #4]
 80093aa:	4613      	mov	r3, r2
 80093ac:	00db      	lsls	r3, r3, #3
 80093ae:	4413      	add	r3, r2
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	440b      	add	r3, r1
 80093b4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80093b8:	2200      	movs	r2, #0
 80093ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80093bc:	7bfa      	ldrb	r2, [r7, #15]
 80093be:	6879      	ldr	r1, [r7, #4]
 80093c0:	4613      	mov	r3, r2
 80093c2:	00db      	lsls	r3, r3, #3
 80093c4:	4413      	add	r3, r2
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	440b      	add	r3, r1
 80093ca:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80093ce:	2200      	movs	r2, #0
 80093d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80093d2:	7bfa      	ldrb	r2, [r7, #15]
 80093d4:	6879      	ldr	r1, [r7, #4]
 80093d6:	4613      	mov	r3, r2
 80093d8:	00db      	lsls	r3, r3, #3
 80093da:	4413      	add	r3, r2
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	440b      	add	r3, r1
 80093e0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80093e4:	2200      	movs	r2, #0
 80093e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80093e8:	7bfa      	ldrb	r2, [r7, #15]
 80093ea:	6879      	ldr	r1, [r7, #4]
 80093ec:	4613      	mov	r3, r2
 80093ee:	00db      	lsls	r3, r3, #3
 80093f0:	4413      	add	r3, r2
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	440b      	add	r3, r1
 80093f6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80093fa:	2200      	movs	r2, #0
 80093fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80093fe:	7bfb      	ldrb	r3, [r7, #15]
 8009400:	3301      	adds	r3, #1
 8009402:	73fb      	strb	r3, [r7, #15]
 8009404:	7bfa      	ldrb	r2, [r7, #15]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	429a      	cmp	r2, r3
 800940c:	d3b5      	bcc.n	800937a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	603b      	str	r3, [r7, #0]
 8009414:	687e      	ldr	r6, [r7, #4]
 8009416:	466d      	mov	r5, sp
 8009418:	f106 0410 	add.w	r4, r6, #16
 800941c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800941e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009420:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009422:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009424:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009428:	e885 0003 	stmia.w	r5, {r0, r1}
 800942c:	1d33      	adds	r3, r6, #4
 800942e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009430:	6838      	ldr	r0, [r7, #0]
 8009432:	f007 fb21 	bl	8010a78 <USB_DevInit>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d005      	beq.n	8009448 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2202      	movs	r2, #2
 8009440:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	e014      	b.n	8009472 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2201      	movs	r2, #1
 8009454:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945c:	2b01      	cmp	r3, #1
 800945e:	d102      	bne.n	8009466 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 f80b 	bl	800947c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4618      	mov	r0, r3
 800946c:	f007 fcdf 	bl	8010e2e <USB_DevDisconnect>

  return HAL_OK;
 8009470:	2300      	movs	r3, #0
}
 8009472:	4618      	mov	r0, r3
 8009474:	3714      	adds	r7, #20
 8009476:	46bd      	mov	sp, r7
 8009478:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800947c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800947c:	b480      	push	{r7}
 800947e:	b085      	sub	sp, #20
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2201      	movs	r2, #1
 800948e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	699b      	ldr	r3, [r3, #24]
 800949e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094aa:	4b05      	ldr	r3, [pc, #20]	; (80094c0 <HAL_PCDEx_ActivateLPM+0x44>)
 80094ac:	4313      	orrs	r3, r2
 80094ae:	68fa      	ldr	r2, [r7, #12]
 80094b0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3714      	adds	r7, #20
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr
 80094c0:	10000003 	.word	0x10000003

080094c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80094cc:	4b19      	ldr	r3, [pc, #100]	; (8009534 <HAL_PWREx_ConfigSupply+0x70>)
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	f003 0304 	and.w	r3, r3, #4
 80094d4:	2b04      	cmp	r3, #4
 80094d6:	d00a      	beq.n	80094ee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80094d8:	4b16      	ldr	r3, [pc, #88]	; (8009534 <HAL_PWREx_ConfigSupply+0x70>)
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	f003 0307 	and.w	r3, r3, #7
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d001      	beq.n	80094ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80094e6:	2301      	movs	r3, #1
 80094e8:	e01f      	b.n	800952a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	e01d      	b.n	800952a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80094ee:	4b11      	ldr	r3, [pc, #68]	; (8009534 <HAL_PWREx_ConfigSupply+0x70>)
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	f023 0207 	bic.w	r2, r3, #7
 80094f6:	490f      	ldr	r1, [pc, #60]	; (8009534 <HAL_PWREx_ConfigSupply+0x70>)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80094fe:	f7fa fa6f 	bl	80039e0 <HAL_GetTick>
 8009502:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009504:	e009      	b.n	800951a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009506:	f7fa fa6b 	bl	80039e0 <HAL_GetTick>
 800950a:	4602      	mov	r2, r0
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	1ad3      	subs	r3, r2, r3
 8009510:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009514:	d901      	bls.n	800951a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	e007      	b.n	800952a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800951a:	4b06      	ldr	r3, [pc, #24]	; (8009534 <HAL_PWREx_ConfigSupply+0x70>)
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009526:	d1ee      	bne.n	8009506 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3710      	adds	r7, #16
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
 8009532:	bf00      	nop
 8009534:	58024800 	.word	0x58024800

08009538 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009538:	b480      	push	{r7}
 800953a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800953c:	4b05      	ldr	r3, [pc, #20]	; (8009554 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	4a04      	ldr	r2, [pc, #16]	; (8009554 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009542:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009546:	60d3      	str	r3, [r2, #12]
}
 8009548:	bf00      	nop
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr
 8009552:	bf00      	nop
 8009554:	58024800 	.word	0x58024800

08009558 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b08c      	sub	sp, #48	; 0x30
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d101      	bne.n	800956a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	e3c8      	b.n	8009cfc <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f003 0301 	and.w	r3, r3, #1
 8009572:	2b00      	cmp	r3, #0
 8009574:	f000 8087 	beq.w	8009686 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009578:	4b88      	ldr	r3, [pc, #544]	; (800979c <HAL_RCC_OscConfig+0x244>)
 800957a:	691b      	ldr	r3, [r3, #16]
 800957c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009580:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009582:	4b86      	ldr	r3, [pc, #536]	; (800979c <HAL_RCC_OscConfig+0x244>)
 8009584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009586:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800958a:	2b10      	cmp	r3, #16
 800958c:	d007      	beq.n	800959e <HAL_RCC_OscConfig+0x46>
 800958e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009590:	2b18      	cmp	r3, #24
 8009592:	d110      	bne.n	80095b6 <HAL_RCC_OscConfig+0x5e>
 8009594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009596:	f003 0303 	and.w	r3, r3, #3
 800959a:	2b02      	cmp	r3, #2
 800959c:	d10b      	bne.n	80095b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800959e:	4b7f      	ldr	r3, [pc, #508]	; (800979c <HAL_RCC_OscConfig+0x244>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d06c      	beq.n	8009684 <HAL_RCC_OscConfig+0x12c>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d168      	bne.n	8009684 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	e3a2      	b.n	8009cfc <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095be:	d106      	bne.n	80095ce <HAL_RCC_OscConfig+0x76>
 80095c0:	4b76      	ldr	r3, [pc, #472]	; (800979c <HAL_RCC_OscConfig+0x244>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a75      	ldr	r2, [pc, #468]	; (800979c <HAL_RCC_OscConfig+0x244>)
 80095c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095ca:	6013      	str	r3, [r2, #0]
 80095cc:	e02e      	b.n	800962c <HAL_RCC_OscConfig+0xd4>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d10c      	bne.n	80095f0 <HAL_RCC_OscConfig+0x98>
 80095d6:	4b71      	ldr	r3, [pc, #452]	; (800979c <HAL_RCC_OscConfig+0x244>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a70      	ldr	r2, [pc, #448]	; (800979c <HAL_RCC_OscConfig+0x244>)
 80095dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095e0:	6013      	str	r3, [r2, #0]
 80095e2:	4b6e      	ldr	r3, [pc, #440]	; (800979c <HAL_RCC_OscConfig+0x244>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a6d      	ldr	r2, [pc, #436]	; (800979c <HAL_RCC_OscConfig+0x244>)
 80095e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80095ec:	6013      	str	r3, [r2, #0]
 80095ee:	e01d      	b.n	800962c <HAL_RCC_OscConfig+0xd4>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80095f8:	d10c      	bne.n	8009614 <HAL_RCC_OscConfig+0xbc>
 80095fa:	4b68      	ldr	r3, [pc, #416]	; (800979c <HAL_RCC_OscConfig+0x244>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a67      	ldr	r2, [pc, #412]	; (800979c <HAL_RCC_OscConfig+0x244>)
 8009600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009604:	6013      	str	r3, [r2, #0]
 8009606:	4b65      	ldr	r3, [pc, #404]	; (800979c <HAL_RCC_OscConfig+0x244>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a64      	ldr	r2, [pc, #400]	; (800979c <HAL_RCC_OscConfig+0x244>)
 800960c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009610:	6013      	str	r3, [r2, #0]
 8009612:	e00b      	b.n	800962c <HAL_RCC_OscConfig+0xd4>
 8009614:	4b61      	ldr	r3, [pc, #388]	; (800979c <HAL_RCC_OscConfig+0x244>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a60      	ldr	r2, [pc, #384]	; (800979c <HAL_RCC_OscConfig+0x244>)
 800961a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800961e:	6013      	str	r3, [r2, #0]
 8009620:	4b5e      	ldr	r3, [pc, #376]	; (800979c <HAL_RCC_OscConfig+0x244>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a5d      	ldr	r2, [pc, #372]	; (800979c <HAL_RCC_OscConfig+0x244>)
 8009626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800962a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d013      	beq.n	800965c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009634:	f7fa f9d4 	bl	80039e0 <HAL_GetTick>
 8009638:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800963a:	e008      	b.n	800964e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800963c:	f7fa f9d0 	bl	80039e0 <HAL_GetTick>
 8009640:	4602      	mov	r2, r0
 8009642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009644:	1ad3      	subs	r3, r2, r3
 8009646:	2b64      	cmp	r3, #100	; 0x64
 8009648:	d901      	bls.n	800964e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800964a:	2303      	movs	r3, #3
 800964c:	e356      	b.n	8009cfc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800964e:	4b53      	ldr	r3, [pc, #332]	; (800979c <HAL_RCC_OscConfig+0x244>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009656:	2b00      	cmp	r3, #0
 8009658:	d0f0      	beq.n	800963c <HAL_RCC_OscConfig+0xe4>
 800965a:	e014      	b.n	8009686 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800965c:	f7fa f9c0 	bl	80039e0 <HAL_GetTick>
 8009660:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009662:	e008      	b.n	8009676 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009664:	f7fa f9bc 	bl	80039e0 <HAL_GetTick>
 8009668:	4602      	mov	r2, r0
 800966a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966c:	1ad3      	subs	r3, r2, r3
 800966e:	2b64      	cmp	r3, #100	; 0x64
 8009670:	d901      	bls.n	8009676 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009672:	2303      	movs	r3, #3
 8009674:	e342      	b.n	8009cfc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009676:	4b49      	ldr	r3, [pc, #292]	; (800979c <HAL_RCC_OscConfig+0x244>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800967e:	2b00      	cmp	r3, #0
 8009680:	d1f0      	bne.n	8009664 <HAL_RCC_OscConfig+0x10c>
 8009682:	e000      	b.n	8009686 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f003 0302 	and.w	r3, r3, #2
 800968e:	2b00      	cmp	r3, #0
 8009690:	f000 808c 	beq.w	80097ac <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009694:	4b41      	ldr	r3, [pc, #260]	; (800979c <HAL_RCC_OscConfig+0x244>)
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800969c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800969e:	4b3f      	ldr	r3, [pc, #252]	; (800979c <HAL_RCC_OscConfig+0x244>)
 80096a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096a2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80096a4:	6a3b      	ldr	r3, [r7, #32]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d007      	beq.n	80096ba <HAL_RCC_OscConfig+0x162>
 80096aa:	6a3b      	ldr	r3, [r7, #32]
 80096ac:	2b18      	cmp	r3, #24
 80096ae:	d137      	bne.n	8009720 <HAL_RCC_OscConfig+0x1c8>
 80096b0:	69fb      	ldr	r3, [r7, #28]
 80096b2:	f003 0303 	and.w	r3, r3, #3
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d132      	bne.n	8009720 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80096ba:	4b38      	ldr	r3, [pc, #224]	; (800979c <HAL_RCC_OscConfig+0x244>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f003 0304 	and.w	r3, r3, #4
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d005      	beq.n	80096d2 <HAL_RCC_OscConfig+0x17a>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d101      	bne.n	80096d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80096ce:	2301      	movs	r3, #1
 80096d0:	e314      	b.n	8009cfc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80096d2:	4b32      	ldr	r3, [pc, #200]	; (800979c <HAL_RCC_OscConfig+0x244>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f023 0219 	bic.w	r2, r3, #25
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	492f      	ldr	r1, [pc, #188]	; (800979c <HAL_RCC_OscConfig+0x244>)
 80096e0:	4313      	orrs	r3, r2
 80096e2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096e4:	f7fa f97c 	bl	80039e0 <HAL_GetTick>
 80096e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80096ea:	e008      	b.n	80096fe <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80096ec:	f7fa f978 	bl	80039e0 <HAL_GetTick>
 80096f0:	4602      	mov	r2, r0
 80096f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f4:	1ad3      	subs	r3, r2, r3
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d901      	bls.n	80096fe <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80096fa:	2303      	movs	r3, #3
 80096fc:	e2fe      	b.n	8009cfc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80096fe:	4b27      	ldr	r3, [pc, #156]	; (800979c <HAL_RCC_OscConfig+0x244>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f003 0304 	and.w	r3, r3, #4
 8009706:	2b00      	cmp	r3, #0
 8009708:	d0f0      	beq.n	80096ec <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800970a:	4b24      	ldr	r3, [pc, #144]	; (800979c <HAL_RCC_OscConfig+0x244>)
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	061b      	lsls	r3, r3, #24
 8009718:	4920      	ldr	r1, [pc, #128]	; (800979c <HAL_RCC_OscConfig+0x244>)
 800971a:	4313      	orrs	r3, r2
 800971c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800971e:	e045      	b.n	80097ac <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d026      	beq.n	8009776 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009728:	4b1c      	ldr	r3, [pc, #112]	; (800979c <HAL_RCC_OscConfig+0x244>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f023 0219 	bic.w	r2, r3, #25
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	68db      	ldr	r3, [r3, #12]
 8009734:	4919      	ldr	r1, [pc, #100]	; (800979c <HAL_RCC_OscConfig+0x244>)
 8009736:	4313      	orrs	r3, r2
 8009738:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800973a:	f7fa f951 	bl	80039e0 <HAL_GetTick>
 800973e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009740:	e008      	b.n	8009754 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009742:	f7fa f94d 	bl	80039e0 <HAL_GetTick>
 8009746:	4602      	mov	r2, r0
 8009748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974a:	1ad3      	subs	r3, r2, r3
 800974c:	2b02      	cmp	r3, #2
 800974e:	d901      	bls.n	8009754 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009750:	2303      	movs	r3, #3
 8009752:	e2d3      	b.n	8009cfc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009754:	4b11      	ldr	r3, [pc, #68]	; (800979c <HAL_RCC_OscConfig+0x244>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f003 0304 	and.w	r3, r3, #4
 800975c:	2b00      	cmp	r3, #0
 800975e:	d0f0      	beq.n	8009742 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009760:	4b0e      	ldr	r3, [pc, #56]	; (800979c <HAL_RCC_OscConfig+0x244>)
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	691b      	ldr	r3, [r3, #16]
 800976c:	061b      	lsls	r3, r3, #24
 800976e:	490b      	ldr	r1, [pc, #44]	; (800979c <HAL_RCC_OscConfig+0x244>)
 8009770:	4313      	orrs	r3, r2
 8009772:	604b      	str	r3, [r1, #4]
 8009774:	e01a      	b.n	80097ac <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009776:	4b09      	ldr	r3, [pc, #36]	; (800979c <HAL_RCC_OscConfig+0x244>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a08      	ldr	r2, [pc, #32]	; (800979c <HAL_RCC_OscConfig+0x244>)
 800977c:	f023 0301 	bic.w	r3, r3, #1
 8009780:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009782:	f7fa f92d 	bl	80039e0 <HAL_GetTick>
 8009786:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009788:	e00a      	b.n	80097a0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800978a:	f7fa f929 	bl	80039e0 <HAL_GetTick>
 800978e:	4602      	mov	r2, r0
 8009790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009792:	1ad3      	subs	r3, r2, r3
 8009794:	2b02      	cmp	r3, #2
 8009796:	d903      	bls.n	80097a0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009798:	2303      	movs	r3, #3
 800979a:	e2af      	b.n	8009cfc <HAL_RCC_OscConfig+0x7a4>
 800979c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80097a0:	4b96      	ldr	r3, [pc, #600]	; (80099fc <HAL_RCC_OscConfig+0x4a4>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f003 0304 	and.w	r3, r3, #4
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d1ee      	bne.n	800978a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f003 0310 	and.w	r3, r3, #16
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d06a      	beq.n	800988e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80097b8:	4b90      	ldr	r3, [pc, #576]	; (80099fc <HAL_RCC_OscConfig+0x4a4>)
 80097ba:	691b      	ldr	r3, [r3, #16]
 80097bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097c0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80097c2:	4b8e      	ldr	r3, [pc, #568]	; (80099fc <HAL_RCC_OscConfig+0x4a4>)
 80097c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097c6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80097c8:	69bb      	ldr	r3, [r7, #24]
 80097ca:	2b08      	cmp	r3, #8
 80097cc:	d007      	beq.n	80097de <HAL_RCC_OscConfig+0x286>
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	2b18      	cmp	r3, #24
 80097d2:	d11b      	bne.n	800980c <HAL_RCC_OscConfig+0x2b4>
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	f003 0303 	and.w	r3, r3, #3
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d116      	bne.n	800980c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80097de:	4b87      	ldr	r3, [pc, #540]	; (80099fc <HAL_RCC_OscConfig+0x4a4>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d005      	beq.n	80097f6 <HAL_RCC_OscConfig+0x29e>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	69db      	ldr	r3, [r3, #28]
 80097ee:	2b80      	cmp	r3, #128	; 0x80
 80097f0:	d001      	beq.n	80097f6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e282      	b.n	8009cfc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80097f6:	4b81      	ldr	r3, [pc, #516]	; (80099fc <HAL_RCC_OscConfig+0x4a4>)
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6a1b      	ldr	r3, [r3, #32]
 8009802:	061b      	lsls	r3, r3, #24
 8009804:	497d      	ldr	r1, [pc, #500]	; (80099fc <HAL_RCC_OscConfig+0x4a4>)
 8009806:	4313      	orrs	r3, r2
 8009808:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800980a:	e040      	b.n	800988e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	69db      	ldr	r3, [r3, #28]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d023      	beq.n	800985c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009814:	4b79      	ldr	r3, [pc, #484]	; (80099fc <HAL_RCC_OscConfig+0x4a4>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a78      	ldr	r2, [pc, #480]	; (80099fc <HAL_RCC_OscConfig+0x4a4>)
 800981a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800981e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009820:	f7fa f8de 	bl	80039e0 <HAL_GetTick>
 8009824:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009826:	e008      	b.n	800983a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009828:	f7fa f8da 	bl	80039e0 <HAL_GetTick>
 800982c:	4602      	mov	r2, r0
 800982e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009830:	1ad3      	subs	r3, r2, r3
 8009832:	2b02      	cmp	r3, #2
 8009834:	d901      	bls.n	800983a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009836:	2303      	movs	r3, #3
 8009838:	e260      	b.n	8009cfc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800983a:	4b70      	ldr	r3, [pc, #448]	; (80099fc <HAL_RCC_OscConfig+0x4a4>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009842:	2b00      	cmp	r3, #0
 8009844:	d0f0      	beq.n	8009828 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009846:	4b6d      	ldr	r3, [pc, #436]	; (80099fc <HAL_RCC_OscConfig+0x4a4>)
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6a1b      	ldr	r3, [r3, #32]
 8009852:	061b      	lsls	r3, r3, #24
 8009854:	4969      	ldr	r1, [pc, #420]	; (80099fc <HAL_RCC_OscConfig+0x4a4>)
 8009856:	4313      	orrs	r3, r2
 8009858:	60cb      	str	r3, [r1, #12]
 800985a:	e018      	b.n	800988e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800985c:	4b67      	ldr	r3, [pc, #412]	; (80099fc <HAL_RCC_OscConfig+0x4a4>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a66      	ldr	r2, [pc, #408]	; (80099fc <HAL_RCC_OscConfig+0x4a4>)
 8009862:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009868:	f7fa f8ba 	bl	80039e0 <HAL_GetTick>
 800986c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800986e:	e008      	b.n	8009882 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009870:	f7fa f8b6 	bl	80039e0 <HAL_GetTick>
 8009874:	4602      	mov	r2, r0
 8009876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009878:	1ad3      	subs	r3, r2, r3
 800987a:	2b02      	cmp	r3, #2
 800987c:	d901      	bls.n	8009882 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800987e:	2303      	movs	r3, #3
 8009880:	e23c      	b.n	8009cfc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009882:	4b5e      	ldr	r3, [pc, #376]	; (80099fc <HAL_RCC_OscConfig+0x4a4>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800988a:	2b00      	cmp	r3, #0
 800988c:	d1f0      	bne.n	8009870 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f003 0308 	and.w	r3, r3, #8
 8009896:	2b00      	cmp	r3, #0
 8009898:	d036      	beq.n	8009908 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	695b      	ldr	r3, [r3, #20]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d019      	beq.n	80098d6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80098a2:	4b56      	ldr	r3, [pc, #344]	; (80099fc <HAL_RCC_OscConfig+0x4a4>)
 80098a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098a6:	4a55      	ldr	r2, [pc, #340]	; (80099fc <HAL_RCC_OscConfig+0x4a4>)
 80098a8:	f043 0301 	orr.w	r3, r3, #1
 80098ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098ae:	f7fa f897 	bl	80039e0 <HAL_GetTick>
 80098b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80098b4:	e008      	b.n	80098c8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80098b6:	f7fa f893 	bl	80039e0 <HAL_GetTick>
 80098ba:	4602      	mov	r2, r0
 80098bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098be:	1ad3      	subs	r3, r2, r3
 80098c0:	2b02      	cmp	r3, #2
 80098c2:	d901      	bls.n	80098c8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80098c4:	2303      	movs	r3, #3
 80098c6:	e219      	b.n	8009cfc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80098c8:	4b4c      	ldr	r3, [pc, #304]	; (80099fc <HAL_RCC_OscConfig+0x4a4>)
 80098ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098cc:	f003 0302 	and.w	r3, r3, #2
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d0f0      	beq.n	80098b6 <HAL_RCC_OscConfig+0x35e>
 80098d4:	e018      	b.n	8009908 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80098d6:	4b49      	ldr	r3, [pc, #292]	; (80099fc <HAL_RCC_OscConfig+0x4a4>)
 80098d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098da:	4a48      	ldr	r2, [pc, #288]	; (80099fc <HAL_RCC_OscConfig+0x4a4>)
 80098dc:	f023 0301 	bic.w	r3, r3, #1
 80098e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098e2:	f7fa f87d 	bl	80039e0 <HAL_GetTick>
 80098e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80098e8:	e008      	b.n	80098fc <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80098ea:	f7fa f879 	bl	80039e0 <HAL_GetTick>
 80098ee:	4602      	mov	r2, r0
 80098f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f2:	1ad3      	subs	r3, r2, r3
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d901      	bls.n	80098fc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80098f8:	2303      	movs	r3, #3
 80098fa:	e1ff      	b.n	8009cfc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80098fc:	4b3f      	ldr	r3, [pc, #252]	; (80099fc <HAL_RCC_OscConfig+0x4a4>)
 80098fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009900:	f003 0302 	and.w	r3, r3, #2
 8009904:	2b00      	cmp	r3, #0
 8009906:	d1f0      	bne.n	80098ea <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f003 0320 	and.w	r3, r3, #32
 8009910:	2b00      	cmp	r3, #0
 8009912:	d036      	beq.n	8009982 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	699b      	ldr	r3, [r3, #24]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d019      	beq.n	8009950 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800991c:	4b37      	ldr	r3, [pc, #220]	; (80099fc <HAL_RCC_OscConfig+0x4a4>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a36      	ldr	r2, [pc, #216]	; (80099fc <HAL_RCC_OscConfig+0x4a4>)
 8009922:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009926:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009928:	f7fa f85a 	bl	80039e0 <HAL_GetTick>
 800992c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800992e:	e008      	b.n	8009942 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009930:	f7fa f856 	bl	80039e0 <HAL_GetTick>
 8009934:	4602      	mov	r2, r0
 8009936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009938:	1ad3      	subs	r3, r2, r3
 800993a:	2b02      	cmp	r3, #2
 800993c:	d901      	bls.n	8009942 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800993e:	2303      	movs	r3, #3
 8009940:	e1dc      	b.n	8009cfc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009942:	4b2e      	ldr	r3, [pc, #184]	; (80099fc <HAL_RCC_OscConfig+0x4a4>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800994a:	2b00      	cmp	r3, #0
 800994c:	d0f0      	beq.n	8009930 <HAL_RCC_OscConfig+0x3d8>
 800994e:	e018      	b.n	8009982 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009950:	4b2a      	ldr	r3, [pc, #168]	; (80099fc <HAL_RCC_OscConfig+0x4a4>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a29      	ldr	r2, [pc, #164]	; (80099fc <HAL_RCC_OscConfig+0x4a4>)
 8009956:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800995a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800995c:	f7fa f840 	bl	80039e0 <HAL_GetTick>
 8009960:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009962:	e008      	b.n	8009976 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009964:	f7fa f83c 	bl	80039e0 <HAL_GetTick>
 8009968:	4602      	mov	r2, r0
 800996a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996c:	1ad3      	subs	r3, r2, r3
 800996e:	2b02      	cmp	r3, #2
 8009970:	d901      	bls.n	8009976 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009972:	2303      	movs	r3, #3
 8009974:	e1c2      	b.n	8009cfc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009976:	4b21      	ldr	r3, [pc, #132]	; (80099fc <HAL_RCC_OscConfig+0x4a4>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800997e:	2b00      	cmp	r3, #0
 8009980:	d1f0      	bne.n	8009964 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f003 0304 	and.w	r3, r3, #4
 800998a:	2b00      	cmp	r3, #0
 800998c:	f000 8086 	beq.w	8009a9c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009990:	4b1b      	ldr	r3, [pc, #108]	; (8009a00 <HAL_RCC_OscConfig+0x4a8>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a1a      	ldr	r2, [pc, #104]	; (8009a00 <HAL_RCC_OscConfig+0x4a8>)
 8009996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800999a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800999c:	f7fa f820 	bl	80039e0 <HAL_GetTick>
 80099a0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80099a2:	e008      	b.n	80099b6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099a4:	f7fa f81c 	bl	80039e0 <HAL_GetTick>
 80099a8:	4602      	mov	r2, r0
 80099aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ac:	1ad3      	subs	r3, r2, r3
 80099ae:	2b64      	cmp	r3, #100	; 0x64
 80099b0:	d901      	bls.n	80099b6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80099b2:	2303      	movs	r3, #3
 80099b4:	e1a2      	b.n	8009cfc <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80099b6:	4b12      	ldr	r3, [pc, #72]	; (8009a00 <HAL_RCC_OscConfig+0x4a8>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d0f0      	beq.n	80099a4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	689b      	ldr	r3, [r3, #8]
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d106      	bne.n	80099d8 <HAL_RCC_OscConfig+0x480>
 80099ca:	4b0c      	ldr	r3, [pc, #48]	; (80099fc <HAL_RCC_OscConfig+0x4a4>)
 80099cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099ce:	4a0b      	ldr	r2, [pc, #44]	; (80099fc <HAL_RCC_OscConfig+0x4a4>)
 80099d0:	f043 0301 	orr.w	r3, r3, #1
 80099d4:	6713      	str	r3, [r2, #112]	; 0x70
 80099d6:	e032      	b.n	8009a3e <HAL_RCC_OscConfig+0x4e6>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d111      	bne.n	8009a04 <HAL_RCC_OscConfig+0x4ac>
 80099e0:	4b06      	ldr	r3, [pc, #24]	; (80099fc <HAL_RCC_OscConfig+0x4a4>)
 80099e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099e4:	4a05      	ldr	r2, [pc, #20]	; (80099fc <HAL_RCC_OscConfig+0x4a4>)
 80099e6:	f023 0301 	bic.w	r3, r3, #1
 80099ea:	6713      	str	r3, [r2, #112]	; 0x70
 80099ec:	4b03      	ldr	r3, [pc, #12]	; (80099fc <HAL_RCC_OscConfig+0x4a4>)
 80099ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099f0:	4a02      	ldr	r2, [pc, #8]	; (80099fc <HAL_RCC_OscConfig+0x4a4>)
 80099f2:	f023 0304 	bic.w	r3, r3, #4
 80099f6:	6713      	str	r3, [r2, #112]	; 0x70
 80099f8:	e021      	b.n	8009a3e <HAL_RCC_OscConfig+0x4e6>
 80099fa:	bf00      	nop
 80099fc:	58024400 	.word	0x58024400
 8009a00:	58024800 	.word	0x58024800
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	2b05      	cmp	r3, #5
 8009a0a:	d10c      	bne.n	8009a26 <HAL_RCC_OscConfig+0x4ce>
 8009a0c:	4b83      	ldr	r3, [pc, #524]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a10:	4a82      	ldr	r2, [pc, #520]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009a12:	f043 0304 	orr.w	r3, r3, #4
 8009a16:	6713      	str	r3, [r2, #112]	; 0x70
 8009a18:	4b80      	ldr	r3, [pc, #512]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a1c:	4a7f      	ldr	r2, [pc, #508]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009a1e:	f043 0301 	orr.w	r3, r3, #1
 8009a22:	6713      	str	r3, [r2, #112]	; 0x70
 8009a24:	e00b      	b.n	8009a3e <HAL_RCC_OscConfig+0x4e6>
 8009a26:	4b7d      	ldr	r3, [pc, #500]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a2a:	4a7c      	ldr	r2, [pc, #496]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009a2c:	f023 0301 	bic.w	r3, r3, #1
 8009a30:	6713      	str	r3, [r2, #112]	; 0x70
 8009a32:	4b7a      	ldr	r3, [pc, #488]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a36:	4a79      	ldr	r2, [pc, #484]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009a38:	f023 0304 	bic.w	r3, r3, #4
 8009a3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d015      	beq.n	8009a72 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a46:	f7f9 ffcb 	bl	80039e0 <HAL_GetTick>
 8009a4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009a4c:	e00a      	b.n	8009a64 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a4e:	f7f9 ffc7 	bl	80039e0 <HAL_GetTick>
 8009a52:	4602      	mov	r2, r0
 8009a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a56:	1ad3      	subs	r3, r2, r3
 8009a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d901      	bls.n	8009a64 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009a60:	2303      	movs	r3, #3
 8009a62:	e14b      	b.n	8009cfc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009a64:	4b6d      	ldr	r3, [pc, #436]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a68:	f003 0302 	and.w	r3, r3, #2
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d0ee      	beq.n	8009a4e <HAL_RCC_OscConfig+0x4f6>
 8009a70:	e014      	b.n	8009a9c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a72:	f7f9 ffb5 	bl	80039e0 <HAL_GetTick>
 8009a76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009a78:	e00a      	b.n	8009a90 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a7a:	f7f9 ffb1 	bl	80039e0 <HAL_GetTick>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a82:	1ad3      	subs	r3, r2, r3
 8009a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d901      	bls.n	8009a90 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009a8c:	2303      	movs	r3, #3
 8009a8e:	e135      	b.n	8009cfc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009a90:	4b62      	ldr	r3, [pc, #392]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a94:	f003 0302 	and.w	r3, r3, #2
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d1ee      	bne.n	8009a7a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	f000 812a 	beq.w	8009cfa <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009aa6:	4b5d      	ldr	r3, [pc, #372]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009aa8:	691b      	ldr	r3, [r3, #16]
 8009aaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009aae:	2b18      	cmp	r3, #24
 8009ab0:	f000 80ba 	beq.w	8009c28 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	f040 8095 	bne.w	8009be8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009abe:	4b57      	ldr	r3, [pc, #348]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a56      	ldr	r2, [pc, #344]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009ac4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009aca:	f7f9 ff89 	bl	80039e0 <HAL_GetTick>
 8009ace:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009ad0:	e008      	b.n	8009ae4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ad2:	f7f9 ff85 	bl	80039e0 <HAL_GetTick>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ada:	1ad3      	subs	r3, r2, r3
 8009adc:	2b02      	cmp	r3, #2
 8009ade:	d901      	bls.n	8009ae4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009ae0:	2303      	movs	r3, #3
 8009ae2:	e10b      	b.n	8009cfc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009ae4:	4b4d      	ldr	r3, [pc, #308]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d1f0      	bne.n	8009ad2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009af0:	4b4a      	ldr	r3, [pc, #296]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009af2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009af4:	4b4a      	ldr	r3, [pc, #296]	; (8009c20 <HAL_RCC_OscConfig+0x6c8>)
 8009af6:	4013      	ands	r3, r2
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009b00:	0112      	lsls	r2, r2, #4
 8009b02:	430a      	orrs	r2, r1
 8009b04:	4945      	ldr	r1, [pc, #276]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009b06:	4313      	orrs	r3, r2
 8009b08:	628b      	str	r3, [r1, #40]	; 0x28
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b0e:	3b01      	subs	r3, #1
 8009b10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b18:	3b01      	subs	r3, #1
 8009b1a:	025b      	lsls	r3, r3, #9
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	431a      	orrs	r2, r3
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b24:	3b01      	subs	r3, #1
 8009b26:	041b      	lsls	r3, r3, #16
 8009b28:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009b2c:	431a      	orrs	r2, r3
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b32:	3b01      	subs	r3, #1
 8009b34:	061b      	lsls	r3, r3, #24
 8009b36:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009b3a:	4938      	ldr	r1, [pc, #224]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009b40:	4b36      	ldr	r3, [pc, #216]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b44:	4a35      	ldr	r2, [pc, #212]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009b46:	f023 0301 	bic.w	r3, r3, #1
 8009b4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009b4c:	4b33      	ldr	r3, [pc, #204]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009b4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b50:	4b34      	ldr	r3, [pc, #208]	; (8009c24 <HAL_RCC_OscConfig+0x6cc>)
 8009b52:	4013      	ands	r3, r2
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009b58:	00d2      	lsls	r2, r2, #3
 8009b5a:	4930      	ldr	r1, [pc, #192]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009b60:	4b2e      	ldr	r3, [pc, #184]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b64:	f023 020c 	bic.w	r2, r3, #12
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b6c:	492b      	ldr	r1, [pc, #172]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009b72:	4b2a      	ldr	r3, [pc, #168]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b76:	f023 0202 	bic.w	r2, r3, #2
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b7e:	4927      	ldr	r1, [pc, #156]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009b80:	4313      	orrs	r3, r2
 8009b82:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009b84:	4b25      	ldr	r3, [pc, #148]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b88:	4a24      	ldr	r2, [pc, #144]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009b8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b90:	4b22      	ldr	r3, [pc, #136]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b94:	4a21      	ldr	r2, [pc, #132]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009b9c:	4b1f      	ldr	r3, [pc, #124]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba0:	4a1e      	ldr	r2, [pc, #120]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009ba2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ba6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009ba8:	4b1c      	ldr	r3, [pc, #112]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bac:	4a1b      	ldr	r2, [pc, #108]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009bae:	f043 0301 	orr.w	r3, r3, #1
 8009bb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009bb4:	4b19      	ldr	r3, [pc, #100]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a18      	ldr	r2, [pc, #96]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009bba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bc0:	f7f9 ff0e 	bl	80039e0 <HAL_GetTick>
 8009bc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009bc6:	e008      	b.n	8009bda <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009bc8:	f7f9 ff0a 	bl	80039e0 <HAL_GetTick>
 8009bcc:	4602      	mov	r2, r0
 8009bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd0:	1ad3      	subs	r3, r2, r3
 8009bd2:	2b02      	cmp	r3, #2
 8009bd4:	d901      	bls.n	8009bda <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	e090      	b.n	8009cfc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009bda:	4b10      	ldr	r3, [pc, #64]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d0f0      	beq.n	8009bc8 <HAL_RCC_OscConfig+0x670>
 8009be6:	e088      	b.n	8009cfa <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009be8:	4b0c      	ldr	r3, [pc, #48]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a0b      	ldr	r2, [pc, #44]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009bee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bf4:	f7f9 fef4 	bl	80039e0 <HAL_GetTick>
 8009bf8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009bfa:	e008      	b.n	8009c0e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009bfc:	f7f9 fef0 	bl	80039e0 <HAL_GetTick>
 8009c00:	4602      	mov	r2, r0
 8009c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c04:	1ad3      	subs	r3, r2, r3
 8009c06:	2b02      	cmp	r3, #2
 8009c08:	d901      	bls.n	8009c0e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009c0a:	2303      	movs	r3, #3
 8009c0c:	e076      	b.n	8009cfc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009c0e:	4b03      	ldr	r3, [pc, #12]	; (8009c1c <HAL_RCC_OscConfig+0x6c4>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d1f0      	bne.n	8009bfc <HAL_RCC_OscConfig+0x6a4>
 8009c1a:	e06e      	b.n	8009cfa <HAL_RCC_OscConfig+0x7a2>
 8009c1c:	58024400 	.word	0x58024400
 8009c20:	fffffc0c 	.word	0xfffffc0c
 8009c24:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009c28:	4b36      	ldr	r3, [pc, #216]	; (8009d04 <HAL_RCC_OscConfig+0x7ac>)
 8009c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c2c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009c2e:	4b35      	ldr	r3, [pc, #212]	; (8009d04 <HAL_RCC_OscConfig+0x7ac>)
 8009c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c32:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d031      	beq.n	8009ca0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	f003 0203 	and.w	r2, r3, #3
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d12a      	bne.n	8009ca0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	091b      	lsrs	r3, r3, #4
 8009c4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d122      	bne.n	8009ca0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c64:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d11a      	bne.n	8009ca0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	0a5b      	lsrs	r3, r3, #9
 8009c6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c76:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d111      	bne.n	8009ca0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	0c1b      	lsrs	r3, r3, #16
 8009c80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c88:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d108      	bne.n	8009ca0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	0e1b      	lsrs	r3, r3, #24
 8009c92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c9a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d001      	beq.n	8009ca4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	e02b      	b.n	8009cfc <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009ca4:	4b17      	ldr	r3, [pc, #92]	; (8009d04 <HAL_RCC_OscConfig+0x7ac>)
 8009ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ca8:	08db      	lsrs	r3, r3, #3
 8009caa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009cae:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cb4:	693a      	ldr	r2, [r7, #16]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d01f      	beq.n	8009cfa <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009cba:	4b12      	ldr	r3, [pc, #72]	; (8009d04 <HAL_RCC_OscConfig+0x7ac>)
 8009cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cbe:	4a11      	ldr	r2, [pc, #68]	; (8009d04 <HAL_RCC_OscConfig+0x7ac>)
 8009cc0:	f023 0301 	bic.w	r3, r3, #1
 8009cc4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009cc6:	f7f9 fe8b 	bl	80039e0 <HAL_GetTick>
 8009cca:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009ccc:	bf00      	nop
 8009cce:	f7f9 fe87 	bl	80039e0 <HAL_GetTick>
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d0f9      	beq.n	8009cce <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009cda:	4b0a      	ldr	r3, [pc, #40]	; (8009d04 <HAL_RCC_OscConfig+0x7ac>)
 8009cdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cde:	4b0a      	ldr	r3, [pc, #40]	; (8009d08 <HAL_RCC_OscConfig+0x7b0>)
 8009ce0:	4013      	ands	r3, r2
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009ce6:	00d2      	lsls	r2, r2, #3
 8009ce8:	4906      	ldr	r1, [pc, #24]	; (8009d04 <HAL_RCC_OscConfig+0x7ac>)
 8009cea:	4313      	orrs	r3, r2
 8009cec:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009cee:	4b05      	ldr	r3, [pc, #20]	; (8009d04 <HAL_RCC_OscConfig+0x7ac>)
 8009cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf2:	4a04      	ldr	r2, [pc, #16]	; (8009d04 <HAL_RCC_OscConfig+0x7ac>)
 8009cf4:	f043 0301 	orr.w	r3, r3, #1
 8009cf8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009cfa:	2300      	movs	r3, #0
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3730      	adds	r7, #48	; 0x30
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	58024400 	.word	0x58024400
 8009d08:	ffff0007 	.word	0xffff0007

08009d0c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b086      	sub	sp, #24
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d101      	bne.n	8009d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	e19c      	b.n	800a05a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009d20:	4b8a      	ldr	r3, [pc, #552]	; (8009f4c <HAL_RCC_ClockConfig+0x240>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f003 030f 	and.w	r3, r3, #15
 8009d28:	683a      	ldr	r2, [r7, #0]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d910      	bls.n	8009d50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d2e:	4b87      	ldr	r3, [pc, #540]	; (8009f4c <HAL_RCC_ClockConfig+0x240>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f023 020f 	bic.w	r2, r3, #15
 8009d36:	4985      	ldr	r1, [pc, #532]	; (8009f4c <HAL_RCC_ClockConfig+0x240>)
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d3e:	4b83      	ldr	r3, [pc, #524]	; (8009f4c <HAL_RCC_ClockConfig+0x240>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f003 030f 	and.w	r3, r3, #15
 8009d46:	683a      	ldr	r2, [r7, #0]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d001      	beq.n	8009d50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	e184      	b.n	800a05a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f003 0304 	and.w	r3, r3, #4
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d010      	beq.n	8009d7e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	691a      	ldr	r2, [r3, #16]
 8009d60:	4b7b      	ldr	r3, [pc, #492]	; (8009f50 <HAL_RCC_ClockConfig+0x244>)
 8009d62:	699b      	ldr	r3, [r3, #24]
 8009d64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d908      	bls.n	8009d7e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009d6c:	4b78      	ldr	r3, [pc, #480]	; (8009f50 <HAL_RCC_ClockConfig+0x244>)
 8009d6e:	699b      	ldr	r3, [r3, #24]
 8009d70:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	691b      	ldr	r3, [r3, #16]
 8009d78:	4975      	ldr	r1, [pc, #468]	; (8009f50 <HAL_RCC_ClockConfig+0x244>)
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f003 0308 	and.w	r3, r3, #8
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d010      	beq.n	8009dac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	695a      	ldr	r2, [r3, #20]
 8009d8e:	4b70      	ldr	r3, [pc, #448]	; (8009f50 <HAL_RCC_ClockConfig+0x244>)
 8009d90:	69db      	ldr	r3, [r3, #28]
 8009d92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d908      	bls.n	8009dac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009d9a:	4b6d      	ldr	r3, [pc, #436]	; (8009f50 <HAL_RCC_ClockConfig+0x244>)
 8009d9c:	69db      	ldr	r3, [r3, #28]
 8009d9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	695b      	ldr	r3, [r3, #20]
 8009da6:	496a      	ldr	r1, [pc, #424]	; (8009f50 <HAL_RCC_ClockConfig+0x244>)
 8009da8:	4313      	orrs	r3, r2
 8009daa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 0310 	and.w	r3, r3, #16
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d010      	beq.n	8009dda <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	699a      	ldr	r2, [r3, #24]
 8009dbc:	4b64      	ldr	r3, [pc, #400]	; (8009f50 <HAL_RCC_ClockConfig+0x244>)
 8009dbe:	69db      	ldr	r3, [r3, #28]
 8009dc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d908      	bls.n	8009dda <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009dc8:	4b61      	ldr	r3, [pc, #388]	; (8009f50 <HAL_RCC_ClockConfig+0x244>)
 8009dca:	69db      	ldr	r3, [r3, #28]
 8009dcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	699b      	ldr	r3, [r3, #24]
 8009dd4:	495e      	ldr	r1, [pc, #376]	; (8009f50 <HAL_RCC_ClockConfig+0x244>)
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f003 0320 	and.w	r3, r3, #32
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d010      	beq.n	8009e08 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	69da      	ldr	r2, [r3, #28]
 8009dea:	4b59      	ldr	r3, [pc, #356]	; (8009f50 <HAL_RCC_ClockConfig+0x244>)
 8009dec:	6a1b      	ldr	r3, [r3, #32]
 8009dee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d908      	bls.n	8009e08 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009df6:	4b56      	ldr	r3, [pc, #344]	; (8009f50 <HAL_RCC_ClockConfig+0x244>)
 8009df8:	6a1b      	ldr	r3, [r3, #32]
 8009dfa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	69db      	ldr	r3, [r3, #28]
 8009e02:	4953      	ldr	r1, [pc, #332]	; (8009f50 <HAL_RCC_ClockConfig+0x244>)
 8009e04:	4313      	orrs	r3, r2
 8009e06:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f003 0302 	and.w	r3, r3, #2
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d010      	beq.n	8009e36 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	68da      	ldr	r2, [r3, #12]
 8009e18:	4b4d      	ldr	r3, [pc, #308]	; (8009f50 <HAL_RCC_ClockConfig+0x244>)
 8009e1a:	699b      	ldr	r3, [r3, #24]
 8009e1c:	f003 030f 	and.w	r3, r3, #15
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d908      	bls.n	8009e36 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e24:	4b4a      	ldr	r3, [pc, #296]	; (8009f50 <HAL_RCC_ClockConfig+0x244>)
 8009e26:	699b      	ldr	r3, [r3, #24]
 8009e28:	f023 020f 	bic.w	r2, r3, #15
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	4947      	ldr	r1, [pc, #284]	; (8009f50 <HAL_RCC_ClockConfig+0x244>)
 8009e32:	4313      	orrs	r3, r2
 8009e34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f003 0301 	and.w	r3, r3, #1
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d055      	beq.n	8009eee <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009e42:	4b43      	ldr	r3, [pc, #268]	; (8009f50 <HAL_RCC_ClockConfig+0x244>)
 8009e44:	699b      	ldr	r3, [r3, #24]
 8009e46:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	689b      	ldr	r3, [r3, #8]
 8009e4e:	4940      	ldr	r1, [pc, #256]	; (8009f50 <HAL_RCC_ClockConfig+0x244>)
 8009e50:	4313      	orrs	r3, r2
 8009e52:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	2b02      	cmp	r3, #2
 8009e5a:	d107      	bne.n	8009e6c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009e5c:	4b3c      	ldr	r3, [pc, #240]	; (8009f50 <HAL_RCC_ClockConfig+0x244>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d121      	bne.n	8009eac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e0f6      	b.n	800a05a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	2b03      	cmp	r3, #3
 8009e72:	d107      	bne.n	8009e84 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009e74:	4b36      	ldr	r3, [pc, #216]	; (8009f50 <HAL_RCC_ClockConfig+0x244>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d115      	bne.n	8009eac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009e80:	2301      	movs	r3, #1
 8009e82:	e0ea      	b.n	800a05a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d107      	bne.n	8009e9c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009e8c:	4b30      	ldr	r3, [pc, #192]	; (8009f50 <HAL_RCC_ClockConfig+0x244>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d109      	bne.n	8009eac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	e0de      	b.n	800a05a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e9c:	4b2c      	ldr	r3, [pc, #176]	; (8009f50 <HAL_RCC_ClockConfig+0x244>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f003 0304 	and.w	r3, r3, #4
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d101      	bne.n	8009eac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	e0d6      	b.n	800a05a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009eac:	4b28      	ldr	r3, [pc, #160]	; (8009f50 <HAL_RCC_ClockConfig+0x244>)
 8009eae:	691b      	ldr	r3, [r3, #16]
 8009eb0:	f023 0207 	bic.w	r2, r3, #7
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	4925      	ldr	r1, [pc, #148]	; (8009f50 <HAL_RCC_ClockConfig+0x244>)
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ebe:	f7f9 fd8f 	bl	80039e0 <HAL_GetTick>
 8009ec2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ec4:	e00a      	b.n	8009edc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ec6:	f7f9 fd8b 	bl	80039e0 <HAL_GetTick>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	1ad3      	subs	r3, r2, r3
 8009ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d901      	bls.n	8009edc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009ed8:	2303      	movs	r3, #3
 8009eda:	e0be      	b.n	800a05a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009edc:	4b1c      	ldr	r3, [pc, #112]	; (8009f50 <HAL_RCC_ClockConfig+0x244>)
 8009ede:	691b      	ldr	r3, [r3, #16]
 8009ee0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	00db      	lsls	r3, r3, #3
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d1eb      	bne.n	8009ec6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f003 0302 	and.w	r3, r3, #2
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d010      	beq.n	8009f1c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	68da      	ldr	r2, [r3, #12]
 8009efe:	4b14      	ldr	r3, [pc, #80]	; (8009f50 <HAL_RCC_ClockConfig+0x244>)
 8009f00:	699b      	ldr	r3, [r3, #24]
 8009f02:	f003 030f 	and.w	r3, r3, #15
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d208      	bcs.n	8009f1c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f0a:	4b11      	ldr	r3, [pc, #68]	; (8009f50 <HAL_RCC_ClockConfig+0x244>)
 8009f0c:	699b      	ldr	r3, [r3, #24]
 8009f0e:	f023 020f 	bic.w	r2, r3, #15
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	490e      	ldr	r1, [pc, #56]	; (8009f50 <HAL_RCC_ClockConfig+0x244>)
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009f1c:	4b0b      	ldr	r3, [pc, #44]	; (8009f4c <HAL_RCC_ClockConfig+0x240>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f003 030f 	and.w	r3, r3, #15
 8009f24:	683a      	ldr	r2, [r7, #0]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d214      	bcs.n	8009f54 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f2a:	4b08      	ldr	r3, [pc, #32]	; (8009f4c <HAL_RCC_ClockConfig+0x240>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f023 020f 	bic.w	r2, r3, #15
 8009f32:	4906      	ldr	r1, [pc, #24]	; (8009f4c <HAL_RCC_ClockConfig+0x240>)
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	4313      	orrs	r3, r2
 8009f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f3a:	4b04      	ldr	r3, [pc, #16]	; (8009f4c <HAL_RCC_ClockConfig+0x240>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f003 030f 	and.w	r3, r3, #15
 8009f42:	683a      	ldr	r2, [r7, #0]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d005      	beq.n	8009f54 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e086      	b.n	800a05a <HAL_RCC_ClockConfig+0x34e>
 8009f4c:	52002000 	.word	0x52002000
 8009f50:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f003 0304 	and.w	r3, r3, #4
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d010      	beq.n	8009f82 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	691a      	ldr	r2, [r3, #16]
 8009f64:	4b3f      	ldr	r3, [pc, #252]	; (800a064 <HAL_RCC_ClockConfig+0x358>)
 8009f66:	699b      	ldr	r3, [r3, #24]
 8009f68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d208      	bcs.n	8009f82 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009f70:	4b3c      	ldr	r3, [pc, #240]	; (800a064 <HAL_RCC_ClockConfig+0x358>)
 8009f72:	699b      	ldr	r3, [r3, #24]
 8009f74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	691b      	ldr	r3, [r3, #16]
 8009f7c:	4939      	ldr	r1, [pc, #228]	; (800a064 <HAL_RCC_ClockConfig+0x358>)
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f003 0308 	and.w	r3, r3, #8
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d010      	beq.n	8009fb0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	695a      	ldr	r2, [r3, #20]
 8009f92:	4b34      	ldr	r3, [pc, #208]	; (800a064 <HAL_RCC_ClockConfig+0x358>)
 8009f94:	69db      	ldr	r3, [r3, #28]
 8009f96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d208      	bcs.n	8009fb0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009f9e:	4b31      	ldr	r3, [pc, #196]	; (800a064 <HAL_RCC_ClockConfig+0x358>)
 8009fa0:	69db      	ldr	r3, [r3, #28]
 8009fa2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	695b      	ldr	r3, [r3, #20]
 8009faa:	492e      	ldr	r1, [pc, #184]	; (800a064 <HAL_RCC_ClockConfig+0x358>)
 8009fac:	4313      	orrs	r3, r2
 8009fae:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f003 0310 	and.w	r3, r3, #16
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d010      	beq.n	8009fde <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	699a      	ldr	r2, [r3, #24]
 8009fc0:	4b28      	ldr	r3, [pc, #160]	; (800a064 <HAL_RCC_ClockConfig+0x358>)
 8009fc2:	69db      	ldr	r3, [r3, #28]
 8009fc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d208      	bcs.n	8009fde <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009fcc:	4b25      	ldr	r3, [pc, #148]	; (800a064 <HAL_RCC_ClockConfig+0x358>)
 8009fce:	69db      	ldr	r3, [r3, #28]
 8009fd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	699b      	ldr	r3, [r3, #24]
 8009fd8:	4922      	ldr	r1, [pc, #136]	; (800a064 <HAL_RCC_ClockConfig+0x358>)
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f003 0320 	and.w	r3, r3, #32
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d010      	beq.n	800a00c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	69da      	ldr	r2, [r3, #28]
 8009fee:	4b1d      	ldr	r3, [pc, #116]	; (800a064 <HAL_RCC_ClockConfig+0x358>)
 8009ff0:	6a1b      	ldr	r3, [r3, #32]
 8009ff2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d208      	bcs.n	800a00c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009ffa:	4b1a      	ldr	r3, [pc, #104]	; (800a064 <HAL_RCC_ClockConfig+0x358>)
 8009ffc:	6a1b      	ldr	r3, [r3, #32]
 8009ffe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	69db      	ldr	r3, [r3, #28]
 800a006:	4917      	ldr	r1, [pc, #92]	; (800a064 <HAL_RCC_ClockConfig+0x358>)
 800a008:	4313      	orrs	r3, r2
 800a00a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a00c:	f000 f834 	bl	800a078 <HAL_RCC_GetSysClockFreq>
 800a010:	4602      	mov	r2, r0
 800a012:	4b14      	ldr	r3, [pc, #80]	; (800a064 <HAL_RCC_ClockConfig+0x358>)
 800a014:	699b      	ldr	r3, [r3, #24]
 800a016:	0a1b      	lsrs	r3, r3, #8
 800a018:	f003 030f 	and.w	r3, r3, #15
 800a01c:	4912      	ldr	r1, [pc, #72]	; (800a068 <HAL_RCC_ClockConfig+0x35c>)
 800a01e:	5ccb      	ldrb	r3, [r1, r3]
 800a020:	f003 031f 	and.w	r3, r3, #31
 800a024:	fa22 f303 	lsr.w	r3, r2, r3
 800a028:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a02a:	4b0e      	ldr	r3, [pc, #56]	; (800a064 <HAL_RCC_ClockConfig+0x358>)
 800a02c:	699b      	ldr	r3, [r3, #24]
 800a02e:	f003 030f 	and.w	r3, r3, #15
 800a032:	4a0d      	ldr	r2, [pc, #52]	; (800a068 <HAL_RCC_ClockConfig+0x35c>)
 800a034:	5cd3      	ldrb	r3, [r2, r3]
 800a036:	f003 031f 	and.w	r3, r3, #31
 800a03a:	693a      	ldr	r2, [r7, #16]
 800a03c:	fa22 f303 	lsr.w	r3, r2, r3
 800a040:	4a0a      	ldr	r2, [pc, #40]	; (800a06c <HAL_RCC_ClockConfig+0x360>)
 800a042:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a044:	4a0a      	ldr	r2, [pc, #40]	; (800a070 <HAL_RCC_ClockConfig+0x364>)
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a04a:	4b0a      	ldr	r3, [pc, #40]	; (800a074 <HAL_RCC_ClockConfig+0x368>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4618      	mov	r0, r3
 800a050:	f7f9 fc7c 	bl	800394c <HAL_InitTick>
 800a054:	4603      	mov	r3, r0
 800a056:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a058:	7bfb      	ldrb	r3, [r7, #15]
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3718      	adds	r7, #24
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	58024400 	.word	0x58024400
 800a068:	080156d4 	.word	0x080156d4
 800a06c:	24000004 	.word	0x24000004
 800a070:	24000000 	.word	0x24000000
 800a074:	24000008 	.word	0x24000008

0800a078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a078:	b480      	push	{r7}
 800a07a:	b089      	sub	sp, #36	; 0x24
 800a07c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a07e:	4bb3      	ldr	r3, [pc, #716]	; (800a34c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a080:	691b      	ldr	r3, [r3, #16]
 800a082:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a086:	2b18      	cmp	r3, #24
 800a088:	f200 8155 	bhi.w	800a336 <HAL_RCC_GetSysClockFreq+0x2be>
 800a08c:	a201      	add	r2, pc, #4	; (adr r2, 800a094 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a08e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a092:	bf00      	nop
 800a094:	0800a0f9 	.word	0x0800a0f9
 800a098:	0800a337 	.word	0x0800a337
 800a09c:	0800a337 	.word	0x0800a337
 800a0a0:	0800a337 	.word	0x0800a337
 800a0a4:	0800a337 	.word	0x0800a337
 800a0a8:	0800a337 	.word	0x0800a337
 800a0ac:	0800a337 	.word	0x0800a337
 800a0b0:	0800a337 	.word	0x0800a337
 800a0b4:	0800a11f 	.word	0x0800a11f
 800a0b8:	0800a337 	.word	0x0800a337
 800a0bc:	0800a337 	.word	0x0800a337
 800a0c0:	0800a337 	.word	0x0800a337
 800a0c4:	0800a337 	.word	0x0800a337
 800a0c8:	0800a337 	.word	0x0800a337
 800a0cc:	0800a337 	.word	0x0800a337
 800a0d0:	0800a337 	.word	0x0800a337
 800a0d4:	0800a125 	.word	0x0800a125
 800a0d8:	0800a337 	.word	0x0800a337
 800a0dc:	0800a337 	.word	0x0800a337
 800a0e0:	0800a337 	.word	0x0800a337
 800a0e4:	0800a337 	.word	0x0800a337
 800a0e8:	0800a337 	.word	0x0800a337
 800a0ec:	0800a337 	.word	0x0800a337
 800a0f0:	0800a337 	.word	0x0800a337
 800a0f4:	0800a12b 	.word	0x0800a12b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0f8:	4b94      	ldr	r3, [pc, #592]	; (800a34c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f003 0320 	and.w	r3, r3, #32
 800a100:	2b00      	cmp	r3, #0
 800a102:	d009      	beq.n	800a118 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a104:	4b91      	ldr	r3, [pc, #580]	; (800a34c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	08db      	lsrs	r3, r3, #3
 800a10a:	f003 0303 	and.w	r3, r3, #3
 800a10e:	4a90      	ldr	r2, [pc, #576]	; (800a350 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a110:	fa22 f303 	lsr.w	r3, r2, r3
 800a114:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a116:	e111      	b.n	800a33c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a118:	4b8d      	ldr	r3, [pc, #564]	; (800a350 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a11a:	61bb      	str	r3, [r7, #24]
      break;
 800a11c:	e10e      	b.n	800a33c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a11e:	4b8d      	ldr	r3, [pc, #564]	; (800a354 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a120:	61bb      	str	r3, [r7, #24]
      break;
 800a122:	e10b      	b.n	800a33c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a124:	4b8c      	ldr	r3, [pc, #560]	; (800a358 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a126:	61bb      	str	r3, [r7, #24]
      break;
 800a128:	e108      	b.n	800a33c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a12a:	4b88      	ldr	r3, [pc, #544]	; (800a34c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a12c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a12e:	f003 0303 	and.w	r3, r3, #3
 800a132:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a134:	4b85      	ldr	r3, [pc, #532]	; (800a34c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a138:	091b      	lsrs	r3, r3, #4
 800a13a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a13e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a140:	4b82      	ldr	r3, [pc, #520]	; (800a34c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a144:	f003 0301 	and.w	r3, r3, #1
 800a148:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a14a:	4b80      	ldr	r3, [pc, #512]	; (800a34c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a14c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a14e:	08db      	lsrs	r3, r3, #3
 800a150:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a154:	68fa      	ldr	r2, [r7, #12]
 800a156:	fb02 f303 	mul.w	r3, r2, r3
 800a15a:	ee07 3a90 	vmov	s15, r3
 800a15e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a162:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	f000 80e1 	beq.w	800a330 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	2b02      	cmp	r3, #2
 800a172:	f000 8083 	beq.w	800a27c <HAL_RCC_GetSysClockFreq+0x204>
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	2b02      	cmp	r3, #2
 800a17a:	f200 80a1 	bhi.w	800a2c0 <HAL_RCC_GetSysClockFreq+0x248>
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d003      	beq.n	800a18c <HAL_RCC_GetSysClockFreq+0x114>
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	2b01      	cmp	r3, #1
 800a188:	d056      	beq.n	800a238 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a18a:	e099      	b.n	800a2c0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a18c:	4b6f      	ldr	r3, [pc, #444]	; (800a34c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f003 0320 	and.w	r3, r3, #32
 800a194:	2b00      	cmp	r3, #0
 800a196:	d02d      	beq.n	800a1f4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a198:	4b6c      	ldr	r3, [pc, #432]	; (800a34c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	08db      	lsrs	r3, r3, #3
 800a19e:	f003 0303 	and.w	r3, r3, #3
 800a1a2:	4a6b      	ldr	r2, [pc, #428]	; (800a350 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a1a4:	fa22 f303 	lsr.w	r3, r2, r3
 800a1a8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	ee07 3a90 	vmov	s15, r3
 800a1b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	ee07 3a90 	vmov	s15, r3
 800a1ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1c2:	4b62      	ldr	r3, [pc, #392]	; (800a34c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ca:	ee07 3a90 	vmov	s15, r3
 800a1ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1d2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a1d6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a35c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a1da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1ee:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a1f2:	e087      	b.n	800a304 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	ee07 3a90 	vmov	s15, r3
 800a1fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1fe:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a360 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a206:	4b51      	ldr	r3, [pc, #324]	; (800a34c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a20a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a20e:	ee07 3a90 	vmov	s15, r3
 800a212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a216:	ed97 6a02 	vldr	s12, [r7, #8]
 800a21a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a35c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a21e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a226:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a22a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a22e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a232:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a236:	e065      	b.n	800a304 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	ee07 3a90 	vmov	s15, r3
 800a23e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a242:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a364 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a24a:	4b40      	ldr	r3, [pc, #256]	; (800a34c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a24c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a24e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a252:	ee07 3a90 	vmov	s15, r3
 800a256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a25a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a25e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a35c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a26a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a26e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a272:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a276:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a27a:	e043      	b.n	800a304 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	ee07 3a90 	vmov	s15, r3
 800a282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a286:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a368 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a28a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a28e:	4b2f      	ldr	r3, [pc, #188]	; (800a34c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a296:	ee07 3a90 	vmov	s15, r3
 800a29a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a29e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a2a2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a35c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a2a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a2be:	e021      	b.n	800a304 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	ee07 3a90 	vmov	s15, r3
 800a2c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2ca:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a364 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a2ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2d2:	4b1e      	ldr	r3, [pc, #120]	; (800a34c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2da:	ee07 3a90 	vmov	s15, r3
 800a2de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2e2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a2e6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a35c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a2ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a302:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a304:	4b11      	ldr	r3, [pc, #68]	; (800a34c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a308:	0a5b      	lsrs	r3, r3, #9
 800a30a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a30e:	3301      	adds	r3, #1
 800a310:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	ee07 3a90 	vmov	s15, r3
 800a318:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a31c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a320:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a324:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a328:	ee17 3a90 	vmov	r3, s15
 800a32c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a32e:	e005      	b.n	800a33c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a330:	2300      	movs	r3, #0
 800a332:	61bb      	str	r3, [r7, #24]
      break;
 800a334:	e002      	b.n	800a33c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a336:	4b07      	ldr	r3, [pc, #28]	; (800a354 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a338:	61bb      	str	r3, [r7, #24]
      break;
 800a33a:	bf00      	nop
  }

  return sysclockfreq;
 800a33c:	69bb      	ldr	r3, [r7, #24]
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3724      	adds	r7, #36	; 0x24
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr
 800a34a:	bf00      	nop
 800a34c:	58024400 	.word	0x58024400
 800a350:	03d09000 	.word	0x03d09000
 800a354:	003d0900 	.word	0x003d0900
 800a358:	007a1200 	.word	0x007a1200
 800a35c:	46000000 	.word	0x46000000
 800a360:	4c742400 	.word	0x4c742400
 800a364:	4a742400 	.word	0x4a742400
 800a368:	4af42400 	.word	0x4af42400

0800a36c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a372:	f7ff fe81 	bl	800a078 <HAL_RCC_GetSysClockFreq>
 800a376:	4602      	mov	r2, r0
 800a378:	4b10      	ldr	r3, [pc, #64]	; (800a3bc <HAL_RCC_GetHCLKFreq+0x50>)
 800a37a:	699b      	ldr	r3, [r3, #24]
 800a37c:	0a1b      	lsrs	r3, r3, #8
 800a37e:	f003 030f 	and.w	r3, r3, #15
 800a382:	490f      	ldr	r1, [pc, #60]	; (800a3c0 <HAL_RCC_GetHCLKFreq+0x54>)
 800a384:	5ccb      	ldrb	r3, [r1, r3]
 800a386:	f003 031f 	and.w	r3, r3, #31
 800a38a:	fa22 f303 	lsr.w	r3, r2, r3
 800a38e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a390:	4b0a      	ldr	r3, [pc, #40]	; (800a3bc <HAL_RCC_GetHCLKFreq+0x50>)
 800a392:	699b      	ldr	r3, [r3, #24]
 800a394:	f003 030f 	and.w	r3, r3, #15
 800a398:	4a09      	ldr	r2, [pc, #36]	; (800a3c0 <HAL_RCC_GetHCLKFreq+0x54>)
 800a39a:	5cd3      	ldrb	r3, [r2, r3]
 800a39c:	f003 031f 	and.w	r3, r3, #31
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	fa22 f303 	lsr.w	r3, r2, r3
 800a3a6:	4a07      	ldr	r2, [pc, #28]	; (800a3c4 <HAL_RCC_GetHCLKFreq+0x58>)
 800a3a8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a3aa:	4a07      	ldr	r2, [pc, #28]	; (800a3c8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a3b0:	4b04      	ldr	r3, [pc, #16]	; (800a3c4 <HAL_RCC_GetHCLKFreq+0x58>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3708      	adds	r7, #8
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}
 800a3bc:	58024400 	.word	0x58024400
 800a3c0:	080156d4 	.word	0x080156d4
 800a3c4:	24000004 	.word	0x24000004
 800a3c8:	24000000 	.word	0x24000000

0800a3cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a3d0:	f7ff ffcc 	bl	800a36c <HAL_RCC_GetHCLKFreq>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	4b06      	ldr	r3, [pc, #24]	; (800a3f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a3d8:	69db      	ldr	r3, [r3, #28]
 800a3da:	091b      	lsrs	r3, r3, #4
 800a3dc:	f003 0307 	and.w	r3, r3, #7
 800a3e0:	4904      	ldr	r1, [pc, #16]	; (800a3f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a3e2:	5ccb      	ldrb	r3, [r1, r3]
 800a3e4:	f003 031f 	and.w	r3, r3, #31
 800a3e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	58024400 	.word	0x58024400
 800a3f4:	080156d4 	.word	0x080156d4

0800a3f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a3fc:	f7ff ffb6 	bl	800a36c <HAL_RCC_GetHCLKFreq>
 800a400:	4602      	mov	r2, r0
 800a402:	4b06      	ldr	r3, [pc, #24]	; (800a41c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a404:	69db      	ldr	r3, [r3, #28]
 800a406:	0a1b      	lsrs	r3, r3, #8
 800a408:	f003 0307 	and.w	r3, r3, #7
 800a40c:	4904      	ldr	r1, [pc, #16]	; (800a420 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a40e:	5ccb      	ldrb	r3, [r1, r3]
 800a410:	f003 031f 	and.w	r3, r3, #31
 800a414:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a418:	4618      	mov	r0, r3
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	58024400 	.word	0x58024400
 800a420:	080156d4 	.word	0x080156d4

0800a424 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a428:	b0c6      	sub	sp, #280	; 0x118
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a430:	2300      	movs	r3, #0
 800a432:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a436:	2300      	movs	r3, #0
 800a438:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a43c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a444:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a448:	2500      	movs	r5, #0
 800a44a:	ea54 0305 	orrs.w	r3, r4, r5
 800a44e:	d049      	beq.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a454:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a456:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a45a:	d02f      	beq.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a45c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a460:	d828      	bhi.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a462:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a466:	d01a      	beq.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a468:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a46c:	d822      	bhi.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d003      	beq.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a472:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a476:	d007      	beq.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a478:	e01c      	b.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a47a:	4bab      	ldr	r3, [pc, #684]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a47c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a47e:	4aaa      	ldr	r2, [pc, #680]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a484:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a486:	e01a      	b.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a48c:	3308      	adds	r3, #8
 800a48e:	2102      	movs	r1, #2
 800a490:	4618      	mov	r0, r3
 800a492:	f002 fa49 	bl	800c928 <RCCEx_PLL2_Config>
 800a496:	4603      	mov	r3, r0
 800a498:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a49c:	e00f      	b.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a49e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4a2:	3328      	adds	r3, #40	; 0x28
 800a4a4:	2102      	movs	r1, #2
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f002 faf0 	bl	800ca8c <RCCEx_PLL3_Config>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a4b2:	e004      	b.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a4ba:	e000      	b.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a4bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d10a      	bne.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a4c6:	4b98      	ldr	r3, [pc, #608]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a4c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4ca:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a4ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4d4:	4a94      	ldr	r2, [pc, #592]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a4d6:	430b      	orrs	r3, r1
 800a4d8:	6513      	str	r3, [r2, #80]	; 0x50
 800a4da:	e003      	b.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a4e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a4e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ec:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a4f0:	f04f 0900 	mov.w	r9, #0
 800a4f4:	ea58 0309 	orrs.w	r3, r8, r9
 800a4f8:	d047      	beq.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a4fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a500:	2b04      	cmp	r3, #4
 800a502:	d82a      	bhi.n	800a55a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a504:	a201      	add	r2, pc, #4	; (adr r2, 800a50c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a50a:	bf00      	nop
 800a50c:	0800a521 	.word	0x0800a521
 800a510:	0800a52f 	.word	0x0800a52f
 800a514:	0800a545 	.word	0x0800a545
 800a518:	0800a563 	.word	0x0800a563
 800a51c:	0800a563 	.word	0x0800a563
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a520:	4b81      	ldr	r3, [pc, #516]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a524:	4a80      	ldr	r2, [pc, #512]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a52a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a52c:	e01a      	b.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a52e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a532:	3308      	adds	r3, #8
 800a534:	2100      	movs	r1, #0
 800a536:	4618      	mov	r0, r3
 800a538:	f002 f9f6 	bl	800c928 <RCCEx_PLL2_Config>
 800a53c:	4603      	mov	r3, r0
 800a53e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a542:	e00f      	b.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a548:	3328      	adds	r3, #40	; 0x28
 800a54a:	2100      	movs	r1, #0
 800a54c:	4618      	mov	r0, r3
 800a54e:	f002 fa9d 	bl	800ca8c <RCCEx_PLL3_Config>
 800a552:	4603      	mov	r3, r0
 800a554:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a558:	e004      	b.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a55a:	2301      	movs	r3, #1
 800a55c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a560:	e000      	b.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a562:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a564:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d10a      	bne.n	800a582 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a56c:	4b6e      	ldr	r3, [pc, #440]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a56e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a570:	f023 0107 	bic.w	r1, r3, #7
 800a574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a57a:	4a6b      	ldr	r2, [pc, #428]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a57c:	430b      	orrs	r3, r1
 800a57e:	6513      	str	r3, [r2, #80]	; 0x50
 800a580:	e003      	b.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a582:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a586:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a58a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a592:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800a596:	f04f 0b00 	mov.w	fp, #0
 800a59a:	ea5a 030b 	orrs.w	r3, sl, fp
 800a59e:	d05b      	beq.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a5a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a5a8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a5ac:	d03b      	beq.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a5ae:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a5b2:	d834      	bhi.n	800a61e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a5b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a5b8:	d037      	beq.n	800a62a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a5ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a5be:	d82e      	bhi.n	800a61e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a5c0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a5c4:	d033      	beq.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a5c6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a5ca:	d828      	bhi.n	800a61e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a5cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a5d0:	d01a      	beq.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800a5d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a5d6:	d822      	bhi.n	800a61e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d003      	beq.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a5dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a5e0:	d007      	beq.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800a5e2:	e01c      	b.n	800a61e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5e4:	4b50      	ldr	r3, [pc, #320]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a5e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e8:	4a4f      	ldr	r2, [pc, #316]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a5ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a5f0:	e01e      	b.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a5f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5f6:	3308      	adds	r3, #8
 800a5f8:	2100      	movs	r1, #0
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f002 f994 	bl	800c928 <RCCEx_PLL2_Config>
 800a600:	4603      	mov	r3, r0
 800a602:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a606:	e013      	b.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a60c:	3328      	adds	r3, #40	; 0x28
 800a60e:	2100      	movs	r1, #0
 800a610:	4618      	mov	r0, r3
 800a612:	f002 fa3b 	bl	800ca8c <RCCEx_PLL3_Config>
 800a616:	4603      	mov	r3, r0
 800a618:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a61c:	e008      	b.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a61e:	2301      	movs	r3, #1
 800a620:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a624:	e004      	b.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a626:	bf00      	nop
 800a628:	e002      	b.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a62a:	bf00      	nop
 800a62c:	e000      	b.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a62e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a630:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a634:	2b00      	cmp	r3, #0
 800a636:	d10b      	bne.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a638:	4b3b      	ldr	r3, [pc, #236]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a63a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a63c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800a640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a644:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a648:	4a37      	ldr	r2, [pc, #220]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a64a:	430b      	orrs	r3, r1
 800a64c:	6593      	str	r3, [r2, #88]	; 0x58
 800a64e:	e003      	b.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a650:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a654:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a660:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a664:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a668:	2300      	movs	r3, #0
 800a66a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a66e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800a672:	460b      	mov	r3, r1
 800a674:	4313      	orrs	r3, r2
 800a676:	d05d      	beq.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a67c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a680:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a684:	d03b      	beq.n	800a6fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a686:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a68a:	d834      	bhi.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a68c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a690:	d037      	beq.n	800a702 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a692:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a696:	d82e      	bhi.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a698:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a69c:	d033      	beq.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800a69e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a6a2:	d828      	bhi.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a6a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a6a8:	d01a      	beq.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800a6aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a6ae:	d822      	bhi.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d003      	beq.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a6b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a6b8:	d007      	beq.n	800a6ca <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a6ba:	e01c      	b.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6bc:	4b1a      	ldr	r3, [pc, #104]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c0:	4a19      	ldr	r2, [pc, #100]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a6c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a6c8:	e01e      	b.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a6ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6ce:	3308      	adds	r3, #8
 800a6d0:	2100      	movs	r1, #0
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f002 f928 	bl	800c928 <RCCEx_PLL2_Config>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a6de:	e013      	b.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a6e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6e4:	3328      	adds	r3, #40	; 0x28
 800a6e6:	2100      	movs	r1, #0
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f002 f9cf 	bl	800ca8c <RCCEx_PLL3_Config>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a6f4:	e008      	b.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a6fc:	e004      	b.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a6fe:	bf00      	nop
 800a700:	e002      	b.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a702:	bf00      	nop
 800a704:	e000      	b.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a706:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a708:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d10d      	bne.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a710:	4b05      	ldr	r3, [pc, #20]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a714:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800a718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a71c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a720:	4a01      	ldr	r2, [pc, #4]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a722:	430b      	orrs	r3, r1
 800a724:	6593      	str	r3, [r2, #88]	; 0x58
 800a726:	e005      	b.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800a728:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a72c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a730:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800a740:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a744:	2300      	movs	r3, #0
 800a746:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a74a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800a74e:	460b      	mov	r3, r1
 800a750:	4313      	orrs	r3, r2
 800a752:	d03a      	beq.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a754:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a75a:	2b30      	cmp	r3, #48	; 0x30
 800a75c:	d01f      	beq.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800a75e:	2b30      	cmp	r3, #48	; 0x30
 800a760:	d819      	bhi.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a762:	2b20      	cmp	r3, #32
 800a764:	d00c      	beq.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a766:	2b20      	cmp	r3, #32
 800a768:	d815      	bhi.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d019      	beq.n	800a7a2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a76e:	2b10      	cmp	r3, #16
 800a770:	d111      	bne.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a772:	4baa      	ldr	r3, [pc, #680]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a776:	4aa9      	ldr	r2, [pc, #676]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a77c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a77e:	e011      	b.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a784:	3308      	adds	r3, #8
 800a786:	2102      	movs	r1, #2
 800a788:	4618      	mov	r0, r3
 800a78a:	f002 f8cd 	bl	800c928 <RCCEx_PLL2_Config>
 800a78e:	4603      	mov	r3, r0
 800a790:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a794:	e006      	b.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a796:	2301      	movs	r3, #1
 800a798:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a79c:	e002      	b.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a79e:	bf00      	nop
 800a7a0:	e000      	b.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a7a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d10a      	bne.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a7ac:	4b9b      	ldr	r3, [pc, #620]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a7ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7b0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800a7b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7ba:	4a98      	ldr	r2, [pc, #608]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a7bc:	430b      	orrs	r3, r1
 800a7be:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a7c0:	e003      	b.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7c6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a7ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800a7d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a7da:	2300      	movs	r3, #0
 800a7dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a7e0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	4313      	orrs	r3, r2
 800a7e8:	d051      	beq.n	800a88e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a7ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a7f4:	d035      	beq.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800a7f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a7fa:	d82e      	bhi.n	800a85a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a7fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a800:	d031      	beq.n	800a866 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800a802:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a806:	d828      	bhi.n	800a85a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a80c:	d01a      	beq.n	800a844 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800a80e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a812:	d822      	bhi.n	800a85a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a814:	2b00      	cmp	r3, #0
 800a816:	d003      	beq.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800a818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a81c:	d007      	beq.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800a81e:	e01c      	b.n	800a85a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a820:	4b7e      	ldr	r3, [pc, #504]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a824:	4a7d      	ldr	r2, [pc, #500]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a82a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a82c:	e01c      	b.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a82e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a832:	3308      	adds	r3, #8
 800a834:	2100      	movs	r1, #0
 800a836:	4618      	mov	r0, r3
 800a838:	f002 f876 	bl	800c928 <RCCEx_PLL2_Config>
 800a83c:	4603      	mov	r3, r0
 800a83e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a842:	e011      	b.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a848:	3328      	adds	r3, #40	; 0x28
 800a84a:	2100      	movs	r1, #0
 800a84c:	4618      	mov	r0, r3
 800a84e:	f002 f91d 	bl	800ca8c <RCCEx_PLL3_Config>
 800a852:	4603      	mov	r3, r0
 800a854:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a858:	e006      	b.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a860:	e002      	b.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a862:	bf00      	nop
 800a864:	e000      	b.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a866:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a868:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d10a      	bne.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a870:	4b6a      	ldr	r3, [pc, #424]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a874:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a87c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a87e:	4a67      	ldr	r2, [pc, #412]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a880:	430b      	orrs	r3, r1
 800a882:	6513      	str	r3, [r2, #80]	; 0x50
 800a884:	e003      	b.n	800a88e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a886:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a88a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a88e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a896:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800a89a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a89e:	2300      	movs	r3, #0
 800a8a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a8a4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800a8a8:	460b      	mov	r3, r1
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	d053      	beq.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a8ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a8b8:	d033      	beq.n	800a922 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800a8ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a8be:	d82c      	bhi.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a8c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a8c4:	d02f      	beq.n	800a926 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800a8c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a8ca:	d826      	bhi.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a8cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a8d0:	d02b      	beq.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a8d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a8d6:	d820      	bhi.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a8d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8dc:	d012      	beq.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800a8de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8e2:	d81a      	bhi.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d022      	beq.n	800a92e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800a8e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8ec:	d115      	bne.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a8ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8f2:	3308      	adds	r3, #8
 800a8f4:	2101      	movs	r1, #1
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f002 f816 	bl	800c928 <RCCEx_PLL2_Config>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a902:	e015      	b.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a908:	3328      	adds	r3, #40	; 0x28
 800a90a:	2101      	movs	r1, #1
 800a90c:	4618      	mov	r0, r3
 800a90e:	f002 f8bd 	bl	800ca8c <RCCEx_PLL3_Config>
 800a912:	4603      	mov	r3, r0
 800a914:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a918:	e00a      	b.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a91a:	2301      	movs	r3, #1
 800a91c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a920:	e006      	b.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a922:	bf00      	nop
 800a924:	e004      	b.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a926:	bf00      	nop
 800a928:	e002      	b.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a92a:	bf00      	nop
 800a92c:	e000      	b.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a92e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a930:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a934:	2b00      	cmp	r3, #0
 800a936:	d10a      	bne.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a938:	4b38      	ldr	r3, [pc, #224]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a93a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a93c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a946:	4a35      	ldr	r2, [pc, #212]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a948:	430b      	orrs	r3, r1
 800a94a:	6513      	str	r3, [r2, #80]	; 0x50
 800a94c:	e003      	b.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a94e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a952:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800a962:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a966:	2300      	movs	r3, #0
 800a968:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a96c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a970:	460b      	mov	r3, r1
 800a972:	4313      	orrs	r3, r2
 800a974:	d058      	beq.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a97a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a97e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a982:	d033      	beq.n	800a9ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a984:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a988:	d82c      	bhi.n	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a98a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a98e:	d02f      	beq.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a994:	d826      	bhi.n	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a996:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a99a:	d02b      	beq.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a99c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a9a0:	d820      	bhi.n	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a9a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9a6:	d012      	beq.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800a9a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9ac:	d81a      	bhi.n	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d022      	beq.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a9b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9b6:	d115      	bne.n	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a9b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9bc:	3308      	adds	r3, #8
 800a9be:	2101      	movs	r1, #1
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f001 ffb1 	bl	800c928 <RCCEx_PLL2_Config>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a9cc:	e015      	b.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a9ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9d2:	3328      	adds	r3, #40	; 0x28
 800a9d4:	2101      	movs	r1, #1
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f002 f858 	bl	800ca8c <RCCEx_PLL3_Config>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a9e2:	e00a      	b.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a9ea:	e006      	b.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a9ec:	bf00      	nop
 800a9ee:	e004      	b.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a9f0:	bf00      	nop
 800a9f2:	e002      	b.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a9f4:	bf00      	nop
 800a9f6:	e000      	b.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a9f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d10e      	bne.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800aa02:	4b06      	ldr	r3, [pc, #24]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aa04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa06:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800aa0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aa12:	4a02      	ldr	r2, [pc, #8]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aa14:	430b      	orrs	r3, r1
 800aa16:	6593      	str	r3, [r2, #88]	; 0x58
 800aa18:	e006      	b.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800aa1a:	bf00      	nop
 800aa1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa24:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800aa28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa30:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800aa34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aa38:	2300      	movs	r3, #0
 800aa3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800aa3e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800aa42:	460b      	mov	r3, r1
 800aa44:	4313      	orrs	r3, r2
 800aa46:	d037      	beq.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800aa48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa52:	d00e      	beq.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800aa54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa58:	d816      	bhi.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d018      	beq.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800aa5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa62:	d111      	bne.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa64:	4bc4      	ldr	r3, [pc, #784]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa68:	4ac3      	ldr	r2, [pc, #780]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800aa70:	e00f      	b.n	800aa92 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aa72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa76:	3308      	adds	r3, #8
 800aa78:	2101      	movs	r1, #1
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f001 ff54 	bl	800c928 <RCCEx_PLL2_Config>
 800aa80:	4603      	mov	r3, r0
 800aa82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800aa86:	e004      	b.n	800aa92 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa88:	2301      	movs	r3, #1
 800aa8a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa8e:	e000      	b.n	800aa92 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800aa90:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa92:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d10a      	bne.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800aa9a:	4bb7      	ldr	r3, [pc, #732]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa9e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800aaa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aaa8:	4ab3      	ldr	r2, [pc, #716]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aaaa:	430b      	orrs	r3, r1
 800aaac:	6513      	str	r3, [r2, #80]	; 0x50
 800aaae:	e003      	b.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aab0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aab4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800aab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800aac4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aac8:	2300      	movs	r3, #0
 800aaca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aace:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800aad2:	460b      	mov	r3, r1
 800aad4:	4313      	orrs	r3, r2
 800aad6:	d039      	beq.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800aad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aadc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aade:	2b03      	cmp	r3, #3
 800aae0:	d81c      	bhi.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800aae2:	a201      	add	r2, pc, #4	; (adr r2, 800aae8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800aae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae8:	0800ab25 	.word	0x0800ab25
 800aaec:	0800aaf9 	.word	0x0800aaf9
 800aaf0:	0800ab07 	.word	0x0800ab07
 800aaf4:	0800ab25 	.word	0x0800ab25
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aaf8:	4b9f      	ldr	r3, [pc, #636]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aafc:	4a9e      	ldr	r2, [pc, #632]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aafe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ab04:	e00f      	b.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ab06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab0a:	3308      	adds	r3, #8
 800ab0c:	2102      	movs	r1, #2
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f001 ff0a 	bl	800c928 <RCCEx_PLL2_Config>
 800ab14:	4603      	mov	r3, r0
 800ab16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ab1a:	e004      	b.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab22:	e000      	b.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800ab24:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab26:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d10a      	bne.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ab2e:	4b92      	ldr	r3, [pc, #584]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ab30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab32:	f023 0103 	bic.w	r1, r3, #3
 800ab36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab3c:	4a8e      	ldr	r2, [pc, #568]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ab3e:	430b      	orrs	r3, r1
 800ab40:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ab42:	e003      	b.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab48:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ab4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab54:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800ab58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ab62:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ab66:	460b      	mov	r3, r1
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	f000 8099 	beq.w	800aca0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ab6e:	4b83      	ldr	r3, [pc, #524]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4a82      	ldr	r2, [pc, #520]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ab74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ab7a:	f7f8 ff31 	bl	80039e0 <HAL_GetTick>
 800ab7e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab82:	e00b      	b.n	800ab9c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab84:	f7f8 ff2c 	bl	80039e0 <HAL_GetTick>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ab8e:	1ad3      	subs	r3, r2, r3
 800ab90:	2b64      	cmp	r3, #100	; 0x64
 800ab92:	d903      	bls.n	800ab9c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800ab94:	2303      	movs	r3, #3
 800ab96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab9a:	e005      	b.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab9c:	4b77      	ldr	r3, [pc, #476]	; (800ad7c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d0ed      	beq.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800aba8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abac:	2b00      	cmp	r3, #0
 800abae:	d173      	bne.n	800ac98 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800abb0:	4b71      	ldr	r3, [pc, #452]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800abb2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800abb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800abbc:	4053      	eors	r3, r2
 800abbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d015      	beq.n	800abf2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800abc6:	4b6c      	ldr	r3, [pc, #432]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800abc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800abd2:	4b69      	ldr	r3, [pc, #420]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800abd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abd6:	4a68      	ldr	r2, [pc, #416]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800abd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800abdc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800abde:	4b66      	ldr	r3, [pc, #408]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800abe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abe2:	4a65      	ldr	r2, [pc, #404]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800abe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800abe8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800abea:	4a63      	ldr	r2, [pc, #396]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800abec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800abf0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800abf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abf6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800abfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abfe:	d118      	bne.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac00:	f7f8 feee 	bl	80039e0 <HAL_GetTick>
 800ac04:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac08:	e00d      	b.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac0a:	f7f8 fee9 	bl	80039e0 <HAL_GetTick>
 800ac0e:	4602      	mov	r2, r0
 800ac10:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ac14:	1ad2      	subs	r2, r2, r3
 800ac16:	f241 3388 	movw	r3, #5000	; 0x1388
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d903      	bls.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800ac1e:	2303      	movs	r3, #3
 800ac20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800ac24:	e005      	b.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac26:	4b54      	ldr	r3, [pc, #336]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac2a:	f003 0302 	and.w	r3, r3, #2
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d0eb      	beq.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800ac32:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d129      	bne.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ac3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ac42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac4a:	d10e      	bne.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800ac4c:	4b4a      	ldr	r3, [pc, #296]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac4e:	691b      	ldr	r3, [r3, #16]
 800ac50:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800ac54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ac5c:	091a      	lsrs	r2, r3, #4
 800ac5e:	4b48      	ldr	r3, [pc, #288]	; (800ad80 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800ac60:	4013      	ands	r3, r2
 800ac62:	4a45      	ldr	r2, [pc, #276]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac64:	430b      	orrs	r3, r1
 800ac66:	6113      	str	r3, [r2, #16]
 800ac68:	e005      	b.n	800ac76 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800ac6a:	4b43      	ldr	r3, [pc, #268]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac6c:	691b      	ldr	r3, [r3, #16]
 800ac6e:	4a42      	ldr	r2, [pc, #264]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac70:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ac74:	6113      	str	r3, [r2, #16]
 800ac76:	4b40      	ldr	r3, [pc, #256]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac78:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ac7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ac82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac86:	4a3c      	ldr	r2, [pc, #240]	; (800ad78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac88:	430b      	orrs	r3, r1
 800ac8a:	6713      	str	r3, [r2, #112]	; 0x70
 800ac8c:	e008      	b.n	800aca0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ac8e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac92:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800ac96:	e003      	b.n	800aca0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac9c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800aca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca8:	f002 0301 	and.w	r3, r2, #1
 800acac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800acb0:	2300      	movs	r3, #0
 800acb2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800acb6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800acba:	460b      	mov	r3, r1
 800acbc:	4313      	orrs	r3, r2
 800acbe:	f000 808f 	beq.w	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800acc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acc8:	2b28      	cmp	r3, #40	; 0x28
 800acca:	d871      	bhi.n	800adb0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800accc:	a201      	add	r2, pc, #4	; (adr r2, 800acd4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800acce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd2:	bf00      	nop
 800acd4:	0800adb9 	.word	0x0800adb9
 800acd8:	0800adb1 	.word	0x0800adb1
 800acdc:	0800adb1 	.word	0x0800adb1
 800ace0:	0800adb1 	.word	0x0800adb1
 800ace4:	0800adb1 	.word	0x0800adb1
 800ace8:	0800adb1 	.word	0x0800adb1
 800acec:	0800adb1 	.word	0x0800adb1
 800acf0:	0800adb1 	.word	0x0800adb1
 800acf4:	0800ad85 	.word	0x0800ad85
 800acf8:	0800adb1 	.word	0x0800adb1
 800acfc:	0800adb1 	.word	0x0800adb1
 800ad00:	0800adb1 	.word	0x0800adb1
 800ad04:	0800adb1 	.word	0x0800adb1
 800ad08:	0800adb1 	.word	0x0800adb1
 800ad0c:	0800adb1 	.word	0x0800adb1
 800ad10:	0800adb1 	.word	0x0800adb1
 800ad14:	0800ad9b 	.word	0x0800ad9b
 800ad18:	0800adb1 	.word	0x0800adb1
 800ad1c:	0800adb1 	.word	0x0800adb1
 800ad20:	0800adb1 	.word	0x0800adb1
 800ad24:	0800adb1 	.word	0x0800adb1
 800ad28:	0800adb1 	.word	0x0800adb1
 800ad2c:	0800adb1 	.word	0x0800adb1
 800ad30:	0800adb1 	.word	0x0800adb1
 800ad34:	0800adb9 	.word	0x0800adb9
 800ad38:	0800adb1 	.word	0x0800adb1
 800ad3c:	0800adb1 	.word	0x0800adb1
 800ad40:	0800adb1 	.word	0x0800adb1
 800ad44:	0800adb1 	.word	0x0800adb1
 800ad48:	0800adb1 	.word	0x0800adb1
 800ad4c:	0800adb1 	.word	0x0800adb1
 800ad50:	0800adb1 	.word	0x0800adb1
 800ad54:	0800adb9 	.word	0x0800adb9
 800ad58:	0800adb1 	.word	0x0800adb1
 800ad5c:	0800adb1 	.word	0x0800adb1
 800ad60:	0800adb1 	.word	0x0800adb1
 800ad64:	0800adb1 	.word	0x0800adb1
 800ad68:	0800adb1 	.word	0x0800adb1
 800ad6c:	0800adb1 	.word	0x0800adb1
 800ad70:	0800adb1 	.word	0x0800adb1
 800ad74:	0800adb9 	.word	0x0800adb9
 800ad78:	58024400 	.word	0x58024400
 800ad7c:	58024800 	.word	0x58024800
 800ad80:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad88:	3308      	adds	r3, #8
 800ad8a:	2101      	movs	r1, #1
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f001 fdcb 	bl	800c928 <RCCEx_PLL2_Config>
 800ad92:	4603      	mov	r3, r0
 800ad94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ad98:	e00f      	b.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad9e:	3328      	adds	r3, #40	; 0x28
 800ada0:	2101      	movs	r1, #1
 800ada2:	4618      	mov	r0, r3
 800ada4:	f001 fe72 	bl	800ca8c <RCCEx_PLL3_Config>
 800ada8:	4603      	mov	r3, r0
 800adaa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800adae:	e004      	b.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800adb0:	2301      	movs	r3, #1
 800adb2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800adb6:	e000      	b.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800adb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d10a      	bne.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800adc2:	4bbf      	ldr	r3, [pc, #764]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800adc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adc6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800adca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800add0:	4abb      	ldr	r2, [pc, #748]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800add2:	430b      	orrs	r3, r1
 800add4:	6553      	str	r3, [r2, #84]	; 0x54
 800add6:	e003      	b.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800add8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800addc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ade0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ade4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade8:	f002 0302 	and.w	r3, r2, #2
 800adec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800adf0:	2300      	movs	r3, #0
 800adf2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800adf6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800adfa:	460b      	mov	r3, r1
 800adfc:	4313      	orrs	r3, r2
 800adfe:	d041      	beq.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ae00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae06:	2b05      	cmp	r3, #5
 800ae08:	d824      	bhi.n	800ae54 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800ae0a:	a201      	add	r2, pc, #4	; (adr r2, 800ae10 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800ae0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae10:	0800ae5d 	.word	0x0800ae5d
 800ae14:	0800ae29 	.word	0x0800ae29
 800ae18:	0800ae3f 	.word	0x0800ae3f
 800ae1c:	0800ae5d 	.word	0x0800ae5d
 800ae20:	0800ae5d 	.word	0x0800ae5d
 800ae24:	0800ae5d 	.word	0x0800ae5d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae2c:	3308      	adds	r3, #8
 800ae2e:	2101      	movs	r1, #1
 800ae30:	4618      	mov	r0, r3
 800ae32:	f001 fd79 	bl	800c928 <RCCEx_PLL2_Config>
 800ae36:	4603      	mov	r3, r0
 800ae38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ae3c:	e00f      	b.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae42:	3328      	adds	r3, #40	; 0x28
 800ae44:	2101      	movs	r1, #1
 800ae46:	4618      	mov	r0, r3
 800ae48:	f001 fe20 	bl	800ca8c <RCCEx_PLL3_Config>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ae52:	e004      	b.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae54:	2301      	movs	r3, #1
 800ae56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae5a:	e000      	b.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800ae5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae5e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d10a      	bne.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ae66:	4b96      	ldr	r3, [pc, #600]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ae68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae6a:	f023 0107 	bic.w	r1, r3, #7
 800ae6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae74:	4a92      	ldr	r2, [pc, #584]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ae76:	430b      	orrs	r3, r1
 800ae78:	6553      	str	r3, [r2, #84]	; 0x54
 800ae7a:	e003      	b.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae80:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ae84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8c:	f002 0304 	and.w	r3, r2, #4
 800ae90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ae94:	2300      	movs	r3, #0
 800ae96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ae9a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ae9e:	460b      	mov	r3, r1
 800aea0:	4313      	orrs	r3, r2
 800aea2:	d044      	beq.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800aea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aeac:	2b05      	cmp	r3, #5
 800aeae:	d825      	bhi.n	800aefc <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800aeb0:	a201      	add	r2, pc, #4	; (adr r2, 800aeb8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800aeb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb6:	bf00      	nop
 800aeb8:	0800af05 	.word	0x0800af05
 800aebc:	0800aed1 	.word	0x0800aed1
 800aec0:	0800aee7 	.word	0x0800aee7
 800aec4:	0800af05 	.word	0x0800af05
 800aec8:	0800af05 	.word	0x0800af05
 800aecc:	0800af05 	.word	0x0800af05
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aed4:	3308      	adds	r3, #8
 800aed6:	2101      	movs	r1, #1
 800aed8:	4618      	mov	r0, r3
 800aeda:	f001 fd25 	bl	800c928 <RCCEx_PLL2_Config>
 800aede:	4603      	mov	r3, r0
 800aee0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800aee4:	e00f      	b.n	800af06 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeea:	3328      	adds	r3, #40	; 0x28
 800aeec:	2101      	movs	r1, #1
 800aeee:	4618      	mov	r0, r3
 800aef0:	f001 fdcc 	bl	800ca8c <RCCEx_PLL3_Config>
 800aef4:	4603      	mov	r3, r0
 800aef6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800aefa:	e004      	b.n	800af06 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aefc:	2301      	movs	r3, #1
 800aefe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af02:	e000      	b.n	800af06 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800af04:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af06:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d10b      	bne.n	800af26 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800af0e:	4b6c      	ldr	r3, [pc, #432]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800af10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af12:	f023 0107 	bic.w	r1, r3, #7
 800af16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af1e:	4a68      	ldr	r2, [pc, #416]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800af20:	430b      	orrs	r3, r1
 800af22:	6593      	str	r3, [r2, #88]	; 0x58
 800af24:	e003      	b.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af26:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af2a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800af2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af36:	f002 0320 	and.w	r3, r2, #32
 800af3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800af3e:	2300      	movs	r3, #0
 800af40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800af44:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800af48:	460b      	mov	r3, r1
 800af4a:	4313      	orrs	r3, r2
 800af4c:	d055      	beq.n	800affa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800af4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af5a:	d033      	beq.n	800afc4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800af5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af60:	d82c      	bhi.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800af62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af66:	d02f      	beq.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800af68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af6c:	d826      	bhi.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800af6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800af72:	d02b      	beq.n	800afcc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800af74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800af78:	d820      	bhi.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800af7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af7e:	d012      	beq.n	800afa6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800af80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af84:	d81a      	bhi.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800af86:	2b00      	cmp	r3, #0
 800af88:	d022      	beq.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800af8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af8e:	d115      	bne.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af94:	3308      	adds	r3, #8
 800af96:	2100      	movs	r1, #0
 800af98:	4618      	mov	r0, r3
 800af9a:	f001 fcc5 	bl	800c928 <RCCEx_PLL2_Config>
 800af9e:	4603      	mov	r3, r0
 800afa0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800afa4:	e015      	b.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800afa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afaa:	3328      	adds	r3, #40	; 0x28
 800afac:	2102      	movs	r1, #2
 800afae:	4618      	mov	r0, r3
 800afb0:	f001 fd6c 	bl	800ca8c <RCCEx_PLL3_Config>
 800afb4:	4603      	mov	r3, r0
 800afb6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800afba:	e00a      	b.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800afbc:	2301      	movs	r3, #1
 800afbe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800afc2:	e006      	b.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800afc4:	bf00      	nop
 800afc6:	e004      	b.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800afc8:	bf00      	nop
 800afca:	e002      	b.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800afcc:	bf00      	nop
 800afce:	e000      	b.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800afd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afd2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d10b      	bne.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800afda:	4b39      	ldr	r3, [pc, #228]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800afdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afde:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800afe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afea:	4a35      	ldr	r2, [pc, #212]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800afec:	430b      	orrs	r3, r1
 800afee:	6553      	str	r3, [r2, #84]	; 0x54
 800aff0:	e003      	b.n	800affa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aff2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aff6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800affa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800affe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b002:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b006:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b00a:	2300      	movs	r3, #0
 800b00c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b010:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b014:	460b      	mov	r3, r1
 800b016:	4313      	orrs	r3, r2
 800b018:	d058      	beq.n	800b0cc <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b01a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b01e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b022:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b026:	d033      	beq.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b028:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b02c:	d82c      	bhi.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b02e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b032:	d02f      	beq.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b038:	d826      	bhi.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b03a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b03e:	d02b      	beq.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b040:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b044:	d820      	bhi.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b046:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b04a:	d012      	beq.n	800b072 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b04c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b050:	d81a      	bhi.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b052:	2b00      	cmp	r3, #0
 800b054:	d022      	beq.n	800b09c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b05a:	d115      	bne.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b05c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b060:	3308      	adds	r3, #8
 800b062:	2100      	movs	r1, #0
 800b064:	4618      	mov	r0, r3
 800b066:	f001 fc5f 	bl	800c928 <RCCEx_PLL2_Config>
 800b06a:	4603      	mov	r3, r0
 800b06c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b070:	e015      	b.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b076:	3328      	adds	r3, #40	; 0x28
 800b078:	2102      	movs	r1, #2
 800b07a:	4618      	mov	r0, r3
 800b07c:	f001 fd06 	bl	800ca8c <RCCEx_PLL3_Config>
 800b080:	4603      	mov	r3, r0
 800b082:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b086:	e00a      	b.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b088:	2301      	movs	r3, #1
 800b08a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b08e:	e006      	b.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b090:	bf00      	nop
 800b092:	e004      	b.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b094:	bf00      	nop
 800b096:	e002      	b.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b098:	bf00      	nop
 800b09a:	e000      	b.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b09c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b09e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d10e      	bne.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b0a6:	4b06      	ldr	r3, [pc, #24]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b0a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0aa:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b0ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b0b6:	4a02      	ldr	r2, [pc, #8]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b0b8:	430b      	orrs	r3, r1
 800b0ba:	6593      	str	r3, [r2, #88]	; 0x58
 800b0bc:	e006      	b.n	800b0cc <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b0be:	bf00      	nop
 800b0c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b0cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b0d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b0dc:	2300      	movs	r3, #0
 800b0de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b0e2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b0e6:	460b      	mov	r3, r1
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	d055      	beq.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b0ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b0f4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b0f8:	d033      	beq.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b0fa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b0fe:	d82c      	bhi.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b104:	d02f      	beq.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b106:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b10a:	d826      	bhi.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b10c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b110:	d02b      	beq.n	800b16a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b112:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b116:	d820      	bhi.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b118:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b11c:	d012      	beq.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b11e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b122:	d81a      	bhi.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b124:	2b00      	cmp	r3, #0
 800b126:	d022      	beq.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b12c:	d115      	bne.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b12e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b132:	3308      	adds	r3, #8
 800b134:	2100      	movs	r1, #0
 800b136:	4618      	mov	r0, r3
 800b138:	f001 fbf6 	bl	800c928 <RCCEx_PLL2_Config>
 800b13c:	4603      	mov	r3, r0
 800b13e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b142:	e015      	b.n	800b170 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b144:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b148:	3328      	adds	r3, #40	; 0x28
 800b14a:	2102      	movs	r1, #2
 800b14c:	4618      	mov	r0, r3
 800b14e:	f001 fc9d 	bl	800ca8c <RCCEx_PLL3_Config>
 800b152:	4603      	mov	r3, r0
 800b154:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b158:	e00a      	b.n	800b170 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b15a:	2301      	movs	r3, #1
 800b15c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b160:	e006      	b.n	800b170 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b162:	bf00      	nop
 800b164:	e004      	b.n	800b170 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b166:	bf00      	nop
 800b168:	e002      	b.n	800b170 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b16a:	bf00      	nop
 800b16c:	e000      	b.n	800b170 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b16e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b170:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b174:	2b00      	cmp	r3, #0
 800b176:	d10b      	bne.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b178:	4ba0      	ldr	r3, [pc, #640]	; (800b3fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b17a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b17c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b184:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b188:	4a9c      	ldr	r2, [pc, #624]	; (800b3fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b18a:	430b      	orrs	r3, r1
 800b18c:	6593      	str	r3, [r2, #88]	; 0x58
 800b18e:	e003      	b.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b190:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b194:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b198:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a0:	f002 0308 	and.w	r3, r2, #8
 800b1a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b1ae:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	d01e      	beq.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b1b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1c4:	d10c      	bne.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b1c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1ca:	3328      	adds	r3, #40	; 0x28
 800b1cc:	2102      	movs	r1, #2
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f001 fc5c 	bl	800ca8c <RCCEx_PLL3_Config>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d002      	beq.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b1da:	2301      	movs	r3, #1
 800b1dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b1e0:	4b86      	ldr	r3, [pc, #536]	; (800b3fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b1e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b1e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1f0:	4a82      	ldr	r2, [pc, #520]	; (800b3fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b1f2:	430b      	orrs	r3, r1
 800b1f4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b1f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fe:	f002 0310 	and.w	r3, r2, #16
 800b202:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b206:	2300      	movs	r3, #0
 800b208:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b20c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b210:	460b      	mov	r3, r1
 800b212:	4313      	orrs	r3, r2
 800b214:	d01e      	beq.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b216:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b21a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b21e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b222:	d10c      	bne.n	800b23e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b228:	3328      	adds	r3, #40	; 0x28
 800b22a:	2102      	movs	r1, #2
 800b22c:	4618      	mov	r0, r3
 800b22e:	f001 fc2d 	bl	800ca8c <RCCEx_PLL3_Config>
 800b232:	4603      	mov	r3, r0
 800b234:	2b00      	cmp	r3, #0
 800b236:	d002      	beq.n	800b23e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b238:	2301      	movs	r3, #1
 800b23a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b23e:	4b6f      	ldr	r3, [pc, #444]	; (800b3fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b242:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b24a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b24e:	4a6b      	ldr	r2, [pc, #428]	; (800b3fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b250:	430b      	orrs	r3, r1
 800b252:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b254:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b260:	67bb      	str	r3, [r7, #120]	; 0x78
 800b262:	2300      	movs	r3, #0
 800b264:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b266:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b26a:	460b      	mov	r3, r1
 800b26c:	4313      	orrs	r3, r2
 800b26e:	d03e      	beq.n	800b2ee <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b274:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b278:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b27c:	d022      	beq.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b27e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b282:	d81b      	bhi.n	800b2bc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b284:	2b00      	cmp	r3, #0
 800b286:	d003      	beq.n	800b290 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b28c:	d00b      	beq.n	800b2a6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b28e:	e015      	b.n	800b2bc <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b294:	3308      	adds	r3, #8
 800b296:	2100      	movs	r1, #0
 800b298:	4618      	mov	r0, r3
 800b29a:	f001 fb45 	bl	800c928 <RCCEx_PLL2_Config>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b2a4:	e00f      	b.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b2a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2aa:	3328      	adds	r3, #40	; 0x28
 800b2ac:	2102      	movs	r1, #2
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f001 fbec 	bl	800ca8c <RCCEx_PLL3_Config>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b2ba:	e004      	b.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b2c2:	e000      	b.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b2c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d10b      	bne.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b2ce:	4b4b      	ldr	r3, [pc, #300]	; (800b3fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b2d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2d2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b2d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b2de:	4a47      	ldr	r2, [pc, #284]	; (800b3fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b2e0:	430b      	orrs	r3, r1
 800b2e2:	6593      	str	r3, [r2, #88]	; 0x58
 800b2e4:	e003      	b.n	800b2ee <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2ea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b2ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b2fa:	673b      	str	r3, [r7, #112]	; 0x70
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	677b      	str	r3, [r7, #116]	; 0x74
 800b300:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b304:	460b      	mov	r3, r1
 800b306:	4313      	orrs	r3, r2
 800b308:	d03b      	beq.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b30a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b30e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b312:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b316:	d01f      	beq.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b318:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b31c:	d818      	bhi.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b31e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b322:	d003      	beq.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b324:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b328:	d007      	beq.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b32a:	e011      	b.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b32c:	4b33      	ldr	r3, [pc, #204]	; (800b3fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b330:	4a32      	ldr	r2, [pc, #200]	; (800b3fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b336:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b338:	e00f      	b.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b33a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b33e:	3328      	adds	r3, #40	; 0x28
 800b340:	2101      	movs	r1, #1
 800b342:	4618      	mov	r0, r3
 800b344:	f001 fba2 	bl	800ca8c <RCCEx_PLL3_Config>
 800b348:	4603      	mov	r3, r0
 800b34a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b34e:	e004      	b.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b350:	2301      	movs	r3, #1
 800b352:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b356:	e000      	b.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800b358:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b35a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d10b      	bne.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b362:	4b26      	ldr	r3, [pc, #152]	; (800b3fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b366:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b36a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b36e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b372:	4a22      	ldr	r2, [pc, #136]	; (800b3fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b374:	430b      	orrs	r3, r1
 800b376:	6553      	str	r3, [r2, #84]	; 0x54
 800b378:	e003      	b.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b37a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b37e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b38e:	66bb      	str	r3, [r7, #104]	; 0x68
 800b390:	2300      	movs	r3, #0
 800b392:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b394:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b398:	460b      	mov	r3, r1
 800b39a:	4313      	orrs	r3, r2
 800b39c:	d034      	beq.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b39e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d003      	beq.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b3a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3ac:	d007      	beq.n	800b3be <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b3ae:	e011      	b.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3b0:	4b12      	ldr	r3, [pc, #72]	; (800b3fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b4:	4a11      	ldr	r2, [pc, #68]	; (800b3fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b3b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b3bc:	e00e      	b.n	800b3dc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b3be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3c2:	3308      	adds	r3, #8
 800b3c4:	2102      	movs	r1, #2
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f001 faae 	bl	800c928 <RCCEx_PLL2_Config>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b3d2:	e003      	b.n	800b3dc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b3da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d10d      	bne.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b3e4:	4b05      	ldr	r3, [pc, #20]	; (800b3fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b3e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b3ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3f2:	4a02      	ldr	r2, [pc, #8]	; (800b3fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b3f4:	430b      	orrs	r3, r1
 800b3f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b3f8:	e006      	b.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b3fa:	bf00      	nop
 800b3fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b400:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b404:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b410:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b414:	663b      	str	r3, [r7, #96]	; 0x60
 800b416:	2300      	movs	r3, #0
 800b418:	667b      	str	r3, [r7, #100]	; 0x64
 800b41a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b41e:	460b      	mov	r3, r1
 800b420:	4313      	orrs	r3, r2
 800b422:	d00c      	beq.n	800b43e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b428:	3328      	adds	r3, #40	; 0x28
 800b42a:	2102      	movs	r1, #2
 800b42c:	4618      	mov	r0, r3
 800b42e:	f001 fb2d 	bl	800ca8c <RCCEx_PLL3_Config>
 800b432:	4603      	mov	r3, r0
 800b434:	2b00      	cmp	r3, #0
 800b436:	d002      	beq.n	800b43e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b438:	2301      	movs	r3, #1
 800b43a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b43e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b446:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b44a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b44c:	2300      	movs	r3, #0
 800b44e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b450:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b454:	460b      	mov	r3, r1
 800b456:	4313      	orrs	r3, r2
 800b458:	d036      	beq.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b45a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b45e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b460:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b464:	d018      	beq.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b466:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b46a:	d811      	bhi.n	800b490 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b46c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b470:	d014      	beq.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b472:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b476:	d80b      	bhi.n	800b490 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d011      	beq.n	800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b47c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b480:	d106      	bne.n	800b490 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b482:	4bb7      	ldr	r3, [pc, #732]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b486:	4ab6      	ldr	r2, [pc, #728]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b48c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b48e:	e008      	b.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b490:	2301      	movs	r3, #1
 800b492:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b496:	e004      	b.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b498:	bf00      	nop
 800b49a:	e002      	b.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b49c:	bf00      	nop
 800b49e:	e000      	b.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b4a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d10a      	bne.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b4aa:	4bad      	ldr	r3, [pc, #692]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b4ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b4b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4b8:	4aa9      	ldr	r2, [pc, #676]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b4ba:	430b      	orrs	r3, r1
 800b4bc:	6553      	str	r3, [r2, #84]	; 0x54
 800b4be:	e003      	b.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b4c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b4d4:	653b      	str	r3, [r7, #80]	; 0x50
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	657b      	str	r3, [r7, #84]	; 0x54
 800b4da:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b4de:	460b      	mov	r3, r1
 800b4e0:	4313      	orrs	r3, r2
 800b4e2:	d009      	beq.n	800b4f8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b4e4:	4b9e      	ldr	r3, [pc, #632]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b4e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b4ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4f2:	4a9b      	ldr	r2, [pc, #620]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b4f4:	430b      	orrs	r3, r1
 800b4f6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b4f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b500:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b504:	64bb      	str	r3, [r7, #72]	; 0x48
 800b506:	2300      	movs	r3, #0
 800b508:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b50a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b50e:	460b      	mov	r3, r1
 800b510:	4313      	orrs	r3, r2
 800b512:	d009      	beq.n	800b528 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b514:	4b92      	ldr	r3, [pc, #584]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b518:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b51c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b520:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b522:	4a8f      	ldr	r2, [pc, #572]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b524:	430b      	orrs	r3, r1
 800b526:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b528:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b530:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b534:	643b      	str	r3, [r7, #64]	; 0x40
 800b536:	2300      	movs	r3, #0
 800b538:	647b      	str	r3, [r7, #68]	; 0x44
 800b53a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b53e:	460b      	mov	r3, r1
 800b540:	4313      	orrs	r3, r2
 800b542:	d00e      	beq.n	800b562 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b544:	4b86      	ldr	r3, [pc, #536]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b546:	691b      	ldr	r3, [r3, #16]
 800b548:	4a85      	ldr	r2, [pc, #532]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b54a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b54e:	6113      	str	r3, [r2, #16]
 800b550:	4b83      	ldr	r3, [pc, #524]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b552:	6919      	ldr	r1, [r3, #16]
 800b554:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b558:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b55c:	4a80      	ldr	r2, [pc, #512]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b55e:	430b      	orrs	r3, r1
 800b560:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b562:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b56e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b570:	2300      	movs	r3, #0
 800b572:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b574:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b578:	460b      	mov	r3, r1
 800b57a:	4313      	orrs	r3, r2
 800b57c:	d009      	beq.n	800b592 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b57e:	4b78      	ldr	r3, [pc, #480]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b582:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b58a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b58c:	4a74      	ldr	r2, [pc, #464]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b58e:	430b      	orrs	r3, r1
 800b590:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b59a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b59e:	633b      	str	r3, [r7, #48]	; 0x30
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	637b      	str	r3, [r7, #52]	; 0x34
 800b5a4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b5a8:	460b      	mov	r3, r1
 800b5aa:	4313      	orrs	r3, r2
 800b5ac:	d00a      	beq.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b5ae:	4b6c      	ldr	r3, [pc, #432]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b5b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5b2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b5b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5be:	4a68      	ldr	r2, [pc, #416]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b5c0:	430b      	orrs	r3, r1
 800b5c2:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b5c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5cc:	2100      	movs	r1, #0
 800b5ce:	62b9      	str	r1, [r7, #40]	; 0x28
 800b5d0:	f003 0301 	and.w	r3, r3, #1
 800b5d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5d6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b5da:	460b      	mov	r3, r1
 800b5dc:	4313      	orrs	r3, r2
 800b5de:	d011      	beq.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b5e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5e4:	3308      	adds	r3, #8
 800b5e6:	2100      	movs	r1, #0
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f001 f99d 	bl	800c928 <RCCEx_PLL2_Config>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b5f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d003      	beq.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b600:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60c:	2100      	movs	r1, #0
 800b60e:	6239      	str	r1, [r7, #32]
 800b610:	f003 0302 	and.w	r3, r3, #2
 800b614:	627b      	str	r3, [r7, #36]	; 0x24
 800b616:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b61a:	460b      	mov	r3, r1
 800b61c:	4313      	orrs	r3, r2
 800b61e:	d011      	beq.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b620:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b624:	3308      	adds	r3, #8
 800b626:	2101      	movs	r1, #1
 800b628:	4618      	mov	r0, r3
 800b62a:	f001 f97d 	bl	800c928 <RCCEx_PLL2_Config>
 800b62e:	4603      	mov	r3, r0
 800b630:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b634:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d003      	beq.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b63c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b640:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b644:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64c:	2100      	movs	r1, #0
 800b64e:	61b9      	str	r1, [r7, #24]
 800b650:	f003 0304 	and.w	r3, r3, #4
 800b654:	61fb      	str	r3, [r7, #28]
 800b656:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b65a:	460b      	mov	r3, r1
 800b65c:	4313      	orrs	r3, r2
 800b65e:	d011      	beq.n	800b684 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b664:	3308      	adds	r3, #8
 800b666:	2102      	movs	r1, #2
 800b668:	4618      	mov	r0, r3
 800b66a:	f001 f95d 	bl	800c928 <RCCEx_PLL2_Config>
 800b66e:	4603      	mov	r3, r0
 800b670:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b674:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d003      	beq.n	800b684 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b67c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b680:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b684:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68c:	2100      	movs	r1, #0
 800b68e:	6139      	str	r1, [r7, #16]
 800b690:	f003 0308 	and.w	r3, r3, #8
 800b694:	617b      	str	r3, [r7, #20]
 800b696:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b69a:	460b      	mov	r3, r1
 800b69c:	4313      	orrs	r3, r2
 800b69e:	d011      	beq.n	800b6c4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b6a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6a4:	3328      	adds	r3, #40	; 0x28
 800b6a6:	2100      	movs	r1, #0
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f001 f9ef 	bl	800ca8c <RCCEx_PLL3_Config>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800b6b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d003      	beq.n	800b6c4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b6c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6cc:	2100      	movs	r1, #0
 800b6ce:	60b9      	str	r1, [r7, #8]
 800b6d0:	f003 0310 	and.w	r3, r3, #16
 800b6d4:	60fb      	str	r3, [r7, #12]
 800b6d6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b6da:	460b      	mov	r3, r1
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	d011      	beq.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b6e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6e4:	3328      	adds	r3, #40	; 0x28
 800b6e6:	2101      	movs	r1, #1
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f001 f9cf 	bl	800ca8c <RCCEx_PLL3_Config>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b6f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d003      	beq.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b700:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70c:	2100      	movs	r1, #0
 800b70e:	6039      	str	r1, [r7, #0]
 800b710:	f003 0320 	and.w	r3, r3, #32
 800b714:	607b      	str	r3, [r7, #4]
 800b716:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b71a:	460b      	mov	r3, r1
 800b71c:	4313      	orrs	r3, r2
 800b71e:	d011      	beq.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b724:	3328      	adds	r3, #40	; 0x28
 800b726:	2102      	movs	r1, #2
 800b728:	4618      	mov	r0, r3
 800b72a:	f001 f9af 	bl	800ca8c <RCCEx_PLL3_Config>
 800b72e:	4603      	mov	r3, r0
 800b730:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b734:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d003      	beq.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b73c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b740:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800b744:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d101      	bne.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800b74c:	2300      	movs	r3, #0
 800b74e:	e000      	b.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800b750:	2301      	movs	r3, #1
}
 800b752:	4618      	mov	r0, r3
 800b754:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800b758:	46bd      	mov	sp, r7
 800b75a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b75e:	bf00      	nop
 800b760:	58024400 	.word	0x58024400

0800b764 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b090      	sub	sp, #64	; 0x40
 800b768:	af00      	add	r7, sp, #0
 800b76a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b76e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b772:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800b776:	430b      	orrs	r3, r1
 800b778:	f040 8094 	bne.w	800b8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b77c:	4b9b      	ldr	r3, [pc, #620]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b77e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b780:	f003 0307 	and.w	r3, r3, #7
 800b784:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b788:	2b04      	cmp	r3, #4
 800b78a:	f200 8087 	bhi.w	800b89c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b78e:	a201      	add	r2, pc, #4	; (adr r2, 800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b794:	0800b7a9 	.word	0x0800b7a9
 800b798:	0800b7d1 	.word	0x0800b7d1
 800b79c:	0800b7f9 	.word	0x0800b7f9
 800b7a0:	0800b895 	.word	0x0800b895
 800b7a4:	0800b821 	.word	0x0800b821
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b7a8:	4b90      	ldr	r3, [pc, #576]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b7b4:	d108      	bne.n	800b7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b7b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f000 ff62 	bl	800c684 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7c4:	f000 bc93 	b.w	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7cc:	f000 bc8f 	b.w	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b7d0:	4b86      	ldr	r3, [pc, #536]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b7dc:	d108      	bne.n	800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7de:	f107 0318 	add.w	r3, r7, #24
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f000 fca6 	bl	800c134 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7ec:	f000 bc7f 	b.w	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7f4:	f000 bc7b 	b.w	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b7f8:	4b7c      	ldr	r3, [pc, #496]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b800:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b804:	d108      	bne.n	800b818 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b806:	f107 030c 	add.w	r3, r7, #12
 800b80a:	4618      	mov	r0, r3
 800b80c:	f000 fde6 	bl	800c3dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b814:	f000 bc6b 	b.w	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b818:	2300      	movs	r3, #0
 800b81a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b81c:	f000 bc67 	b.w	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b820:	4b72      	ldr	r3, [pc, #456]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b824:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b828:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b82a:	4b70      	ldr	r3, [pc, #448]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f003 0304 	and.w	r3, r3, #4
 800b832:	2b04      	cmp	r3, #4
 800b834:	d10c      	bne.n	800b850 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d109      	bne.n	800b850 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b83c:	4b6b      	ldr	r3, [pc, #428]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	08db      	lsrs	r3, r3, #3
 800b842:	f003 0303 	and.w	r3, r3, #3
 800b846:	4a6a      	ldr	r2, [pc, #424]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b848:	fa22 f303 	lsr.w	r3, r2, r3
 800b84c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b84e:	e01f      	b.n	800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b850:	4b66      	ldr	r3, [pc, #408]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b85c:	d106      	bne.n	800b86c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b85e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b860:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b864:	d102      	bne.n	800b86c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b866:	4b63      	ldr	r3, [pc, #396]	; (800b9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b868:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b86a:	e011      	b.n	800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b86c:	4b5f      	ldr	r3, [pc, #380]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b874:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b878:	d106      	bne.n	800b888 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b87a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b87c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b880:	d102      	bne.n	800b888 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b882:	4b5d      	ldr	r3, [pc, #372]	; (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b884:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b886:	e003      	b.n	800b890 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b888:	2300      	movs	r3, #0
 800b88a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b88c:	f000 bc2f 	b.w	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b890:	f000 bc2d 	b.w	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b894:	4b59      	ldr	r3, [pc, #356]	; (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b896:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b898:	f000 bc29 	b.w	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b89c:	2300      	movs	r3, #0
 800b89e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8a0:	f000 bc25 	b.w	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b8a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8a8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800b8ac:	430b      	orrs	r3, r1
 800b8ae:	f040 80a7 	bne.w	800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b8b2:	4b4e      	ldr	r3, [pc, #312]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b8b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8b6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b8ba:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b8c2:	d054      	beq.n	800b96e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800b8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b8ca:	f200 808b 	bhi.w	800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b8d4:	f000 8083 	beq.w	800b9de <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800b8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8da:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b8de:	f200 8081 	bhi.w	800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b8e8:	d02f      	beq.n	800b94a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b8f0:	d878      	bhi.n	800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d004      	beq.n	800b902 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800b8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b8fe:	d012      	beq.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800b900:	e070      	b.n	800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b902:	4b3a      	ldr	r3, [pc, #232]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b90a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b90e:	d107      	bne.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b914:	4618      	mov	r0, r3
 800b916:	f000 feb5 	bl	800c684 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b91e:	e3e6      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b920:	2300      	movs	r3, #0
 800b922:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b924:	e3e3      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b926:	4b31      	ldr	r3, [pc, #196]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b92e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b932:	d107      	bne.n	800b944 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b934:	f107 0318 	add.w	r3, r7, #24
 800b938:	4618      	mov	r0, r3
 800b93a:	f000 fbfb 	bl	800c134 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b93e:	69bb      	ldr	r3, [r7, #24]
 800b940:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b942:	e3d4      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b944:	2300      	movs	r3, #0
 800b946:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b948:	e3d1      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b94a:	4b28      	ldr	r3, [pc, #160]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b952:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b956:	d107      	bne.n	800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b958:	f107 030c 	add.w	r3, r7, #12
 800b95c:	4618      	mov	r0, r3
 800b95e:	f000 fd3d 	bl	800c3dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b966:	e3c2      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b968:	2300      	movs	r3, #0
 800b96a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b96c:	e3bf      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b96e:	4b1f      	ldr	r3, [pc, #124]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b972:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b976:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b978:	4b1c      	ldr	r3, [pc, #112]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f003 0304 	and.w	r3, r3, #4
 800b980:	2b04      	cmp	r3, #4
 800b982:	d10c      	bne.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800b984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b986:	2b00      	cmp	r3, #0
 800b988:	d109      	bne.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b98a:	4b18      	ldr	r3, [pc, #96]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	08db      	lsrs	r3, r3, #3
 800b990:	f003 0303 	and.w	r3, r3, #3
 800b994:	4a16      	ldr	r2, [pc, #88]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b996:	fa22 f303 	lsr.w	r3, r2, r3
 800b99a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b99c:	e01e      	b.n	800b9dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b99e:	4b13      	ldr	r3, [pc, #76]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9aa:	d106      	bne.n	800b9ba <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800b9ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b9b2:	d102      	bne.n	800b9ba <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b9b4:	4b0f      	ldr	r3, [pc, #60]	; (800b9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9b8:	e010      	b.n	800b9dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b9ba:	4b0c      	ldr	r3, [pc, #48]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9c6:	d106      	bne.n	800b9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800b9c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9ce:	d102      	bne.n	800b9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b9d0:	4b09      	ldr	r3, [pc, #36]	; (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9d4:	e002      	b.n	800b9dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b9da:	e388      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b9dc:	e387      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b9de:	4b07      	ldr	r3, [pc, #28]	; (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b9e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9e2:	e384      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9e8:	e381      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b9ea:	bf00      	nop
 800b9ec:	58024400 	.word	0x58024400
 800b9f0:	03d09000 	.word	0x03d09000
 800b9f4:	003d0900 	.word	0x003d0900
 800b9f8:	007a1200 	.word	0x007a1200
 800b9fc:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ba00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba04:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800ba08:	430b      	orrs	r3, r1
 800ba0a:	f040 809c 	bne.w	800bb46 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ba0e:	4b9e      	ldr	r3, [pc, #632]	; (800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ba10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba12:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ba16:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ba18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba1e:	d054      	beq.n	800baca <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800ba20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba26:	f200 808b 	bhi.w	800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ba2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ba30:	f000 8083 	beq.w	800bb3a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800ba34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ba3a:	f200 8081 	bhi.w	800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ba3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba44:	d02f      	beq.n	800baa6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800ba46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba4c:	d878      	bhi.n	800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ba4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d004      	beq.n	800ba5e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800ba54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ba5a:	d012      	beq.n	800ba82 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800ba5c:	e070      	b.n	800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ba5e:	4b8a      	ldr	r3, [pc, #552]	; (800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba6a:	d107      	bne.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba70:	4618      	mov	r0, r3
 800ba72:	f000 fe07 	bl	800c684 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ba76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba7a:	e338      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba80:	e335      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba82:	4b81      	ldr	r3, [pc, #516]	; (800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba8e:	d107      	bne.n	800baa0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba90:	f107 0318 	add.w	r3, r7, #24
 800ba94:	4618      	mov	r0, r3
 800ba96:	f000 fb4d 	bl	800c134 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ba9a:	69bb      	ldr	r3, [r7, #24]
 800ba9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba9e:	e326      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800baa0:	2300      	movs	r3, #0
 800baa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800baa4:	e323      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800baa6:	4b78      	ldr	r3, [pc, #480]	; (800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800baae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bab2:	d107      	bne.n	800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bab4:	f107 030c 	add.w	r3, r7, #12
 800bab8:	4618      	mov	r0, r3
 800baba:	f000 fc8f 	bl	800c3dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bac2:	e314      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bac4:	2300      	movs	r3, #0
 800bac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bac8:	e311      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800baca:	4b6f      	ldr	r3, [pc, #444]	; (800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bacc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bace:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bad2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bad4:	4b6c      	ldr	r3, [pc, #432]	; (800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f003 0304 	and.w	r3, r3, #4
 800badc:	2b04      	cmp	r3, #4
 800bade:	d10c      	bne.n	800bafa <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800bae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d109      	bne.n	800bafa <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bae6:	4b68      	ldr	r3, [pc, #416]	; (800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	08db      	lsrs	r3, r3, #3
 800baec:	f003 0303 	and.w	r3, r3, #3
 800baf0:	4a66      	ldr	r2, [pc, #408]	; (800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800baf2:	fa22 f303 	lsr.w	r3, r2, r3
 800baf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800baf8:	e01e      	b.n	800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bafa:	4b63      	ldr	r3, [pc, #396]	; (800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb06:	d106      	bne.n	800bb16 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800bb08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb0e:	d102      	bne.n	800bb16 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bb10:	4b5f      	ldr	r3, [pc, #380]	; (800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800bb12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb14:	e010      	b.n	800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bb16:	4b5c      	ldr	r3, [pc, #368]	; (800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb22:	d106      	bne.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800bb24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb2a:	d102      	bne.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bb2c:	4b59      	ldr	r3, [pc, #356]	; (800bc94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bb2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb30:	e002      	b.n	800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bb32:	2300      	movs	r3, #0
 800bb34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bb36:	e2da      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bb38:	e2d9      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bb3a:	4b57      	ldr	r3, [pc, #348]	; (800bc98 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bb3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb3e:	e2d6      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bb40:	2300      	movs	r3, #0
 800bb42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb44:	e2d3      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bb46:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb4a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800bb4e:	430b      	orrs	r3, r1
 800bb50:	f040 80a7 	bne.w	800bca2 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800bb54:	4b4c      	ldr	r3, [pc, #304]	; (800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bb56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb58:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800bb5c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bb5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb64:	d055      	beq.n	800bc12 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800bb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb6c:	f200 8096 	bhi.w	800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bb76:	f000 8084 	beq.w	800bc82 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800bb7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bb80:	f200 808c 	bhi.w	800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bb84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb8a:	d030      	beq.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800bb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb92:	f200 8083 	bhi.w	800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d004      	beq.n	800bba6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800bb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bba2:	d012      	beq.n	800bbca <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800bba4:	e07a      	b.n	800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bba6:	4b38      	ldr	r3, [pc, #224]	; (800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bbb2:	d107      	bne.n	800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bbb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f000 fd63 	bl	800c684 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bbbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbc2:	e294      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbc8:	e291      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bbca:	4b2f      	ldr	r3, [pc, #188]	; (800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bbd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bbd6:	d107      	bne.n	800bbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bbd8:	f107 0318 	add.w	r3, r7, #24
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f000 faa9 	bl	800c134 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bbe2:	69bb      	ldr	r3, [r7, #24]
 800bbe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbe6:	e282      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbec:	e27f      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bbee:	4b26      	ldr	r3, [pc, #152]	; (800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bbf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbfa:	d107      	bne.n	800bc0c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bbfc:	f107 030c 	add.w	r3, r7, #12
 800bc00:	4618      	mov	r0, r3
 800bc02:	f000 fbeb 	bl	800c3dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc0a:	e270      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc10:	e26d      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bc12:	4b1d      	ldr	r3, [pc, #116]	; (800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bc1a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bc1c:	4b1a      	ldr	r3, [pc, #104]	; (800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f003 0304 	and.w	r3, r3, #4
 800bc24:	2b04      	cmp	r3, #4
 800bc26:	d10c      	bne.n	800bc42 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800bc28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d109      	bne.n	800bc42 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc2e:	4b16      	ldr	r3, [pc, #88]	; (800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	08db      	lsrs	r3, r3, #3
 800bc34:	f003 0303 	and.w	r3, r3, #3
 800bc38:	4a14      	ldr	r2, [pc, #80]	; (800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800bc3a:	fa22 f303 	lsr.w	r3, r2, r3
 800bc3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc40:	e01e      	b.n	800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bc42:	4b11      	ldr	r3, [pc, #68]	; (800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc4e:	d106      	bne.n	800bc5e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800bc50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc56:	d102      	bne.n	800bc5e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bc58:	4b0d      	ldr	r3, [pc, #52]	; (800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800bc5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc5c:	e010      	b.n	800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bc5e:	4b0a      	ldr	r3, [pc, #40]	; (800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc6a:	d106      	bne.n	800bc7a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800bc6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc72:	d102      	bne.n	800bc7a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bc74:	4b07      	ldr	r3, [pc, #28]	; (800bc94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bc76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc78:	e002      	b.n	800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bc7e:	e236      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bc80:	e235      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bc82:	4b05      	ldr	r3, [pc, #20]	; (800bc98 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bc84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc86:	e232      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bc88:	58024400 	.word	0x58024400
 800bc8c:	03d09000 	.word	0x03d09000
 800bc90:	003d0900 	.word	0x003d0900
 800bc94:	007a1200 	.word	0x007a1200
 800bc98:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bca0:	e225      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800bca2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bca6:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800bcaa:	430b      	orrs	r3, r1
 800bcac:	f040 8085 	bne.w	800bdba <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800bcb0:	4b9c      	ldr	r3, [pc, #624]	; (800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bcb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcb4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800bcb8:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800bcba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bcc0:	d06b      	beq.n	800bd9a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800bcc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bcc8:	d874      	bhi.n	800bdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bcca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bccc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bcd0:	d056      	beq.n	800bd80 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800bcd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bcd8:	d86c      	bhi.n	800bdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bcda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcdc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bce0:	d03b      	beq.n	800bd5a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800bce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bce8:	d864      	bhi.n	800bdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bcea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bcf0:	d021      	beq.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800bcf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bcf8:	d85c      	bhi.n	800bdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bcfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d004      	beq.n	800bd0a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800bd00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd06:	d004      	beq.n	800bd12 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800bd08:	e054      	b.n	800bdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800bd0a:	f7fe fb5f 	bl	800a3cc <HAL_RCC_GetPCLK1Freq>
 800bd0e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bd10:	e1ed      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd12:	4b84      	ldr	r3, [pc, #528]	; (800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd1e:	d107      	bne.n	800bd30 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd20:	f107 0318 	add.w	r3, r7, #24
 800bd24:	4618      	mov	r0, r3
 800bd26:	f000 fa05 	bl	800c134 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bd2a:	69fb      	ldr	r3, [r7, #28]
 800bd2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd2e:	e1de      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd30:	2300      	movs	r3, #0
 800bd32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd34:	e1db      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bd36:	4b7b      	ldr	r3, [pc, #492]	; (800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd42:	d107      	bne.n	800bd54 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd44:	f107 030c 	add.w	r3, r7, #12
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f000 fb47 	bl	800c3dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd52:	e1cc      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd54:	2300      	movs	r3, #0
 800bd56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd58:	e1c9      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bd5a:	4b72      	ldr	r3, [pc, #456]	; (800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f003 0304 	and.w	r3, r3, #4
 800bd62:	2b04      	cmp	r3, #4
 800bd64:	d109      	bne.n	800bd7a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd66:	4b6f      	ldr	r3, [pc, #444]	; (800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	08db      	lsrs	r3, r3, #3
 800bd6c:	f003 0303 	and.w	r3, r3, #3
 800bd70:	4a6d      	ldr	r2, [pc, #436]	; (800bf28 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800bd72:	fa22 f303 	lsr.w	r3, r2, r3
 800bd76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd78:	e1b9      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd7e:	e1b6      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bd80:	4b68      	ldr	r3, [pc, #416]	; (800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd8c:	d102      	bne.n	800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800bd8e:	4b67      	ldr	r3, [pc, #412]	; (800bf2c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800bd90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd92:	e1ac      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd94:	2300      	movs	r3, #0
 800bd96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd98:	e1a9      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bd9a:	4b62      	ldr	r3, [pc, #392]	; (800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bda2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bda6:	d102      	bne.n	800bdae <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800bda8:	4b61      	ldr	r3, [pc, #388]	; (800bf30 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800bdaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdac:	e19f      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdb2:	e19c      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdb8:	e199      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800bdba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdbe:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800bdc2:	430b      	orrs	r3, r1
 800bdc4:	d173      	bne.n	800beae <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800bdc6:	4b57      	ldr	r3, [pc, #348]	; (800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bdc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bdce:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bdd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bdd6:	d02f      	beq.n	800be38 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800bdd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bdde:	d863      	bhi.n	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800bde0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d004      	beq.n	800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800bde6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdec:	d012      	beq.n	800be14 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800bdee:	e05b      	b.n	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bdf0:	4b4c      	ldr	r3, [pc, #304]	; (800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bdf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bdfc:	d107      	bne.n	800be0e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bdfe:	f107 0318 	add.w	r3, r7, #24
 800be02:	4618      	mov	r0, r3
 800be04:	f000 f996 	bl	800c134 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800be08:	69bb      	ldr	r3, [r7, #24]
 800be0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be0c:	e16f      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be0e:	2300      	movs	r3, #0
 800be10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be12:	e16c      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800be14:	4b43      	ldr	r3, [pc, #268]	; (800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be20:	d107      	bne.n	800be32 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be22:	f107 030c 	add.w	r3, r7, #12
 800be26:	4618      	mov	r0, r3
 800be28:	f000 fad8 	bl	800c3dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800be2c:	697b      	ldr	r3, [r7, #20]
 800be2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be30:	e15d      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be32:	2300      	movs	r3, #0
 800be34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be36:	e15a      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800be38:	4b3a      	ldr	r3, [pc, #232]	; (800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800be3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800be40:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800be42:	4b38      	ldr	r3, [pc, #224]	; (800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f003 0304 	and.w	r3, r3, #4
 800be4a:	2b04      	cmp	r3, #4
 800be4c:	d10c      	bne.n	800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800be4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be50:	2b00      	cmp	r3, #0
 800be52:	d109      	bne.n	800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be54:	4b33      	ldr	r3, [pc, #204]	; (800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	08db      	lsrs	r3, r3, #3
 800be5a:	f003 0303 	and.w	r3, r3, #3
 800be5e:	4a32      	ldr	r2, [pc, #200]	; (800bf28 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800be60:	fa22 f303 	lsr.w	r3, r2, r3
 800be64:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be66:	e01e      	b.n	800bea6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800be68:	4b2e      	ldr	r3, [pc, #184]	; (800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be74:	d106      	bne.n	800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800be76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be7c:	d102      	bne.n	800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800be7e:	4b2b      	ldr	r3, [pc, #172]	; (800bf2c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800be80:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be82:	e010      	b.n	800bea6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800be84:	4b27      	ldr	r3, [pc, #156]	; (800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be90:	d106      	bne.n	800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800be92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be98:	d102      	bne.n	800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800be9a:	4b25      	ldr	r3, [pc, #148]	; (800bf30 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800be9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be9e:	e002      	b.n	800bea6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bea0:	2300      	movs	r3, #0
 800bea2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bea4:	e123      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bea6:	e122      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bea8:	2300      	movs	r3, #0
 800beaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800beac:	e11f      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800beae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800beb2:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800beb6:	430b      	orrs	r3, r1
 800beb8:	d13c      	bne.n	800bf34 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800beba:	4b1a      	ldr	r3, [pc, #104]	; (800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bec2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d004      	beq.n	800bed4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800beca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800becc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bed0:	d012      	beq.n	800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800bed2:	e023      	b.n	800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bed4:	4b13      	ldr	r3, [pc, #76]	; (800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bedc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bee0:	d107      	bne.n	800bef2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bee6:	4618      	mov	r0, r3
 800bee8:	f000 fbcc 	bl	800c684 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800beec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bef0:	e0fd      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bef2:	2300      	movs	r3, #0
 800bef4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bef6:	e0fa      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bef8:	4b0a      	ldr	r3, [pc, #40]	; (800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf04:	d107      	bne.n	800bf16 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf06:	f107 0318 	add.w	r3, r7, #24
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f000 f912 	bl	800c134 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800bf10:	6a3b      	ldr	r3, [r7, #32]
 800bf12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf14:	e0eb      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf16:	2300      	movs	r3, #0
 800bf18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf1a:	e0e8      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf20:	e0e5      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bf22:	bf00      	nop
 800bf24:	58024400 	.word	0x58024400
 800bf28:	03d09000 	.word	0x03d09000
 800bf2c:	003d0900 	.word	0x003d0900
 800bf30:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800bf34:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf38:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800bf3c:	430b      	orrs	r3, r1
 800bf3e:	f040 8085 	bne.w	800c04c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800bf42:	4b6d      	ldr	r3, [pc, #436]	; (800c0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bf44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf46:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800bf4a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bf4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bf52:	d06b      	beq.n	800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800bf54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bf5a:	d874      	bhi.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bf5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf62:	d056      	beq.n	800c012 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800bf64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf6a:	d86c      	bhi.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bf6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bf72:	d03b      	beq.n	800bfec <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800bf74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bf7a:	d864      	bhi.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bf7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf82:	d021      	beq.n	800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800bf84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf8a:	d85c      	bhi.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bf8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d004      	beq.n	800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800bf92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf98:	d004      	beq.n	800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800bf9a:	e054      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800bf9c:	f000 f8b4 	bl	800c108 <HAL_RCCEx_GetD3PCLK1Freq>
 800bfa0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bfa2:	e0a4      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bfa4:	4b54      	ldr	r3, [pc, #336]	; (800c0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bfac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bfb0:	d107      	bne.n	800bfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bfb2:	f107 0318 	add.w	r3, r7, #24
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f000 f8bc 	bl	800c134 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bfbc:	69fb      	ldr	r3, [r7, #28]
 800bfbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfc0:	e095      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfc6:	e092      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bfc8:	4b4b      	ldr	r3, [pc, #300]	; (800c0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bfd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfd4:	d107      	bne.n	800bfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bfd6:	f107 030c 	add.w	r3, r7, #12
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f000 f9fe 	bl	800c3dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfe4:	e083      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfea:	e080      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bfec:	4b42      	ldr	r3, [pc, #264]	; (800c0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	f003 0304 	and.w	r3, r3, #4
 800bff4:	2b04      	cmp	r3, #4
 800bff6:	d109      	bne.n	800c00c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bff8:	4b3f      	ldr	r3, [pc, #252]	; (800c0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	08db      	lsrs	r3, r3, #3
 800bffe:	f003 0303 	and.w	r3, r3, #3
 800c002:	4a3e      	ldr	r2, [pc, #248]	; (800c0fc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c004:	fa22 f303 	lsr.w	r3, r2, r3
 800c008:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c00a:	e070      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c00c:	2300      	movs	r3, #0
 800c00e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c010:	e06d      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c012:	4b39      	ldr	r3, [pc, #228]	; (800c0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c01a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c01e:	d102      	bne.n	800c026 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c020:	4b37      	ldr	r3, [pc, #220]	; (800c100 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c022:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c024:	e063      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c026:	2300      	movs	r3, #0
 800c028:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c02a:	e060      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c02c:	4b32      	ldr	r3, [pc, #200]	; (800c0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c034:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c038:	d102      	bne.n	800c040 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c03a:	4b32      	ldr	r3, [pc, #200]	; (800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c03c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c03e:	e056      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c040:	2300      	movs	r3, #0
 800c042:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c044:	e053      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c046:	2300      	movs	r3, #0
 800c048:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c04a:	e050      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c04c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c050:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c054:	430b      	orrs	r3, r1
 800c056:	d148      	bne.n	800c0ea <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c058:	4b27      	ldr	r3, [pc, #156]	; (800c0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c05a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c05c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c060:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c064:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c068:	d02a      	beq.n	800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c06c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c070:	d838      	bhi.n	800c0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c074:	2b00      	cmp	r3, #0
 800c076:	d004      	beq.n	800c082 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c07a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c07e:	d00d      	beq.n	800c09c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c080:	e030      	b.n	800c0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c082:	4b1d      	ldr	r3, [pc, #116]	; (800c0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c08a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c08e:	d102      	bne.n	800c096 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c090:	4b1c      	ldr	r3, [pc, #112]	; (800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c092:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c094:	e02b      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c096:	2300      	movs	r3, #0
 800c098:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c09a:	e028      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c09c:	4b16      	ldr	r3, [pc, #88]	; (800c0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c0a8:	d107      	bne.n	800c0ba <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c0aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f000 fae8 	bl	800c684 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0b8:	e019      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0be:	e016      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c0c0:	4b0d      	ldr	r3, [pc, #52]	; (800c0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c0cc:	d107      	bne.n	800c0de <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0ce:	f107 0318 	add.w	r3, r7, #24
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f000 f82e 	bl	800c134 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c0d8:	69fb      	ldr	r3, [r7, #28]
 800c0da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0dc:	e007      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0e2:	e004      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0e8:	e001      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c0ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3740      	adds	r7, #64	; 0x40
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}
 800c0f8:	58024400 	.word	0x58024400
 800c0fc:	03d09000 	.word	0x03d09000
 800c100:	003d0900 	.word	0x003d0900
 800c104:	007a1200 	.word	0x007a1200

0800c108 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c10c:	f7fe f92e 	bl	800a36c <HAL_RCC_GetHCLKFreq>
 800c110:	4602      	mov	r2, r0
 800c112:	4b06      	ldr	r3, [pc, #24]	; (800c12c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c114:	6a1b      	ldr	r3, [r3, #32]
 800c116:	091b      	lsrs	r3, r3, #4
 800c118:	f003 0307 	and.w	r3, r3, #7
 800c11c:	4904      	ldr	r1, [pc, #16]	; (800c130 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c11e:	5ccb      	ldrb	r3, [r1, r3]
 800c120:	f003 031f 	and.w	r3, r3, #31
 800c124:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c128:	4618      	mov	r0, r3
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	58024400 	.word	0x58024400
 800c130:	080156d4 	.word	0x080156d4

0800c134 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c134:	b480      	push	{r7}
 800c136:	b089      	sub	sp, #36	; 0x24
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c13c:	4ba1      	ldr	r3, [pc, #644]	; (800c3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c13e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c140:	f003 0303 	and.w	r3, r3, #3
 800c144:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c146:	4b9f      	ldr	r3, [pc, #636]	; (800c3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c14a:	0b1b      	lsrs	r3, r3, #12
 800c14c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c150:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c152:	4b9c      	ldr	r3, [pc, #624]	; (800c3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c156:	091b      	lsrs	r3, r3, #4
 800c158:	f003 0301 	and.w	r3, r3, #1
 800c15c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c15e:	4b99      	ldr	r3, [pc, #612]	; (800c3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c162:	08db      	lsrs	r3, r3, #3
 800c164:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c168:	693a      	ldr	r2, [r7, #16]
 800c16a:	fb02 f303 	mul.w	r3, r2, r3
 800c16e:	ee07 3a90 	vmov	s15, r3
 800c172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c176:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	f000 8111 	beq.w	800c3a4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c182:	69bb      	ldr	r3, [r7, #24]
 800c184:	2b02      	cmp	r3, #2
 800c186:	f000 8083 	beq.w	800c290 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c18a:	69bb      	ldr	r3, [r7, #24]
 800c18c:	2b02      	cmp	r3, #2
 800c18e:	f200 80a1 	bhi.w	800c2d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c192:	69bb      	ldr	r3, [r7, #24]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d003      	beq.n	800c1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c198:	69bb      	ldr	r3, [r7, #24]
 800c19a:	2b01      	cmp	r3, #1
 800c19c:	d056      	beq.n	800c24c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c19e:	e099      	b.n	800c2d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c1a0:	4b88      	ldr	r3, [pc, #544]	; (800c3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f003 0320 	and.w	r3, r3, #32
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d02d      	beq.n	800c208 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1ac:	4b85      	ldr	r3, [pc, #532]	; (800c3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	08db      	lsrs	r3, r3, #3
 800c1b2:	f003 0303 	and.w	r3, r3, #3
 800c1b6:	4a84      	ldr	r2, [pc, #528]	; (800c3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c1b8:	fa22 f303 	lsr.w	r3, r2, r3
 800c1bc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	ee07 3a90 	vmov	s15, r3
 800c1c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	ee07 3a90 	vmov	s15, r3
 800c1ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1d6:	4b7b      	ldr	r3, [pc, #492]	; (800c3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1de:	ee07 3a90 	vmov	s15, r3
 800c1e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c3cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c1ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c202:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c206:	e087      	b.n	800c318 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	ee07 3a90 	vmov	s15, r3
 800c20e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c212:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c21a:	4b6a      	ldr	r3, [pc, #424]	; (800c3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c21c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c21e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c222:	ee07 3a90 	vmov	s15, r3
 800c226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c22a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c22e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c3cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c23a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c23e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c242:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c246:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c24a:	e065      	b.n	800c318 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	ee07 3a90 	vmov	s15, r3
 800c252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c256:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c3d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c25a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c25e:	4b59      	ldr	r3, [pc, #356]	; (800c3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c266:	ee07 3a90 	vmov	s15, r3
 800c26a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c26e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c272:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c3cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c27a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c27e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c28a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c28e:	e043      	b.n	800c318 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	ee07 3a90 	vmov	s15, r3
 800c296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c29a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c3d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c29e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2a2:	4b48      	ldr	r3, [pc, #288]	; (800c3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2aa:	ee07 3a90 	vmov	s15, r3
 800c2ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c3cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c2ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c2d2:	e021      	b.n	800c318 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	ee07 3a90 	vmov	s15, r3
 800c2da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c3d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c2e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2e6:	4b37      	ldr	r3, [pc, #220]	; (800c3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2ee:	ee07 3a90 	vmov	s15, r3
 800c2f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c3cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c2fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c306:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c30a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c30e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c312:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c316:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c318:	4b2a      	ldr	r3, [pc, #168]	; (800c3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c31a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c31c:	0a5b      	lsrs	r3, r3, #9
 800c31e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c322:	ee07 3a90 	vmov	s15, r3
 800c326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c32a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c32e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c332:	edd7 6a07 	vldr	s13, [r7, #28]
 800c336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c33a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c33e:	ee17 2a90 	vmov	r2, s15
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c346:	4b1f      	ldr	r3, [pc, #124]	; (800c3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c34a:	0c1b      	lsrs	r3, r3, #16
 800c34c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c350:	ee07 3a90 	vmov	s15, r3
 800c354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c358:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c35c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c360:	edd7 6a07 	vldr	s13, [r7, #28]
 800c364:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c368:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c36c:	ee17 2a90 	vmov	r2, s15
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c374:	4b13      	ldr	r3, [pc, #76]	; (800c3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c378:	0e1b      	lsrs	r3, r3, #24
 800c37a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c37e:	ee07 3a90 	vmov	s15, r3
 800c382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c386:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c38a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c38e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c39a:	ee17 2a90 	vmov	r2, s15
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c3a2:	e008      	b.n	800c3b6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	609a      	str	r2, [r3, #8]
}
 800c3b6:	bf00      	nop
 800c3b8:	3724      	adds	r7, #36	; 0x24
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c0:	4770      	bx	lr
 800c3c2:	bf00      	nop
 800c3c4:	58024400 	.word	0x58024400
 800c3c8:	03d09000 	.word	0x03d09000
 800c3cc:	46000000 	.word	0x46000000
 800c3d0:	4c742400 	.word	0x4c742400
 800c3d4:	4a742400 	.word	0x4a742400
 800c3d8:	4af42400 	.word	0x4af42400

0800c3dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b089      	sub	sp, #36	; 0x24
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c3e4:	4ba1      	ldr	r3, [pc, #644]	; (800c66c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3e8:	f003 0303 	and.w	r3, r3, #3
 800c3ec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c3ee:	4b9f      	ldr	r3, [pc, #636]	; (800c66c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3f2:	0d1b      	lsrs	r3, r3, #20
 800c3f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c3f8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c3fa:	4b9c      	ldr	r3, [pc, #624]	; (800c66c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3fe:	0a1b      	lsrs	r3, r3, #8
 800c400:	f003 0301 	and.w	r3, r3, #1
 800c404:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c406:	4b99      	ldr	r3, [pc, #612]	; (800c66c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c40a:	08db      	lsrs	r3, r3, #3
 800c40c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c410:	693a      	ldr	r2, [r7, #16]
 800c412:	fb02 f303 	mul.w	r3, r2, r3
 800c416:	ee07 3a90 	vmov	s15, r3
 800c41a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c41e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	2b00      	cmp	r3, #0
 800c426:	f000 8111 	beq.w	800c64c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c42a:	69bb      	ldr	r3, [r7, #24]
 800c42c:	2b02      	cmp	r3, #2
 800c42e:	f000 8083 	beq.w	800c538 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c432:	69bb      	ldr	r3, [r7, #24]
 800c434:	2b02      	cmp	r3, #2
 800c436:	f200 80a1 	bhi.w	800c57c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c43a:	69bb      	ldr	r3, [r7, #24]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d003      	beq.n	800c448 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c440:	69bb      	ldr	r3, [r7, #24]
 800c442:	2b01      	cmp	r3, #1
 800c444:	d056      	beq.n	800c4f4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c446:	e099      	b.n	800c57c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c448:	4b88      	ldr	r3, [pc, #544]	; (800c66c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f003 0320 	and.w	r3, r3, #32
 800c450:	2b00      	cmp	r3, #0
 800c452:	d02d      	beq.n	800c4b0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c454:	4b85      	ldr	r3, [pc, #532]	; (800c66c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	08db      	lsrs	r3, r3, #3
 800c45a:	f003 0303 	and.w	r3, r3, #3
 800c45e:	4a84      	ldr	r2, [pc, #528]	; (800c670 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c460:	fa22 f303 	lsr.w	r3, r2, r3
 800c464:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	ee07 3a90 	vmov	s15, r3
 800c46c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	ee07 3a90 	vmov	s15, r3
 800c476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c47a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c47e:	4b7b      	ldr	r3, [pc, #492]	; (800c66c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c486:	ee07 3a90 	vmov	s15, r3
 800c48a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c48e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c492:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c674 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c49a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c49e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c4ae:	e087      	b.n	800c5c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	ee07 3a90 	vmov	s15, r3
 800c4b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c678 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c4be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4c2:	4b6a      	ldr	r3, [pc, #424]	; (800c66c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4ca:	ee07 3a90 	vmov	s15, r3
 800c4ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4d6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c674 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c4da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c4f2:	e065      	b.n	800c5c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c4f4:	697b      	ldr	r3, [r7, #20]
 800c4f6:	ee07 3a90 	vmov	s15, r3
 800c4fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4fe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c67c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c506:	4b59      	ldr	r3, [pc, #356]	; (800c66c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c50a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c50e:	ee07 3a90 	vmov	s15, r3
 800c512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c516:	ed97 6a03 	vldr	s12, [r7, #12]
 800c51a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c674 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c51e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c526:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c52a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c52e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c532:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c536:	e043      	b.n	800c5c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	ee07 3a90 	vmov	s15, r3
 800c53e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c542:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c680 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c54a:	4b48      	ldr	r3, [pc, #288]	; (800c66c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c54c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c54e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c552:	ee07 3a90 	vmov	s15, r3
 800c556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c55a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c55e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c674 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c56a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c56e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c572:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c576:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c57a:	e021      	b.n	800c5c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	ee07 3a90 	vmov	s15, r3
 800c582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c586:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c67c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c58a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c58e:	4b37      	ldr	r3, [pc, #220]	; (800c66c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c596:	ee07 3a90 	vmov	s15, r3
 800c59a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c59e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c674 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c5a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c5be:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c5c0:	4b2a      	ldr	r3, [pc, #168]	; (800c66c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c5c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5c4:	0a5b      	lsrs	r3, r3, #9
 800c5c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5ca:	ee07 3a90 	vmov	s15, r3
 800c5ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c5d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c5da:	edd7 6a07 	vldr	s13, [r7, #28]
 800c5de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c5e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5e6:	ee17 2a90 	vmov	r2, s15
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c5ee:	4b1f      	ldr	r3, [pc, #124]	; (800c66c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c5f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5f2:	0c1b      	lsrs	r3, r3, #16
 800c5f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5f8:	ee07 3a90 	vmov	s15, r3
 800c5fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c600:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c604:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c608:	edd7 6a07 	vldr	s13, [r7, #28]
 800c60c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c614:	ee17 2a90 	vmov	r2, s15
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c61c:	4b13      	ldr	r3, [pc, #76]	; (800c66c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c61e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c620:	0e1b      	lsrs	r3, r3, #24
 800c622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c626:	ee07 3a90 	vmov	s15, r3
 800c62a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c62e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c632:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c636:	edd7 6a07 	vldr	s13, [r7, #28]
 800c63a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c63e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c642:	ee17 2a90 	vmov	r2, s15
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c64a:	e008      	b.n	800c65e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2200      	movs	r2, #0
 800c650:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2200      	movs	r2, #0
 800c656:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2200      	movs	r2, #0
 800c65c:	609a      	str	r2, [r3, #8]
}
 800c65e:	bf00      	nop
 800c660:	3724      	adds	r7, #36	; 0x24
 800c662:	46bd      	mov	sp, r7
 800c664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c668:	4770      	bx	lr
 800c66a:	bf00      	nop
 800c66c:	58024400 	.word	0x58024400
 800c670:	03d09000 	.word	0x03d09000
 800c674:	46000000 	.word	0x46000000
 800c678:	4c742400 	.word	0x4c742400
 800c67c:	4a742400 	.word	0x4a742400
 800c680:	4af42400 	.word	0x4af42400

0800c684 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c684:	b480      	push	{r7}
 800c686:	b089      	sub	sp, #36	; 0x24
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c68c:	4ba0      	ldr	r3, [pc, #640]	; (800c910 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c68e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c690:	f003 0303 	and.w	r3, r3, #3
 800c694:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c696:	4b9e      	ldr	r3, [pc, #632]	; (800c910 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c69a:	091b      	lsrs	r3, r3, #4
 800c69c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c6a0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c6a2:	4b9b      	ldr	r3, [pc, #620]	; (800c910 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c6a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6a6:	f003 0301 	and.w	r3, r3, #1
 800c6aa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c6ac:	4b98      	ldr	r3, [pc, #608]	; (800c910 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c6ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6b0:	08db      	lsrs	r3, r3, #3
 800c6b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c6b6:	693a      	ldr	r2, [r7, #16]
 800c6b8:	fb02 f303 	mul.w	r3, r2, r3
 800c6bc:	ee07 3a90 	vmov	s15, r3
 800c6c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6c4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	f000 8111 	beq.w	800c8f2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c6d0:	69bb      	ldr	r3, [r7, #24]
 800c6d2:	2b02      	cmp	r3, #2
 800c6d4:	f000 8083 	beq.w	800c7de <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c6d8:	69bb      	ldr	r3, [r7, #24]
 800c6da:	2b02      	cmp	r3, #2
 800c6dc:	f200 80a1 	bhi.w	800c822 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c6e0:	69bb      	ldr	r3, [r7, #24]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d003      	beq.n	800c6ee <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c6e6:	69bb      	ldr	r3, [r7, #24]
 800c6e8:	2b01      	cmp	r3, #1
 800c6ea:	d056      	beq.n	800c79a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c6ec:	e099      	b.n	800c822 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c6ee:	4b88      	ldr	r3, [pc, #544]	; (800c910 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	f003 0320 	and.w	r3, r3, #32
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d02d      	beq.n	800c756 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6fa:	4b85      	ldr	r3, [pc, #532]	; (800c910 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	08db      	lsrs	r3, r3, #3
 800c700:	f003 0303 	and.w	r3, r3, #3
 800c704:	4a83      	ldr	r2, [pc, #524]	; (800c914 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c706:	fa22 f303 	lsr.w	r3, r2, r3
 800c70a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	ee07 3a90 	vmov	s15, r3
 800c712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	ee07 3a90 	vmov	s15, r3
 800c71c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c720:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c724:	4b7a      	ldr	r3, [pc, #488]	; (800c910 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c72c:	ee07 3a90 	vmov	s15, r3
 800c730:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c734:	ed97 6a03 	vldr	s12, [r7, #12]
 800c738:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c918 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c73c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c740:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c744:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c748:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c74c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c750:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c754:	e087      	b.n	800c866 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	ee07 3a90 	vmov	s15, r3
 800c75c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c760:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c91c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c764:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c768:	4b69      	ldr	r3, [pc, #420]	; (800c910 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c76a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c76c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c770:	ee07 3a90 	vmov	s15, r3
 800c774:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c778:	ed97 6a03 	vldr	s12, [r7, #12]
 800c77c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c918 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c780:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c784:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c788:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c78c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c790:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c794:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c798:	e065      	b.n	800c866 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	ee07 3a90 	vmov	s15, r3
 800c7a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7a4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c920 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c7a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7ac:	4b58      	ldr	r3, [pc, #352]	; (800c910 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7b4:	ee07 3a90 	vmov	s15, r3
 800c7b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7c0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c918 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c7c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c7dc:	e043      	b.n	800c866 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	ee07 3a90 	vmov	s15, r3
 800c7e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7e8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c924 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c7ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7f0:	4b47      	ldr	r3, [pc, #284]	; (800c910 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7f8:	ee07 3a90 	vmov	s15, r3
 800c7fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c800:	ed97 6a03 	vldr	s12, [r7, #12]
 800c804:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c918 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c808:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c80c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c810:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c814:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c81c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c820:	e021      	b.n	800c866 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	ee07 3a90 	vmov	s15, r3
 800c828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c82c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c91c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c830:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c834:	4b36      	ldr	r3, [pc, #216]	; (800c910 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c83c:	ee07 3a90 	vmov	s15, r3
 800c840:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c844:	ed97 6a03 	vldr	s12, [r7, #12]
 800c848:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c918 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c84c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c850:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c854:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c858:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c85c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c860:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c864:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c866:	4b2a      	ldr	r3, [pc, #168]	; (800c910 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c86a:	0a5b      	lsrs	r3, r3, #9
 800c86c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c870:	ee07 3a90 	vmov	s15, r3
 800c874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c878:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c87c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c880:	edd7 6a07 	vldr	s13, [r7, #28]
 800c884:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c88c:	ee17 2a90 	vmov	r2, s15
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c894:	4b1e      	ldr	r3, [pc, #120]	; (800c910 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c898:	0c1b      	lsrs	r3, r3, #16
 800c89a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c89e:	ee07 3a90 	vmov	s15, r3
 800c8a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c8aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c8ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800c8b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8ba:	ee17 2a90 	vmov	r2, s15
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c8c2:	4b13      	ldr	r3, [pc, #76]	; (800c910 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c8c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8c6:	0e1b      	lsrs	r3, r3, #24
 800c8c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8cc:	ee07 3a90 	vmov	s15, r3
 800c8d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c8d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c8dc:	edd7 6a07 	vldr	s13, [r7, #28]
 800c8e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8e8:	ee17 2a90 	vmov	r2, s15
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c8f0:	e008      	b.n	800c904 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2200      	movs	r2, #0
 800c902:	609a      	str	r2, [r3, #8]
}
 800c904:	bf00      	nop
 800c906:	3724      	adds	r7, #36	; 0x24
 800c908:	46bd      	mov	sp, r7
 800c90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90e:	4770      	bx	lr
 800c910:	58024400 	.word	0x58024400
 800c914:	03d09000 	.word	0x03d09000
 800c918:	46000000 	.word	0x46000000
 800c91c:	4c742400 	.word	0x4c742400
 800c920:	4a742400 	.word	0x4a742400
 800c924:	4af42400 	.word	0x4af42400

0800c928 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c932:	2300      	movs	r3, #0
 800c934:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c936:	4b53      	ldr	r3, [pc, #332]	; (800ca84 <RCCEx_PLL2_Config+0x15c>)
 800c938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c93a:	f003 0303 	and.w	r3, r3, #3
 800c93e:	2b03      	cmp	r3, #3
 800c940:	d101      	bne.n	800c946 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c942:	2301      	movs	r3, #1
 800c944:	e099      	b.n	800ca7a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c946:	4b4f      	ldr	r3, [pc, #316]	; (800ca84 <RCCEx_PLL2_Config+0x15c>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	4a4e      	ldr	r2, [pc, #312]	; (800ca84 <RCCEx_PLL2_Config+0x15c>)
 800c94c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c950:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c952:	f7f7 f845 	bl	80039e0 <HAL_GetTick>
 800c956:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c958:	e008      	b.n	800c96c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c95a:	f7f7 f841 	bl	80039e0 <HAL_GetTick>
 800c95e:	4602      	mov	r2, r0
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	1ad3      	subs	r3, r2, r3
 800c964:	2b02      	cmp	r3, #2
 800c966:	d901      	bls.n	800c96c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c968:	2303      	movs	r3, #3
 800c96a:	e086      	b.n	800ca7a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c96c:	4b45      	ldr	r3, [pc, #276]	; (800ca84 <RCCEx_PLL2_Config+0x15c>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c974:	2b00      	cmp	r3, #0
 800c976:	d1f0      	bne.n	800c95a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c978:	4b42      	ldr	r3, [pc, #264]	; (800ca84 <RCCEx_PLL2_Config+0x15c>)
 800c97a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c97c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	031b      	lsls	r3, r3, #12
 800c986:	493f      	ldr	r1, [pc, #252]	; (800ca84 <RCCEx_PLL2_Config+0x15c>)
 800c988:	4313      	orrs	r3, r2
 800c98a:	628b      	str	r3, [r1, #40]	; 0x28
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	685b      	ldr	r3, [r3, #4]
 800c990:	3b01      	subs	r3, #1
 800c992:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	689b      	ldr	r3, [r3, #8]
 800c99a:	3b01      	subs	r3, #1
 800c99c:	025b      	lsls	r3, r3, #9
 800c99e:	b29b      	uxth	r3, r3
 800c9a0:	431a      	orrs	r2, r3
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	68db      	ldr	r3, [r3, #12]
 800c9a6:	3b01      	subs	r3, #1
 800c9a8:	041b      	lsls	r3, r3, #16
 800c9aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c9ae:	431a      	orrs	r2, r3
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	691b      	ldr	r3, [r3, #16]
 800c9b4:	3b01      	subs	r3, #1
 800c9b6:	061b      	lsls	r3, r3, #24
 800c9b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c9bc:	4931      	ldr	r1, [pc, #196]	; (800ca84 <RCCEx_PLL2_Config+0x15c>)
 800c9be:	4313      	orrs	r3, r2
 800c9c0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c9c2:	4b30      	ldr	r3, [pc, #192]	; (800ca84 <RCCEx_PLL2_Config+0x15c>)
 800c9c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	695b      	ldr	r3, [r3, #20]
 800c9ce:	492d      	ldr	r1, [pc, #180]	; (800ca84 <RCCEx_PLL2_Config+0x15c>)
 800c9d0:	4313      	orrs	r3, r2
 800c9d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c9d4:	4b2b      	ldr	r3, [pc, #172]	; (800ca84 <RCCEx_PLL2_Config+0x15c>)
 800c9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9d8:	f023 0220 	bic.w	r2, r3, #32
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	699b      	ldr	r3, [r3, #24]
 800c9e0:	4928      	ldr	r1, [pc, #160]	; (800ca84 <RCCEx_PLL2_Config+0x15c>)
 800c9e2:	4313      	orrs	r3, r2
 800c9e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c9e6:	4b27      	ldr	r3, [pc, #156]	; (800ca84 <RCCEx_PLL2_Config+0x15c>)
 800c9e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ea:	4a26      	ldr	r2, [pc, #152]	; (800ca84 <RCCEx_PLL2_Config+0x15c>)
 800c9ec:	f023 0310 	bic.w	r3, r3, #16
 800c9f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c9f2:	4b24      	ldr	r3, [pc, #144]	; (800ca84 <RCCEx_PLL2_Config+0x15c>)
 800c9f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c9f6:	4b24      	ldr	r3, [pc, #144]	; (800ca88 <RCCEx_PLL2_Config+0x160>)
 800c9f8:	4013      	ands	r3, r2
 800c9fa:	687a      	ldr	r2, [r7, #4]
 800c9fc:	69d2      	ldr	r2, [r2, #28]
 800c9fe:	00d2      	lsls	r2, r2, #3
 800ca00:	4920      	ldr	r1, [pc, #128]	; (800ca84 <RCCEx_PLL2_Config+0x15c>)
 800ca02:	4313      	orrs	r3, r2
 800ca04:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ca06:	4b1f      	ldr	r3, [pc, #124]	; (800ca84 <RCCEx_PLL2_Config+0x15c>)
 800ca08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca0a:	4a1e      	ldr	r2, [pc, #120]	; (800ca84 <RCCEx_PLL2_Config+0x15c>)
 800ca0c:	f043 0310 	orr.w	r3, r3, #16
 800ca10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d106      	bne.n	800ca26 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ca18:	4b1a      	ldr	r3, [pc, #104]	; (800ca84 <RCCEx_PLL2_Config+0x15c>)
 800ca1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca1c:	4a19      	ldr	r2, [pc, #100]	; (800ca84 <RCCEx_PLL2_Config+0x15c>)
 800ca1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ca22:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ca24:	e00f      	b.n	800ca46 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	2b01      	cmp	r3, #1
 800ca2a:	d106      	bne.n	800ca3a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ca2c:	4b15      	ldr	r3, [pc, #84]	; (800ca84 <RCCEx_PLL2_Config+0x15c>)
 800ca2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca30:	4a14      	ldr	r2, [pc, #80]	; (800ca84 <RCCEx_PLL2_Config+0x15c>)
 800ca32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca36:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ca38:	e005      	b.n	800ca46 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ca3a:	4b12      	ldr	r3, [pc, #72]	; (800ca84 <RCCEx_PLL2_Config+0x15c>)
 800ca3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca3e:	4a11      	ldr	r2, [pc, #68]	; (800ca84 <RCCEx_PLL2_Config+0x15c>)
 800ca40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ca44:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ca46:	4b0f      	ldr	r3, [pc, #60]	; (800ca84 <RCCEx_PLL2_Config+0x15c>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4a0e      	ldr	r2, [pc, #56]	; (800ca84 <RCCEx_PLL2_Config+0x15c>)
 800ca4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ca50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca52:	f7f6 ffc5 	bl	80039e0 <HAL_GetTick>
 800ca56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ca58:	e008      	b.n	800ca6c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ca5a:	f7f6 ffc1 	bl	80039e0 <HAL_GetTick>
 800ca5e:	4602      	mov	r2, r0
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	1ad3      	subs	r3, r2, r3
 800ca64:	2b02      	cmp	r3, #2
 800ca66:	d901      	bls.n	800ca6c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ca68:	2303      	movs	r3, #3
 800ca6a:	e006      	b.n	800ca7a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ca6c:	4b05      	ldr	r3, [pc, #20]	; (800ca84 <RCCEx_PLL2_Config+0x15c>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d0f0      	beq.n	800ca5a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ca78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3710      	adds	r7, #16
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}
 800ca82:	bf00      	nop
 800ca84:	58024400 	.word	0x58024400
 800ca88:	ffff0007 	.word	0xffff0007

0800ca8c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b084      	sub	sp, #16
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
 800ca94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ca96:	2300      	movs	r3, #0
 800ca98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ca9a:	4b53      	ldr	r3, [pc, #332]	; (800cbe8 <RCCEx_PLL3_Config+0x15c>)
 800ca9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca9e:	f003 0303 	and.w	r3, r3, #3
 800caa2:	2b03      	cmp	r3, #3
 800caa4:	d101      	bne.n	800caaa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800caa6:	2301      	movs	r3, #1
 800caa8:	e099      	b.n	800cbde <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800caaa:	4b4f      	ldr	r3, [pc, #316]	; (800cbe8 <RCCEx_PLL3_Config+0x15c>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	4a4e      	ldr	r2, [pc, #312]	; (800cbe8 <RCCEx_PLL3_Config+0x15c>)
 800cab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cab4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cab6:	f7f6 ff93 	bl	80039e0 <HAL_GetTick>
 800caba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cabc:	e008      	b.n	800cad0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cabe:	f7f6 ff8f 	bl	80039e0 <HAL_GetTick>
 800cac2:	4602      	mov	r2, r0
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	1ad3      	subs	r3, r2, r3
 800cac8:	2b02      	cmp	r3, #2
 800caca:	d901      	bls.n	800cad0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cacc:	2303      	movs	r3, #3
 800cace:	e086      	b.n	800cbde <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cad0:	4b45      	ldr	r3, [pc, #276]	; (800cbe8 <RCCEx_PLL3_Config+0x15c>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d1f0      	bne.n	800cabe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cadc:	4b42      	ldr	r3, [pc, #264]	; (800cbe8 <RCCEx_PLL3_Config+0x15c>)
 800cade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cae0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	051b      	lsls	r3, r3, #20
 800caea:	493f      	ldr	r1, [pc, #252]	; (800cbe8 <RCCEx_PLL3_Config+0x15c>)
 800caec:	4313      	orrs	r3, r2
 800caee:	628b      	str	r3, [r1, #40]	; 0x28
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	685b      	ldr	r3, [r3, #4]
 800caf4:	3b01      	subs	r3, #1
 800caf6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	689b      	ldr	r3, [r3, #8]
 800cafe:	3b01      	subs	r3, #1
 800cb00:	025b      	lsls	r3, r3, #9
 800cb02:	b29b      	uxth	r3, r3
 800cb04:	431a      	orrs	r2, r3
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	68db      	ldr	r3, [r3, #12]
 800cb0a:	3b01      	subs	r3, #1
 800cb0c:	041b      	lsls	r3, r3, #16
 800cb0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cb12:	431a      	orrs	r2, r3
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	691b      	ldr	r3, [r3, #16]
 800cb18:	3b01      	subs	r3, #1
 800cb1a:	061b      	lsls	r3, r3, #24
 800cb1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cb20:	4931      	ldr	r1, [pc, #196]	; (800cbe8 <RCCEx_PLL3_Config+0x15c>)
 800cb22:	4313      	orrs	r3, r2
 800cb24:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cb26:	4b30      	ldr	r3, [pc, #192]	; (800cbe8 <RCCEx_PLL3_Config+0x15c>)
 800cb28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	695b      	ldr	r3, [r3, #20]
 800cb32:	492d      	ldr	r1, [pc, #180]	; (800cbe8 <RCCEx_PLL3_Config+0x15c>)
 800cb34:	4313      	orrs	r3, r2
 800cb36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cb38:	4b2b      	ldr	r3, [pc, #172]	; (800cbe8 <RCCEx_PLL3_Config+0x15c>)
 800cb3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb3c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	699b      	ldr	r3, [r3, #24]
 800cb44:	4928      	ldr	r1, [pc, #160]	; (800cbe8 <RCCEx_PLL3_Config+0x15c>)
 800cb46:	4313      	orrs	r3, r2
 800cb48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cb4a:	4b27      	ldr	r3, [pc, #156]	; (800cbe8 <RCCEx_PLL3_Config+0x15c>)
 800cb4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb4e:	4a26      	ldr	r2, [pc, #152]	; (800cbe8 <RCCEx_PLL3_Config+0x15c>)
 800cb50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cb56:	4b24      	ldr	r3, [pc, #144]	; (800cbe8 <RCCEx_PLL3_Config+0x15c>)
 800cb58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb5a:	4b24      	ldr	r3, [pc, #144]	; (800cbec <RCCEx_PLL3_Config+0x160>)
 800cb5c:	4013      	ands	r3, r2
 800cb5e:	687a      	ldr	r2, [r7, #4]
 800cb60:	69d2      	ldr	r2, [r2, #28]
 800cb62:	00d2      	lsls	r2, r2, #3
 800cb64:	4920      	ldr	r1, [pc, #128]	; (800cbe8 <RCCEx_PLL3_Config+0x15c>)
 800cb66:	4313      	orrs	r3, r2
 800cb68:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cb6a:	4b1f      	ldr	r3, [pc, #124]	; (800cbe8 <RCCEx_PLL3_Config+0x15c>)
 800cb6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb6e:	4a1e      	ldr	r2, [pc, #120]	; (800cbe8 <RCCEx_PLL3_Config+0x15c>)
 800cb70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d106      	bne.n	800cb8a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cb7c:	4b1a      	ldr	r3, [pc, #104]	; (800cbe8 <RCCEx_PLL3_Config+0x15c>)
 800cb7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb80:	4a19      	ldr	r2, [pc, #100]	; (800cbe8 <RCCEx_PLL3_Config+0x15c>)
 800cb82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cb86:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cb88:	e00f      	b.n	800cbaa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	2b01      	cmp	r3, #1
 800cb8e:	d106      	bne.n	800cb9e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cb90:	4b15      	ldr	r3, [pc, #84]	; (800cbe8 <RCCEx_PLL3_Config+0x15c>)
 800cb92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb94:	4a14      	ldr	r2, [pc, #80]	; (800cbe8 <RCCEx_PLL3_Config+0x15c>)
 800cb96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cb9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cb9c:	e005      	b.n	800cbaa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cb9e:	4b12      	ldr	r3, [pc, #72]	; (800cbe8 <RCCEx_PLL3_Config+0x15c>)
 800cba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cba2:	4a11      	ldr	r2, [pc, #68]	; (800cbe8 <RCCEx_PLL3_Config+0x15c>)
 800cba4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cba8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cbaa:	4b0f      	ldr	r3, [pc, #60]	; (800cbe8 <RCCEx_PLL3_Config+0x15c>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	4a0e      	ldr	r2, [pc, #56]	; (800cbe8 <RCCEx_PLL3_Config+0x15c>)
 800cbb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cbb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cbb6:	f7f6 ff13 	bl	80039e0 <HAL_GetTick>
 800cbba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cbbc:	e008      	b.n	800cbd0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cbbe:	f7f6 ff0f 	bl	80039e0 <HAL_GetTick>
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	1ad3      	subs	r3, r2, r3
 800cbc8:	2b02      	cmp	r3, #2
 800cbca:	d901      	bls.n	800cbd0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cbcc:	2303      	movs	r3, #3
 800cbce:	e006      	b.n	800cbde <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cbd0:	4b05      	ldr	r3, [pc, #20]	; (800cbe8 <RCCEx_PLL3_Config+0x15c>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d0f0      	beq.n	800cbbe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cbdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3710      	adds	r7, #16
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
 800cbe6:	bf00      	nop
 800cbe8:	58024400 	.word	0x58024400
 800cbec:	ffff0007 	.word	0xffff0007

0800cbf0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b084      	sub	sp, #16
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d101      	bne.n	800cc02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cbfe:	2301      	movs	r3, #1
 800cc00:	e10f      	b.n	800ce22 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2200      	movs	r2, #0
 800cc06:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	4a87      	ldr	r2, [pc, #540]	; (800ce2c <HAL_SPI_Init+0x23c>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d00f      	beq.n	800cc32 <HAL_SPI_Init+0x42>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4a86      	ldr	r2, [pc, #536]	; (800ce30 <HAL_SPI_Init+0x240>)
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d00a      	beq.n	800cc32 <HAL_SPI_Init+0x42>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4a84      	ldr	r2, [pc, #528]	; (800ce34 <HAL_SPI_Init+0x244>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d005      	beq.n	800cc32 <HAL_SPI_Init+0x42>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	68db      	ldr	r3, [r3, #12]
 800cc2a:	2b0f      	cmp	r3, #15
 800cc2c:	d901      	bls.n	800cc32 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800cc2e:	2301      	movs	r3, #1
 800cc30:	e0f7      	b.n	800ce22 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f000 ff48 	bl	800dac8 <SPI_GetPacketSize>
 800cc38:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	4a7b      	ldr	r2, [pc, #492]	; (800ce2c <HAL_SPI_Init+0x23c>)
 800cc40:	4293      	cmp	r3, r2
 800cc42:	d00c      	beq.n	800cc5e <HAL_SPI_Init+0x6e>
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	4a79      	ldr	r2, [pc, #484]	; (800ce30 <HAL_SPI_Init+0x240>)
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d007      	beq.n	800cc5e <HAL_SPI_Init+0x6e>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4a78      	ldr	r2, [pc, #480]	; (800ce34 <HAL_SPI_Init+0x244>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d002      	beq.n	800cc5e <HAL_SPI_Init+0x6e>
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	2b08      	cmp	r3, #8
 800cc5c:	d811      	bhi.n	800cc82 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cc62:	4a72      	ldr	r2, [pc, #456]	; (800ce2c <HAL_SPI_Init+0x23c>)
 800cc64:	4293      	cmp	r3, r2
 800cc66:	d009      	beq.n	800cc7c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	4a70      	ldr	r2, [pc, #448]	; (800ce30 <HAL_SPI_Init+0x240>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d004      	beq.n	800cc7c <HAL_SPI_Init+0x8c>
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	4a6f      	ldr	r2, [pc, #444]	; (800ce34 <HAL_SPI_Init+0x244>)
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d104      	bne.n	800cc86 <HAL_SPI_Init+0x96>
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	2b10      	cmp	r3, #16
 800cc80:	d901      	bls.n	800cc86 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800cc82:	2301      	movs	r3, #1
 800cc84:	e0cd      	b.n	800ce22 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cc8c:	b2db      	uxtb	r3, r3
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d106      	bne.n	800cca0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2200      	movs	r2, #0
 800cc96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f7f6 fa08 	bl	80030b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2202      	movs	r2, #2
 800cca4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	681a      	ldr	r2, [r3, #0]
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f022 0201 	bic.w	r2, r2, #1
 800ccb6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	689b      	ldr	r3, [r3, #8]
 800ccbe:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ccc2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	699b      	ldr	r3, [r3, #24]
 800ccc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cccc:	d119      	bne.n	800cd02 <HAL_SPI_Init+0x112>
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	685b      	ldr	r3, [r3, #4]
 800ccd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ccd6:	d103      	bne.n	800cce0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d008      	beq.n	800ccf2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d10c      	bne.n	800cd02 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ccec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ccf0:	d107      	bne.n	800cd02 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	681a      	ldr	r2, [r3, #0]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cd00:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	685b      	ldr	r3, [r3, #4]
 800cd06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d00f      	beq.n	800cd2e <HAL_SPI_Init+0x13e>
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	68db      	ldr	r3, [r3, #12]
 800cd12:	2b06      	cmp	r3, #6
 800cd14:	d90b      	bls.n	800cd2e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	430a      	orrs	r2, r1
 800cd2a:	601a      	str	r2, [r3, #0]
 800cd2c:	e007      	b.n	800cd3e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	681a      	ldr	r2, [r3, #0]
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cd3c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	69da      	ldr	r2, [r3, #28]
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd46:	431a      	orrs	r2, r3
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	431a      	orrs	r2, r3
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd50:	ea42 0103 	orr.w	r1, r2, r3
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	68da      	ldr	r2, [r3, #12]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	430a      	orrs	r2, r1
 800cd5e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd68:	431a      	orrs	r2, r3
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd6e:	431a      	orrs	r2, r3
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	699b      	ldr	r3, [r3, #24]
 800cd74:	431a      	orrs	r2, r3
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	691b      	ldr	r3, [r3, #16]
 800cd7a:	431a      	orrs	r2, r3
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	695b      	ldr	r3, [r3, #20]
 800cd80:	431a      	orrs	r2, r3
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6a1b      	ldr	r3, [r3, #32]
 800cd86:	431a      	orrs	r2, r3
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	685b      	ldr	r3, [r3, #4]
 800cd8c:	431a      	orrs	r2, r3
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd92:	431a      	orrs	r2, r3
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	689b      	ldr	r3, [r3, #8]
 800cd98:	431a      	orrs	r2, r3
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd9e:	ea42 0103 	orr.w	r1, r2, r3
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	430a      	orrs	r2, r1
 800cdac:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	685b      	ldr	r3, [r3, #4]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d113      	bne.n	800cdde <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	689b      	ldr	r3, [r3, #8]
 800cdbc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cdc8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	689b      	ldr	r3, [r3, #8]
 800cdd0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cddc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f022 0201 	bic.w	r2, r2, #1
 800cdec:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	685b      	ldr	r3, [r3, #4]
 800cdf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d00a      	beq.n	800ce10 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	68db      	ldr	r3, [r3, #12]
 800ce00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	430a      	orrs	r2, r1
 800ce0e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2200      	movs	r2, #0
 800ce14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ce20:	2300      	movs	r3, #0
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3710      	adds	r7, #16
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}
 800ce2a:	bf00      	nop
 800ce2c:	40013000 	.word	0x40013000
 800ce30:	40003800 	.word	0x40003800
 800ce34:	40003c00 	.word	0x40003c00

0800ce38 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b08c      	sub	sp, #48	; 0x30
 800ce3c:	af02      	add	r7, sp, #8
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	60b9      	str	r1, [r7, #8]
 800ce42:	607a      	str	r2, [r7, #4]
 800ce44:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ce46:	2300      	movs	r3, #0
 800ce48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	3320      	adds	r3, #32
 800ce52:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	3330      	adds	r3, #48	; 0x30
 800ce5a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ce62:	2b01      	cmp	r3, #1
 800ce64:	d101      	bne.n	800ce6a <HAL_SPI_TransmitReceive+0x32>
 800ce66:	2302      	movs	r3, #2
 800ce68:	e1fd      	b.n	800d266 <HAL_SPI_TransmitReceive+0x42e>
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ce72:	f7f6 fdb5 	bl	80039e0 <HAL_GetTick>
 800ce76:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 800ce78:	887b      	ldrh	r3, [r7, #2]
 800ce7a:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 800ce7c:	887b      	ldrh	r3, [r7, #2]
 800ce7e:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ce86:	b2db      	uxtb	r3, r3
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d009      	beq.n	800cea0 <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 800ce8c:	2302      	movs	r3, #2
 800ce8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	2200      	movs	r2, #0
 800ce96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ce9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ce9e:	e1e2      	b.n	800d266 <HAL_SPI_TransmitReceive+0x42e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d005      	beq.n	800ceb2 <HAL_SPI_TransmitReceive+0x7a>
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d002      	beq.n	800ceb2 <HAL_SPI_TransmitReceive+0x7a>
 800ceac:	887b      	ldrh	r3, [r7, #2]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d109      	bne.n	800cec6 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 800ceb2:	2301      	movs	r3, #1
 800ceb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	2200      	movs	r2, #0
 800cebc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cec0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cec4:	e1cf      	b.n	800d266 <HAL_SPI_TransmitReceive+0x42e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	2205      	movs	r2, #5
 800ceca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2200      	movs	r2, #0
 800ced2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	687a      	ldr	r2, [r7, #4]
 800ceda:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	887a      	ldrh	r2, [r7, #2]
 800cee0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	887a      	ldrh	r2, [r7, #2]
 800cee8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	68ba      	ldr	r2, [r7, #8]
 800cef0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	887a      	ldrh	r2, [r7, #2]
 800cef6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	887a      	ldrh	r2, [r7, #2]
 800cefe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	2200      	movs	r2, #0
 800cf06:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	68da      	ldr	r2, [r3, #12]
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 800cf1c:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	685a      	ldr	r2, [r3, #4]
 800cf24:	4b82      	ldr	r3, [pc, #520]	; (800d130 <HAL_SPI_TransmitReceive+0x2f8>)
 800cf26:	4013      	ands	r3, r2
 800cf28:	8879      	ldrh	r1, [r7, #2]
 800cf2a:	68fa      	ldr	r2, [r7, #12]
 800cf2c:	6812      	ldr	r2, [r2, #0]
 800cf2e:	430b      	orrs	r3, r1
 800cf30:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	681a      	ldr	r2, [r3, #0]
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f042 0201 	orr.w	r2, r2, #1
 800cf40:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	685b      	ldr	r3, [r3, #4]
 800cf46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cf4a:	d107      	bne.n	800cf5c <HAL_SPI_TransmitReceive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	681a      	ldr	r2, [r3, #0]
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	68db      	ldr	r3, [r3, #12]
 800cf60:	2b0f      	cmp	r3, #15
 800cf62:	d970      	bls.n	800d046 <HAL_SPI_TransmitReceive+0x20e>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cf64:	e068      	b.n	800d038 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	695b      	ldr	r3, [r3, #20]
 800cf6c:	f003 0302 	and.w	r3, r3, #2
 800cf70:	2b02      	cmp	r3, #2
 800cf72:	d11a      	bne.n	800cfaa <HAL_SPI_TransmitReceive+0x172>
 800cf74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d017      	beq.n	800cfaa <HAL_SPI_TransmitReceive+0x172>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	6812      	ldr	r2, [r2, #0]
 800cf84:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf8a:	1d1a      	adds	r2, r3, #4
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cf96:	b29b      	uxth	r3, r3
 800cf98:	3b01      	subs	r3, #1
 800cf9a:	b29a      	uxth	r2, r3
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cfa8:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	695a      	ldr	r2, [r3, #20]
 800cfb0:	f248 0308 	movw	r3, #32776	; 0x8008
 800cfb4:	4013      	ands	r3, r2
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d01a      	beq.n	800cff0 <HAL_SPI_TransmitReceive+0x1b8>
 800cfba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d017      	beq.n	800cff0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	681a      	ldr	r2, [r3, #0]
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cfc8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cfca:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cfd0:	1d1a      	adds	r2, r3, #4
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cfdc:	b29b      	uxth	r3, r3
 800cfde:	3b01      	subs	r3, #1
 800cfe0:	b29a      	uxth	r2, r3
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cfee:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cff0:	f7f6 fcf6 	bl	80039e0 <HAL_GetTick>
 800cff4:	4602      	mov	r2, r0
 800cff6:	697b      	ldr	r3, [r7, #20]
 800cff8:	1ad3      	subs	r3, r2, r3
 800cffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cffc:	429a      	cmp	r2, r3
 800cffe:	d803      	bhi.n	800d008 <HAL_SPI_TransmitReceive+0x1d0>
 800d000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d002:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d006:	d102      	bne.n	800d00e <HAL_SPI_TransmitReceive+0x1d6>
 800d008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d114      	bne.n	800d038 <HAL_SPI_TransmitReceive+0x200>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d00e:	68f8      	ldr	r0, [r7, #12]
 800d010:	f000 fc8c 	bl	800d92c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	2200      	movs	r2, #0
 800d018:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d022:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	2201      	movs	r2, #1
 800d030:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800d034:	2303      	movs	r3, #3
 800d036:	e116      	b.n	800d266 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d038:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d193      	bne.n	800cf66 <HAL_SPI_TransmitReceive+0x12e>
 800d03e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d040:	2b00      	cmp	r3, #0
 800d042:	d190      	bne.n	800cf66 <HAL_SPI_TransmitReceive+0x12e>
 800d044:	e0e8      	b.n	800d218 <HAL_SPI_TransmitReceive+0x3e0>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	68db      	ldr	r3, [r3, #12]
 800d04a:	2b07      	cmp	r3, #7
 800d04c:	f240 80de 	bls.w	800d20c <HAL_SPI_TransmitReceive+0x3d4>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d050:	e066      	b.n	800d120 <HAL_SPI_TransmitReceive+0x2e8>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	695b      	ldr	r3, [r3, #20]
 800d058:	f003 0302 	and.w	r3, r3, #2
 800d05c:	2b02      	cmp	r3, #2
 800d05e:	d119      	bne.n	800d094 <HAL_SPI_TransmitReceive+0x25c>
 800d060:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d062:	2b00      	cmp	r3, #0
 800d064:	d016      	beq.n	800d094 <HAL_SPI_TransmitReceive+0x25c>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d06a:	881a      	ldrh	r2, [r3, #0]
 800d06c:	69fb      	ldr	r3, [r7, #28]
 800d06e:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d074:	1c9a      	adds	r2, r3, #2
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d080:	b29b      	uxth	r3, r3
 800d082:	3b01      	subs	r3, #1
 800d084:	b29a      	uxth	r2, r3
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d092:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	695b      	ldr	r3, [r3, #20]
 800d09a:	f003 0301 	and.w	r3, r3, #1
 800d09e:	2b01      	cmp	r3, #1
 800d0a0:	d11a      	bne.n	800d0d8 <HAL_SPI_TransmitReceive+0x2a0>
 800d0a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d017      	beq.n	800d0d8 <HAL_SPI_TransmitReceive+0x2a0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0ac:	69ba      	ldr	r2, [r7, #24]
 800d0ae:	8812      	ldrh	r2, [r2, #0]
 800d0b0:	b292      	uxth	r2, r2
 800d0b2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0b8:	1c9a      	adds	r2, r3, #2
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d0c4:	b29b      	uxth	r3, r3
 800d0c6:	3b01      	subs	r3, #1
 800d0c8:	b29a      	uxth	r2, r3
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d0d6:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d0d8:	f7f6 fc82 	bl	80039e0 <HAL_GetTick>
 800d0dc:	4602      	mov	r2, r0
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	1ad3      	subs	r3, r2, r3
 800d0e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d803      	bhi.n	800d0f0 <HAL_SPI_TransmitReceive+0x2b8>
 800d0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0ee:	d102      	bne.n	800d0f6 <HAL_SPI_TransmitReceive+0x2be>
 800d0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d114      	bne.n	800d120 <HAL_SPI_TransmitReceive+0x2e8>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d0f6:	68f8      	ldr	r0, [r7, #12]
 800d0f8:	f000 fc18 	bl	800d92c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	2200      	movs	r2, #0
 800d100:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d10a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	2201      	movs	r2, #1
 800d118:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800d11c:	2303      	movs	r3, #3
 800d11e:	e0a2      	b.n	800d266 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d120:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d122:	2b00      	cmp	r3, #0
 800d124:	d195      	bne.n	800d052 <HAL_SPI_TransmitReceive+0x21a>
 800d126:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d192      	bne.n	800d052 <HAL_SPI_TransmitReceive+0x21a>
 800d12c:	e074      	b.n	800d218 <HAL_SPI_TransmitReceive+0x3e0>
 800d12e:	bf00      	nop
 800d130:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	695b      	ldr	r3, [r3, #20]
 800d13a:	f003 0302 	and.w	r3, r3, #2
 800d13e:	2b02      	cmp	r3, #2
 800d140:	d11b      	bne.n	800d17a <HAL_SPI_TransmitReceive+0x342>
 800d142:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d144:	2b00      	cmp	r3, #0
 800d146:	d018      	beq.n	800d17a <HAL_SPI_TransmitReceive+0x342>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	3320      	adds	r3, #32
 800d152:	7812      	ldrb	r2, [r2, #0]
 800d154:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d15a:	1c5a      	adds	r2, r3, #1
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d166:	b29b      	uxth	r3, r3
 800d168:	3b01      	subs	r3, #1
 800d16a:	b29a      	uxth	r2, r3
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d178:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	695b      	ldr	r3, [r3, #20]
 800d180:	f003 0301 	and.w	r3, r3, #1
 800d184:	2b01      	cmp	r3, #1
 800d186:	d11d      	bne.n	800d1c4 <HAL_SPI_TransmitReceive+0x38c>
 800d188:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d01a      	beq.n	800d1c4 <HAL_SPI_TransmitReceive+0x38c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d19a:	7812      	ldrb	r2, [r2, #0]
 800d19c:	b2d2      	uxtb	r2, r2
 800d19e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1a4:	1c5a      	adds	r2, r3, #1
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d1b0:	b29b      	uxth	r3, r3
 800d1b2:	3b01      	subs	r3, #1
 800d1b4:	b29a      	uxth	r2, r3
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d1c2:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d1c4:	f7f6 fc0c 	bl	80039e0 <HAL_GetTick>
 800d1c8:	4602      	mov	r2, r0
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	1ad3      	subs	r3, r2, r3
 800d1ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d803      	bhi.n	800d1dc <HAL_SPI_TransmitReceive+0x3a4>
 800d1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1da:	d102      	bne.n	800d1e2 <HAL_SPI_TransmitReceive+0x3aa>
 800d1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d114      	bne.n	800d20c <HAL_SPI_TransmitReceive+0x3d4>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d1e2:	68f8      	ldr	r0, [r7, #12]
 800d1e4:	f000 fba2 	bl	800d92c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2201      	movs	r2, #1
 800d204:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800d208:	2303      	movs	r3, #3
 800d20a:	e02c      	b.n	800d266 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d20c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d190      	bne.n	800d134 <HAL_SPI_TransmitReceive+0x2fc>
 800d212:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d214:	2b00      	cmp	r3, #0
 800d216:	d18d      	bne.n	800d134 <HAL_SPI_TransmitReceive+0x2fc>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	9300      	str	r3, [sp, #0]
 800d21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d21e:	2200      	movs	r2, #0
 800d220:	2108      	movs	r1, #8
 800d222:	68f8      	ldr	r0, [r7, #12]
 800d224:	f000 fc22 	bl	800da6c <SPI_WaitOnFlagUntilTimeout>
 800d228:	4603      	mov	r3, r0
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d007      	beq.n	800d23e <HAL_SPI_TransmitReceive+0x406>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d234:	f043 0220 	orr.w	r2, r3, #32
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d23e:	68f8      	ldr	r0, [r7, #12]
 800d240:	f000 fb74 	bl	800d92c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	2200      	movs	r2, #0
 800d248:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	2201      	movs	r2, #1
 800d250:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d001      	beq.n	800d262 <HAL_SPI_TransmitReceive+0x42a>
  {
    return HAL_ERROR;
 800d25e:	2301      	movs	r3, #1
 800d260:	e001      	b.n	800d266 <HAL_SPI_TransmitReceive+0x42e>
  }
  return errorcode;
 800d262:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800d266:	4618      	mov	r0, r3
 800d268:	3728      	adds	r7, #40	; 0x28
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
 800d26e:	bf00      	nop

0800d270 <HAL_SPI_Receive_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800d270:	b480      	push	{r7}
 800d272:	b087      	sub	sp, #28
 800d274:	af00      	add	r7, sp, #0
 800d276:	60f8      	str	r0, [r7, #12]
 800d278:	60b9      	str	r1, [r7, #8]
 800d27a:	4613      	mov	r3, r2
 800d27c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d27e:	2300      	movs	r3, #0
 800d280:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d288:	2b01      	cmp	r3, #1
 800d28a:	d101      	bne.n	800d290 <HAL_SPI_Receive_IT+0x20>
 800d28c:	2302      	movs	r3, #2
 800d28e:	e098      	b.n	800d3c2 <HAL_SPI_Receive_IT+0x152>
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	2201      	movs	r2, #1
 800d294:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d29e:	b2db      	uxtb	r3, r3
 800d2a0:	2b01      	cmp	r3, #1
 800d2a2:	d007      	beq.n	800d2b4 <HAL_SPI_Receive_IT+0x44>
  {
    errorcode = HAL_BUSY;
 800d2a4:	2302      	movs	r3, #2
 800d2a6:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d2b0:	7dfb      	ldrb	r3, [r7, #23]
 800d2b2:	e086      	b.n	800d3c2 <HAL_SPI_Receive_IT+0x152>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d002      	beq.n	800d2c0 <HAL_SPI_Receive_IT+0x50>
 800d2ba:	88fb      	ldrh	r3, [r7, #6]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d107      	bne.n	800d2d0 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d2cc:	7dfb      	ldrb	r3, [r7, #23]
 800d2ce:	e078      	b.n	800d3c2 <HAL_SPI_Receive_IT+0x152>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	2204      	movs	r2, #4
 800d2d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	68ba      	ldr	r2, [r7, #8]
 800d2e4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	88fa      	ldrh	r2, [r7, #6]
 800d2ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	88fa      	ldrh	r2, [r7, #6]
 800d2f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	2200      	movs	r2, #0
 800d300:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	2200      	movs	r2, #0
 800d308:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxISR       = NULL;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	2200      	movs	r2, #0
 800d310:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	68db      	ldr	r3, [r3, #12]
 800d316:	2b0f      	cmp	r3, #15
 800d318:	d903      	bls.n	800d322 <HAL_SPI_Receive_IT+0xb2>
  {
    hspi->RxISR = SPI_RxISR_32BIT;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	4a2c      	ldr	r2, [pc, #176]	; (800d3d0 <HAL_SPI_Receive_IT+0x160>)
 800d31e:	671a      	str	r2, [r3, #112]	; 0x70
 800d320:	e00a      	b.n	800d338 <HAL_SPI_Receive_IT+0xc8>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	68db      	ldr	r3, [r3, #12]
 800d326:	2b07      	cmp	r3, #7
 800d328:	d903      	bls.n	800d332 <HAL_SPI_Receive_IT+0xc2>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	4a29      	ldr	r2, [pc, #164]	; (800d3d4 <HAL_SPI_Receive_IT+0x164>)
 800d32e:	671a      	str	r2, [r3, #112]	; 0x70
 800d330:	e002      	b.n	800d338 <HAL_SPI_Receive_IT+0xc8>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	4a28      	ldr	r2, [pc, #160]	; (800d3d8 <HAL_SPI_Receive_IT+0x168>)
 800d336:	671a      	str	r2, [r3, #112]	; 0x70
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	689b      	ldr	r3, [r3, #8]
 800d33c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800d340:	d108      	bne.n	800d354 <HAL_SPI_Receive_IT+0xe4>
  {
    SPI_1LINE_RX(hspi);
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	681a      	ldr	r2, [r3, #0]
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d350:	601a      	str	r2, [r3, #0]
 800d352:	e009      	b.n	800d368 <HAL_SPI_Receive_IT+0xf8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	68db      	ldr	r3, [r3, #12]
 800d35a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800d366:	60da      	str	r2, [r3, #12]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	685a      	ldr	r2, [r3, #4]
 800d36e:	4b1b      	ldr	r3, [pc, #108]	; (800d3dc <HAL_SPI_Receive_IT+0x16c>)
 800d370:	4013      	ands	r3, r2
 800d372:	88f9      	ldrh	r1, [r7, #6]
 800d374:	68fa      	ldr	r2, [r7, #12]
 800d376:	6812      	ldr	r2, [r2, #0]
 800d378:	430b      	orrs	r3, r1
 800d37a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	681a      	ldr	r2, [r3, #0]
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	f042 0201 	orr.w	r2, r2, #1
 800d38a:	601a      	str	r2, [r3, #0]

  /* Enable EOT, RXP, OVR, FRE, MODF and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	6919      	ldr	r1, [r3, #16]
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681a      	ldr	r2, [r3, #0]
 800d396:	f240 7349 	movw	r3, #1865	; 0x749
 800d39a:	430b      	orrs	r3, r1
 800d39c:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d3a6:	d107      	bne.n	800d3b8 <HAL_SPI_Receive_IT+0x148>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	681a      	ldr	r2, [r3, #0]
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d3b6:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800d3c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	371c      	adds	r7, #28
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3cc:	4770      	bx	lr
 800d3ce:	bf00      	nop
 800d3d0:	0800d8d3 	.word	0x0800d8d3
 800d3d4:	0800d873 	.word	0x0800d873
 800d3d8:	0800d815 	.word	0x0800d815
 800d3dc:	ffff0000 	.word	0xffff0000

0800d3e0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b08a      	sub	sp, #40	; 0x28
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	691b      	ldr	r3, [r3, #16]
 800d3ee:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	695b      	ldr	r3, [r3, #20]
 800d3f6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800d3f8:	6a3a      	ldr	r2, [r7, #32]
 800d3fa:	69fb      	ldr	r3, [r7, #28]
 800d3fc:	4013      	ands	r3, r2
 800d3fe:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	689b      	ldr	r3, [r3, #8]
 800d406:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800d408:	2300      	movs	r3, #0
 800d40a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d412:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	3330      	adds	r3, #48	; 0x30
 800d41a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800d41c:	69fb      	ldr	r3, [r7, #28]
 800d41e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d422:	2b00      	cmp	r3, #0
 800d424:	d010      	beq.n	800d448 <HAL_SPI_IRQHandler+0x68>
 800d426:	6a3b      	ldr	r3, [r7, #32]
 800d428:	f003 0308 	and.w	r3, r3, #8
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d00b      	beq.n	800d448 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	699a      	ldr	r2, [r3, #24]
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d43e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	f000 f9c3 	bl	800d7cc <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800d446:	e192      	b.n	800d76e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800d448:	69bb      	ldr	r3, [r7, #24]
 800d44a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d113      	bne.n	800d47a <HAL_SPI_IRQHandler+0x9a>
 800d452:	69bb      	ldr	r3, [r7, #24]
 800d454:	f003 0320 	and.w	r3, r3, #32
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d10e      	bne.n	800d47a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800d45c:	69bb      	ldr	r3, [r7, #24]
 800d45e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800d462:	2b00      	cmp	r3, #0
 800d464:	d009      	beq.n	800d47a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	4798      	blx	r3
    handled = 1UL;
 800d476:	2301      	movs	r3, #1
 800d478:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800d47a:	69bb      	ldr	r3, [r7, #24]
 800d47c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d480:	2b00      	cmp	r3, #0
 800d482:	d10f      	bne.n	800d4a4 <HAL_SPI_IRQHandler+0xc4>
 800d484:	69bb      	ldr	r3, [r7, #24]
 800d486:	f003 0301 	and.w	r3, r3, #1
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d00a      	beq.n	800d4a4 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800d48e:	69bb      	ldr	r3, [r7, #24]
 800d490:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800d494:	2b00      	cmp	r3, #0
 800d496:	d105      	bne.n	800d4a4 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d49c:	6878      	ldr	r0, [r7, #4]
 800d49e:	4798      	blx	r3
    handled = 1UL;
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800d4a4:	69bb      	ldr	r3, [r7, #24]
 800d4a6:	f003 0320 	and.w	r3, r3, #32
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d10f      	bne.n	800d4ce <HAL_SPI_IRQHandler+0xee>
 800d4ae:	69bb      	ldr	r3, [r7, #24]
 800d4b0:	f003 0302 	and.w	r3, r3, #2
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d00a      	beq.n	800d4ce <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800d4b8:	69bb      	ldr	r3, [r7, #24]
 800d4ba:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d105      	bne.n	800d4ce <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	4798      	blx	r3
    handled = 1UL;
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800d4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	f040 8147 	bne.w	800d764 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800d4d6:	69bb      	ldr	r3, [r7, #24]
 800d4d8:	f003 0308 	and.w	r3, r3, #8
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	f000 808b 	beq.w	800d5f8 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	699a      	ldr	r2, [r3, #24]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f042 0208 	orr.w	r2, r2, #8
 800d4f0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	699a      	ldr	r2, [r3, #24]
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	f042 0210 	orr.w	r2, r2, #16
 800d500:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	699a      	ldr	r2, [r3, #24]
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d510:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	691a      	ldr	r2, [r3, #16]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f022 0208 	bic.w	r2, r2, #8
 800d520:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	689b      	ldr	r3, [r3, #8]
 800d528:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d13d      	bne.n	800d5ac <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800d530:	e036      	b.n	800d5a0 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	68db      	ldr	r3, [r3, #12]
 800d536:	2b0f      	cmp	r3, #15
 800d538:	d90b      	bls.n	800d552 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681a      	ldr	r2, [r3, #0]
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d542:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d544:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d54a:	1d1a      	adds	r2, r3, #4
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	665a      	str	r2, [r3, #100]	; 0x64
 800d550:	e01d      	b.n	800d58e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	68db      	ldr	r3, [r3, #12]
 800d556:	2b07      	cmp	r3, #7
 800d558:	d90b      	bls.n	800d572 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d55e:	68fa      	ldr	r2, [r7, #12]
 800d560:	8812      	ldrh	r2, [r2, #0]
 800d562:	b292      	uxth	r2, r2
 800d564:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d56a:	1c9a      	adds	r2, r3, #2
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	665a      	str	r2, [r3, #100]	; 0x64
 800d570:	e00d      	b.n	800d58e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d57e:	7812      	ldrb	r2, [r2, #0]
 800d580:	b2d2      	uxtb	r2, r2
 800d582:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d588:	1c5a      	adds	r2, r3, #1
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d594:	b29b      	uxth	r3, r3
 800d596:	3b01      	subs	r3, #1
 800d598:	b29a      	uxth	r2, r3
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d5a6:	b29b      	uxth	r3, r3
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d1c2      	bne.n	800d532 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f000 f9bd 	bl	800d92c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2201      	movs	r2, #1
 800d5b6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d003      	beq.n	800d5cc <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f000 f8f7 	bl	800d7b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d5ca:	e0d0      	b.n	800d76e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800d5cc:	7cfb      	ldrb	r3, [r7, #19]
 800d5ce:	2b05      	cmp	r3, #5
 800d5d0:	d103      	bne.n	800d5da <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800d5d2:	6878      	ldr	r0, [r7, #4]
 800d5d4:	f000 f8e6 	bl	800d7a4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800d5d8:	e0c6      	b.n	800d768 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800d5da:	7cfb      	ldrb	r3, [r7, #19]
 800d5dc:	2b04      	cmp	r3, #4
 800d5de:	d103      	bne.n	800d5e8 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f000 f8d5 	bl	800d790 <HAL_SPI_RxCpltCallback>
    return;
 800d5e6:	e0bf      	b.n	800d768 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800d5e8:	7cfb      	ldrb	r3, [r7, #19]
 800d5ea:	2b03      	cmp	r3, #3
 800d5ec:	f040 80bc 	bne.w	800d768 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f000 f8c3 	bl	800d77c <HAL_SPI_TxCpltCallback>
    return;
 800d5f6:	e0b7      	b.n	800d768 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800d5f8:	69bb      	ldr	r3, [r7, #24]
 800d5fa:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	f000 80b5 	beq.w	800d76e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800d604:	69bb      	ldr	r3, [r7, #24]
 800d606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d00f      	beq.n	800d62e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d614:	f043 0204 	orr.w	r2, r3, #4
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	699a      	ldr	r2, [r3, #24]
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d62c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800d62e:	69bb      	ldr	r3, [r7, #24]
 800d630:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d634:	2b00      	cmp	r3, #0
 800d636:	d00f      	beq.n	800d658 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d63e:	f043 0201 	orr.w	r2, r3, #1
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	699a      	ldr	r2, [r3, #24]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d656:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800d658:	69bb      	ldr	r3, [r7, #24]
 800d65a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d00f      	beq.n	800d682 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d668:	f043 0208 	orr.w	r2, r3, #8
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	699a      	ldr	r2, [r3, #24]
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d680:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800d682:	69bb      	ldr	r3, [r7, #24]
 800d684:	f003 0320 	and.w	r3, r3, #32
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d00f      	beq.n	800d6ac <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d692:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	699a      	ldr	r2, [r3, #24]
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	f042 0220 	orr.w	r2, r2, #32
 800d6aa:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d05a      	beq.n	800d76c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	681a      	ldr	r2, [r3, #0]
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	f022 0201 	bic.w	r2, r2, #1
 800d6c4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	6919      	ldr	r1, [r3, #16]
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681a      	ldr	r2, [r3, #0]
 800d6d0:	4b28      	ldr	r3, [pc, #160]	; (800d774 <HAL_SPI_IRQHandler+0x394>)
 800d6d2:	400b      	ands	r3, r1
 800d6d4:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d6d6:	697b      	ldr	r3, [r7, #20]
 800d6d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d6dc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d6e0:	d138      	bne.n	800d754 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	689a      	ldr	r2, [r3, #8]
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d6f0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d013      	beq.n	800d722 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6fe:	4a1e      	ldr	r2, [pc, #120]	; (800d778 <HAL_SPI_IRQHandler+0x398>)
 800d700:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d706:	4618      	mov	r0, r3
 800d708:	f7f9 fa2e 	bl	8006b68 <HAL_DMA_Abort_IT>
 800d70c:	4603      	mov	r3, r0
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d007      	beq.n	800d722 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d718:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d726:	2b00      	cmp	r3, #0
 800d728:	d020      	beq.n	800d76c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d72e:	4a12      	ldr	r2, [pc, #72]	; (800d778 <HAL_SPI_IRQHandler+0x398>)
 800d730:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d736:	4618      	mov	r0, r3
 800d738:	f7f9 fa16 	bl	8006b68 <HAL_DMA_Abort_IT>
 800d73c:	4603      	mov	r3, r0
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d014      	beq.n	800d76c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d748:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800d752:	e00b      	b.n	800d76c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2201      	movs	r2, #1
 800d758:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f000 f82b 	bl	800d7b8 <HAL_SPI_ErrorCallback>
    return;
 800d762:	e003      	b.n	800d76c <HAL_SPI_IRQHandler+0x38c>
    return;
 800d764:	bf00      	nop
 800d766:	e002      	b.n	800d76e <HAL_SPI_IRQHandler+0x38e>
    return;
 800d768:	bf00      	nop
 800d76a:	e000      	b.n	800d76e <HAL_SPI_IRQHandler+0x38e>
    return;
 800d76c:	bf00      	nop
  }
}
 800d76e:	3728      	adds	r7, #40	; 0x28
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}
 800d774:	fffffc94 	.word	0xfffffc94
 800d778:	0800d7e1 	.word	0x0800d7e1

0800d77c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d77c:	b480      	push	{r7}
 800d77e:	b083      	sub	sp, #12
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800d784:	bf00      	nop
 800d786:	370c      	adds	r7, #12
 800d788:	46bd      	mov	sp, r7
 800d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78e:	4770      	bx	lr

0800d790 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d790:	b480      	push	{r7}
 800d792:	b083      	sub	sp, #12
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800d798:	bf00      	nop
 800d79a:	370c      	adds	r7, #12
 800d79c:	46bd      	mov	sp, r7
 800d79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a2:	4770      	bx	lr

0800d7a4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b083      	sub	sp, #12
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800d7ac:	bf00      	nop
 800d7ae:	370c      	adds	r7, #12
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b6:	4770      	bx	lr

0800d7b8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b083      	sub	sp, #12
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d7c0:	bf00      	nop
 800d7c2:	370c      	adds	r7, #12
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ca:	4770      	bx	lr

0800d7cc <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b083      	sub	sp, #12
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800d7d4:	bf00      	nop
 800d7d6:	370c      	adds	r7, #12
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7de:	4770      	bx	lr

0800d7e0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b084      	sub	sp, #16
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2201      	movs	r2, #1
 800d802:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d806:	68f8      	ldr	r0, [r7, #12]
 800d808:	f7ff ffd6 	bl	800d7b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d80c:	bf00      	nop
 800d80e:	3710      	adds	r7, #16
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}

0800d814 <SPI_RxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 800d814:	b480      	push	{r7}
 800d816:	b083      	sub	sp, #12
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d828:	7812      	ldrb	r2, [r2, #0]
 800d82a:	b2d2      	uxtb	r2, r2
 800d82c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d832:	1c5a      	adds	r2, r3, #1
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount--;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d83e:	b29b      	uxth	r3, r3
 800d840:	3b01      	subs	r3, #1
 800d842:	b29a      	uxth	r2, r3
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d850:	b29b      	uxth	r3, r3
 800d852:	2b00      	cmp	r3, #0
 800d854:	d107      	bne.n	800d866 <SPI_RxISR_8BIT+0x52>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	691a      	ldr	r2, [r3, #16]
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	f022 0201 	bic.w	r2, r2, #1
 800d864:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800d866:	bf00      	nop
 800d868:	370c      	adds	r7, #12
 800d86a:	46bd      	mov	sp, r7
 800d86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d870:	4770      	bx	lr

0800d872 <SPI_RxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 800d872:	b480      	push	{r7}
 800d874:	b085      	sub	sp, #20
 800d876:	af00      	add	r7, sp, #0
 800d878:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	3330      	adds	r3, #48	; 0x30
 800d880:	60fb      	str	r3, [r7, #12]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d886:	68fa      	ldr	r2, [r7, #12]
 800d888:	8812      	ldrh	r2, [r2, #0]
 800d88a:	b292      	uxth	r2, r2
 800d88c:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d892:	1c9a      	adds	r2, r3, #2
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount--;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d89e:	b29b      	uxth	r3, r3
 800d8a0:	3b01      	subs	r3, #1
 800d8a2:	b29a      	uxth	r2, r3
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d8b0:	b29b      	uxth	r3, r3
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d107      	bne.n	800d8c6 <SPI_RxISR_16BIT+0x54>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	691a      	ldr	r2, [r3, #16]
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	f022 0201 	bic.w	r2, r2, #1
 800d8c4:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800d8c6:	bf00      	nop
 800d8c8:	3714      	adds	r7, #20
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d0:	4770      	bx	lr

0800d8d2 <SPI_RxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 800d8d2:	b480      	push	{r7}
 800d8d4:	b083      	sub	sp, #12
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	6078      	str	r0, [r7, #4]
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681a      	ldr	r2, [r3, #0]
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8e2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d8e4:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8ea:	1d1a      	adds	r2, r3, #4
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount--;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d8f6:	b29b      	uxth	r3, r3
 800d8f8:	3b01      	subs	r3, #1
 800d8fa:	b29a      	uxth	r2, r3
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d908:	b29b      	uxth	r3, r3
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d107      	bne.n	800d91e <SPI_RxISR_32BIT+0x4c>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	691a      	ldr	r2, [r3, #16]
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	f022 0201 	bic.w	r2, r2, #1
 800d91c:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800d91e:	bf00      	nop
 800d920:	370c      	adds	r7, #12
 800d922:	46bd      	mov	sp, r7
 800d924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d928:	4770      	bx	lr
	...

0800d92c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d92c:	b480      	push	{r7}
 800d92e:	b085      	sub	sp, #20
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	695b      	ldr	r3, [r3, #20]
 800d93a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	699a      	ldr	r2, [r3, #24]
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	f042 0208 	orr.w	r2, r2, #8
 800d94a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	699a      	ldr	r2, [r3, #24]
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	f042 0210 	orr.w	r2, r2, #16
 800d95a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	681a      	ldr	r2, [r3, #0]
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	f022 0201 	bic.w	r2, r2, #1
 800d96a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	6919      	ldr	r1, [r3, #16]
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681a      	ldr	r2, [r3, #0]
 800d976:	4b3c      	ldr	r3, [pc, #240]	; (800da68 <SPI_CloseTransfer+0x13c>)
 800d978:	400b      	ands	r3, r1
 800d97a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	689a      	ldr	r2, [r3, #8]
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d98a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d992:	b2db      	uxtb	r3, r3
 800d994:	2b04      	cmp	r3, #4
 800d996:	d014      	beq.n	800d9c2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	f003 0320 	and.w	r3, r3, #32
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d00f      	beq.n	800d9c2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d9a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	699a      	ldr	r2, [r3, #24]
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	f042 0220 	orr.w	r2, r2, #32
 800d9c0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d9c8:	b2db      	uxtb	r3, r3
 800d9ca:	2b03      	cmp	r3, #3
 800d9cc:	d014      	beq.n	800d9f8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d00f      	beq.n	800d9f8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d9de:	f043 0204 	orr.w	r2, r3, #4
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	699a      	ldr	r2, [r3, #24]
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d9f6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d00f      	beq.n	800da22 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da08:	f043 0201 	orr.w	r2, r3, #1
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	699a      	ldr	r2, [r3, #24]
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da20:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d00f      	beq.n	800da4c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da32:	f043 0208 	orr.w	r2, r3, #8
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	699a      	ldr	r2, [r3, #24]
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800da4a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2200      	movs	r2, #0
 800da50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2200      	movs	r2, #0
 800da58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800da5c:	bf00      	nop
 800da5e:	3714      	adds	r7, #20
 800da60:	46bd      	mov	sp, r7
 800da62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da66:	4770      	bx	lr
 800da68:	fffffc90 	.word	0xfffffc90

0800da6c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b084      	sub	sp, #16
 800da70:	af00      	add	r7, sp, #0
 800da72:	60f8      	str	r0, [r7, #12]
 800da74:	60b9      	str	r1, [r7, #8]
 800da76:	603b      	str	r3, [r7, #0]
 800da78:	4613      	mov	r3, r2
 800da7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800da7c:	e010      	b.n	800daa0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da7e:	f7f5 ffaf 	bl	80039e0 <HAL_GetTick>
 800da82:	4602      	mov	r2, r0
 800da84:	69bb      	ldr	r3, [r7, #24]
 800da86:	1ad3      	subs	r3, r2, r3
 800da88:	683a      	ldr	r2, [r7, #0]
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d803      	bhi.n	800da96 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da94:	d102      	bne.n	800da9c <SPI_WaitOnFlagUntilTimeout+0x30>
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d101      	bne.n	800daa0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800da9c:	2303      	movs	r3, #3
 800da9e:	e00f      	b.n	800dac0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	695a      	ldr	r2, [r3, #20]
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	4013      	ands	r3, r2
 800daaa:	68ba      	ldr	r2, [r7, #8]
 800daac:	429a      	cmp	r2, r3
 800daae:	bf0c      	ite	eq
 800dab0:	2301      	moveq	r3, #1
 800dab2:	2300      	movne	r3, #0
 800dab4:	b2db      	uxtb	r3, r3
 800dab6:	461a      	mov	r2, r3
 800dab8:	79fb      	ldrb	r3, [r7, #7]
 800daba:	429a      	cmp	r2, r3
 800dabc:	d0df      	beq.n	800da7e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800dabe:	2300      	movs	r3, #0
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	3710      	adds	r7, #16
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}

0800dac8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800dac8:	b480      	push	{r7}
 800daca:	b085      	sub	sp, #20
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dad4:	095b      	lsrs	r3, r3, #5
 800dad6:	3301      	adds	r3, #1
 800dad8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	68db      	ldr	r3, [r3, #12]
 800dade:	3301      	adds	r3, #1
 800dae0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	3307      	adds	r3, #7
 800dae6:	08db      	lsrs	r3, r3, #3
 800dae8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	68fa      	ldr	r2, [r7, #12]
 800daee:	fb02 f303 	mul.w	r3, r2, r3
}
 800daf2:	4618      	mov	r0, r3
 800daf4:	3714      	adds	r7, #20
 800daf6:	46bd      	mov	sp, r7
 800daf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafc:	4770      	bx	lr

0800dafe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dafe:	b580      	push	{r7, lr}
 800db00:	b082      	sub	sp, #8
 800db02:	af00      	add	r7, sp, #0
 800db04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d101      	bne.n	800db10 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800db0c:	2301      	movs	r3, #1
 800db0e:	e049      	b.n	800dba4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db16:	b2db      	uxtb	r3, r3
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d106      	bne.n	800db2a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2200      	movs	r2, #0
 800db20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f7f5 fb83 	bl	8003230 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2202      	movs	r2, #2
 800db2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681a      	ldr	r2, [r3, #0]
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	3304      	adds	r3, #4
 800db3a:	4619      	mov	r1, r3
 800db3c:	4610      	mov	r0, r2
 800db3e:	f000 fd11 	bl	800e564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	2201      	movs	r2, #1
 800db46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2201      	movs	r2, #1
 800db4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2201      	movs	r2, #1
 800db56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2201      	movs	r2, #1
 800db5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2201      	movs	r2, #1
 800db66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2201      	movs	r2, #1
 800db6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2201      	movs	r2, #1
 800db76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2201      	movs	r2, #1
 800db7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2201      	movs	r2, #1
 800db86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2201      	movs	r2, #1
 800db8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	2201      	movs	r2, #1
 800db96:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2201      	movs	r2, #1
 800db9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dba2:	2300      	movs	r3, #0
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	3708      	adds	r7, #8
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b082      	sub	sp, #8
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d101      	bne.n	800dbbe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dbba:	2301      	movs	r3, #1
 800dbbc:	e049      	b.n	800dc52 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dbc4:	b2db      	uxtb	r3, r3
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d106      	bne.n	800dbd8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f000 f841 	bl	800dc5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2202      	movs	r2, #2
 800dbdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681a      	ldr	r2, [r3, #0]
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	3304      	adds	r3, #4
 800dbe8:	4619      	mov	r1, r3
 800dbea:	4610      	mov	r0, r2
 800dbec:	f000 fcba 	bl	800e564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2201      	movs	r2, #1
 800dbf4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2201      	movs	r2, #1
 800dbfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2201      	movs	r2, #1
 800dc04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2201      	movs	r2, #1
 800dc0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2201      	movs	r2, #1
 800dc14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2201      	movs	r2, #1
 800dc1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2201      	movs	r2, #1
 800dc24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2201      	movs	r2, #1
 800dc2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2201      	movs	r2, #1
 800dc34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2201      	movs	r2, #1
 800dc3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2201      	movs	r2, #1
 800dc44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2201      	movs	r2, #1
 800dc4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dc50:	2300      	movs	r3, #0
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3708      	adds	r7, #8
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}

0800dc5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800dc5a:	b480      	push	{r7}
 800dc5c:	b083      	sub	sp, #12
 800dc5e:	af00      	add	r7, sp, #0
 800dc60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800dc62:	bf00      	nop
 800dc64:	370c      	adds	r7, #12
 800dc66:	46bd      	mov	sp, r7
 800dc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6c:	4770      	bx	lr
	...

0800dc70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b084      	sub	sp, #16
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
 800dc78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d109      	bne.n	800dc94 <HAL_TIM_PWM_Start+0x24>
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dc86:	b2db      	uxtb	r3, r3
 800dc88:	2b01      	cmp	r3, #1
 800dc8a:	bf14      	ite	ne
 800dc8c:	2301      	movne	r3, #1
 800dc8e:	2300      	moveq	r3, #0
 800dc90:	b2db      	uxtb	r3, r3
 800dc92:	e03c      	b.n	800dd0e <HAL_TIM_PWM_Start+0x9e>
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	2b04      	cmp	r3, #4
 800dc98:	d109      	bne.n	800dcae <HAL_TIM_PWM_Start+0x3e>
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800dca0:	b2db      	uxtb	r3, r3
 800dca2:	2b01      	cmp	r3, #1
 800dca4:	bf14      	ite	ne
 800dca6:	2301      	movne	r3, #1
 800dca8:	2300      	moveq	r3, #0
 800dcaa:	b2db      	uxtb	r3, r3
 800dcac:	e02f      	b.n	800dd0e <HAL_TIM_PWM_Start+0x9e>
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	2b08      	cmp	r3, #8
 800dcb2:	d109      	bne.n	800dcc8 <HAL_TIM_PWM_Start+0x58>
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dcba:	b2db      	uxtb	r3, r3
 800dcbc:	2b01      	cmp	r3, #1
 800dcbe:	bf14      	ite	ne
 800dcc0:	2301      	movne	r3, #1
 800dcc2:	2300      	moveq	r3, #0
 800dcc4:	b2db      	uxtb	r3, r3
 800dcc6:	e022      	b.n	800dd0e <HAL_TIM_PWM_Start+0x9e>
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	2b0c      	cmp	r3, #12
 800dccc:	d109      	bne.n	800dce2 <HAL_TIM_PWM_Start+0x72>
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dcd4:	b2db      	uxtb	r3, r3
 800dcd6:	2b01      	cmp	r3, #1
 800dcd8:	bf14      	ite	ne
 800dcda:	2301      	movne	r3, #1
 800dcdc:	2300      	moveq	r3, #0
 800dcde:	b2db      	uxtb	r3, r3
 800dce0:	e015      	b.n	800dd0e <HAL_TIM_PWM_Start+0x9e>
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	2b10      	cmp	r3, #16
 800dce6:	d109      	bne.n	800dcfc <HAL_TIM_PWM_Start+0x8c>
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dcee:	b2db      	uxtb	r3, r3
 800dcf0:	2b01      	cmp	r3, #1
 800dcf2:	bf14      	ite	ne
 800dcf4:	2301      	movne	r3, #1
 800dcf6:	2300      	moveq	r3, #0
 800dcf8:	b2db      	uxtb	r3, r3
 800dcfa:	e008      	b.n	800dd0e <HAL_TIM_PWM_Start+0x9e>
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dd02:	b2db      	uxtb	r3, r3
 800dd04:	2b01      	cmp	r3, #1
 800dd06:	bf14      	ite	ne
 800dd08:	2301      	movne	r3, #1
 800dd0a:	2300      	moveq	r3, #0
 800dd0c:	b2db      	uxtb	r3, r3
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d001      	beq.n	800dd16 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800dd12:	2301      	movs	r3, #1
 800dd14:	e0ab      	b.n	800de6e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d104      	bne.n	800dd26 <HAL_TIM_PWM_Start+0xb6>
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2202      	movs	r2, #2
 800dd20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dd24:	e023      	b.n	800dd6e <HAL_TIM_PWM_Start+0xfe>
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	2b04      	cmp	r3, #4
 800dd2a:	d104      	bne.n	800dd36 <HAL_TIM_PWM_Start+0xc6>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2202      	movs	r2, #2
 800dd30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dd34:	e01b      	b.n	800dd6e <HAL_TIM_PWM_Start+0xfe>
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	2b08      	cmp	r3, #8
 800dd3a:	d104      	bne.n	800dd46 <HAL_TIM_PWM_Start+0xd6>
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2202      	movs	r2, #2
 800dd40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dd44:	e013      	b.n	800dd6e <HAL_TIM_PWM_Start+0xfe>
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	2b0c      	cmp	r3, #12
 800dd4a:	d104      	bne.n	800dd56 <HAL_TIM_PWM_Start+0xe6>
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2202      	movs	r2, #2
 800dd50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dd54:	e00b      	b.n	800dd6e <HAL_TIM_PWM_Start+0xfe>
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	2b10      	cmp	r3, #16
 800dd5a:	d104      	bne.n	800dd66 <HAL_TIM_PWM_Start+0xf6>
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2202      	movs	r2, #2
 800dd60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dd64:	e003      	b.n	800dd6e <HAL_TIM_PWM_Start+0xfe>
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2202      	movs	r2, #2
 800dd6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	2201      	movs	r2, #1
 800dd74:	6839      	ldr	r1, [r7, #0]
 800dd76:	4618      	mov	r0, r3
 800dd78:	f001 f80e 	bl	800ed98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	4a3d      	ldr	r2, [pc, #244]	; (800de78 <HAL_TIM_PWM_Start+0x208>)
 800dd82:	4293      	cmp	r3, r2
 800dd84:	d013      	beq.n	800ddae <HAL_TIM_PWM_Start+0x13e>
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	4a3c      	ldr	r2, [pc, #240]	; (800de7c <HAL_TIM_PWM_Start+0x20c>)
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d00e      	beq.n	800ddae <HAL_TIM_PWM_Start+0x13e>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	4a3a      	ldr	r2, [pc, #232]	; (800de80 <HAL_TIM_PWM_Start+0x210>)
 800dd96:	4293      	cmp	r3, r2
 800dd98:	d009      	beq.n	800ddae <HAL_TIM_PWM_Start+0x13e>
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	4a39      	ldr	r2, [pc, #228]	; (800de84 <HAL_TIM_PWM_Start+0x214>)
 800dda0:	4293      	cmp	r3, r2
 800dda2:	d004      	beq.n	800ddae <HAL_TIM_PWM_Start+0x13e>
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	4a37      	ldr	r2, [pc, #220]	; (800de88 <HAL_TIM_PWM_Start+0x218>)
 800ddaa:	4293      	cmp	r3, r2
 800ddac:	d101      	bne.n	800ddb2 <HAL_TIM_PWM_Start+0x142>
 800ddae:	2301      	movs	r3, #1
 800ddb0:	e000      	b.n	800ddb4 <HAL_TIM_PWM_Start+0x144>
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d007      	beq.n	800ddc8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ddc6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	4a2a      	ldr	r2, [pc, #168]	; (800de78 <HAL_TIM_PWM_Start+0x208>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d02c      	beq.n	800de2c <HAL_TIM_PWM_Start+0x1bc>
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ddda:	d027      	beq.n	800de2c <HAL_TIM_PWM_Start+0x1bc>
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	4a2a      	ldr	r2, [pc, #168]	; (800de8c <HAL_TIM_PWM_Start+0x21c>)
 800dde2:	4293      	cmp	r3, r2
 800dde4:	d022      	beq.n	800de2c <HAL_TIM_PWM_Start+0x1bc>
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	4a29      	ldr	r2, [pc, #164]	; (800de90 <HAL_TIM_PWM_Start+0x220>)
 800ddec:	4293      	cmp	r3, r2
 800ddee:	d01d      	beq.n	800de2c <HAL_TIM_PWM_Start+0x1bc>
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	4a27      	ldr	r2, [pc, #156]	; (800de94 <HAL_TIM_PWM_Start+0x224>)
 800ddf6:	4293      	cmp	r3, r2
 800ddf8:	d018      	beq.n	800de2c <HAL_TIM_PWM_Start+0x1bc>
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	4a1f      	ldr	r2, [pc, #124]	; (800de7c <HAL_TIM_PWM_Start+0x20c>)
 800de00:	4293      	cmp	r3, r2
 800de02:	d013      	beq.n	800de2c <HAL_TIM_PWM_Start+0x1bc>
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	4a23      	ldr	r2, [pc, #140]	; (800de98 <HAL_TIM_PWM_Start+0x228>)
 800de0a:	4293      	cmp	r3, r2
 800de0c:	d00e      	beq.n	800de2c <HAL_TIM_PWM_Start+0x1bc>
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	4a1b      	ldr	r2, [pc, #108]	; (800de80 <HAL_TIM_PWM_Start+0x210>)
 800de14:	4293      	cmp	r3, r2
 800de16:	d009      	beq.n	800de2c <HAL_TIM_PWM_Start+0x1bc>
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	4a1f      	ldr	r2, [pc, #124]	; (800de9c <HAL_TIM_PWM_Start+0x22c>)
 800de1e:	4293      	cmp	r3, r2
 800de20:	d004      	beq.n	800de2c <HAL_TIM_PWM_Start+0x1bc>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	4a1e      	ldr	r2, [pc, #120]	; (800dea0 <HAL_TIM_PWM_Start+0x230>)
 800de28:	4293      	cmp	r3, r2
 800de2a:	d115      	bne.n	800de58 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	689a      	ldr	r2, [r3, #8]
 800de32:	4b1c      	ldr	r3, [pc, #112]	; (800dea4 <HAL_TIM_PWM_Start+0x234>)
 800de34:	4013      	ands	r3, r2
 800de36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	2b06      	cmp	r3, #6
 800de3c:	d015      	beq.n	800de6a <HAL_TIM_PWM_Start+0x1fa>
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de44:	d011      	beq.n	800de6a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	681a      	ldr	r2, [r3, #0]
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	f042 0201 	orr.w	r2, r2, #1
 800de54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800de56:	e008      	b.n	800de6a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	681a      	ldr	r2, [r3, #0]
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	f042 0201 	orr.w	r2, r2, #1
 800de66:	601a      	str	r2, [r3, #0]
 800de68:	e000      	b.n	800de6c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800de6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800de6c:	2300      	movs	r3, #0
}
 800de6e:	4618      	mov	r0, r3
 800de70:	3710      	adds	r7, #16
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}
 800de76:	bf00      	nop
 800de78:	40010000 	.word	0x40010000
 800de7c:	40010400 	.word	0x40010400
 800de80:	40014000 	.word	0x40014000
 800de84:	40014400 	.word	0x40014400
 800de88:	40014800 	.word	0x40014800
 800de8c:	40000400 	.word	0x40000400
 800de90:	40000800 	.word	0x40000800
 800de94:	40000c00 	.word	0x40000c00
 800de98:	40001800 	.word	0x40001800
 800de9c:	4000e000 	.word	0x4000e000
 800dea0:	4000e400 	.word	0x4000e400
 800dea4:	00010007 	.word	0x00010007

0800dea8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b082      	sub	sp, #8
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	691b      	ldr	r3, [r3, #16]
 800deb6:	f003 0302 	and.w	r3, r3, #2
 800deba:	2b02      	cmp	r3, #2
 800debc:	d122      	bne.n	800df04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	68db      	ldr	r3, [r3, #12]
 800dec4:	f003 0302 	and.w	r3, r3, #2
 800dec8:	2b02      	cmp	r3, #2
 800deca:	d11b      	bne.n	800df04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	f06f 0202 	mvn.w	r2, #2
 800ded4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2201      	movs	r2, #1
 800deda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	699b      	ldr	r3, [r3, #24]
 800dee2:	f003 0303 	and.w	r3, r3, #3
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d003      	beq.n	800def2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f000 fb1c 	bl	800e528 <HAL_TIM_IC_CaptureCallback>
 800def0:	e005      	b.n	800defe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	f000 fb0e 	bl	800e514 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f000 fb1f 	bl	800e53c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2200      	movs	r2, #0
 800df02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	691b      	ldr	r3, [r3, #16]
 800df0a:	f003 0304 	and.w	r3, r3, #4
 800df0e:	2b04      	cmp	r3, #4
 800df10:	d122      	bne.n	800df58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	68db      	ldr	r3, [r3, #12]
 800df18:	f003 0304 	and.w	r3, r3, #4
 800df1c:	2b04      	cmp	r3, #4
 800df1e:	d11b      	bne.n	800df58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	f06f 0204 	mvn.w	r2, #4
 800df28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2202      	movs	r2, #2
 800df2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	699b      	ldr	r3, [r3, #24]
 800df36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d003      	beq.n	800df46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f000 faf2 	bl	800e528 <HAL_TIM_IC_CaptureCallback>
 800df44:	e005      	b.n	800df52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f000 fae4 	bl	800e514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	f000 faf5 	bl	800e53c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	2200      	movs	r2, #0
 800df56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	691b      	ldr	r3, [r3, #16]
 800df5e:	f003 0308 	and.w	r3, r3, #8
 800df62:	2b08      	cmp	r3, #8
 800df64:	d122      	bne.n	800dfac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	68db      	ldr	r3, [r3, #12]
 800df6c:	f003 0308 	and.w	r3, r3, #8
 800df70:	2b08      	cmp	r3, #8
 800df72:	d11b      	bne.n	800dfac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	f06f 0208 	mvn.w	r2, #8
 800df7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2204      	movs	r2, #4
 800df82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	69db      	ldr	r3, [r3, #28]
 800df8a:	f003 0303 	and.w	r3, r3, #3
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d003      	beq.n	800df9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f000 fac8 	bl	800e528 <HAL_TIM_IC_CaptureCallback>
 800df98:	e005      	b.n	800dfa6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f000 faba 	bl	800e514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dfa0:	6878      	ldr	r0, [r7, #4]
 800dfa2:	f000 facb 	bl	800e53c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	691b      	ldr	r3, [r3, #16]
 800dfb2:	f003 0310 	and.w	r3, r3, #16
 800dfb6:	2b10      	cmp	r3, #16
 800dfb8:	d122      	bne.n	800e000 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	68db      	ldr	r3, [r3, #12]
 800dfc0:	f003 0310 	and.w	r3, r3, #16
 800dfc4:	2b10      	cmp	r3, #16
 800dfc6:	d11b      	bne.n	800e000 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	f06f 0210 	mvn.w	r2, #16
 800dfd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	2208      	movs	r2, #8
 800dfd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	69db      	ldr	r3, [r3, #28]
 800dfde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d003      	beq.n	800dfee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f000 fa9e 	bl	800e528 <HAL_TIM_IC_CaptureCallback>
 800dfec:	e005      	b.n	800dffa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dfee:	6878      	ldr	r0, [r7, #4]
 800dff0:	f000 fa90 	bl	800e514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	f000 faa1 	bl	800e53c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2200      	movs	r2, #0
 800dffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	691b      	ldr	r3, [r3, #16]
 800e006:	f003 0301 	and.w	r3, r3, #1
 800e00a:	2b01      	cmp	r3, #1
 800e00c:	d10e      	bne.n	800e02c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	68db      	ldr	r3, [r3, #12]
 800e014:	f003 0301 	and.w	r3, r3, #1
 800e018:	2b01      	cmp	r3, #1
 800e01a:	d107      	bne.n	800e02c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	f06f 0201 	mvn.w	r2, #1
 800e024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f000 fa6a 	bl	800e500 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	691b      	ldr	r3, [r3, #16]
 800e032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e036:	2b80      	cmp	r3, #128	; 0x80
 800e038:	d10e      	bne.n	800e058 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	68db      	ldr	r3, [r3, #12]
 800e040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e044:	2b80      	cmp	r3, #128	; 0x80
 800e046:	d107      	bne.n	800e058 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f001 f9a2 	bl	800f39c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	691b      	ldr	r3, [r3, #16]
 800e05e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e066:	d10e      	bne.n	800e086 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	68db      	ldr	r3, [r3, #12]
 800e06e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e072:	2b80      	cmp	r3, #128	; 0x80
 800e074:	d107      	bne.n	800e086 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e07e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f001 f995 	bl	800f3b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	691b      	ldr	r3, [r3, #16]
 800e08c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e090:	2b40      	cmp	r3, #64	; 0x40
 800e092:	d10e      	bne.n	800e0b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	68db      	ldr	r3, [r3, #12]
 800e09a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e09e:	2b40      	cmp	r3, #64	; 0x40
 800e0a0:	d107      	bne.n	800e0b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e0aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e0ac:	6878      	ldr	r0, [r7, #4]
 800e0ae:	f000 fa4f 	bl	800e550 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	691b      	ldr	r3, [r3, #16]
 800e0b8:	f003 0320 	and.w	r3, r3, #32
 800e0bc:	2b20      	cmp	r3, #32
 800e0be:	d10e      	bne.n	800e0de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	68db      	ldr	r3, [r3, #12]
 800e0c6:	f003 0320 	and.w	r3, r3, #32
 800e0ca:	2b20      	cmp	r3, #32
 800e0cc:	d107      	bne.n	800e0de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	f06f 0220 	mvn.w	r2, #32
 800e0d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f001 f955 	bl	800f388 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e0de:	bf00      	nop
 800e0e0:	3708      	adds	r7, #8
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}
	...

0800e0e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b086      	sub	sp, #24
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	60f8      	str	r0, [r7, #12]
 800e0f0:	60b9      	str	r1, [r7, #8]
 800e0f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e0fe:	2b01      	cmp	r3, #1
 800e100:	d101      	bne.n	800e106 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e102:	2302      	movs	r3, #2
 800e104:	e0ff      	b.n	800e306 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	2201      	movs	r2, #1
 800e10a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2b14      	cmp	r3, #20
 800e112:	f200 80f0 	bhi.w	800e2f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e116:	a201      	add	r2, pc, #4	; (adr r2, 800e11c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e11c:	0800e171 	.word	0x0800e171
 800e120:	0800e2f7 	.word	0x0800e2f7
 800e124:	0800e2f7 	.word	0x0800e2f7
 800e128:	0800e2f7 	.word	0x0800e2f7
 800e12c:	0800e1b1 	.word	0x0800e1b1
 800e130:	0800e2f7 	.word	0x0800e2f7
 800e134:	0800e2f7 	.word	0x0800e2f7
 800e138:	0800e2f7 	.word	0x0800e2f7
 800e13c:	0800e1f3 	.word	0x0800e1f3
 800e140:	0800e2f7 	.word	0x0800e2f7
 800e144:	0800e2f7 	.word	0x0800e2f7
 800e148:	0800e2f7 	.word	0x0800e2f7
 800e14c:	0800e233 	.word	0x0800e233
 800e150:	0800e2f7 	.word	0x0800e2f7
 800e154:	0800e2f7 	.word	0x0800e2f7
 800e158:	0800e2f7 	.word	0x0800e2f7
 800e15c:	0800e275 	.word	0x0800e275
 800e160:	0800e2f7 	.word	0x0800e2f7
 800e164:	0800e2f7 	.word	0x0800e2f7
 800e168:	0800e2f7 	.word	0x0800e2f7
 800e16c:	0800e2b5 	.word	0x0800e2b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	68b9      	ldr	r1, [r7, #8]
 800e176:	4618      	mov	r0, r3
 800e178:	f000 fa9a 	bl	800e6b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	699a      	ldr	r2, [r3, #24]
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	f042 0208 	orr.w	r2, r2, #8
 800e18a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	699a      	ldr	r2, [r3, #24]
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	f022 0204 	bic.w	r2, r2, #4
 800e19a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	6999      	ldr	r1, [r3, #24]
 800e1a2:	68bb      	ldr	r3, [r7, #8]
 800e1a4:	691a      	ldr	r2, [r3, #16]
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	430a      	orrs	r2, r1
 800e1ac:	619a      	str	r2, [r3, #24]
      break;
 800e1ae:	e0a5      	b.n	800e2fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	68b9      	ldr	r1, [r7, #8]
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f000 fb0a 	bl	800e7d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	699a      	ldr	r2, [r3, #24]
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e1ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	699a      	ldr	r2, [r3, #24]
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e1da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	6999      	ldr	r1, [r3, #24]
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	691b      	ldr	r3, [r3, #16]
 800e1e6:	021a      	lsls	r2, r3, #8
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	430a      	orrs	r2, r1
 800e1ee:	619a      	str	r2, [r3, #24]
      break;
 800e1f0:	e084      	b.n	800e2fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	68b9      	ldr	r1, [r7, #8]
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f000 fb73 	bl	800e8e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	69da      	ldr	r2, [r3, #28]
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	f042 0208 	orr.w	r2, r2, #8
 800e20c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	69da      	ldr	r2, [r3, #28]
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f022 0204 	bic.w	r2, r2, #4
 800e21c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	69d9      	ldr	r1, [r3, #28]
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	691a      	ldr	r2, [r3, #16]
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	430a      	orrs	r2, r1
 800e22e:	61da      	str	r2, [r3, #28]
      break;
 800e230:	e064      	b.n	800e2fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	68b9      	ldr	r1, [r7, #8]
 800e238:	4618      	mov	r0, r3
 800e23a:	f000 fbdb 	bl	800e9f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	69da      	ldr	r2, [r3, #28]
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e24c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	69da      	ldr	r2, [r3, #28]
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e25c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	69d9      	ldr	r1, [r3, #28]
 800e264:	68bb      	ldr	r3, [r7, #8]
 800e266:	691b      	ldr	r3, [r3, #16]
 800e268:	021a      	lsls	r2, r3, #8
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	430a      	orrs	r2, r1
 800e270:	61da      	str	r2, [r3, #28]
      break;
 800e272:	e043      	b.n	800e2fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	68b9      	ldr	r1, [r7, #8]
 800e27a:	4618      	mov	r0, r3
 800e27c:	f000 fc24 	bl	800eac8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	f042 0208 	orr.w	r2, r2, #8
 800e28e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	f022 0204 	bic.w	r2, r2, #4
 800e29e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e2a6:	68bb      	ldr	r3, [r7, #8]
 800e2a8:	691a      	ldr	r2, [r3, #16]
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	430a      	orrs	r2, r1
 800e2b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e2b2:	e023      	b.n	800e2fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	68b9      	ldr	r1, [r7, #8]
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f000 fc68 	bl	800eb90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e2ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e2de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	691b      	ldr	r3, [r3, #16]
 800e2ea:	021a      	lsls	r2, r3, #8
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	430a      	orrs	r2, r1
 800e2f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e2f4:	e002      	b.n	800e2fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	75fb      	strb	r3, [r7, #23]
      break;
 800e2fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	2200      	movs	r2, #0
 800e300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e304:	7dfb      	ldrb	r3, [r7, #23]
}
 800e306:	4618      	mov	r0, r3
 800e308:	3718      	adds	r7, #24
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}
 800e30e:	bf00      	nop

0800e310 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b084      	sub	sp, #16
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
 800e318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e31a:	2300      	movs	r3, #0
 800e31c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e324:	2b01      	cmp	r3, #1
 800e326:	d101      	bne.n	800e32c <HAL_TIM_ConfigClockSource+0x1c>
 800e328:	2302      	movs	r3, #2
 800e32a:	e0dc      	b.n	800e4e6 <HAL_TIM_ConfigClockSource+0x1d6>
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2201      	movs	r2, #1
 800e330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2202      	movs	r2, #2
 800e338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	689b      	ldr	r3, [r3, #8]
 800e342:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e344:	68ba      	ldr	r2, [r7, #8]
 800e346:	4b6a      	ldr	r3, [pc, #424]	; (800e4f0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800e348:	4013      	ands	r3, r2
 800e34a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e352:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	68ba      	ldr	r2, [r7, #8]
 800e35a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	4a64      	ldr	r2, [pc, #400]	; (800e4f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e362:	4293      	cmp	r3, r2
 800e364:	f000 80a9 	beq.w	800e4ba <HAL_TIM_ConfigClockSource+0x1aa>
 800e368:	4a62      	ldr	r2, [pc, #392]	; (800e4f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e36a:	4293      	cmp	r3, r2
 800e36c:	f200 80ae 	bhi.w	800e4cc <HAL_TIM_ConfigClockSource+0x1bc>
 800e370:	4a61      	ldr	r2, [pc, #388]	; (800e4f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e372:	4293      	cmp	r3, r2
 800e374:	f000 80a1 	beq.w	800e4ba <HAL_TIM_ConfigClockSource+0x1aa>
 800e378:	4a5f      	ldr	r2, [pc, #380]	; (800e4f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e37a:	4293      	cmp	r3, r2
 800e37c:	f200 80a6 	bhi.w	800e4cc <HAL_TIM_ConfigClockSource+0x1bc>
 800e380:	4a5e      	ldr	r2, [pc, #376]	; (800e4fc <HAL_TIM_ConfigClockSource+0x1ec>)
 800e382:	4293      	cmp	r3, r2
 800e384:	f000 8099 	beq.w	800e4ba <HAL_TIM_ConfigClockSource+0x1aa>
 800e388:	4a5c      	ldr	r2, [pc, #368]	; (800e4fc <HAL_TIM_ConfigClockSource+0x1ec>)
 800e38a:	4293      	cmp	r3, r2
 800e38c:	f200 809e 	bhi.w	800e4cc <HAL_TIM_ConfigClockSource+0x1bc>
 800e390:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e394:	f000 8091 	beq.w	800e4ba <HAL_TIM_ConfigClockSource+0x1aa>
 800e398:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e39c:	f200 8096 	bhi.w	800e4cc <HAL_TIM_ConfigClockSource+0x1bc>
 800e3a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e3a4:	f000 8089 	beq.w	800e4ba <HAL_TIM_ConfigClockSource+0x1aa>
 800e3a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e3ac:	f200 808e 	bhi.w	800e4cc <HAL_TIM_ConfigClockSource+0x1bc>
 800e3b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e3b4:	d03e      	beq.n	800e434 <HAL_TIM_ConfigClockSource+0x124>
 800e3b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e3ba:	f200 8087 	bhi.w	800e4cc <HAL_TIM_ConfigClockSource+0x1bc>
 800e3be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e3c2:	f000 8086 	beq.w	800e4d2 <HAL_TIM_ConfigClockSource+0x1c2>
 800e3c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e3ca:	d87f      	bhi.n	800e4cc <HAL_TIM_ConfigClockSource+0x1bc>
 800e3cc:	2b70      	cmp	r3, #112	; 0x70
 800e3ce:	d01a      	beq.n	800e406 <HAL_TIM_ConfigClockSource+0xf6>
 800e3d0:	2b70      	cmp	r3, #112	; 0x70
 800e3d2:	d87b      	bhi.n	800e4cc <HAL_TIM_ConfigClockSource+0x1bc>
 800e3d4:	2b60      	cmp	r3, #96	; 0x60
 800e3d6:	d050      	beq.n	800e47a <HAL_TIM_ConfigClockSource+0x16a>
 800e3d8:	2b60      	cmp	r3, #96	; 0x60
 800e3da:	d877      	bhi.n	800e4cc <HAL_TIM_ConfigClockSource+0x1bc>
 800e3dc:	2b50      	cmp	r3, #80	; 0x50
 800e3de:	d03c      	beq.n	800e45a <HAL_TIM_ConfigClockSource+0x14a>
 800e3e0:	2b50      	cmp	r3, #80	; 0x50
 800e3e2:	d873      	bhi.n	800e4cc <HAL_TIM_ConfigClockSource+0x1bc>
 800e3e4:	2b40      	cmp	r3, #64	; 0x40
 800e3e6:	d058      	beq.n	800e49a <HAL_TIM_ConfigClockSource+0x18a>
 800e3e8:	2b40      	cmp	r3, #64	; 0x40
 800e3ea:	d86f      	bhi.n	800e4cc <HAL_TIM_ConfigClockSource+0x1bc>
 800e3ec:	2b30      	cmp	r3, #48	; 0x30
 800e3ee:	d064      	beq.n	800e4ba <HAL_TIM_ConfigClockSource+0x1aa>
 800e3f0:	2b30      	cmp	r3, #48	; 0x30
 800e3f2:	d86b      	bhi.n	800e4cc <HAL_TIM_ConfigClockSource+0x1bc>
 800e3f4:	2b20      	cmp	r3, #32
 800e3f6:	d060      	beq.n	800e4ba <HAL_TIM_ConfigClockSource+0x1aa>
 800e3f8:	2b20      	cmp	r3, #32
 800e3fa:	d867      	bhi.n	800e4cc <HAL_TIM_ConfigClockSource+0x1bc>
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d05c      	beq.n	800e4ba <HAL_TIM_ConfigClockSource+0x1aa>
 800e400:	2b10      	cmp	r3, #16
 800e402:	d05a      	beq.n	800e4ba <HAL_TIM_ConfigClockSource+0x1aa>
 800e404:	e062      	b.n	800e4cc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e416:	f000 fc9f 	bl	800ed58 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	689b      	ldr	r3, [r3, #8]
 800e420:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e428:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	68ba      	ldr	r2, [r7, #8]
 800e430:	609a      	str	r2, [r3, #8]
      break;
 800e432:	e04f      	b.n	800e4d4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e444:	f000 fc88 	bl	800ed58 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	689a      	ldr	r2, [r3, #8]
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e456:	609a      	str	r2, [r3, #8]
      break;
 800e458:	e03c      	b.n	800e4d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e466:	461a      	mov	r2, r3
 800e468:	f000 fbf8 	bl	800ec5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	2150      	movs	r1, #80	; 0x50
 800e472:	4618      	mov	r0, r3
 800e474:	f000 fc52 	bl	800ed1c <TIM_ITRx_SetConfig>
      break;
 800e478:	e02c      	b.n	800e4d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e482:	683b      	ldr	r3, [r7, #0]
 800e484:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e486:	461a      	mov	r2, r3
 800e488:	f000 fc17 	bl	800ecba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	2160      	movs	r1, #96	; 0x60
 800e492:	4618      	mov	r0, r3
 800e494:	f000 fc42 	bl	800ed1c <TIM_ITRx_SetConfig>
      break;
 800e498:	e01c      	b.n	800e4d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e4a6:	461a      	mov	r2, r3
 800e4a8:	f000 fbd8 	bl	800ec5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	2140      	movs	r1, #64	; 0x40
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f000 fc32 	bl	800ed1c <TIM_ITRx_SetConfig>
      break;
 800e4b8:	e00c      	b.n	800e4d4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681a      	ldr	r2, [r3, #0]
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	4619      	mov	r1, r3
 800e4c4:	4610      	mov	r0, r2
 800e4c6:	f000 fc29 	bl	800ed1c <TIM_ITRx_SetConfig>
      break;
 800e4ca:	e003      	b.n	800e4d4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	73fb      	strb	r3, [r7, #15]
      break;
 800e4d0:	e000      	b.n	800e4d4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800e4d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2201      	movs	r2, #1
 800e4d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2200      	movs	r2, #0
 800e4e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e4e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	3710      	adds	r7, #16
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}
 800e4ee:	bf00      	nop
 800e4f0:	ffceff88 	.word	0xffceff88
 800e4f4:	00100040 	.word	0x00100040
 800e4f8:	00100030 	.word	0x00100030
 800e4fc:	00100020 	.word	0x00100020

0800e500 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e500:	b480      	push	{r7}
 800e502:	b083      	sub	sp, #12
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800e508:	bf00      	nop
 800e50a:	370c      	adds	r7, #12
 800e50c:	46bd      	mov	sp, r7
 800e50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e512:	4770      	bx	lr

0800e514 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e514:	b480      	push	{r7}
 800e516:	b083      	sub	sp, #12
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e51c:	bf00      	nop
 800e51e:	370c      	adds	r7, #12
 800e520:	46bd      	mov	sp, r7
 800e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e526:	4770      	bx	lr

0800e528 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e528:	b480      	push	{r7}
 800e52a:	b083      	sub	sp, #12
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e530:	bf00      	nop
 800e532:	370c      	adds	r7, #12
 800e534:	46bd      	mov	sp, r7
 800e536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53a:	4770      	bx	lr

0800e53c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e53c:	b480      	push	{r7}
 800e53e:	b083      	sub	sp, #12
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e544:	bf00      	nop
 800e546:	370c      	adds	r7, #12
 800e548:	46bd      	mov	sp, r7
 800e54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54e:	4770      	bx	lr

0800e550 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e550:	b480      	push	{r7}
 800e552:	b083      	sub	sp, #12
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e558:	bf00      	nop
 800e55a:	370c      	adds	r7, #12
 800e55c:	46bd      	mov	sp, r7
 800e55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e562:	4770      	bx	lr

0800e564 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e564:	b480      	push	{r7}
 800e566:	b085      	sub	sp, #20
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
 800e56c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	4a44      	ldr	r2, [pc, #272]	; (800e688 <TIM_Base_SetConfig+0x124>)
 800e578:	4293      	cmp	r3, r2
 800e57a:	d013      	beq.n	800e5a4 <TIM_Base_SetConfig+0x40>
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e582:	d00f      	beq.n	800e5a4 <TIM_Base_SetConfig+0x40>
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	4a41      	ldr	r2, [pc, #260]	; (800e68c <TIM_Base_SetConfig+0x128>)
 800e588:	4293      	cmp	r3, r2
 800e58a:	d00b      	beq.n	800e5a4 <TIM_Base_SetConfig+0x40>
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	4a40      	ldr	r2, [pc, #256]	; (800e690 <TIM_Base_SetConfig+0x12c>)
 800e590:	4293      	cmp	r3, r2
 800e592:	d007      	beq.n	800e5a4 <TIM_Base_SetConfig+0x40>
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	4a3f      	ldr	r2, [pc, #252]	; (800e694 <TIM_Base_SetConfig+0x130>)
 800e598:	4293      	cmp	r3, r2
 800e59a:	d003      	beq.n	800e5a4 <TIM_Base_SetConfig+0x40>
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	4a3e      	ldr	r2, [pc, #248]	; (800e698 <TIM_Base_SetConfig+0x134>)
 800e5a0:	4293      	cmp	r3, r2
 800e5a2:	d108      	bne.n	800e5b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e5aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	685b      	ldr	r3, [r3, #4]
 800e5b0:	68fa      	ldr	r2, [r7, #12]
 800e5b2:	4313      	orrs	r3, r2
 800e5b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	4a33      	ldr	r2, [pc, #204]	; (800e688 <TIM_Base_SetConfig+0x124>)
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	d027      	beq.n	800e60e <TIM_Base_SetConfig+0xaa>
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e5c4:	d023      	beq.n	800e60e <TIM_Base_SetConfig+0xaa>
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	4a30      	ldr	r2, [pc, #192]	; (800e68c <TIM_Base_SetConfig+0x128>)
 800e5ca:	4293      	cmp	r3, r2
 800e5cc:	d01f      	beq.n	800e60e <TIM_Base_SetConfig+0xaa>
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	4a2f      	ldr	r2, [pc, #188]	; (800e690 <TIM_Base_SetConfig+0x12c>)
 800e5d2:	4293      	cmp	r3, r2
 800e5d4:	d01b      	beq.n	800e60e <TIM_Base_SetConfig+0xaa>
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	4a2e      	ldr	r2, [pc, #184]	; (800e694 <TIM_Base_SetConfig+0x130>)
 800e5da:	4293      	cmp	r3, r2
 800e5dc:	d017      	beq.n	800e60e <TIM_Base_SetConfig+0xaa>
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	4a2d      	ldr	r2, [pc, #180]	; (800e698 <TIM_Base_SetConfig+0x134>)
 800e5e2:	4293      	cmp	r3, r2
 800e5e4:	d013      	beq.n	800e60e <TIM_Base_SetConfig+0xaa>
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	4a2c      	ldr	r2, [pc, #176]	; (800e69c <TIM_Base_SetConfig+0x138>)
 800e5ea:	4293      	cmp	r3, r2
 800e5ec:	d00f      	beq.n	800e60e <TIM_Base_SetConfig+0xaa>
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	4a2b      	ldr	r2, [pc, #172]	; (800e6a0 <TIM_Base_SetConfig+0x13c>)
 800e5f2:	4293      	cmp	r3, r2
 800e5f4:	d00b      	beq.n	800e60e <TIM_Base_SetConfig+0xaa>
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	4a2a      	ldr	r2, [pc, #168]	; (800e6a4 <TIM_Base_SetConfig+0x140>)
 800e5fa:	4293      	cmp	r3, r2
 800e5fc:	d007      	beq.n	800e60e <TIM_Base_SetConfig+0xaa>
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	4a29      	ldr	r2, [pc, #164]	; (800e6a8 <TIM_Base_SetConfig+0x144>)
 800e602:	4293      	cmp	r3, r2
 800e604:	d003      	beq.n	800e60e <TIM_Base_SetConfig+0xaa>
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	4a28      	ldr	r2, [pc, #160]	; (800e6ac <TIM_Base_SetConfig+0x148>)
 800e60a:	4293      	cmp	r3, r2
 800e60c:	d108      	bne.n	800e620 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e614:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	68db      	ldr	r3, [r3, #12]
 800e61a:	68fa      	ldr	r2, [r7, #12]
 800e61c:	4313      	orrs	r3, r2
 800e61e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	695b      	ldr	r3, [r3, #20]
 800e62a:	4313      	orrs	r3, r2
 800e62c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	68fa      	ldr	r2, [r7, #12]
 800e632:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	689a      	ldr	r2, [r3, #8]
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	681a      	ldr	r2, [r3, #0]
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	4a10      	ldr	r2, [pc, #64]	; (800e688 <TIM_Base_SetConfig+0x124>)
 800e648:	4293      	cmp	r3, r2
 800e64a:	d00f      	beq.n	800e66c <TIM_Base_SetConfig+0x108>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	4a12      	ldr	r2, [pc, #72]	; (800e698 <TIM_Base_SetConfig+0x134>)
 800e650:	4293      	cmp	r3, r2
 800e652:	d00b      	beq.n	800e66c <TIM_Base_SetConfig+0x108>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	4a11      	ldr	r2, [pc, #68]	; (800e69c <TIM_Base_SetConfig+0x138>)
 800e658:	4293      	cmp	r3, r2
 800e65a:	d007      	beq.n	800e66c <TIM_Base_SetConfig+0x108>
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	4a10      	ldr	r2, [pc, #64]	; (800e6a0 <TIM_Base_SetConfig+0x13c>)
 800e660:	4293      	cmp	r3, r2
 800e662:	d003      	beq.n	800e66c <TIM_Base_SetConfig+0x108>
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	4a0f      	ldr	r2, [pc, #60]	; (800e6a4 <TIM_Base_SetConfig+0x140>)
 800e668:	4293      	cmp	r3, r2
 800e66a:	d103      	bne.n	800e674 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	691a      	ldr	r2, [r3, #16]
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2201      	movs	r2, #1
 800e678:	615a      	str	r2, [r3, #20]
}
 800e67a:	bf00      	nop
 800e67c:	3714      	adds	r7, #20
 800e67e:	46bd      	mov	sp, r7
 800e680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e684:	4770      	bx	lr
 800e686:	bf00      	nop
 800e688:	40010000 	.word	0x40010000
 800e68c:	40000400 	.word	0x40000400
 800e690:	40000800 	.word	0x40000800
 800e694:	40000c00 	.word	0x40000c00
 800e698:	40010400 	.word	0x40010400
 800e69c:	40014000 	.word	0x40014000
 800e6a0:	40014400 	.word	0x40014400
 800e6a4:	40014800 	.word	0x40014800
 800e6a8:	4000e000 	.word	0x4000e000
 800e6ac:	4000e400 	.word	0x4000e400

0800e6b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e6b0:	b480      	push	{r7}
 800e6b2:	b087      	sub	sp, #28
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
 800e6b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	6a1b      	ldr	r3, [r3, #32]
 800e6be:	f023 0201 	bic.w	r2, r3, #1
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	6a1b      	ldr	r3, [r3, #32]
 800e6ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	685b      	ldr	r3, [r3, #4]
 800e6d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	699b      	ldr	r3, [r3, #24]
 800e6d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e6d8:	68fa      	ldr	r2, [r7, #12]
 800e6da:	4b37      	ldr	r3, [pc, #220]	; (800e7b8 <TIM_OC1_SetConfig+0x108>)
 800e6dc:	4013      	ands	r3, r2
 800e6de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	f023 0303 	bic.w	r3, r3, #3
 800e6e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	68fa      	ldr	r2, [r7, #12]
 800e6ee:	4313      	orrs	r3, r2
 800e6f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	f023 0302 	bic.w	r3, r3, #2
 800e6f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	689b      	ldr	r3, [r3, #8]
 800e6fe:	697a      	ldr	r2, [r7, #20]
 800e700:	4313      	orrs	r3, r2
 800e702:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	4a2d      	ldr	r2, [pc, #180]	; (800e7bc <TIM_OC1_SetConfig+0x10c>)
 800e708:	4293      	cmp	r3, r2
 800e70a:	d00f      	beq.n	800e72c <TIM_OC1_SetConfig+0x7c>
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	4a2c      	ldr	r2, [pc, #176]	; (800e7c0 <TIM_OC1_SetConfig+0x110>)
 800e710:	4293      	cmp	r3, r2
 800e712:	d00b      	beq.n	800e72c <TIM_OC1_SetConfig+0x7c>
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	4a2b      	ldr	r2, [pc, #172]	; (800e7c4 <TIM_OC1_SetConfig+0x114>)
 800e718:	4293      	cmp	r3, r2
 800e71a:	d007      	beq.n	800e72c <TIM_OC1_SetConfig+0x7c>
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	4a2a      	ldr	r2, [pc, #168]	; (800e7c8 <TIM_OC1_SetConfig+0x118>)
 800e720:	4293      	cmp	r3, r2
 800e722:	d003      	beq.n	800e72c <TIM_OC1_SetConfig+0x7c>
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	4a29      	ldr	r2, [pc, #164]	; (800e7cc <TIM_OC1_SetConfig+0x11c>)
 800e728:	4293      	cmp	r3, r2
 800e72a:	d10c      	bne.n	800e746 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	f023 0308 	bic.w	r3, r3, #8
 800e732:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	68db      	ldr	r3, [r3, #12]
 800e738:	697a      	ldr	r2, [r7, #20]
 800e73a:	4313      	orrs	r3, r2
 800e73c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e73e:	697b      	ldr	r3, [r7, #20]
 800e740:	f023 0304 	bic.w	r3, r3, #4
 800e744:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	4a1c      	ldr	r2, [pc, #112]	; (800e7bc <TIM_OC1_SetConfig+0x10c>)
 800e74a:	4293      	cmp	r3, r2
 800e74c:	d00f      	beq.n	800e76e <TIM_OC1_SetConfig+0xbe>
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	4a1b      	ldr	r2, [pc, #108]	; (800e7c0 <TIM_OC1_SetConfig+0x110>)
 800e752:	4293      	cmp	r3, r2
 800e754:	d00b      	beq.n	800e76e <TIM_OC1_SetConfig+0xbe>
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	4a1a      	ldr	r2, [pc, #104]	; (800e7c4 <TIM_OC1_SetConfig+0x114>)
 800e75a:	4293      	cmp	r3, r2
 800e75c:	d007      	beq.n	800e76e <TIM_OC1_SetConfig+0xbe>
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	4a19      	ldr	r2, [pc, #100]	; (800e7c8 <TIM_OC1_SetConfig+0x118>)
 800e762:	4293      	cmp	r3, r2
 800e764:	d003      	beq.n	800e76e <TIM_OC1_SetConfig+0xbe>
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	4a18      	ldr	r2, [pc, #96]	; (800e7cc <TIM_OC1_SetConfig+0x11c>)
 800e76a:	4293      	cmp	r3, r2
 800e76c:	d111      	bne.n	800e792 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e76e:	693b      	ldr	r3, [r7, #16]
 800e770:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e774:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e776:	693b      	ldr	r3, [r7, #16]
 800e778:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e77c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	695b      	ldr	r3, [r3, #20]
 800e782:	693a      	ldr	r2, [r7, #16]
 800e784:	4313      	orrs	r3, r2
 800e786:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	699b      	ldr	r3, [r3, #24]
 800e78c:	693a      	ldr	r2, [r7, #16]
 800e78e:	4313      	orrs	r3, r2
 800e790:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	693a      	ldr	r2, [r7, #16]
 800e796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	68fa      	ldr	r2, [r7, #12]
 800e79c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	685a      	ldr	r2, [r3, #4]
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	697a      	ldr	r2, [r7, #20]
 800e7aa:	621a      	str	r2, [r3, #32]
}
 800e7ac:	bf00      	nop
 800e7ae:	371c      	adds	r7, #28
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b6:	4770      	bx	lr
 800e7b8:	fffeff8f 	.word	0xfffeff8f
 800e7bc:	40010000 	.word	0x40010000
 800e7c0:	40010400 	.word	0x40010400
 800e7c4:	40014000 	.word	0x40014000
 800e7c8:	40014400 	.word	0x40014400
 800e7cc:	40014800 	.word	0x40014800

0800e7d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e7d0:	b480      	push	{r7}
 800e7d2:	b087      	sub	sp, #28
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
 800e7d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	6a1b      	ldr	r3, [r3, #32]
 800e7de:	f023 0210 	bic.w	r2, r3, #16
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	6a1b      	ldr	r3, [r3, #32]
 800e7ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	685b      	ldr	r3, [r3, #4]
 800e7f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	699b      	ldr	r3, [r3, #24]
 800e7f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e7f8:	68fa      	ldr	r2, [r7, #12]
 800e7fa:	4b34      	ldr	r3, [pc, #208]	; (800e8cc <TIM_OC2_SetConfig+0xfc>)
 800e7fc:	4013      	ands	r3, r2
 800e7fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	021b      	lsls	r3, r3, #8
 800e80e:	68fa      	ldr	r2, [r7, #12]
 800e810:	4313      	orrs	r3, r2
 800e812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e814:	697b      	ldr	r3, [r7, #20]
 800e816:	f023 0320 	bic.w	r3, r3, #32
 800e81a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	689b      	ldr	r3, [r3, #8]
 800e820:	011b      	lsls	r3, r3, #4
 800e822:	697a      	ldr	r2, [r7, #20]
 800e824:	4313      	orrs	r3, r2
 800e826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	4a29      	ldr	r2, [pc, #164]	; (800e8d0 <TIM_OC2_SetConfig+0x100>)
 800e82c:	4293      	cmp	r3, r2
 800e82e:	d003      	beq.n	800e838 <TIM_OC2_SetConfig+0x68>
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	4a28      	ldr	r2, [pc, #160]	; (800e8d4 <TIM_OC2_SetConfig+0x104>)
 800e834:	4293      	cmp	r3, r2
 800e836:	d10d      	bne.n	800e854 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e838:	697b      	ldr	r3, [r7, #20]
 800e83a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e83e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	68db      	ldr	r3, [r3, #12]
 800e844:	011b      	lsls	r3, r3, #4
 800e846:	697a      	ldr	r2, [r7, #20]
 800e848:	4313      	orrs	r3, r2
 800e84a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e84c:	697b      	ldr	r3, [r7, #20]
 800e84e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e852:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	4a1e      	ldr	r2, [pc, #120]	; (800e8d0 <TIM_OC2_SetConfig+0x100>)
 800e858:	4293      	cmp	r3, r2
 800e85a:	d00f      	beq.n	800e87c <TIM_OC2_SetConfig+0xac>
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	4a1d      	ldr	r2, [pc, #116]	; (800e8d4 <TIM_OC2_SetConfig+0x104>)
 800e860:	4293      	cmp	r3, r2
 800e862:	d00b      	beq.n	800e87c <TIM_OC2_SetConfig+0xac>
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	4a1c      	ldr	r2, [pc, #112]	; (800e8d8 <TIM_OC2_SetConfig+0x108>)
 800e868:	4293      	cmp	r3, r2
 800e86a:	d007      	beq.n	800e87c <TIM_OC2_SetConfig+0xac>
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	4a1b      	ldr	r2, [pc, #108]	; (800e8dc <TIM_OC2_SetConfig+0x10c>)
 800e870:	4293      	cmp	r3, r2
 800e872:	d003      	beq.n	800e87c <TIM_OC2_SetConfig+0xac>
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	4a1a      	ldr	r2, [pc, #104]	; (800e8e0 <TIM_OC2_SetConfig+0x110>)
 800e878:	4293      	cmp	r3, r2
 800e87a:	d113      	bne.n	800e8a4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e87c:	693b      	ldr	r3, [r7, #16]
 800e87e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e882:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e884:	693b      	ldr	r3, [r7, #16]
 800e886:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e88a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	695b      	ldr	r3, [r3, #20]
 800e890:	009b      	lsls	r3, r3, #2
 800e892:	693a      	ldr	r2, [r7, #16]
 800e894:	4313      	orrs	r3, r2
 800e896:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	699b      	ldr	r3, [r3, #24]
 800e89c:	009b      	lsls	r3, r3, #2
 800e89e:	693a      	ldr	r2, [r7, #16]
 800e8a0:	4313      	orrs	r3, r2
 800e8a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	693a      	ldr	r2, [r7, #16]
 800e8a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	68fa      	ldr	r2, [r7, #12]
 800e8ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	685a      	ldr	r2, [r3, #4]
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	697a      	ldr	r2, [r7, #20]
 800e8bc:	621a      	str	r2, [r3, #32]
}
 800e8be:	bf00      	nop
 800e8c0:	371c      	adds	r7, #28
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c8:	4770      	bx	lr
 800e8ca:	bf00      	nop
 800e8cc:	feff8fff 	.word	0xfeff8fff
 800e8d0:	40010000 	.word	0x40010000
 800e8d4:	40010400 	.word	0x40010400
 800e8d8:	40014000 	.word	0x40014000
 800e8dc:	40014400 	.word	0x40014400
 800e8e0:	40014800 	.word	0x40014800

0800e8e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b087      	sub	sp, #28
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	6a1b      	ldr	r3, [r3, #32]
 800e8f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	6a1b      	ldr	r3, [r3, #32]
 800e8fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	685b      	ldr	r3, [r3, #4]
 800e904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	69db      	ldr	r3, [r3, #28]
 800e90a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e90c:	68fa      	ldr	r2, [r7, #12]
 800e90e:	4b33      	ldr	r3, [pc, #204]	; (800e9dc <TIM_OC3_SetConfig+0xf8>)
 800e910:	4013      	ands	r3, r2
 800e912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	f023 0303 	bic.w	r3, r3, #3
 800e91a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	68fa      	ldr	r2, [r7, #12]
 800e922:	4313      	orrs	r3, r2
 800e924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e926:	697b      	ldr	r3, [r7, #20]
 800e928:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e92c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	689b      	ldr	r3, [r3, #8]
 800e932:	021b      	lsls	r3, r3, #8
 800e934:	697a      	ldr	r2, [r7, #20]
 800e936:	4313      	orrs	r3, r2
 800e938:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	4a28      	ldr	r2, [pc, #160]	; (800e9e0 <TIM_OC3_SetConfig+0xfc>)
 800e93e:	4293      	cmp	r3, r2
 800e940:	d003      	beq.n	800e94a <TIM_OC3_SetConfig+0x66>
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	4a27      	ldr	r2, [pc, #156]	; (800e9e4 <TIM_OC3_SetConfig+0x100>)
 800e946:	4293      	cmp	r3, r2
 800e948:	d10d      	bne.n	800e966 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e94a:	697b      	ldr	r3, [r7, #20]
 800e94c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e950:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	68db      	ldr	r3, [r3, #12]
 800e956:	021b      	lsls	r3, r3, #8
 800e958:	697a      	ldr	r2, [r7, #20]
 800e95a:	4313      	orrs	r3, r2
 800e95c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e95e:	697b      	ldr	r3, [r7, #20]
 800e960:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	4a1d      	ldr	r2, [pc, #116]	; (800e9e0 <TIM_OC3_SetConfig+0xfc>)
 800e96a:	4293      	cmp	r3, r2
 800e96c:	d00f      	beq.n	800e98e <TIM_OC3_SetConfig+0xaa>
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	4a1c      	ldr	r2, [pc, #112]	; (800e9e4 <TIM_OC3_SetConfig+0x100>)
 800e972:	4293      	cmp	r3, r2
 800e974:	d00b      	beq.n	800e98e <TIM_OC3_SetConfig+0xaa>
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	4a1b      	ldr	r2, [pc, #108]	; (800e9e8 <TIM_OC3_SetConfig+0x104>)
 800e97a:	4293      	cmp	r3, r2
 800e97c:	d007      	beq.n	800e98e <TIM_OC3_SetConfig+0xaa>
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	4a1a      	ldr	r2, [pc, #104]	; (800e9ec <TIM_OC3_SetConfig+0x108>)
 800e982:	4293      	cmp	r3, r2
 800e984:	d003      	beq.n	800e98e <TIM_OC3_SetConfig+0xaa>
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	4a19      	ldr	r2, [pc, #100]	; (800e9f0 <TIM_OC3_SetConfig+0x10c>)
 800e98a:	4293      	cmp	r3, r2
 800e98c:	d113      	bne.n	800e9b6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e98e:	693b      	ldr	r3, [r7, #16]
 800e990:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e994:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e996:	693b      	ldr	r3, [r7, #16]
 800e998:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e99c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	695b      	ldr	r3, [r3, #20]
 800e9a2:	011b      	lsls	r3, r3, #4
 800e9a4:	693a      	ldr	r2, [r7, #16]
 800e9a6:	4313      	orrs	r3, r2
 800e9a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	699b      	ldr	r3, [r3, #24]
 800e9ae:	011b      	lsls	r3, r3, #4
 800e9b0:	693a      	ldr	r2, [r7, #16]
 800e9b2:	4313      	orrs	r3, r2
 800e9b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	693a      	ldr	r2, [r7, #16]
 800e9ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	68fa      	ldr	r2, [r7, #12]
 800e9c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	685a      	ldr	r2, [r3, #4]
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	697a      	ldr	r2, [r7, #20]
 800e9ce:	621a      	str	r2, [r3, #32]
}
 800e9d0:	bf00      	nop
 800e9d2:	371c      	adds	r7, #28
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9da:	4770      	bx	lr
 800e9dc:	fffeff8f 	.word	0xfffeff8f
 800e9e0:	40010000 	.word	0x40010000
 800e9e4:	40010400 	.word	0x40010400
 800e9e8:	40014000 	.word	0x40014000
 800e9ec:	40014400 	.word	0x40014400
 800e9f0:	40014800 	.word	0x40014800

0800e9f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e9f4:	b480      	push	{r7}
 800e9f6:	b087      	sub	sp, #28
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
 800e9fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	6a1b      	ldr	r3, [r3, #32]
 800ea02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	6a1b      	ldr	r3, [r3, #32]
 800ea0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	685b      	ldr	r3, [r3, #4]
 800ea14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	69db      	ldr	r3, [r3, #28]
 800ea1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ea1c:	68fa      	ldr	r2, [r7, #12]
 800ea1e:	4b24      	ldr	r3, [pc, #144]	; (800eab0 <TIM_OC4_SetConfig+0xbc>)
 800ea20:	4013      	ands	r3, r2
 800ea22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ea2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	021b      	lsls	r3, r3, #8
 800ea32:	68fa      	ldr	r2, [r7, #12]
 800ea34:	4313      	orrs	r3, r2
 800ea36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ea38:	693b      	ldr	r3, [r7, #16]
 800ea3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ea3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	689b      	ldr	r3, [r3, #8]
 800ea44:	031b      	lsls	r3, r3, #12
 800ea46:	693a      	ldr	r2, [r7, #16]
 800ea48:	4313      	orrs	r3, r2
 800ea4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	4a19      	ldr	r2, [pc, #100]	; (800eab4 <TIM_OC4_SetConfig+0xc0>)
 800ea50:	4293      	cmp	r3, r2
 800ea52:	d00f      	beq.n	800ea74 <TIM_OC4_SetConfig+0x80>
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	4a18      	ldr	r2, [pc, #96]	; (800eab8 <TIM_OC4_SetConfig+0xc4>)
 800ea58:	4293      	cmp	r3, r2
 800ea5a:	d00b      	beq.n	800ea74 <TIM_OC4_SetConfig+0x80>
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	4a17      	ldr	r2, [pc, #92]	; (800eabc <TIM_OC4_SetConfig+0xc8>)
 800ea60:	4293      	cmp	r3, r2
 800ea62:	d007      	beq.n	800ea74 <TIM_OC4_SetConfig+0x80>
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	4a16      	ldr	r2, [pc, #88]	; (800eac0 <TIM_OC4_SetConfig+0xcc>)
 800ea68:	4293      	cmp	r3, r2
 800ea6a:	d003      	beq.n	800ea74 <TIM_OC4_SetConfig+0x80>
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	4a15      	ldr	r2, [pc, #84]	; (800eac4 <TIM_OC4_SetConfig+0xd0>)
 800ea70:	4293      	cmp	r3, r2
 800ea72:	d109      	bne.n	800ea88 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ea74:	697b      	ldr	r3, [r7, #20]
 800ea76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ea7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ea7c:	683b      	ldr	r3, [r7, #0]
 800ea7e:	695b      	ldr	r3, [r3, #20]
 800ea80:	019b      	lsls	r3, r3, #6
 800ea82:	697a      	ldr	r2, [r7, #20]
 800ea84:	4313      	orrs	r3, r2
 800ea86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	697a      	ldr	r2, [r7, #20]
 800ea8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	68fa      	ldr	r2, [r7, #12]
 800ea92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	685a      	ldr	r2, [r3, #4]
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	693a      	ldr	r2, [r7, #16]
 800eaa0:	621a      	str	r2, [r3, #32]
}
 800eaa2:	bf00      	nop
 800eaa4:	371c      	adds	r7, #28
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaac:	4770      	bx	lr
 800eaae:	bf00      	nop
 800eab0:	feff8fff 	.word	0xfeff8fff
 800eab4:	40010000 	.word	0x40010000
 800eab8:	40010400 	.word	0x40010400
 800eabc:	40014000 	.word	0x40014000
 800eac0:	40014400 	.word	0x40014400
 800eac4:	40014800 	.word	0x40014800

0800eac8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800eac8:	b480      	push	{r7}
 800eaca:	b087      	sub	sp, #28
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
 800ead0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	6a1b      	ldr	r3, [r3, #32]
 800ead6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	6a1b      	ldr	r3, [r3, #32]
 800eae2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	685b      	ldr	r3, [r3, #4]
 800eae8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eaee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800eaf0:	68fa      	ldr	r2, [r7, #12]
 800eaf2:	4b21      	ldr	r3, [pc, #132]	; (800eb78 <TIM_OC5_SetConfig+0xb0>)
 800eaf4:	4013      	ands	r3, r2
 800eaf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	68fa      	ldr	r2, [r7, #12]
 800eafe:	4313      	orrs	r3, r2
 800eb00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800eb02:	693b      	ldr	r3, [r7, #16]
 800eb04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800eb08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	689b      	ldr	r3, [r3, #8]
 800eb0e:	041b      	lsls	r3, r3, #16
 800eb10:	693a      	ldr	r2, [r7, #16]
 800eb12:	4313      	orrs	r3, r2
 800eb14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	4a18      	ldr	r2, [pc, #96]	; (800eb7c <TIM_OC5_SetConfig+0xb4>)
 800eb1a:	4293      	cmp	r3, r2
 800eb1c:	d00f      	beq.n	800eb3e <TIM_OC5_SetConfig+0x76>
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	4a17      	ldr	r2, [pc, #92]	; (800eb80 <TIM_OC5_SetConfig+0xb8>)
 800eb22:	4293      	cmp	r3, r2
 800eb24:	d00b      	beq.n	800eb3e <TIM_OC5_SetConfig+0x76>
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	4a16      	ldr	r2, [pc, #88]	; (800eb84 <TIM_OC5_SetConfig+0xbc>)
 800eb2a:	4293      	cmp	r3, r2
 800eb2c:	d007      	beq.n	800eb3e <TIM_OC5_SetConfig+0x76>
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	4a15      	ldr	r2, [pc, #84]	; (800eb88 <TIM_OC5_SetConfig+0xc0>)
 800eb32:	4293      	cmp	r3, r2
 800eb34:	d003      	beq.n	800eb3e <TIM_OC5_SetConfig+0x76>
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	4a14      	ldr	r2, [pc, #80]	; (800eb8c <TIM_OC5_SetConfig+0xc4>)
 800eb3a:	4293      	cmp	r3, r2
 800eb3c:	d109      	bne.n	800eb52 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800eb3e:	697b      	ldr	r3, [r7, #20]
 800eb40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eb44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	695b      	ldr	r3, [r3, #20]
 800eb4a:	021b      	lsls	r3, r3, #8
 800eb4c:	697a      	ldr	r2, [r7, #20]
 800eb4e:	4313      	orrs	r3, r2
 800eb50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	697a      	ldr	r2, [r7, #20]
 800eb56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	68fa      	ldr	r2, [r7, #12]
 800eb5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	685a      	ldr	r2, [r3, #4]
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	693a      	ldr	r2, [r7, #16]
 800eb6a:	621a      	str	r2, [r3, #32]
}
 800eb6c:	bf00      	nop
 800eb6e:	371c      	adds	r7, #28
 800eb70:	46bd      	mov	sp, r7
 800eb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb76:	4770      	bx	lr
 800eb78:	fffeff8f 	.word	0xfffeff8f
 800eb7c:	40010000 	.word	0x40010000
 800eb80:	40010400 	.word	0x40010400
 800eb84:	40014000 	.word	0x40014000
 800eb88:	40014400 	.word	0x40014400
 800eb8c:	40014800 	.word	0x40014800

0800eb90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800eb90:	b480      	push	{r7}
 800eb92:	b087      	sub	sp, #28
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
 800eb98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6a1b      	ldr	r3, [r3, #32]
 800eb9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	6a1b      	ldr	r3, [r3, #32]
 800ebaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	685b      	ldr	r3, [r3, #4]
 800ebb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ebb8:	68fa      	ldr	r2, [r7, #12]
 800ebba:	4b22      	ldr	r3, [pc, #136]	; (800ec44 <TIM_OC6_SetConfig+0xb4>)
 800ebbc:	4013      	ands	r3, r2
 800ebbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	021b      	lsls	r3, r3, #8
 800ebc6:	68fa      	ldr	r2, [r7, #12]
 800ebc8:	4313      	orrs	r3, r2
 800ebca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ebcc:	693b      	ldr	r3, [r7, #16]
 800ebce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ebd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	689b      	ldr	r3, [r3, #8]
 800ebd8:	051b      	lsls	r3, r3, #20
 800ebda:	693a      	ldr	r2, [r7, #16]
 800ebdc:	4313      	orrs	r3, r2
 800ebde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	4a19      	ldr	r2, [pc, #100]	; (800ec48 <TIM_OC6_SetConfig+0xb8>)
 800ebe4:	4293      	cmp	r3, r2
 800ebe6:	d00f      	beq.n	800ec08 <TIM_OC6_SetConfig+0x78>
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	4a18      	ldr	r2, [pc, #96]	; (800ec4c <TIM_OC6_SetConfig+0xbc>)
 800ebec:	4293      	cmp	r3, r2
 800ebee:	d00b      	beq.n	800ec08 <TIM_OC6_SetConfig+0x78>
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	4a17      	ldr	r2, [pc, #92]	; (800ec50 <TIM_OC6_SetConfig+0xc0>)
 800ebf4:	4293      	cmp	r3, r2
 800ebf6:	d007      	beq.n	800ec08 <TIM_OC6_SetConfig+0x78>
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	4a16      	ldr	r2, [pc, #88]	; (800ec54 <TIM_OC6_SetConfig+0xc4>)
 800ebfc:	4293      	cmp	r3, r2
 800ebfe:	d003      	beq.n	800ec08 <TIM_OC6_SetConfig+0x78>
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	4a15      	ldr	r2, [pc, #84]	; (800ec58 <TIM_OC6_SetConfig+0xc8>)
 800ec04:	4293      	cmp	r3, r2
 800ec06:	d109      	bne.n	800ec1c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ec08:	697b      	ldr	r3, [r7, #20]
 800ec0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ec0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	695b      	ldr	r3, [r3, #20]
 800ec14:	029b      	lsls	r3, r3, #10
 800ec16:	697a      	ldr	r2, [r7, #20]
 800ec18:	4313      	orrs	r3, r2
 800ec1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	697a      	ldr	r2, [r7, #20]
 800ec20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	68fa      	ldr	r2, [r7, #12]
 800ec26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	685a      	ldr	r2, [r3, #4]
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	693a      	ldr	r2, [r7, #16]
 800ec34:	621a      	str	r2, [r3, #32]
}
 800ec36:	bf00      	nop
 800ec38:	371c      	adds	r7, #28
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec40:	4770      	bx	lr
 800ec42:	bf00      	nop
 800ec44:	feff8fff 	.word	0xfeff8fff
 800ec48:	40010000 	.word	0x40010000
 800ec4c:	40010400 	.word	0x40010400
 800ec50:	40014000 	.word	0x40014000
 800ec54:	40014400 	.word	0x40014400
 800ec58:	40014800 	.word	0x40014800

0800ec5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ec5c:	b480      	push	{r7}
 800ec5e:	b087      	sub	sp, #28
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	60f8      	str	r0, [r7, #12]
 800ec64:	60b9      	str	r1, [r7, #8]
 800ec66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	6a1b      	ldr	r3, [r3, #32]
 800ec6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	6a1b      	ldr	r3, [r3, #32]
 800ec72:	f023 0201 	bic.w	r2, r3, #1
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	699b      	ldr	r3, [r3, #24]
 800ec7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ec80:	693b      	ldr	r3, [r7, #16]
 800ec82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ec86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	011b      	lsls	r3, r3, #4
 800ec8c:	693a      	ldr	r2, [r7, #16]
 800ec8e:	4313      	orrs	r3, r2
 800ec90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	f023 030a 	bic.w	r3, r3, #10
 800ec98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ec9a:	697a      	ldr	r2, [r7, #20]
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	4313      	orrs	r3, r2
 800eca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	693a      	ldr	r2, [r7, #16]
 800eca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	697a      	ldr	r2, [r7, #20]
 800ecac:	621a      	str	r2, [r3, #32]
}
 800ecae:	bf00      	nop
 800ecb0:	371c      	adds	r7, #28
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb8:	4770      	bx	lr

0800ecba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ecba:	b480      	push	{r7}
 800ecbc:	b087      	sub	sp, #28
 800ecbe:	af00      	add	r7, sp, #0
 800ecc0:	60f8      	str	r0, [r7, #12]
 800ecc2:	60b9      	str	r1, [r7, #8]
 800ecc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	6a1b      	ldr	r3, [r3, #32]
 800ecca:	f023 0210 	bic.w	r2, r3, #16
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	699b      	ldr	r3, [r3, #24]
 800ecd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	6a1b      	ldr	r3, [r3, #32]
 800ecdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ecde:	697b      	ldr	r3, [r7, #20]
 800ece0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ece4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	031b      	lsls	r3, r3, #12
 800ecea:	697a      	ldr	r2, [r7, #20]
 800ecec:	4313      	orrs	r3, r2
 800ecee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ecf0:	693b      	ldr	r3, [r7, #16]
 800ecf2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ecf6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	011b      	lsls	r3, r3, #4
 800ecfc:	693a      	ldr	r2, [r7, #16]
 800ecfe:	4313      	orrs	r3, r2
 800ed00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	697a      	ldr	r2, [r7, #20]
 800ed06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	693a      	ldr	r2, [r7, #16]
 800ed0c:	621a      	str	r2, [r3, #32]
}
 800ed0e:	bf00      	nop
 800ed10:	371c      	adds	r7, #28
 800ed12:	46bd      	mov	sp, r7
 800ed14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed18:	4770      	bx	lr
	...

0800ed1c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ed1c:	b480      	push	{r7}
 800ed1e:	b085      	sub	sp, #20
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
 800ed24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	689b      	ldr	r3, [r3, #8]
 800ed2a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ed2c:	68fa      	ldr	r2, [r7, #12]
 800ed2e:	4b09      	ldr	r3, [pc, #36]	; (800ed54 <TIM_ITRx_SetConfig+0x38>)
 800ed30:	4013      	ands	r3, r2
 800ed32:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ed34:	683a      	ldr	r2, [r7, #0]
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	4313      	orrs	r3, r2
 800ed3a:	f043 0307 	orr.w	r3, r3, #7
 800ed3e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	68fa      	ldr	r2, [r7, #12]
 800ed44:	609a      	str	r2, [r3, #8]
}
 800ed46:	bf00      	nop
 800ed48:	3714      	adds	r7, #20
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed50:	4770      	bx	lr
 800ed52:	bf00      	nop
 800ed54:	ffcfff8f 	.word	0xffcfff8f

0800ed58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ed58:	b480      	push	{r7}
 800ed5a:	b087      	sub	sp, #28
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	60f8      	str	r0, [r7, #12]
 800ed60:	60b9      	str	r1, [r7, #8]
 800ed62:	607a      	str	r2, [r7, #4]
 800ed64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	689b      	ldr	r3, [r3, #8]
 800ed6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ed6c:	697b      	ldr	r3, [r7, #20]
 800ed6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ed72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	021a      	lsls	r2, r3, #8
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	431a      	orrs	r2, r3
 800ed7c:	68bb      	ldr	r3, [r7, #8]
 800ed7e:	4313      	orrs	r3, r2
 800ed80:	697a      	ldr	r2, [r7, #20]
 800ed82:	4313      	orrs	r3, r2
 800ed84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	697a      	ldr	r2, [r7, #20]
 800ed8a:	609a      	str	r2, [r3, #8]
}
 800ed8c:	bf00      	nop
 800ed8e:	371c      	adds	r7, #28
 800ed90:	46bd      	mov	sp, r7
 800ed92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed96:	4770      	bx	lr

0800ed98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ed98:	b480      	push	{r7}
 800ed9a:	b087      	sub	sp, #28
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	60f8      	str	r0, [r7, #12]
 800eda0:	60b9      	str	r1, [r7, #8]
 800eda2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800eda4:	68bb      	ldr	r3, [r7, #8]
 800eda6:	f003 031f 	and.w	r3, r3, #31
 800edaa:	2201      	movs	r2, #1
 800edac:	fa02 f303 	lsl.w	r3, r2, r3
 800edb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	6a1a      	ldr	r2, [r3, #32]
 800edb6:	697b      	ldr	r3, [r7, #20]
 800edb8:	43db      	mvns	r3, r3
 800edba:	401a      	ands	r2, r3
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	6a1a      	ldr	r2, [r3, #32]
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	f003 031f 	and.w	r3, r3, #31
 800edca:	6879      	ldr	r1, [r7, #4]
 800edcc:	fa01 f303 	lsl.w	r3, r1, r3
 800edd0:	431a      	orrs	r2, r3
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	621a      	str	r2, [r3, #32]
}
 800edd6:	bf00      	nop
 800edd8:	371c      	adds	r7, #28
 800edda:	46bd      	mov	sp, r7
 800eddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede0:	4770      	bx	lr
	...

0800ede4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b084      	sub	sp, #16
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
 800edec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d109      	bne.n	800ee08 <HAL_TIMEx_PWMN_Start+0x24>
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800edfa:	b2db      	uxtb	r3, r3
 800edfc:	2b01      	cmp	r3, #1
 800edfe:	bf14      	ite	ne
 800ee00:	2301      	movne	r3, #1
 800ee02:	2300      	moveq	r3, #0
 800ee04:	b2db      	uxtb	r3, r3
 800ee06:	e022      	b.n	800ee4e <HAL_TIMEx_PWMN_Start+0x6a>
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	2b04      	cmp	r3, #4
 800ee0c:	d109      	bne.n	800ee22 <HAL_TIMEx_PWMN_Start+0x3e>
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ee14:	b2db      	uxtb	r3, r3
 800ee16:	2b01      	cmp	r3, #1
 800ee18:	bf14      	ite	ne
 800ee1a:	2301      	movne	r3, #1
 800ee1c:	2300      	moveq	r3, #0
 800ee1e:	b2db      	uxtb	r3, r3
 800ee20:	e015      	b.n	800ee4e <HAL_TIMEx_PWMN_Start+0x6a>
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	2b08      	cmp	r3, #8
 800ee26:	d109      	bne.n	800ee3c <HAL_TIMEx_PWMN_Start+0x58>
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ee2e:	b2db      	uxtb	r3, r3
 800ee30:	2b01      	cmp	r3, #1
 800ee32:	bf14      	ite	ne
 800ee34:	2301      	movne	r3, #1
 800ee36:	2300      	moveq	r3, #0
 800ee38:	b2db      	uxtb	r3, r3
 800ee3a:	e008      	b.n	800ee4e <HAL_TIMEx_PWMN_Start+0x6a>
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800ee42:	b2db      	uxtb	r3, r3
 800ee44:	2b01      	cmp	r3, #1
 800ee46:	bf14      	ite	ne
 800ee48:	2301      	movne	r3, #1
 800ee4a:	2300      	moveq	r3, #0
 800ee4c:	b2db      	uxtb	r3, r3
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d001      	beq.n	800ee56 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800ee52:	2301      	movs	r3, #1
 800ee54:	e07d      	b.n	800ef52 <HAL_TIMEx_PWMN_Start+0x16e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ee56:	683b      	ldr	r3, [r7, #0]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d104      	bne.n	800ee66 <HAL_TIMEx_PWMN_Start+0x82>
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	2202      	movs	r2, #2
 800ee60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ee64:	e013      	b.n	800ee8e <HAL_TIMEx_PWMN_Start+0xaa>
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	2b04      	cmp	r3, #4
 800ee6a:	d104      	bne.n	800ee76 <HAL_TIMEx_PWMN_Start+0x92>
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2202      	movs	r2, #2
 800ee70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ee74:	e00b      	b.n	800ee8e <HAL_TIMEx_PWMN_Start+0xaa>
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	2b08      	cmp	r3, #8
 800ee7a:	d104      	bne.n	800ee86 <HAL_TIMEx_PWMN_Start+0xa2>
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2202      	movs	r2, #2
 800ee80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ee84:	e003      	b.n	800ee8e <HAL_TIMEx_PWMN_Start+0xaa>
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	2202      	movs	r2, #2
 800ee8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	2204      	movs	r2, #4
 800ee94:	6839      	ldr	r1, [r7, #0]
 800ee96:	4618      	mov	r0, r3
 800ee98:	f000 fa94 	bl	800f3c4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800eeaa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	4a2a      	ldr	r2, [pc, #168]	; (800ef5c <HAL_TIMEx_PWMN_Start+0x178>)
 800eeb2:	4293      	cmp	r3, r2
 800eeb4:	d02c      	beq.n	800ef10 <HAL_TIMEx_PWMN_Start+0x12c>
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eebe:	d027      	beq.n	800ef10 <HAL_TIMEx_PWMN_Start+0x12c>
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	4a26      	ldr	r2, [pc, #152]	; (800ef60 <HAL_TIMEx_PWMN_Start+0x17c>)
 800eec6:	4293      	cmp	r3, r2
 800eec8:	d022      	beq.n	800ef10 <HAL_TIMEx_PWMN_Start+0x12c>
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	4a25      	ldr	r2, [pc, #148]	; (800ef64 <HAL_TIMEx_PWMN_Start+0x180>)
 800eed0:	4293      	cmp	r3, r2
 800eed2:	d01d      	beq.n	800ef10 <HAL_TIMEx_PWMN_Start+0x12c>
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	4a23      	ldr	r2, [pc, #140]	; (800ef68 <HAL_TIMEx_PWMN_Start+0x184>)
 800eeda:	4293      	cmp	r3, r2
 800eedc:	d018      	beq.n	800ef10 <HAL_TIMEx_PWMN_Start+0x12c>
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	4a22      	ldr	r2, [pc, #136]	; (800ef6c <HAL_TIMEx_PWMN_Start+0x188>)
 800eee4:	4293      	cmp	r3, r2
 800eee6:	d013      	beq.n	800ef10 <HAL_TIMEx_PWMN_Start+0x12c>
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	4a20      	ldr	r2, [pc, #128]	; (800ef70 <HAL_TIMEx_PWMN_Start+0x18c>)
 800eeee:	4293      	cmp	r3, r2
 800eef0:	d00e      	beq.n	800ef10 <HAL_TIMEx_PWMN_Start+0x12c>
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	4a1f      	ldr	r2, [pc, #124]	; (800ef74 <HAL_TIMEx_PWMN_Start+0x190>)
 800eef8:	4293      	cmp	r3, r2
 800eefa:	d009      	beq.n	800ef10 <HAL_TIMEx_PWMN_Start+0x12c>
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	4a1d      	ldr	r2, [pc, #116]	; (800ef78 <HAL_TIMEx_PWMN_Start+0x194>)
 800ef02:	4293      	cmp	r3, r2
 800ef04:	d004      	beq.n	800ef10 <HAL_TIMEx_PWMN_Start+0x12c>
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	4a1c      	ldr	r2, [pc, #112]	; (800ef7c <HAL_TIMEx_PWMN_Start+0x198>)
 800ef0c:	4293      	cmp	r3, r2
 800ef0e:	d115      	bne.n	800ef3c <HAL_TIMEx_PWMN_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	689a      	ldr	r2, [r3, #8]
 800ef16:	4b1a      	ldr	r3, [pc, #104]	; (800ef80 <HAL_TIMEx_PWMN_Start+0x19c>)
 800ef18:	4013      	ands	r3, r2
 800ef1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	2b06      	cmp	r3, #6
 800ef20:	d015      	beq.n	800ef4e <HAL_TIMEx_PWMN_Start+0x16a>
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef28:	d011      	beq.n	800ef4e <HAL_TIMEx_PWMN_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	681a      	ldr	r2, [r3, #0]
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	f042 0201 	orr.w	r2, r2, #1
 800ef38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef3a:	e008      	b.n	800ef4e <HAL_TIMEx_PWMN_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	681a      	ldr	r2, [r3, #0]
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	f042 0201 	orr.w	r2, r2, #1
 800ef4a:	601a      	str	r2, [r3, #0]
 800ef4c:	e000      	b.n	800ef50 <HAL_TIMEx_PWMN_Start+0x16c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ef50:	2300      	movs	r3, #0
}
 800ef52:	4618      	mov	r0, r3
 800ef54:	3710      	adds	r7, #16
 800ef56:	46bd      	mov	sp, r7
 800ef58:	bd80      	pop	{r7, pc}
 800ef5a:	bf00      	nop
 800ef5c:	40010000 	.word	0x40010000
 800ef60:	40000400 	.word	0x40000400
 800ef64:	40000800 	.word	0x40000800
 800ef68:	40000c00 	.word	0x40000c00
 800ef6c:	40010400 	.word	0x40010400
 800ef70:	40001800 	.word	0x40001800
 800ef74:	40014000 	.word	0x40014000
 800ef78:	4000e000 	.word	0x4000e000
 800ef7c:	4000e400 	.word	0x4000e400
 800ef80:	00010007 	.word	0x00010007

0800ef84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ef84:	b480      	push	{r7}
 800ef86:	b085      	sub	sp, #20
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
 800ef8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ef94:	2b01      	cmp	r3, #1
 800ef96:	d101      	bne.n	800ef9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ef98:	2302      	movs	r3, #2
 800ef9a:	e077      	b.n	800f08c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2201      	movs	r2, #1
 800efa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2202      	movs	r2, #2
 800efa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	685b      	ldr	r3, [r3, #4]
 800efb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	689b      	ldr	r3, [r3, #8]
 800efba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	4a35      	ldr	r2, [pc, #212]	; (800f098 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800efc2:	4293      	cmp	r3, r2
 800efc4:	d004      	beq.n	800efd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	4a34      	ldr	r2, [pc, #208]	; (800f09c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800efcc:	4293      	cmp	r3, r2
 800efce:	d108      	bne.n	800efe2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800efd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	685b      	ldr	r3, [r3, #4]
 800efdc:	68fa      	ldr	r2, [r7, #12]
 800efde:	4313      	orrs	r3, r2
 800efe0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800efe8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800efea:	683b      	ldr	r3, [r7, #0]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	68fa      	ldr	r2, [r7, #12]
 800eff0:	4313      	orrs	r3, r2
 800eff2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	68fa      	ldr	r2, [r7, #12]
 800effa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	4a25      	ldr	r2, [pc, #148]	; (800f098 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f002:	4293      	cmp	r3, r2
 800f004:	d02c      	beq.n	800f060 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f00e:	d027      	beq.n	800f060 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	4a22      	ldr	r2, [pc, #136]	; (800f0a0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f016:	4293      	cmp	r3, r2
 800f018:	d022      	beq.n	800f060 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	4a21      	ldr	r2, [pc, #132]	; (800f0a4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f020:	4293      	cmp	r3, r2
 800f022:	d01d      	beq.n	800f060 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	4a1f      	ldr	r2, [pc, #124]	; (800f0a8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f02a:	4293      	cmp	r3, r2
 800f02c:	d018      	beq.n	800f060 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	4a1a      	ldr	r2, [pc, #104]	; (800f09c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f034:	4293      	cmp	r3, r2
 800f036:	d013      	beq.n	800f060 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	4a1b      	ldr	r2, [pc, #108]	; (800f0ac <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f03e:	4293      	cmp	r3, r2
 800f040:	d00e      	beq.n	800f060 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	4a1a      	ldr	r2, [pc, #104]	; (800f0b0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800f048:	4293      	cmp	r3, r2
 800f04a:	d009      	beq.n	800f060 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	4a18      	ldr	r2, [pc, #96]	; (800f0b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800f052:	4293      	cmp	r3, r2
 800f054:	d004      	beq.n	800f060 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	4a17      	ldr	r2, [pc, #92]	; (800f0b8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800f05c:	4293      	cmp	r3, r2
 800f05e:	d10c      	bne.n	800f07a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f066:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f068:	683b      	ldr	r3, [r7, #0]
 800f06a:	689b      	ldr	r3, [r3, #8]
 800f06c:	68ba      	ldr	r2, [r7, #8]
 800f06e:	4313      	orrs	r3, r2
 800f070:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	68ba      	ldr	r2, [r7, #8]
 800f078:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	2201      	movs	r2, #1
 800f07e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	2200      	movs	r2, #0
 800f086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f08a:	2300      	movs	r3, #0
}
 800f08c:	4618      	mov	r0, r3
 800f08e:	3714      	adds	r7, #20
 800f090:	46bd      	mov	sp, r7
 800f092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f096:	4770      	bx	lr
 800f098:	40010000 	.word	0x40010000
 800f09c:	40010400 	.word	0x40010400
 800f0a0:	40000400 	.word	0x40000400
 800f0a4:	40000800 	.word	0x40000800
 800f0a8:	40000c00 	.word	0x40000c00
 800f0ac:	40001800 	.word	0x40001800
 800f0b0:	40014000 	.word	0x40014000
 800f0b4:	4000e000 	.word	0x4000e000
 800f0b8:	4000e400 	.word	0x4000e400

0800f0bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f0bc:	b480      	push	{r7}
 800f0be:	b085      	sub	sp, #20
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
 800f0c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f0d0:	2b01      	cmp	r3, #1
 800f0d2:	d101      	bne.n	800f0d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f0d4:	2302      	movs	r3, #2
 800f0d6:	e087      	b.n	800f1e8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2201      	movs	r2, #1
 800f0dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	68db      	ldr	r3, [r3, #12]
 800f0ea:	4313      	orrs	r3, r2
 800f0ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	689b      	ldr	r3, [r3, #8]
 800f0f8:	4313      	orrs	r3, r2
 800f0fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	685b      	ldr	r3, [r3, #4]
 800f106:	4313      	orrs	r3, r2
 800f108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	4313      	orrs	r3, r2
 800f116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	691b      	ldr	r3, [r3, #16]
 800f122:	4313      	orrs	r3, r2
 800f124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	695b      	ldr	r3, [r3, #20]
 800f130:	4313      	orrs	r3, r2
 800f132:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f13e:	4313      	orrs	r3, r2
 800f140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	699b      	ldr	r3, [r3, #24]
 800f14c:	041b      	lsls	r3, r3, #16
 800f14e:	4313      	orrs	r3, r2
 800f150:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	4a27      	ldr	r2, [pc, #156]	; (800f1f4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800f158:	4293      	cmp	r3, r2
 800f15a:	d004      	beq.n	800f166 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	4a25      	ldr	r2, [pc, #148]	; (800f1f8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800f162:	4293      	cmp	r3, r2
 800f164:	d106      	bne.n	800f174 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	69db      	ldr	r3, [r3, #28]
 800f170:	4313      	orrs	r3, r2
 800f172:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	4a1e      	ldr	r2, [pc, #120]	; (800f1f4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800f17a:	4293      	cmp	r3, r2
 800f17c:	d004      	beq.n	800f188 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	4a1d      	ldr	r2, [pc, #116]	; (800f1f8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800f184:	4293      	cmp	r3, r2
 800f186:	d126      	bne.n	800f1d6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f192:	051b      	lsls	r3, r3, #20
 800f194:	4313      	orrs	r3, r2
 800f196:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	6a1b      	ldr	r3, [r3, #32]
 800f1a2:	4313      	orrs	r3, r2
 800f1a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1b0:	4313      	orrs	r3, r2
 800f1b2:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	4a0e      	ldr	r2, [pc, #56]	; (800f1f4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800f1ba:	4293      	cmp	r3, r2
 800f1bc:	d004      	beq.n	800f1c8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	4a0d      	ldr	r2, [pc, #52]	; (800f1f8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800f1c4:	4293      	cmp	r3, r2
 800f1c6:	d106      	bne.n	800f1d6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1d2:	4313      	orrs	r3, r2
 800f1d4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	68fa      	ldr	r2, [r7, #12]
 800f1dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f1e6:	2300      	movs	r3, #0
}
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	3714      	adds	r7, #20
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f2:	4770      	bx	lr
 800f1f4:	40010000 	.word	0x40010000
 800f1f8:	40010400 	.word	0x40010400

0800f1fc <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800f1fc:	b480      	push	{r7}
 800f1fe:	b08b      	sub	sp, #44	; 0x2c
 800f200:	af00      	add	r7, sp, #0
 800f202:	60f8      	str	r0, [r7, #12]
 800f204:	60b9      	str	r1, [r7, #8]
 800f206:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f208:	2300      	movs	r3, #0
 800f20a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  {
    assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
  }

  /* Check input state */
  __HAL_LOCK(htim);
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f214:	2b01      	cmp	r3, #1
 800f216:	d101      	bne.n	800f21c <HAL_TIMEx_ConfigBreakInput+0x20>
 800f218:	2302      	movs	r3, #2
 800f21a:	e0af      	b.n	800f37c <HAL_TIMEx_ConfigBreakInput+0x180>
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	2201      	movs	r2, #1
 800f220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	3b01      	subs	r3, #1
 800f22a:	2b07      	cmp	r3, #7
 800f22c:	d83a      	bhi.n	800f2a4 <HAL_TIMEx_ConfigBreakInput+0xa8>
 800f22e:	a201      	add	r2, pc, #4	; (adr r2, 800f234 <HAL_TIMEx_ConfigBreakInput+0x38>)
 800f230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f234:	0800f255 	.word	0x0800f255
 800f238:	0800f269 	.word	0x0800f269
 800f23c:	0800f2a5 	.word	0x0800f2a5
 800f240:	0800f27d 	.word	0x0800f27d
 800f244:	0800f2a5 	.word	0x0800f2a5
 800f248:	0800f2a5 	.word	0x0800f2a5
 800f24c:	0800f2a5 	.word	0x0800f2a5
 800f250:	0800f291 	.word	0x0800f291
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800f254:	2301      	movs	r3, #1
 800f256:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800f258:	2300      	movs	r3, #0
 800f25a:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800f25c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f260:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800f262:	2309      	movs	r3, #9
 800f264:	613b      	str	r3, [r7, #16]
      break;
 800f266:	e026      	b.n	800f2b6 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800f268:	2302      	movs	r3, #2
 800f26a:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800f26c:	2301      	movs	r3, #1
 800f26e:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800f270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f274:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800f276:	230a      	movs	r3, #10
 800f278:	613b      	str	r3, [r7, #16]
      break;
 800f27a:	e01c      	b.n	800f2b6 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800f27c:	2304      	movs	r3, #4
 800f27e:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800f280:	2302      	movs	r3, #2
 800f282:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800f284:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f288:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800f28a:	230b      	movs	r3, #11
 800f28c:	613b      	str	r3, [r7, #16]
      break;
 800f28e:	e012      	b.n	800f2b6 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_AF1_BKDF1BK0E;
 800f290:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f294:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_AF1_BKDF1BK0E_Pos;
 800f296:	2308      	movs	r3, #8
 800f298:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 800f29a:	2300      	movs	r3, #0
 800f29c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800f29e:	2300      	movs	r3, #0
 800f2a0:	613b      	str	r3, [r7, #16]
      break;
 800f2a2:	e008      	b.n	800f2b6 <HAL_TIMEx_ConfigBreakInput+0xba>
    }

    default:
    {
      bkin_enable_mask = 0U;
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	613b      	str	r3, [r7, #16]
      break;
 800f2b4:	bf00      	nop
    }
  }

  switch (BreakInput)
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	2b01      	cmp	r3, #1
 800f2ba:	d003      	beq.n	800f2c4 <HAL_TIMEx_ConfigBreakInput+0xc8>
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	2b02      	cmp	r3, #2
 800f2c0:	d029      	beq.n	800f316 <HAL_TIMEx_ConfigBreakInput+0x11a>
 800f2c2:	e051      	b.n	800f368 <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f2ca:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800f2cc:	69fb      	ldr	r3, [r7, #28]
 800f2ce:	43db      	mvns	r3, r3
 800f2d0:	6a3a      	ldr	r2, [r7, #32]
 800f2d2:	4013      	ands	r3, r2
 800f2d4:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	685a      	ldr	r2, [r3, #4]
 800f2da:	697b      	ldr	r3, [r7, #20]
 800f2dc:	409a      	lsls	r2, r3
 800f2de:	69fb      	ldr	r3, [r7, #28]
 800f2e0:	4013      	ands	r3, r2
 800f2e2:	6a3a      	ldr	r2, [r7, #32]
 800f2e4:	4313      	orrs	r3, r2
 800f2e6:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	2b08      	cmp	r3, #8
 800f2ee:	d00d      	beq.n	800f30c <HAL_TIMEx_ConfigBreakInput+0x110>
      {
        tmporx &= ~bkin_polarity_mask;
 800f2f0:	69bb      	ldr	r3, [r7, #24]
 800f2f2:	43db      	mvns	r3, r3
 800f2f4:	6a3a      	ldr	r2, [r7, #32]
 800f2f6:	4013      	ands	r3, r2
 800f2f8:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	689a      	ldr	r2, [r3, #8]
 800f2fe:	693b      	ldr	r3, [r7, #16]
 800f300:	409a      	lsls	r2, r3
 800f302:	69bb      	ldr	r3, [r7, #24]
 800f304:	4013      	ands	r3, r2
 800f306:	6a3a      	ldr	r2, [r7, #32]
 800f308:	4313      	orrs	r3, r2
 800f30a:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	6a3a      	ldr	r2, [r7, #32]
 800f312:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800f314:	e02c      	b.n	800f370 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f31c:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800f31e:	69fb      	ldr	r3, [r7, #28]
 800f320:	43db      	mvns	r3, r3
 800f322:	6a3a      	ldr	r2, [r7, #32]
 800f324:	4013      	ands	r3, r2
 800f326:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	685a      	ldr	r2, [r3, #4]
 800f32c:	697b      	ldr	r3, [r7, #20]
 800f32e:	409a      	lsls	r2, r3
 800f330:	69fb      	ldr	r3, [r7, #28]
 800f332:	4013      	ands	r3, r2
 800f334:	6a3a      	ldr	r2, [r7, #32]
 800f336:	4313      	orrs	r3, r2
 800f338:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	2b08      	cmp	r3, #8
 800f340:	d00d      	beq.n	800f35e <HAL_TIMEx_ConfigBreakInput+0x162>
      {
        tmporx &= ~bkin_polarity_mask;
 800f342:	69bb      	ldr	r3, [r7, #24]
 800f344:	43db      	mvns	r3, r3
 800f346:	6a3a      	ldr	r2, [r7, #32]
 800f348:	4013      	ands	r3, r2
 800f34a:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	689a      	ldr	r2, [r3, #8]
 800f350:	693b      	ldr	r3, [r7, #16]
 800f352:	409a      	lsls	r2, r3
 800f354:	69bb      	ldr	r3, [r7, #24]
 800f356:	4013      	ands	r3, r2
 800f358:	6a3a      	ldr	r2, [r7, #32]
 800f35a:	4313      	orrs	r3, r2
 800f35c:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	6a3a      	ldr	r2, [r7, #32]
 800f364:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800f366:	e003      	b.n	800f370 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 800f368:	2301      	movs	r3, #1
 800f36a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800f36e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	2200      	movs	r2, #0
 800f374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f378:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800f37c:	4618      	mov	r0, r3
 800f37e:	372c      	adds	r7, #44	; 0x2c
 800f380:	46bd      	mov	sp, r7
 800f382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f386:	4770      	bx	lr

0800f388 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f388:	b480      	push	{r7}
 800f38a:	b083      	sub	sp, #12
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f390:	bf00      	nop
 800f392:	370c      	adds	r7, #12
 800f394:	46bd      	mov	sp, r7
 800f396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39a:	4770      	bx	lr

0800f39c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f39c:	b480      	push	{r7}
 800f39e:	b083      	sub	sp, #12
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f3a4:	bf00      	nop
 800f3a6:	370c      	adds	r7, #12
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ae:	4770      	bx	lr

0800f3b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f3b0:	b480      	push	{r7}
 800f3b2:	b083      	sub	sp, #12
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f3b8:	bf00      	nop
 800f3ba:	370c      	adds	r7, #12
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c2:	4770      	bx	lr

0800f3c4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800f3c4:	b480      	push	{r7}
 800f3c6:	b087      	sub	sp, #28
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	60f8      	str	r0, [r7, #12]
 800f3cc:	60b9      	str	r1, [r7, #8]
 800f3ce:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	f003 031f 	and.w	r3, r3, #31
 800f3d6:	2204      	movs	r2, #4
 800f3d8:	fa02 f303 	lsl.w	r3, r2, r3
 800f3dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	6a1a      	ldr	r2, [r3, #32]
 800f3e2:	697b      	ldr	r3, [r7, #20]
 800f3e4:	43db      	mvns	r3, r3
 800f3e6:	401a      	ands	r2, r3
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	6a1a      	ldr	r2, [r3, #32]
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	f003 031f 	and.w	r3, r3, #31
 800f3f6:	6879      	ldr	r1, [r7, #4]
 800f3f8:	fa01 f303 	lsl.w	r3, r1, r3
 800f3fc:	431a      	orrs	r2, r3
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	621a      	str	r2, [r3, #32]
}
 800f402:	bf00      	nop
 800f404:	371c      	adds	r7, #28
 800f406:	46bd      	mov	sp, r7
 800f408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40c:	4770      	bx	lr

0800f40e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f40e:	b580      	push	{r7, lr}
 800f410:	b082      	sub	sp, #8
 800f412:	af00      	add	r7, sp, #0
 800f414:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d101      	bne.n	800f420 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f41c:	2301      	movs	r3, #1
 800f41e:	e042      	b.n	800f4a6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f426:	2b00      	cmp	r3, #0
 800f428:	d106      	bne.n	800f438 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	2200      	movs	r2, #0
 800f42e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	f7f3 fd84 	bl	8002f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2224      	movs	r2, #36	; 0x24
 800f43c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	681a      	ldr	r2, [r3, #0]
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	f022 0201 	bic.w	r2, r2, #1
 800f44e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f450:	6878      	ldr	r0, [r7, #4]
 800f452:	f000 f8bb 	bl	800f5cc <UART_SetConfig>
 800f456:	4603      	mov	r3, r0
 800f458:	2b01      	cmp	r3, #1
 800f45a:	d101      	bne.n	800f460 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f45c:	2301      	movs	r3, #1
 800f45e:	e022      	b.n	800f4a6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f464:	2b00      	cmp	r3, #0
 800f466:	d002      	beq.n	800f46e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f000 ff1b 	bl	80102a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	685a      	ldr	r2, [r3, #4]
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f47c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	689a      	ldr	r2, [r3, #8]
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f48c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	681a      	ldr	r2, [r3, #0]
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	f042 0201 	orr.w	r2, r2, #1
 800f49c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f000 ffa2 	bl	80103e8 <UART_CheckIdleState>
 800f4a4:	4603      	mov	r3, r0
}
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	3708      	adds	r7, #8
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	bd80      	pop	{r7, pc}

0800f4ae <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f4ae:	b580      	push	{r7, lr}
 800f4b0:	b08a      	sub	sp, #40	; 0x28
 800f4b2:	af02      	add	r7, sp, #8
 800f4b4:	60f8      	str	r0, [r7, #12]
 800f4b6:	60b9      	str	r1, [r7, #8]
 800f4b8:	603b      	str	r3, [r7, #0]
 800f4ba:	4613      	mov	r3, r2
 800f4bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f4c4:	2b20      	cmp	r3, #32
 800f4c6:	d17b      	bne.n	800f5c0 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800f4c8:	68bb      	ldr	r3, [r7, #8]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d002      	beq.n	800f4d4 <HAL_UART_Transmit+0x26>
 800f4ce:	88fb      	ldrh	r3, [r7, #6]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d101      	bne.n	800f4d8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f4d4:	2301      	movs	r3, #1
 800f4d6:	e074      	b.n	800f5c2 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	2200      	movs	r2, #0
 800f4dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	2221      	movs	r2, #33	; 0x21
 800f4e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f4e8:	f7f4 fa7a 	bl	80039e0 <HAL_GetTick>
 800f4ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	88fa      	ldrh	r2, [r7, #6]
 800f4f2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	88fa      	ldrh	r2, [r7, #6]
 800f4fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	689b      	ldr	r3, [r3, #8]
 800f502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f506:	d108      	bne.n	800f51a <HAL_UART_Transmit+0x6c>
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	691b      	ldr	r3, [r3, #16]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d104      	bne.n	800f51a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f510:	2300      	movs	r3, #0
 800f512:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f514:	68bb      	ldr	r3, [r7, #8]
 800f516:	61bb      	str	r3, [r7, #24]
 800f518:	e003      	b.n	800f522 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f51e:	2300      	movs	r3, #0
 800f520:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f522:	e030      	b.n	800f586 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f524:	683b      	ldr	r3, [r7, #0]
 800f526:	9300      	str	r3, [sp, #0]
 800f528:	697b      	ldr	r3, [r7, #20]
 800f52a:	2200      	movs	r2, #0
 800f52c:	2180      	movs	r1, #128	; 0x80
 800f52e:	68f8      	ldr	r0, [r7, #12]
 800f530:	f001 f804 	bl	801053c <UART_WaitOnFlagUntilTimeout>
 800f534:	4603      	mov	r3, r0
 800f536:	2b00      	cmp	r3, #0
 800f538:	d005      	beq.n	800f546 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	2220      	movs	r2, #32
 800f53e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800f542:	2303      	movs	r3, #3
 800f544:	e03d      	b.n	800f5c2 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800f546:	69fb      	ldr	r3, [r7, #28]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d10b      	bne.n	800f564 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f54c:	69bb      	ldr	r3, [r7, #24]
 800f54e:	881b      	ldrh	r3, [r3, #0]
 800f550:	461a      	mov	r2, r3
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f55a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f55c:	69bb      	ldr	r3, [r7, #24]
 800f55e:	3302      	adds	r3, #2
 800f560:	61bb      	str	r3, [r7, #24]
 800f562:	e007      	b.n	800f574 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f564:	69fb      	ldr	r3, [r7, #28]
 800f566:	781a      	ldrb	r2, [r3, #0]
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f56e:	69fb      	ldr	r3, [r7, #28]
 800f570:	3301      	adds	r3, #1
 800f572:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f57a:	b29b      	uxth	r3, r3
 800f57c:	3b01      	subs	r3, #1
 800f57e:	b29a      	uxth	r2, r3
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f58c:	b29b      	uxth	r3, r3
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d1c8      	bne.n	800f524 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	9300      	str	r3, [sp, #0]
 800f596:	697b      	ldr	r3, [r7, #20]
 800f598:	2200      	movs	r2, #0
 800f59a:	2140      	movs	r1, #64	; 0x40
 800f59c:	68f8      	ldr	r0, [r7, #12]
 800f59e:	f000 ffcd 	bl	801053c <UART_WaitOnFlagUntilTimeout>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d005      	beq.n	800f5b4 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	2220      	movs	r2, #32
 800f5ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800f5b0:	2303      	movs	r3, #3
 800f5b2:	e006      	b.n	800f5c2 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	2220      	movs	r2, #32
 800f5b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800f5bc:	2300      	movs	r3, #0
 800f5be:	e000      	b.n	800f5c2 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800f5c0:	2302      	movs	r3, #2
  }
}
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	3720      	adds	r7, #32
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bd80      	pop	{r7, pc}
	...

0800f5cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f5cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f5d0:	b092      	sub	sp, #72	; 0x48
 800f5d2:	af00      	add	r7, sp, #0
 800f5d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f5dc:	697b      	ldr	r3, [r7, #20]
 800f5de:	689a      	ldr	r2, [r3, #8]
 800f5e0:	697b      	ldr	r3, [r7, #20]
 800f5e2:	691b      	ldr	r3, [r3, #16]
 800f5e4:	431a      	orrs	r2, r3
 800f5e6:	697b      	ldr	r3, [r7, #20]
 800f5e8:	695b      	ldr	r3, [r3, #20]
 800f5ea:	431a      	orrs	r2, r3
 800f5ec:	697b      	ldr	r3, [r7, #20]
 800f5ee:	69db      	ldr	r3, [r3, #28]
 800f5f0:	4313      	orrs	r3, r2
 800f5f2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	681a      	ldr	r2, [r3, #0]
 800f5fa:	4bbe      	ldr	r3, [pc, #760]	; (800f8f4 <UART_SetConfig+0x328>)
 800f5fc:	4013      	ands	r3, r2
 800f5fe:	697a      	ldr	r2, [r7, #20]
 800f600:	6812      	ldr	r2, [r2, #0]
 800f602:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f604:	430b      	orrs	r3, r1
 800f606:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f608:	697b      	ldr	r3, [r7, #20]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	685b      	ldr	r3, [r3, #4]
 800f60e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f612:	697b      	ldr	r3, [r7, #20]
 800f614:	68da      	ldr	r2, [r3, #12]
 800f616:	697b      	ldr	r3, [r7, #20]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	430a      	orrs	r2, r1
 800f61c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f61e:	697b      	ldr	r3, [r7, #20]
 800f620:	699b      	ldr	r3, [r3, #24]
 800f622:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	4ab3      	ldr	r2, [pc, #716]	; (800f8f8 <UART_SetConfig+0x32c>)
 800f62a:	4293      	cmp	r3, r2
 800f62c:	d004      	beq.n	800f638 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	6a1b      	ldr	r3, [r3, #32]
 800f632:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f634:	4313      	orrs	r3, r2
 800f636:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	689a      	ldr	r2, [r3, #8]
 800f63e:	4baf      	ldr	r3, [pc, #700]	; (800f8fc <UART_SetConfig+0x330>)
 800f640:	4013      	ands	r3, r2
 800f642:	697a      	ldr	r2, [r7, #20]
 800f644:	6812      	ldr	r2, [r2, #0]
 800f646:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f648:	430b      	orrs	r3, r1
 800f64a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f64c:	697b      	ldr	r3, [r7, #20]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f652:	f023 010f 	bic.w	r1, r3, #15
 800f656:	697b      	ldr	r3, [r7, #20]
 800f658:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	430a      	orrs	r2, r1
 800f660:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f662:	697b      	ldr	r3, [r7, #20]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	4aa6      	ldr	r2, [pc, #664]	; (800f900 <UART_SetConfig+0x334>)
 800f668:	4293      	cmp	r3, r2
 800f66a:	d177      	bne.n	800f75c <UART_SetConfig+0x190>
 800f66c:	4ba5      	ldr	r3, [pc, #660]	; (800f904 <UART_SetConfig+0x338>)
 800f66e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f670:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f674:	2b28      	cmp	r3, #40	; 0x28
 800f676:	d86d      	bhi.n	800f754 <UART_SetConfig+0x188>
 800f678:	a201      	add	r2, pc, #4	; (adr r2, 800f680 <UART_SetConfig+0xb4>)
 800f67a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f67e:	bf00      	nop
 800f680:	0800f725 	.word	0x0800f725
 800f684:	0800f755 	.word	0x0800f755
 800f688:	0800f755 	.word	0x0800f755
 800f68c:	0800f755 	.word	0x0800f755
 800f690:	0800f755 	.word	0x0800f755
 800f694:	0800f755 	.word	0x0800f755
 800f698:	0800f755 	.word	0x0800f755
 800f69c:	0800f755 	.word	0x0800f755
 800f6a0:	0800f72d 	.word	0x0800f72d
 800f6a4:	0800f755 	.word	0x0800f755
 800f6a8:	0800f755 	.word	0x0800f755
 800f6ac:	0800f755 	.word	0x0800f755
 800f6b0:	0800f755 	.word	0x0800f755
 800f6b4:	0800f755 	.word	0x0800f755
 800f6b8:	0800f755 	.word	0x0800f755
 800f6bc:	0800f755 	.word	0x0800f755
 800f6c0:	0800f735 	.word	0x0800f735
 800f6c4:	0800f755 	.word	0x0800f755
 800f6c8:	0800f755 	.word	0x0800f755
 800f6cc:	0800f755 	.word	0x0800f755
 800f6d0:	0800f755 	.word	0x0800f755
 800f6d4:	0800f755 	.word	0x0800f755
 800f6d8:	0800f755 	.word	0x0800f755
 800f6dc:	0800f755 	.word	0x0800f755
 800f6e0:	0800f73d 	.word	0x0800f73d
 800f6e4:	0800f755 	.word	0x0800f755
 800f6e8:	0800f755 	.word	0x0800f755
 800f6ec:	0800f755 	.word	0x0800f755
 800f6f0:	0800f755 	.word	0x0800f755
 800f6f4:	0800f755 	.word	0x0800f755
 800f6f8:	0800f755 	.word	0x0800f755
 800f6fc:	0800f755 	.word	0x0800f755
 800f700:	0800f745 	.word	0x0800f745
 800f704:	0800f755 	.word	0x0800f755
 800f708:	0800f755 	.word	0x0800f755
 800f70c:	0800f755 	.word	0x0800f755
 800f710:	0800f755 	.word	0x0800f755
 800f714:	0800f755 	.word	0x0800f755
 800f718:	0800f755 	.word	0x0800f755
 800f71c:	0800f755 	.word	0x0800f755
 800f720:	0800f74d 	.word	0x0800f74d
 800f724:	2301      	movs	r3, #1
 800f726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f72a:	e326      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f72c:	2304      	movs	r3, #4
 800f72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f732:	e322      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f734:	2308      	movs	r3, #8
 800f736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f73a:	e31e      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f73c:	2310      	movs	r3, #16
 800f73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f742:	e31a      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f744:	2320      	movs	r3, #32
 800f746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f74a:	e316      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f74c:	2340      	movs	r3, #64	; 0x40
 800f74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f752:	e312      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f754:	2380      	movs	r3, #128	; 0x80
 800f756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f75a:	e30e      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f75c:	697b      	ldr	r3, [r7, #20]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	4a69      	ldr	r2, [pc, #420]	; (800f908 <UART_SetConfig+0x33c>)
 800f762:	4293      	cmp	r3, r2
 800f764:	d130      	bne.n	800f7c8 <UART_SetConfig+0x1fc>
 800f766:	4b67      	ldr	r3, [pc, #412]	; (800f904 <UART_SetConfig+0x338>)
 800f768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f76a:	f003 0307 	and.w	r3, r3, #7
 800f76e:	2b05      	cmp	r3, #5
 800f770:	d826      	bhi.n	800f7c0 <UART_SetConfig+0x1f4>
 800f772:	a201      	add	r2, pc, #4	; (adr r2, 800f778 <UART_SetConfig+0x1ac>)
 800f774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f778:	0800f791 	.word	0x0800f791
 800f77c:	0800f799 	.word	0x0800f799
 800f780:	0800f7a1 	.word	0x0800f7a1
 800f784:	0800f7a9 	.word	0x0800f7a9
 800f788:	0800f7b1 	.word	0x0800f7b1
 800f78c:	0800f7b9 	.word	0x0800f7b9
 800f790:	2300      	movs	r3, #0
 800f792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f796:	e2f0      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f798:	2304      	movs	r3, #4
 800f79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f79e:	e2ec      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f7a0:	2308      	movs	r3, #8
 800f7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7a6:	e2e8      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f7a8:	2310      	movs	r3, #16
 800f7aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7ae:	e2e4      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f7b0:	2320      	movs	r3, #32
 800f7b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7b6:	e2e0      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f7b8:	2340      	movs	r3, #64	; 0x40
 800f7ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7be:	e2dc      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f7c0:	2380      	movs	r3, #128	; 0x80
 800f7c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7c6:	e2d8      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f7c8:	697b      	ldr	r3, [r7, #20]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	4a4f      	ldr	r2, [pc, #316]	; (800f90c <UART_SetConfig+0x340>)
 800f7ce:	4293      	cmp	r3, r2
 800f7d0:	d130      	bne.n	800f834 <UART_SetConfig+0x268>
 800f7d2:	4b4c      	ldr	r3, [pc, #304]	; (800f904 <UART_SetConfig+0x338>)
 800f7d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7d6:	f003 0307 	and.w	r3, r3, #7
 800f7da:	2b05      	cmp	r3, #5
 800f7dc:	d826      	bhi.n	800f82c <UART_SetConfig+0x260>
 800f7de:	a201      	add	r2, pc, #4	; (adr r2, 800f7e4 <UART_SetConfig+0x218>)
 800f7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7e4:	0800f7fd 	.word	0x0800f7fd
 800f7e8:	0800f805 	.word	0x0800f805
 800f7ec:	0800f80d 	.word	0x0800f80d
 800f7f0:	0800f815 	.word	0x0800f815
 800f7f4:	0800f81d 	.word	0x0800f81d
 800f7f8:	0800f825 	.word	0x0800f825
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f802:	e2ba      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f804:	2304      	movs	r3, #4
 800f806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f80a:	e2b6      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f80c:	2308      	movs	r3, #8
 800f80e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f812:	e2b2      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f814:	2310      	movs	r3, #16
 800f816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f81a:	e2ae      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f81c:	2320      	movs	r3, #32
 800f81e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f822:	e2aa      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f824:	2340      	movs	r3, #64	; 0x40
 800f826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f82a:	e2a6      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f82c:	2380      	movs	r3, #128	; 0x80
 800f82e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f832:	e2a2      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f834:	697b      	ldr	r3, [r7, #20]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	4a35      	ldr	r2, [pc, #212]	; (800f910 <UART_SetConfig+0x344>)
 800f83a:	4293      	cmp	r3, r2
 800f83c:	d130      	bne.n	800f8a0 <UART_SetConfig+0x2d4>
 800f83e:	4b31      	ldr	r3, [pc, #196]	; (800f904 <UART_SetConfig+0x338>)
 800f840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f842:	f003 0307 	and.w	r3, r3, #7
 800f846:	2b05      	cmp	r3, #5
 800f848:	d826      	bhi.n	800f898 <UART_SetConfig+0x2cc>
 800f84a:	a201      	add	r2, pc, #4	; (adr r2, 800f850 <UART_SetConfig+0x284>)
 800f84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f850:	0800f869 	.word	0x0800f869
 800f854:	0800f871 	.word	0x0800f871
 800f858:	0800f879 	.word	0x0800f879
 800f85c:	0800f881 	.word	0x0800f881
 800f860:	0800f889 	.word	0x0800f889
 800f864:	0800f891 	.word	0x0800f891
 800f868:	2300      	movs	r3, #0
 800f86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f86e:	e284      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f870:	2304      	movs	r3, #4
 800f872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f876:	e280      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f878:	2308      	movs	r3, #8
 800f87a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f87e:	e27c      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f880:	2310      	movs	r3, #16
 800f882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f886:	e278      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f888:	2320      	movs	r3, #32
 800f88a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f88e:	e274      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f890:	2340      	movs	r3, #64	; 0x40
 800f892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f896:	e270      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f898:	2380      	movs	r3, #128	; 0x80
 800f89a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f89e:	e26c      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f8a0:	697b      	ldr	r3, [r7, #20]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	4a1b      	ldr	r2, [pc, #108]	; (800f914 <UART_SetConfig+0x348>)
 800f8a6:	4293      	cmp	r3, r2
 800f8a8:	d142      	bne.n	800f930 <UART_SetConfig+0x364>
 800f8aa:	4b16      	ldr	r3, [pc, #88]	; (800f904 <UART_SetConfig+0x338>)
 800f8ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8ae:	f003 0307 	and.w	r3, r3, #7
 800f8b2:	2b05      	cmp	r3, #5
 800f8b4:	d838      	bhi.n	800f928 <UART_SetConfig+0x35c>
 800f8b6:	a201      	add	r2, pc, #4	; (adr r2, 800f8bc <UART_SetConfig+0x2f0>)
 800f8b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8bc:	0800f8d5 	.word	0x0800f8d5
 800f8c0:	0800f8dd 	.word	0x0800f8dd
 800f8c4:	0800f8e5 	.word	0x0800f8e5
 800f8c8:	0800f8ed 	.word	0x0800f8ed
 800f8cc:	0800f919 	.word	0x0800f919
 800f8d0:	0800f921 	.word	0x0800f921
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8da:	e24e      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f8dc:	2304      	movs	r3, #4
 800f8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8e2:	e24a      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f8e4:	2308      	movs	r3, #8
 800f8e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8ea:	e246      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f8ec:	2310      	movs	r3, #16
 800f8ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8f2:	e242      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f8f4:	cfff69f3 	.word	0xcfff69f3
 800f8f8:	58000c00 	.word	0x58000c00
 800f8fc:	11fff4ff 	.word	0x11fff4ff
 800f900:	40011000 	.word	0x40011000
 800f904:	58024400 	.word	0x58024400
 800f908:	40004400 	.word	0x40004400
 800f90c:	40004800 	.word	0x40004800
 800f910:	40004c00 	.word	0x40004c00
 800f914:	40005000 	.word	0x40005000
 800f918:	2320      	movs	r3, #32
 800f91a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f91e:	e22c      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f920:	2340      	movs	r3, #64	; 0x40
 800f922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f926:	e228      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f928:	2380      	movs	r3, #128	; 0x80
 800f92a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f92e:	e224      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f930:	697b      	ldr	r3, [r7, #20]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	4ab1      	ldr	r2, [pc, #708]	; (800fbfc <UART_SetConfig+0x630>)
 800f936:	4293      	cmp	r3, r2
 800f938:	d176      	bne.n	800fa28 <UART_SetConfig+0x45c>
 800f93a:	4bb1      	ldr	r3, [pc, #708]	; (800fc00 <UART_SetConfig+0x634>)
 800f93c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f93e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f942:	2b28      	cmp	r3, #40	; 0x28
 800f944:	d86c      	bhi.n	800fa20 <UART_SetConfig+0x454>
 800f946:	a201      	add	r2, pc, #4	; (adr r2, 800f94c <UART_SetConfig+0x380>)
 800f948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f94c:	0800f9f1 	.word	0x0800f9f1
 800f950:	0800fa21 	.word	0x0800fa21
 800f954:	0800fa21 	.word	0x0800fa21
 800f958:	0800fa21 	.word	0x0800fa21
 800f95c:	0800fa21 	.word	0x0800fa21
 800f960:	0800fa21 	.word	0x0800fa21
 800f964:	0800fa21 	.word	0x0800fa21
 800f968:	0800fa21 	.word	0x0800fa21
 800f96c:	0800f9f9 	.word	0x0800f9f9
 800f970:	0800fa21 	.word	0x0800fa21
 800f974:	0800fa21 	.word	0x0800fa21
 800f978:	0800fa21 	.word	0x0800fa21
 800f97c:	0800fa21 	.word	0x0800fa21
 800f980:	0800fa21 	.word	0x0800fa21
 800f984:	0800fa21 	.word	0x0800fa21
 800f988:	0800fa21 	.word	0x0800fa21
 800f98c:	0800fa01 	.word	0x0800fa01
 800f990:	0800fa21 	.word	0x0800fa21
 800f994:	0800fa21 	.word	0x0800fa21
 800f998:	0800fa21 	.word	0x0800fa21
 800f99c:	0800fa21 	.word	0x0800fa21
 800f9a0:	0800fa21 	.word	0x0800fa21
 800f9a4:	0800fa21 	.word	0x0800fa21
 800f9a8:	0800fa21 	.word	0x0800fa21
 800f9ac:	0800fa09 	.word	0x0800fa09
 800f9b0:	0800fa21 	.word	0x0800fa21
 800f9b4:	0800fa21 	.word	0x0800fa21
 800f9b8:	0800fa21 	.word	0x0800fa21
 800f9bc:	0800fa21 	.word	0x0800fa21
 800f9c0:	0800fa21 	.word	0x0800fa21
 800f9c4:	0800fa21 	.word	0x0800fa21
 800f9c8:	0800fa21 	.word	0x0800fa21
 800f9cc:	0800fa11 	.word	0x0800fa11
 800f9d0:	0800fa21 	.word	0x0800fa21
 800f9d4:	0800fa21 	.word	0x0800fa21
 800f9d8:	0800fa21 	.word	0x0800fa21
 800f9dc:	0800fa21 	.word	0x0800fa21
 800f9e0:	0800fa21 	.word	0x0800fa21
 800f9e4:	0800fa21 	.word	0x0800fa21
 800f9e8:	0800fa21 	.word	0x0800fa21
 800f9ec:	0800fa19 	.word	0x0800fa19
 800f9f0:	2301      	movs	r3, #1
 800f9f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9f6:	e1c0      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800f9f8:	2304      	movs	r3, #4
 800f9fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9fe:	e1bc      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fa00:	2308      	movs	r3, #8
 800fa02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa06:	e1b8      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fa08:	2310      	movs	r3, #16
 800fa0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa0e:	e1b4      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fa10:	2320      	movs	r3, #32
 800fa12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa16:	e1b0      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fa18:	2340      	movs	r3, #64	; 0x40
 800fa1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa1e:	e1ac      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fa20:	2380      	movs	r3, #128	; 0x80
 800fa22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa26:	e1a8      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fa28:	697b      	ldr	r3, [r7, #20]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	4a75      	ldr	r2, [pc, #468]	; (800fc04 <UART_SetConfig+0x638>)
 800fa2e:	4293      	cmp	r3, r2
 800fa30:	d130      	bne.n	800fa94 <UART_SetConfig+0x4c8>
 800fa32:	4b73      	ldr	r3, [pc, #460]	; (800fc00 <UART_SetConfig+0x634>)
 800fa34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa36:	f003 0307 	and.w	r3, r3, #7
 800fa3a:	2b05      	cmp	r3, #5
 800fa3c:	d826      	bhi.n	800fa8c <UART_SetConfig+0x4c0>
 800fa3e:	a201      	add	r2, pc, #4	; (adr r2, 800fa44 <UART_SetConfig+0x478>)
 800fa40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa44:	0800fa5d 	.word	0x0800fa5d
 800fa48:	0800fa65 	.word	0x0800fa65
 800fa4c:	0800fa6d 	.word	0x0800fa6d
 800fa50:	0800fa75 	.word	0x0800fa75
 800fa54:	0800fa7d 	.word	0x0800fa7d
 800fa58:	0800fa85 	.word	0x0800fa85
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa62:	e18a      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fa64:	2304      	movs	r3, #4
 800fa66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa6a:	e186      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fa6c:	2308      	movs	r3, #8
 800fa6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa72:	e182      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fa74:	2310      	movs	r3, #16
 800fa76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa7a:	e17e      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fa7c:	2320      	movs	r3, #32
 800fa7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa82:	e17a      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fa84:	2340      	movs	r3, #64	; 0x40
 800fa86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa8a:	e176      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fa8c:	2380      	movs	r3, #128	; 0x80
 800fa8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa92:	e172      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fa94:	697b      	ldr	r3, [r7, #20]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	4a5b      	ldr	r2, [pc, #364]	; (800fc08 <UART_SetConfig+0x63c>)
 800fa9a:	4293      	cmp	r3, r2
 800fa9c:	d130      	bne.n	800fb00 <UART_SetConfig+0x534>
 800fa9e:	4b58      	ldr	r3, [pc, #352]	; (800fc00 <UART_SetConfig+0x634>)
 800faa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800faa2:	f003 0307 	and.w	r3, r3, #7
 800faa6:	2b05      	cmp	r3, #5
 800faa8:	d826      	bhi.n	800faf8 <UART_SetConfig+0x52c>
 800faaa:	a201      	add	r2, pc, #4	; (adr r2, 800fab0 <UART_SetConfig+0x4e4>)
 800faac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fab0:	0800fac9 	.word	0x0800fac9
 800fab4:	0800fad1 	.word	0x0800fad1
 800fab8:	0800fad9 	.word	0x0800fad9
 800fabc:	0800fae1 	.word	0x0800fae1
 800fac0:	0800fae9 	.word	0x0800fae9
 800fac4:	0800faf1 	.word	0x0800faf1
 800fac8:	2300      	movs	r3, #0
 800faca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800face:	e154      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fad0:	2304      	movs	r3, #4
 800fad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fad6:	e150      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fad8:	2308      	movs	r3, #8
 800fada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fade:	e14c      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fae0:	2310      	movs	r3, #16
 800fae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fae6:	e148      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fae8:	2320      	movs	r3, #32
 800faea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faee:	e144      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800faf0:	2340      	movs	r3, #64	; 0x40
 800faf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faf6:	e140      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800faf8:	2380      	movs	r3, #128	; 0x80
 800fafa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fafe:	e13c      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fb00:	697b      	ldr	r3, [r7, #20]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	4a41      	ldr	r2, [pc, #260]	; (800fc0c <UART_SetConfig+0x640>)
 800fb06:	4293      	cmp	r3, r2
 800fb08:	f040 8082 	bne.w	800fc10 <UART_SetConfig+0x644>
 800fb0c:	4b3c      	ldr	r3, [pc, #240]	; (800fc00 <UART_SetConfig+0x634>)
 800fb0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fb14:	2b28      	cmp	r3, #40	; 0x28
 800fb16:	d86d      	bhi.n	800fbf4 <UART_SetConfig+0x628>
 800fb18:	a201      	add	r2, pc, #4	; (adr r2, 800fb20 <UART_SetConfig+0x554>)
 800fb1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb1e:	bf00      	nop
 800fb20:	0800fbc5 	.word	0x0800fbc5
 800fb24:	0800fbf5 	.word	0x0800fbf5
 800fb28:	0800fbf5 	.word	0x0800fbf5
 800fb2c:	0800fbf5 	.word	0x0800fbf5
 800fb30:	0800fbf5 	.word	0x0800fbf5
 800fb34:	0800fbf5 	.word	0x0800fbf5
 800fb38:	0800fbf5 	.word	0x0800fbf5
 800fb3c:	0800fbf5 	.word	0x0800fbf5
 800fb40:	0800fbcd 	.word	0x0800fbcd
 800fb44:	0800fbf5 	.word	0x0800fbf5
 800fb48:	0800fbf5 	.word	0x0800fbf5
 800fb4c:	0800fbf5 	.word	0x0800fbf5
 800fb50:	0800fbf5 	.word	0x0800fbf5
 800fb54:	0800fbf5 	.word	0x0800fbf5
 800fb58:	0800fbf5 	.word	0x0800fbf5
 800fb5c:	0800fbf5 	.word	0x0800fbf5
 800fb60:	0800fbd5 	.word	0x0800fbd5
 800fb64:	0800fbf5 	.word	0x0800fbf5
 800fb68:	0800fbf5 	.word	0x0800fbf5
 800fb6c:	0800fbf5 	.word	0x0800fbf5
 800fb70:	0800fbf5 	.word	0x0800fbf5
 800fb74:	0800fbf5 	.word	0x0800fbf5
 800fb78:	0800fbf5 	.word	0x0800fbf5
 800fb7c:	0800fbf5 	.word	0x0800fbf5
 800fb80:	0800fbdd 	.word	0x0800fbdd
 800fb84:	0800fbf5 	.word	0x0800fbf5
 800fb88:	0800fbf5 	.word	0x0800fbf5
 800fb8c:	0800fbf5 	.word	0x0800fbf5
 800fb90:	0800fbf5 	.word	0x0800fbf5
 800fb94:	0800fbf5 	.word	0x0800fbf5
 800fb98:	0800fbf5 	.word	0x0800fbf5
 800fb9c:	0800fbf5 	.word	0x0800fbf5
 800fba0:	0800fbe5 	.word	0x0800fbe5
 800fba4:	0800fbf5 	.word	0x0800fbf5
 800fba8:	0800fbf5 	.word	0x0800fbf5
 800fbac:	0800fbf5 	.word	0x0800fbf5
 800fbb0:	0800fbf5 	.word	0x0800fbf5
 800fbb4:	0800fbf5 	.word	0x0800fbf5
 800fbb8:	0800fbf5 	.word	0x0800fbf5
 800fbbc:	0800fbf5 	.word	0x0800fbf5
 800fbc0:	0800fbed 	.word	0x0800fbed
 800fbc4:	2301      	movs	r3, #1
 800fbc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbca:	e0d6      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fbcc:	2304      	movs	r3, #4
 800fbce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbd2:	e0d2      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fbd4:	2308      	movs	r3, #8
 800fbd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbda:	e0ce      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fbdc:	2310      	movs	r3, #16
 800fbde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbe2:	e0ca      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fbe4:	2320      	movs	r3, #32
 800fbe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbea:	e0c6      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fbec:	2340      	movs	r3, #64	; 0x40
 800fbee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbf2:	e0c2      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fbf4:	2380      	movs	r3, #128	; 0x80
 800fbf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbfa:	e0be      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fbfc:	40011400 	.word	0x40011400
 800fc00:	58024400 	.word	0x58024400
 800fc04:	40007800 	.word	0x40007800
 800fc08:	40007c00 	.word	0x40007c00
 800fc0c:	40011800 	.word	0x40011800
 800fc10:	697b      	ldr	r3, [r7, #20]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	4aad      	ldr	r2, [pc, #692]	; (800fecc <UART_SetConfig+0x900>)
 800fc16:	4293      	cmp	r3, r2
 800fc18:	d176      	bne.n	800fd08 <UART_SetConfig+0x73c>
 800fc1a:	4bad      	ldr	r3, [pc, #692]	; (800fed0 <UART_SetConfig+0x904>)
 800fc1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fc22:	2b28      	cmp	r3, #40	; 0x28
 800fc24:	d86c      	bhi.n	800fd00 <UART_SetConfig+0x734>
 800fc26:	a201      	add	r2, pc, #4	; (adr r2, 800fc2c <UART_SetConfig+0x660>)
 800fc28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc2c:	0800fcd1 	.word	0x0800fcd1
 800fc30:	0800fd01 	.word	0x0800fd01
 800fc34:	0800fd01 	.word	0x0800fd01
 800fc38:	0800fd01 	.word	0x0800fd01
 800fc3c:	0800fd01 	.word	0x0800fd01
 800fc40:	0800fd01 	.word	0x0800fd01
 800fc44:	0800fd01 	.word	0x0800fd01
 800fc48:	0800fd01 	.word	0x0800fd01
 800fc4c:	0800fcd9 	.word	0x0800fcd9
 800fc50:	0800fd01 	.word	0x0800fd01
 800fc54:	0800fd01 	.word	0x0800fd01
 800fc58:	0800fd01 	.word	0x0800fd01
 800fc5c:	0800fd01 	.word	0x0800fd01
 800fc60:	0800fd01 	.word	0x0800fd01
 800fc64:	0800fd01 	.word	0x0800fd01
 800fc68:	0800fd01 	.word	0x0800fd01
 800fc6c:	0800fce1 	.word	0x0800fce1
 800fc70:	0800fd01 	.word	0x0800fd01
 800fc74:	0800fd01 	.word	0x0800fd01
 800fc78:	0800fd01 	.word	0x0800fd01
 800fc7c:	0800fd01 	.word	0x0800fd01
 800fc80:	0800fd01 	.word	0x0800fd01
 800fc84:	0800fd01 	.word	0x0800fd01
 800fc88:	0800fd01 	.word	0x0800fd01
 800fc8c:	0800fce9 	.word	0x0800fce9
 800fc90:	0800fd01 	.word	0x0800fd01
 800fc94:	0800fd01 	.word	0x0800fd01
 800fc98:	0800fd01 	.word	0x0800fd01
 800fc9c:	0800fd01 	.word	0x0800fd01
 800fca0:	0800fd01 	.word	0x0800fd01
 800fca4:	0800fd01 	.word	0x0800fd01
 800fca8:	0800fd01 	.word	0x0800fd01
 800fcac:	0800fcf1 	.word	0x0800fcf1
 800fcb0:	0800fd01 	.word	0x0800fd01
 800fcb4:	0800fd01 	.word	0x0800fd01
 800fcb8:	0800fd01 	.word	0x0800fd01
 800fcbc:	0800fd01 	.word	0x0800fd01
 800fcc0:	0800fd01 	.word	0x0800fd01
 800fcc4:	0800fd01 	.word	0x0800fd01
 800fcc8:	0800fd01 	.word	0x0800fd01
 800fccc:	0800fcf9 	.word	0x0800fcf9
 800fcd0:	2301      	movs	r3, #1
 800fcd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcd6:	e050      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fcd8:	2304      	movs	r3, #4
 800fcda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcde:	e04c      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fce0:	2308      	movs	r3, #8
 800fce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fce6:	e048      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fce8:	2310      	movs	r3, #16
 800fcea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcee:	e044      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fcf0:	2320      	movs	r3, #32
 800fcf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcf6:	e040      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fcf8:	2340      	movs	r3, #64	; 0x40
 800fcfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcfe:	e03c      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fd00:	2380      	movs	r3, #128	; 0x80
 800fd02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd06:	e038      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fd08:	697b      	ldr	r3, [r7, #20]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	4a71      	ldr	r2, [pc, #452]	; (800fed4 <UART_SetConfig+0x908>)
 800fd0e:	4293      	cmp	r3, r2
 800fd10:	d130      	bne.n	800fd74 <UART_SetConfig+0x7a8>
 800fd12:	4b6f      	ldr	r3, [pc, #444]	; (800fed0 <UART_SetConfig+0x904>)
 800fd14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd16:	f003 0307 	and.w	r3, r3, #7
 800fd1a:	2b05      	cmp	r3, #5
 800fd1c:	d826      	bhi.n	800fd6c <UART_SetConfig+0x7a0>
 800fd1e:	a201      	add	r2, pc, #4	; (adr r2, 800fd24 <UART_SetConfig+0x758>)
 800fd20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd24:	0800fd3d 	.word	0x0800fd3d
 800fd28:	0800fd45 	.word	0x0800fd45
 800fd2c:	0800fd4d 	.word	0x0800fd4d
 800fd30:	0800fd55 	.word	0x0800fd55
 800fd34:	0800fd5d 	.word	0x0800fd5d
 800fd38:	0800fd65 	.word	0x0800fd65
 800fd3c:	2302      	movs	r3, #2
 800fd3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd42:	e01a      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fd44:	2304      	movs	r3, #4
 800fd46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd4a:	e016      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fd4c:	2308      	movs	r3, #8
 800fd4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd52:	e012      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fd54:	2310      	movs	r3, #16
 800fd56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd5a:	e00e      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fd5c:	2320      	movs	r3, #32
 800fd5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd62:	e00a      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fd64:	2340      	movs	r3, #64	; 0x40
 800fd66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd6a:	e006      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fd6c:	2380      	movs	r3, #128	; 0x80
 800fd6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd72:	e002      	b.n	800fd7a <UART_SetConfig+0x7ae>
 800fd74:	2380      	movs	r3, #128	; 0x80
 800fd76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fd7a:	697b      	ldr	r3, [r7, #20]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	4a55      	ldr	r2, [pc, #340]	; (800fed4 <UART_SetConfig+0x908>)
 800fd80:	4293      	cmp	r3, r2
 800fd82:	f040 80f8 	bne.w	800ff76 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fd86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fd8a:	2b20      	cmp	r3, #32
 800fd8c:	dc46      	bgt.n	800fe1c <UART_SetConfig+0x850>
 800fd8e:	2b02      	cmp	r3, #2
 800fd90:	db75      	blt.n	800fe7e <UART_SetConfig+0x8b2>
 800fd92:	3b02      	subs	r3, #2
 800fd94:	2b1e      	cmp	r3, #30
 800fd96:	d872      	bhi.n	800fe7e <UART_SetConfig+0x8b2>
 800fd98:	a201      	add	r2, pc, #4	; (adr r2, 800fda0 <UART_SetConfig+0x7d4>)
 800fd9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd9e:	bf00      	nop
 800fda0:	0800fe23 	.word	0x0800fe23
 800fda4:	0800fe7f 	.word	0x0800fe7f
 800fda8:	0800fe2b 	.word	0x0800fe2b
 800fdac:	0800fe7f 	.word	0x0800fe7f
 800fdb0:	0800fe7f 	.word	0x0800fe7f
 800fdb4:	0800fe7f 	.word	0x0800fe7f
 800fdb8:	0800fe3b 	.word	0x0800fe3b
 800fdbc:	0800fe7f 	.word	0x0800fe7f
 800fdc0:	0800fe7f 	.word	0x0800fe7f
 800fdc4:	0800fe7f 	.word	0x0800fe7f
 800fdc8:	0800fe7f 	.word	0x0800fe7f
 800fdcc:	0800fe7f 	.word	0x0800fe7f
 800fdd0:	0800fe7f 	.word	0x0800fe7f
 800fdd4:	0800fe7f 	.word	0x0800fe7f
 800fdd8:	0800fe4b 	.word	0x0800fe4b
 800fddc:	0800fe7f 	.word	0x0800fe7f
 800fde0:	0800fe7f 	.word	0x0800fe7f
 800fde4:	0800fe7f 	.word	0x0800fe7f
 800fde8:	0800fe7f 	.word	0x0800fe7f
 800fdec:	0800fe7f 	.word	0x0800fe7f
 800fdf0:	0800fe7f 	.word	0x0800fe7f
 800fdf4:	0800fe7f 	.word	0x0800fe7f
 800fdf8:	0800fe7f 	.word	0x0800fe7f
 800fdfc:	0800fe7f 	.word	0x0800fe7f
 800fe00:	0800fe7f 	.word	0x0800fe7f
 800fe04:	0800fe7f 	.word	0x0800fe7f
 800fe08:	0800fe7f 	.word	0x0800fe7f
 800fe0c:	0800fe7f 	.word	0x0800fe7f
 800fe10:	0800fe7f 	.word	0x0800fe7f
 800fe14:	0800fe7f 	.word	0x0800fe7f
 800fe18:	0800fe71 	.word	0x0800fe71
 800fe1c:	2b40      	cmp	r3, #64	; 0x40
 800fe1e:	d02a      	beq.n	800fe76 <UART_SetConfig+0x8aa>
 800fe20:	e02d      	b.n	800fe7e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fe22:	f7fc f971 	bl	800c108 <HAL_RCCEx_GetD3PCLK1Freq>
 800fe26:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fe28:	e02f      	b.n	800fe8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fe2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe2e:	4618      	mov	r0, r3
 800fe30:	f7fc f980 	bl	800c134 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fe34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe38:	e027      	b.n	800fe8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fe3a:	f107 0318 	add.w	r3, r7, #24
 800fe3e:	4618      	mov	r0, r3
 800fe40:	f7fc facc 	bl	800c3dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fe44:	69fb      	ldr	r3, [r7, #28]
 800fe46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe48:	e01f      	b.n	800fe8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fe4a:	4b21      	ldr	r3, [pc, #132]	; (800fed0 <UART_SetConfig+0x904>)
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	f003 0320 	and.w	r3, r3, #32
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d009      	beq.n	800fe6a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fe56:	4b1e      	ldr	r3, [pc, #120]	; (800fed0 <UART_SetConfig+0x904>)
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	08db      	lsrs	r3, r3, #3
 800fe5c:	f003 0303 	and.w	r3, r3, #3
 800fe60:	4a1d      	ldr	r2, [pc, #116]	; (800fed8 <UART_SetConfig+0x90c>)
 800fe62:	fa22 f303 	lsr.w	r3, r2, r3
 800fe66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fe68:	e00f      	b.n	800fe8a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fe6a:	4b1b      	ldr	r3, [pc, #108]	; (800fed8 <UART_SetConfig+0x90c>)
 800fe6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe6e:	e00c      	b.n	800fe8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fe70:	4b1a      	ldr	r3, [pc, #104]	; (800fedc <UART_SetConfig+0x910>)
 800fe72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe74:	e009      	b.n	800fe8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fe76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fe7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe7c:	e005      	b.n	800fe8a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fe7e:	2300      	movs	r3, #0
 800fe80:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fe82:	2301      	movs	r3, #1
 800fe84:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fe88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fe8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	f000 81ee 	beq.w	801026e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fe92:	697b      	ldr	r3, [r7, #20]
 800fe94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe96:	4a12      	ldr	r2, [pc, #72]	; (800fee0 <UART_SetConfig+0x914>)
 800fe98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fe9c:	461a      	mov	r2, r3
 800fe9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fea0:	fbb3 f3f2 	udiv	r3, r3, r2
 800fea4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fea6:	697b      	ldr	r3, [r7, #20]
 800fea8:	685a      	ldr	r2, [r3, #4]
 800feaa:	4613      	mov	r3, r2
 800feac:	005b      	lsls	r3, r3, #1
 800feae:	4413      	add	r3, r2
 800feb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800feb2:	429a      	cmp	r2, r3
 800feb4:	d305      	bcc.n	800fec2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800feb6:	697b      	ldr	r3, [r7, #20]
 800feb8:	685b      	ldr	r3, [r3, #4]
 800feba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800febc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800febe:	429a      	cmp	r2, r3
 800fec0:	d910      	bls.n	800fee4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800fec2:	2301      	movs	r3, #1
 800fec4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fec8:	e1d1      	b.n	801026e <UART_SetConfig+0xca2>
 800feca:	bf00      	nop
 800fecc:	40011c00 	.word	0x40011c00
 800fed0:	58024400 	.word	0x58024400
 800fed4:	58000c00 	.word	0x58000c00
 800fed8:	03d09000 	.word	0x03d09000
 800fedc:	003d0900 	.word	0x003d0900
 800fee0:	080156ec 	.word	0x080156ec
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fee6:	2200      	movs	r2, #0
 800fee8:	60bb      	str	r3, [r7, #8]
 800feea:	60fa      	str	r2, [r7, #12]
 800feec:	697b      	ldr	r3, [r7, #20]
 800feee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fef0:	4ac0      	ldr	r2, [pc, #768]	; (80101f4 <UART_SetConfig+0xc28>)
 800fef2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fef6:	b29b      	uxth	r3, r3
 800fef8:	2200      	movs	r2, #0
 800fefa:	603b      	str	r3, [r7, #0]
 800fefc:	607a      	str	r2, [r7, #4]
 800fefe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ff06:	f7f0 fc17 	bl	8000738 <__aeabi_uldivmod>
 800ff0a:	4602      	mov	r2, r0
 800ff0c:	460b      	mov	r3, r1
 800ff0e:	4610      	mov	r0, r2
 800ff10:	4619      	mov	r1, r3
 800ff12:	f04f 0200 	mov.w	r2, #0
 800ff16:	f04f 0300 	mov.w	r3, #0
 800ff1a:	020b      	lsls	r3, r1, #8
 800ff1c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ff20:	0202      	lsls	r2, r0, #8
 800ff22:	6979      	ldr	r1, [r7, #20]
 800ff24:	6849      	ldr	r1, [r1, #4]
 800ff26:	0849      	lsrs	r1, r1, #1
 800ff28:	2000      	movs	r0, #0
 800ff2a:	460c      	mov	r4, r1
 800ff2c:	4605      	mov	r5, r0
 800ff2e:	eb12 0804 	adds.w	r8, r2, r4
 800ff32:	eb43 0905 	adc.w	r9, r3, r5
 800ff36:	697b      	ldr	r3, [r7, #20]
 800ff38:	685b      	ldr	r3, [r3, #4]
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	469a      	mov	sl, r3
 800ff3e:	4693      	mov	fp, r2
 800ff40:	4652      	mov	r2, sl
 800ff42:	465b      	mov	r3, fp
 800ff44:	4640      	mov	r0, r8
 800ff46:	4649      	mov	r1, r9
 800ff48:	f7f0 fbf6 	bl	8000738 <__aeabi_uldivmod>
 800ff4c:	4602      	mov	r2, r0
 800ff4e:	460b      	mov	r3, r1
 800ff50:	4613      	mov	r3, r2
 800ff52:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ff54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ff5a:	d308      	bcc.n	800ff6e <UART_SetConfig+0x9a2>
 800ff5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ff62:	d204      	bcs.n	800ff6e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800ff64:	697b      	ldr	r3, [r7, #20]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff6a:	60da      	str	r2, [r3, #12]
 800ff6c:	e17f      	b.n	801026e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800ff6e:	2301      	movs	r3, #1
 800ff70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ff74:	e17b      	b.n	801026e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ff76:	697b      	ldr	r3, [r7, #20]
 800ff78:	69db      	ldr	r3, [r3, #28]
 800ff7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ff7e:	f040 80bd 	bne.w	80100fc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800ff82:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ff86:	2b20      	cmp	r3, #32
 800ff88:	dc48      	bgt.n	801001c <UART_SetConfig+0xa50>
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	db7b      	blt.n	8010086 <UART_SetConfig+0xaba>
 800ff8e:	2b20      	cmp	r3, #32
 800ff90:	d879      	bhi.n	8010086 <UART_SetConfig+0xaba>
 800ff92:	a201      	add	r2, pc, #4	; (adr r2, 800ff98 <UART_SetConfig+0x9cc>)
 800ff94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff98:	08010023 	.word	0x08010023
 800ff9c:	0801002b 	.word	0x0801002b
 800ffa0:	08010087 	.word	0x08010087
 800ffa4:	08010087 	.word	0x08010087
 800ffa8:	08010033 	.word	0x08010033
 800ffac:	08010087 	.word	0x08010087
 800ffb0:	08010087 	.word	0x08010087
 800ffb4:	08010087 	.word	0x08010087
 800ffb8:	08010043 	.word	0x08010043
 800ffbc:	08010087 	.word	0x08010087
 800ffc0:	08010087 	.word	0x08010087
 800ffc4:	08010087 	.word	0x08010087
 800ffc8:	08010087 	.word	0x08010087
 800ffcc:	08010087 	.word	0x08010087
 800ffd0:	08010087 	.word	0x08010087
 800ffd4:	08010087 	.word	0x08010087
 800ffd8:	08010053 	.word	0x08010053
 800ffdc:	08010087 	.word	0x08010087
 800ffe0:	08010087 	.word	0x08010087
 800ffe4:	08010087 	.word	0x08010087
 800ffe8:	08010087 	.word	0x08010087
 800ffec:	08010087 	.word	0x08010087
 800fff0:	08010087 	.word	0x08010087
 800fff4:	08010087 	.word	0x08010087
 800fff8:	08010087 	.word	0x08010087
 800fffc:	08010087 	.word	0x08010087
 8010000:	08010087 	.word	0x08010087
 8010004:	08010087 	.word	0x08010087
 8010008:	08010087 	.word	0x08010087
 801000c:	08010087 	.word	0x08010087
 8010010:	08010087 	.word	0x08010087
 8010014:	08010087 	.word	0x08010087
 8010018:	08010079 	.word	0x08010079
 801001c:	2b40      	cmp	r3, #64	; 0x40
 801001e:	d02e      	beq.n	801007e <UART_SetConfig+0xab2>
 8010020:	e031      	b.n	8010086 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010022:	f7fa f9d3 	bl	800a3cc <HAL_RCC_GetPCLK1Freq>
 8010026:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010028:	e033      	b.n	8010092 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801002a:	f7fa f9e5 	bl	800a3f8 <HAL_RCC_GetPCLK2Freq>
 801002e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010030:	e02f      	b.n	8010092 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010036:	4618      	mov	r0, r3
 8010038:	f7fc f87c 	bl	800c134 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801003c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801003e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010040:	e027      	b.n	8010092 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010042:	f107 0318 	add.w	r3, r7, #24
 8010046:	4618      	mov	r0, r3
 8010048:	f7fc f9c8 	bl	800c3dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801004c:	69fb      	ldr	r3, [r7, #28]
 801004e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010050:	e01f      	b.n	8010092 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010052:	4b69      	ldr	r3, [pc, #420]	; (80101f8 <UART_SetConfig+0xc2c>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	f003 0320 	and.w	r3, r3, #32
 801005a:	2b00      	cmp	r3, #0
 801005c:	d009      	beq.n	8010072 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801005e:	4b66      	ldr	r3, [pc, #408]	; (80101f8 <UART_SetConfig+0xc2c>)
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	08db      	lsrs	r3, r3, #3
 8010064:	f003 0303 	and.w	r3, r3, #3
 8010068:	4a64      	ldr	r2, [pc, #400]	; (80101fc <UART_SetConfig+0xc30>)
 801006a:	fa22 f303 	lsr.w	r3, r2, r3
 801006e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010070:	e00f      	b.n	8010092 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8010072:	4b62      	ldr	r3, [pc, #392]	; (80101fc <UART_SetConfig+0xc30>)
 8010074:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010076:	e00c      	b.n	8010092 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010078:	4b61      	ldr	r3, [pc, #388]	; (8010200 <UART_SetConfig+0xc34>)
 801007a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801007c:	e009      	b.n	8010092 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801007e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010082:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010084:	e005      	b.n	8010092 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8010086:	2300      	movs	r3, #0
 8010088:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801008a:	2301      	movs	r3, #1
 801008c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010090:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010094:	2b00      	cmp	r3, #0
 8010096:	f000 80ea 	beq.w	801026e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801009a:	697b      	ldr	r3, [r7, #20]
 801009c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801009e:	4a55      	ldr	r2, [pc, #340]	; (80101f4 <UART_SetConfig+0xc28>)
 80100a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80100a4:	461a      	mov	r2, r3
 80100a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80100ac:	005a      	lsls	r2, r3, #1
 80100ae:	697b      	ldr	r3, [r7, #20]
 80100b0:	685b      	ldr	r3, [r3, #4]
 80100b2:	085b      	lsrs	r3, r3, #1
 80100b4:	441a      	add	r2, r3
 80100b6:	697b      	ldr	r3, [r7, #20]
 80100b8:	685b      	ldr	r3, [r3, #4]
 80100ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80100be:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80100c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c2:	2b0f      	cmp	r3, #15
 80100c4:	d916      	bls.n	80100f4 <UART_SetConfig+0xb28>
 80100c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80100cc:	d212      	bcs.n	80100f4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80100ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100d0:	b29b      	uxth	r3, r3
 80100d2:	f023 030f 	bic.w	r3, r3, #15
 80100d6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80100d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100da:	085b      	lsrs	r3, r3, #1
 80100dc:	b29b      	uxth	r3, r3
 80100de:	f003 0307 	and.w	r3, r3, #7
 80100e2:	b29a      	uxth	r2, r3
 80100e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80100e6:	4313      	orrs	r3, r2
 80100e8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80100ea:	697b      	ldr	r3, [r7, #20]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80100f0:	60da      	str	r2, [r3, #12]
 80100f2:	e0bc      	b.n	801026e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80100f4:	2301      	movs	r3, #1
 80100f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80100fa:	e0b8      	b.n	801026e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80100fc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010100:	2b20      	cmp	r3, #32
 8010102:	dc4b      	bgt.n	801019c <UART_SetConfig+0xbd0>
 8010104:	2b00      	cmp	r3, #0
 8010106:	f2c0 8087 	blt.w	8010218 <UART_SetConfig+0xc4c>
 801010a:	2b20      	cmp	r3, #32
 801010c:	f200 8084 	bhi.w	8010218 <UART_SetConfig+0xc4c>
 8010110:	a201      	add	r2, pc, #4	; (adr r2, 8010118 <UART_SetConfig+0xb4c>)
 8010112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010116:	bf00      	nop
 8010118:	080101a3 	.word	0x080101a3
 801011c:	080101ab 	.word	0x080101ab
 8010120:	08010219 	.word	0x08010219
 8010124:	08010219 	.word	0x08010219
 8010128:	080101b3 	.word	0x080101b3
 801012c:	08010219 	.word	0x08010219
 8010130:	08010219 	.word	0x08010219
 8010134:	08010219 	.word	0x08010219
 8010138:	080101c3 	.word	0x080101c3
 801013c:	08010219 	.word	0x08010219
 8010140:	08010219 	.word	0x08010219
 8010144:	08010219 	.word	0x08010219
 8010148:	08010219 	.word	0x08010219
 801014c:	08010219 	.word	0x08010219
 8010150:	08010219 	.word	0x08010219
 8010154:	08010219 	.word	0x08010219
 8010158:	080101d3 	.word	0x080101d3
 801015c:	08010219 	.word	0x08010219
 8010160:	08010219 	.word	0x08010219
 8010164:	08010219 	.word	0x08010219
 8010168:	08010219 	.word	0x08010219
 801016c:	08010219 	.word	0x08010219
 8010170:	08010219 	.word	0x08010219
 8010174:	08010219 	.word	0x08010219
 8010178:	08010219 	.word	0x08010219
 801017c:	08010219 	.word	0x08010219
 8010180:	08010219 	.word	0x08010219
 8010184:	08010219 	.word	0x08010219
 8010188:	08010219 	.word	0x08010219
 801018c:	08010219 	.word	0x08010219
 8010190:	08010219 	.word	0x08010219
 8010194:	08010219 	.word	0x08010219
 8010198:	0801020b 	.word	0x0801020b
 801019c:	2b40      	cmp	r3, #64	; 0x40
 801019e:	d037      	beq.n	8010210 <UART_SetConfig+0xc44>
 80101a0:	e03a      	b.n	8010218 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80101a2:	f7fa f913 	bl	800a3cc <HAL_RCC_GetPCLK1Freq>
 80101a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80101a8:	e03c      	b.n	8010224 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80101aa:	f7fa f925 	bl	800a3f8 <HAL_RCC_GetPCLK2Freq>
 80101ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80101b0:	e038      	b.n	8010224 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80101b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80101b6:	4618      	mov	r0, r3
 80101b8:	f7fb ffbc 	bl	800c134 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80101bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80101c0:	e030      	b.n	8010224 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80101c2:	f107 0318 	add.w	r3, r7, #24
 80101c6:	4618      	mov	r0, r3
 80101c8:	f7fc f908 	bl	800c3dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80101cc:	69fb      	ldr	r3, [r7, #28]
 80101ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80101d0:	e028      	b.n	8010224 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80101d2:	4b09      	ldr	r3, [pc, #36]	; (80101f8 <UART_SetConfig+0xc2c>)
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	f003 0320 	and.w	r3, r3, #32
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d012      	beq.n	8010204 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80101de:	4b06      	ldr	r3, [pc, #24]	; (80101f8 <UART_SetConfig+0xc2c>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	08db      	lsrs	r3, r3, #3
 80101e4:	f003 0303 	and.w	r3, r3, #3
 80101e8:	4a04      	ldr	r2, [pc, #16]	; (80101fc <UART_SetConfig+0xc30>)
 80101ea:	fa22 f303 	lsr.w	r3, r2, r3
 80101ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80101f0:	e018      	b.n	8010224 <UART_SetConfig+0xc58>
 80101f2:	bf00      	nop
 80101f4:	080156ec 	.word	0x080156ec
 80101f8:	58024400 	.word	0x58024400
 80101fc:	03d09000 	.word	0x03d09000
 8010200:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8010204:	4b24      	ldr	r3, [pc, #144]	; (8010298 <UART_SetConfig+0xccc>)
 8010206:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010208:	e00c      	b.n	8010224 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801020a:	4b24      	ldr	r3, [pc, #144]	; (801029c <UART_SetConfig+0xcd0>)
 801020c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801020e:	e009      	b.n	8010224 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010210:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010214:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010216:	e005      	b.n	8010224 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8010218:	2300      	movs	r3, #0
 801021a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801021c:	2301      	movs	r3, #1
 801021e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010222:	bf00      	nop
    }

    if (pclk != 0U)
 8010224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010226:	2b00      	cmp	r3, #0
 8010228:	d021      	beq.n	801026e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801022a:	697b      	ldr	r3, [r7, #20]
 801022c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801022e:	4a1c      	ldr	r2, [pc, #112]	; (80102a0 <UART_SetConfig+0xcd4>)
 8010230:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010234:	461a      	mov	r2, r3
 8010236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010238:	fbb3 f2f2 	udiv	r2, r3, r2
 801023c:	697b      	ldr	r3, [r7, #20]
 801023e:	685b      	ldr	r3, [r3, #4]
 8010240:	085b      	lsrs	r3, r3, #1
 8010242:	441a      	add	r2, r3
 8010244:	697b      	ldr	r3, [r7, #20]
 8010246:	685b      	ldr	r3, [r3, #4]
 8010248:	fbb2 f3f3 	udiv	r3, r2, r3
 801024c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801024e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010250:	2b0f      	cmp	r3, #15
 8010252:	d909      	bls.n	8010268 <UART_SetConfig+0xc9c>
 8010254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801025a:	d205      	bcs.n	8010268 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801025c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801025e:	b29a      	uxth	r2, r3
 8010260:	697b      	ldr	r3, [r7, #20]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	60da      	str	r2, [r3, #12]
 8010266:	e002      	b.n	801026e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010268:	2301      	movs	r3, #1
 801026a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801026e:	697b      	ldr	r3, [r7, #20]
 8010270:	2201      	movs	r2, #1
 8010272:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010276:	697b      	ldr	r3, [r7, #20]
 8010278:	2201      	movs	r2, #1
 801027a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801027e:	697b      	ldr	r3, [r7, #20]
 8010280:	2200      	movs	r2, #0
 8010282:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8010284:	697b      	ldr	r3, [r7, #20]
 8010286:	2200      	movs	r2, #0
 8010288:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801028a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 801028e:	4618      	mov	r0, r3
 8010290:	3748      	adds	r7, #72	; 0x48
 8010292:	46bd      	mov	sp, r7
 8010294:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010298:	03d09000 	.word	0x03d09000
 801029c:	003d0900 	.word	0x003d0900
 80102a0:	080156ec 	.word	0x080156ec

080102a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80102a4:	b480      	push	{r7}
 80102a6:	b083      	sub	sp, #12
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102b0:	f003 0301 	and.w	r3, r3, #1
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d00a      	beq.n	80102ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	685b      	ldr	r3, [r3, #4]
 80102be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	430a      	orrs	r2, r1
 80102cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102d2:	f003 0302 	and.w	r3, r3, #2
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d00a      	beq.n	80102f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	685b      	ldr	r3, [r3, #4]
 80102e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	430a      	orrs	r2, r1
 80102ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102f4:	f003 0304 	and.w	r3, r3, #4
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d00a      	beq.n	8010312 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	685b      	ldr	r3, [r3, #4]
 8010302:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	430a      	orrs	r2, r1
 8010310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010316:	f003 0308 	and.w	r3, r3, #8
 801031a:	2b00      	cmp	r3, #0
 801031c:	d00a      	beq.n	8010334 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	685b      	ldr	r3, [r3, #4]
 8010324:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	430a      	orrs	r2, r1
 8010332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010338:	f003 0310 	and.w	r3, r3, #16
 801033c:	2b00      	cmp	r3, #0
 801033e:	d00a      	beq.n	8010356 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	689b      	ldr	r3, [r3, #8]
 8010346:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	430a      	orrs	r2, r1
 8010354:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801035a:	f003 0320 	and.w	r3, r3, #32
 801035e:	2b00      	cmp	r3, #0
 8010360:	d00a      	beq.n	8010378 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	689b      	ldr	r3, [r3, #8]
 8010368:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	430a      	orrs	r2, r1
 8010376:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801037c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010380:	2b00      	cmp	r3, #0
 8010382:	d01a      	beq.n	80103ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	685b      	ldr	r3, [r3, #4]
 801038a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	430a      	orrs	r2, r1
 8010398:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801039e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80103a2:	d10a      	bne.n	80103ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	685b      	ldr	r3, [r3, #4]
 80103aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	430a      	orrs	r2, r1
 80103b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d00a      	beq.n	80103dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	685b      	ldr	r3, [r3, #4]
 80103cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	430a      	orrs	r2, r1
 80103da:	605a      	str	r2, [r3, #4]
  }
}
 80103dc:	bf00      	nop
 80103de:	370c      	adds	r7, #12
 80103e0:	46bd      	mov	sp, r7
 80103e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e6:	4770      	bx	lr

080103e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b098      	sub	sp, #96	; 0x60
 80103ec:	af02      	add	r7, sp, #8
 80103ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	2200      	movs	r2, #0
 80103f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80103f8:	f7f3 faf2 	bl	80039e0 <HAL_GetTick>
 80103fc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	f003 0308 	and.w	r3, r3, #8
 8010408:	2b08      	cmp	r3, #8
 801040a:	d12f      	bne.n	801046c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801040c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010410:	9300      	str	r3, [sp, #0]
 8010412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010414:	2200      	movs	r2, #0
 8010416:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801041a:	6878      	ldr	r0, [r7, #4]
 801041c:	f000 f88e 	bl	801053c <UART_WaitOnFlagUntilTimeout>
 8010420:	4603      	mov	r3, r0
 8010422:	2b00      	cmp	r3, #0
 8010424:	d022      	beq.n	801046c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801042c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801042e:	e853 3f00 	ldrex	r3, [r3]
 8010432:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010436:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801043a:	653b      	str	r3, [r7, #80]	; 0x50
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	461a      	mov	r2, r3
 8010442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010444:	647b      	str	r3, [r7, #68]	; 0x44
 8010446:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010448:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801044a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801044c:	e841 2300 	strex	r3, r2, [r1]
 8010450:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010454:	2b00      	cmp	r3, #0
 8010456:	d1e6      	bne.n	8010426 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2220      	movs	r2, #32
 801045c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	2200      	movs	r2, #0
 8010464:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010468:	2303      	movs	r3, #3
 801046a:	e063      	b.n	8010534 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	f003 0304 	and.w	r3, r3, #4
 8010476:	2b04      	cmp	r3, #4
 8010478:	d149      	bne.n	801050e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801047a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801047e:	9300      	str	r3, [sp, #0]
 8010480:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010482:	2200      	movs	r2, #0
 8010484:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010488:	6878      	ldr	r0, [r7, #4]
 801048a:	f000 f857 	bl	801053c <UART_WaitOnFlagUntilTimeout>
 801048e:	4603      	mov	r3, r0
 8010490:	2b00      	cmp	r3, #0
 8010492:	d03c      	beq.n	801050e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801049a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801049c:	e853 3f00 	ldrex	r3, [r3]
 80104a0:	623b      	str	r3, [r7, #32]
   return(result);
 80104a2:	6a3b      	ldr	r3, [r7, #32]
 80104a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80104a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	461a      	mov	r2, r3
 80104b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104b2:	633b      	str	r3, [r7, #48]	; 0x30
 80104b4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80104b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80104ba:	e841 2300 	strex	r3, r2, [r1]
 80104be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80104c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d1e6      	bne.n	8010494 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	3308      	adds	r3, #8
 80104cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104ce:	693b      	ldr	r3, [r7, #16]
 80104d0:	e853 3f00 	ldrex	r3, [r3]
 80104d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	f023 0301 	bic.w	r3, r3, #1
 80104dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	3308      	adds	r3, #8
 80104e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80104e6:	61fa      	str	r2, [r7, #28]
 80104e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104ea:	69b9      	ldr	r1, [r7, #24]
 80104ec:	69fa      	ldr	r2, [r7, #28]
 80104ee:	e841 2300 	strex	r3, r2, [r1]
 80104f2:	617b      	str	r3, [r7, #20]
   return(result);
 80104f4:	697b      	ldr	r3, [r7, #20]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d1e5      	bne.n	80104c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	2220      	movs	r2, #32
 80104fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	2200      	movs	r2, #0
 8010506:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801050a:	2303      	movs	r3, #3
 801050c:	e012      	b.n	8010534 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	2220      	movs	r2, #32
 8010512:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2220      	movs	r2, #32
 801051a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	2200      	movs	r2, #0
 8010522:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	2200      	movs	r2, #0
 8010528:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	2200      	movs	r2, #0
 801052e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010532:	2300      	movs	r3, #0
}
 8010534:	4618      	mov	r0, r3
 8010536:	3758      	adds	r7, #88	; 0x58
 8010538:	46bd      	mov	sp, r7
 801053a:	bd80      	pop	{r7, pc}

0801053c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b084      	sub	sp, #16
 8010540:	af00      	add	r7, sp, #0
 8010542:	60f8      	str	r0, [r7, #12]
 8010544:	60b9      	str	r1, [r7, #8]
 8010546:	603b      	str	r3, [r7, #0]
 8010548:	4613      	mov	r3, r2
 801054a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801054c:	e049      	b.n	80105e2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801054e:	69bb      	ldr	r3, [r7, #24]
 8010550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010554:	d045      	beq.n	80105e2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010556:	f7f3 fa43 	bl	80039e0 <HAL_GetTick>
 801055a:	4602      	mov	r2, r0
 801055c:	683b      	ldr	r3, [r7, #0]
 801055e:	1ad3      	subs	r3, r2, r3
 8010560:	69ba      	ldr	r2, [r7, #24]
 8010562:	429a      	cmp	r2, r3
 8010564:	d302      	bcc.n	801056c <UART_WaitOnFlagUntilTimeout+0x30>
 8010566:	69bb      	ldr	r3, [r7, #24]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d101      	bne.n	8010570 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801056c:	2303      	movs	r3, #3
 801056e:	e048      	b.n	8010602 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	f003 0304 	and.w	r3, r3, #4
 801057a:	2b00      	cmp	r3, #0
 801057c:	d031      	beq.n	80105e2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	69db      	ldr	r3, [r3, #28]
 8010584:	f003 0308 	and.w	r3, r3, #8
 8010588:	2b08      	cmp	r3, #8
 801058a:	d110      	bne.n	80105ae <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	2208      	movs	r2, #8
 8010592:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8010594:	68f8      	ldr	r0, [r7, #12]
 8010596:	f000 f839 	bl	801060c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	2208      	movs	r2, #8
 801059e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	2200      	movs	r2, #0
 80105a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80105aa:	2301      	movs	r3, #1
 80105ac:	e029      	b.n	8010602 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	69db      	ldr	r3, [r3, #28]
 80105b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80105b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80105bc:	d111      	bne.n	80105e2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80105c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80105c8:	68f8      	ldr	r0, [r7, #12]
 80105ca:	f000 f81f 	bl	801060c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	2220      	movs	r2, #32
 80105d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	2200      	movs	r2, #0
 80105da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80105de:	2303      	movs	r3, #3
 80105e0:	e00f      	b.n	8010602 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	69da      	ldr	r2, [r3, #28]
 80105e8:	68bb      	ldr	r3, [r7, #8]
 80105ea:	4013      	ands	r3, r2
 80105ec:	68ba      	ldr	r2, [r7, #8]
 80105ee:	429a      	cmp	r2, r3
 80105f0:	bf0c      	ite	eq
 80105f2:	2301      	moveq	r3, #1
 80105f4:	2300      	movne	r3, #0
 80105f6:	b2db      	uxtb	r3, r3
 80105f8:	461a      	mov	r2, r3
 80105fa:	79fb      	ldrb	r3, [r7, #7]
 80105fc:	429a      	cmp	r2, r3
 80105fe:	d0a6      	beq.n	801054e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010600:	2300      	movs	r3, #0
}
 8010602:	4618      	mov	r0, r3
 8010604:	3710      	adds	r7, #16
 8010606:	46bd      	mov	sp, r7
 8010608:	bd80      	pop	{r7, pc}
	...

0801060c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801060c:	b480      	push	{r7}
 801060e:	b095      	sub	sp, #84	; 0x54
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801061a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801061c:	e853 3f00 	ldrex	r3, [r3]
 8010620:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010624:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010628:	64fb      	str	r3, [r7, #76]	; 0x4c
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	461a      	mov	r2, r3
 8010630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010632:	643b      	str	r3, [r7, #64]	; 0x40
 8010634:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010636:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010638:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801063a:	e841 2300 	strex	r3, r2, [r1]
 801063e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010642:	2b00      	cmp	r3, #0
 8010644:	d1e6      	bne.n	8010614 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	3308      	adds	r3, #8
 801064c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801064e:	6a3b      	ldr	r3, [r7, #32]
 8010650:	e853 3f00 	ldrex	r3, [r3]
 8010654:	61fb      	str	r3, [r7, #28]
   return(result);
 8010656:	69fa      	ldr	r2, [r7, #28]
 8010658:	4b1e      	ldr	r3, [pc, #120]	; (80106d4 <UART_EndRxTransfer+0xc8>)
 801065a:	4013      	ands	r3, r2
 801065c:	64bb      	str	r3, [r7, #72]	; 0x48
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	3308      	adds	r3, #8
 8010664:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010666:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010668:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801066a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801066c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801066e:	e841 2300 	strex	r3, r2, [r1]
 8010672:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010676:	2b00      	cmp	r3, #0
 8010678:	d1e5      	bne.n	8010646 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801067e:	2b01      	cmp	r3, #1
 8010680:	d118      	bne.n	80106b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	e853 3f00 	ldrex	r3, [r3]
 801068e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010690:	68bb      	ldr	r3, [r7, #8]
 8010692:	f023 0310 	bic.w	r3, r3, #16
 8010696:	647b      	str	r3, [r7, #68]	; 0x44
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	461a      	mov	r2, r3
 801069e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106a0:	61bb      	str	r3, [r7, #24]
 80106a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106a4:	6979      	ldr	r1, [r7, #20]
 80106a6:	69ba      	ldr	r2, [r7, #24]
 80106a8:	e841 2300 	strex	r3, r2, [r1]
 80106ac:	613b      	str	r3, [r7, #16]
   return(result);
 80106ae:	693b      	ldr	r3, [r7, #16]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d1e6      	bne.n	8010682 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	2220      	movs	r2, #32
 80106b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2200      	movs	r2, #0
 80106c0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	2200      	movs	r2, #0
 80106c6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80106c8:	bf00      	nop
 80106ca:	3754      	adds	r7, #84	; 0x54
 80106cc:	46bd      	mov	sp, r7
 80106ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d2:	4770      	bx	lr
 80106d4:	effffffe 	.word	0xeffffffe

080106d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80106d8:	b480      	push	{r7}
 80106da:	b085      	sub	sp, #20
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80106e6:	2b01      	cmp	r3, #1
 80106e8:	d101      	bne.n	80106ee <HAL_UARTEx_DisableFifoMode+0x16>
 80106ea:	2302      	movs	r3, #2
 80106ec:	e027      	b.n	801073e <HAL_UARTEx_DisableFifoMode+0x66>
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	2201      	movs	r2, #1
 80106f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	2224      	movs	r2, #36	; 0x24
 80106fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	681a      	ldr	r2, [r3, #0]
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	f022 0201 	bic.w	r2, r2, #1
 8010714:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801071c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	2200      	movs	r2, #0
 8010722:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	68fa      	ldr	r2, [r7, #12]
 801072a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	2220      	movs	r2, #32
 8010730:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	2200      	movs	r2, #0
 8010738:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801073c:	2300      	movs	r3, #0
}
 801073e:	4618      	mov	r0, r3
 8010740:	3714      	adds	r7, #20
 8010742:	46bd      	mov	sp, r7
 8010744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010748:	4770      	bx	lr

0801074a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801074a:	b580      	push	{r7, lr}
 801074c:	b084      	sub	sp, #16
 801074e:	af00      	add	r7, sp, #0
 8010750:	6078      	str	r0, [r7, #4]
 8010752:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801075a:	2b01      	cmp	r3, #1
 801075c:	d101      	bne.n	8010762 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801075e:	2302      	movs	r3, #2
 8010760:	e02d      	b.n	80107be <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	2201      	movs	r2, #1
 8010766:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	2224      	movs	r2, #36	; 0x24
 801076e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	681a      	ldr	r2, [r3, #0]
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	f022 0201 	bic.w	r2, r2, #1
 8010788:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	689b      	ldr	r3, [r3, #8]
 8010790:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	683a      	ldr	r2, [r7, #0]
 801079a:	430a      	orrs	r2, r1
 801079c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801079e:	6878      	ldr	r0, [r7, #4]
 80107a0:	f000 f850 	bl	8010844 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	68fa      	ldr	r2, [r7, #12]
 80107aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	2220      	movs	r2, #32
 80107b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	2200      	movs	r2, #0
 80107b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80107bc:	2300      	movs	r3, #0
}
 80107be:	4618      	mov	r0, r3
 80107c0:	3710      	adds	r7, #16
 80107c2:	46bd      	mov	sp, r7
 80107c4:	bd80      	pop	{r7, pc}

080107c6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80107c6:	b580      	push	{r7, lr}
 80107c8:	b084      	sub	sp, #16
 80107ca:	af00      	add	r7, sp, #0
 80107cc:	6078      	str	r0, [r7, #4]
 80107ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80107d6:	2b01      	cmp	r3, #1
 80107d8:	d101      	bne.n	80107de <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80107da:	2302      	movs	r3, #2
 80107dc:	e02d      	b.n	801083a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	2201      	movs	r2, #1
 80107e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	2224      	movs	r2, #36	; 0x24
 80107ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	681a      	ldr	r2, [r3, #0]
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	f022 0201 	bic.w	r2, r2, #1
 8010804:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	689b      	ldr	r3, [r3, #8]
 801080c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	683a      	ldr	r2, [r7, #0]
 8010816:	430a      	orrs	r2, r1
 8010818:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801081a:	6878      	ldr	r0, [r7, #4]
 801081c:	f000 f812 	bl	8010844 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	68fa      	ldr	r2, [r7, #12]
 8010826:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	2220      	movs	r2, #32
 801082c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	2200      	movs	r2, #0
 8010834:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010838:	2300      	movs	r3, #0
}
 801083a:	4618      	mov	r0, r3
 801083c:	3710      	adds	r7, #16
 801083e:	46bd      	mov	sp, r7
 8010840:	bd80      	pop	{r7, pc}
	...

08010844 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010844:	b480      	push	{r7}
 8010846:	b085      	sub	sp, #20
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010850:	2b00      	cmp	r3, #0
 8010852:	d108      	bne.n	8010866 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	2201      	movs	r2, #1
 8010858:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	2201      	movs	r2, #1
 8010860:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010864:	e031      	b.n	80108ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010866:	2310      	movs	r3, #16
 8010868:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801086a:	2310      	movs	r3, #16
 801086c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	689b      	ldr	r3, [r3, #8]
 8010874:	0e5b      	lsrs	r3, r3, #25
 8010876:	b2db      	uxtb	r3, r3
 8010878:	f003 0307 	and.w	r3, r3, #7
 801087c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	689b      	ldr	r3, [r3, #8]
 8010884:	0f5b      	lsrs	r3, r3, #29
 8010886:	b2db      	uxtb	r3, r3
 8010888:	f003 0307 	and.w	r3, r3, #7
 801088c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801088e:	7bbb      	ldrb	r3, [r7, #14]
 8010890:	7b3a      	ldrb	r2, [r7, #12]
 8010892:	4911      	ldr	r1, [pc, #68]	; (80108d8 <UARTEx_SetNbDataToProcess+0x94>)
 8010894:	5c8a      	ldrb	r2, [r1, r2]
 8010896:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801089a:	7b3a      	ldrb	r2, [r7, #12]
 801089c:	490f      	ldr	r1, [pc, #60]	; (80108dc <UARTEx_SetNbDataToProcess+0x98>)
 801089e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80108a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80108a4:	b29a      	uxth	r2, r3
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80108ac:	7bfb      	ldrb	r3, [r7, #15]
 80108ae:	7b7a      	ldrb	r2, [r7, #13]
 80108b0:	4909      	ldr	r1, [pc, #36]	; (80108d8 <UARTEx_SetNbDataToProcess+0x94>)
 80108b2:	5c8a      	ldrb	r2, [r1, r2]
 80108b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80108b8:	7b7a      	ldrb	r2, [r7, #13]
 80108ba:	4908      	ldr	r1, [pc, #32]	; (80108dc <UARTEx_SetNbDataToProcess+0x98>)
 80108bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80108be:	fb93 f3f2 	sdiv	r3, r3, r2
 80108c2:	b29a      	uxth	r2, r3
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80108ca:	bf00      	nop
 80108cc:	3714      	adds	r7, #20
 80108ce:	46bd      	mov	sp, r7
 80108d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d4:	4770      	bx	lr
 80108d6:	bf00      	nop
 80108d8:	08015704 	.word	0x08015704
 80108dc:	0801570c 	.word	0x0801570c

080108e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80108e0:	b084      	sub	sp, #16
 80108e2:	b580      	push	{r7, lr}
 80108e4:	b084      	sub	sp, #16
 80108e6:	af00      	add	r7, sp, #0
 80108e8:	6078      	str	r0, [r7, #4]
 80108ea:	f107 001c 	add.w	r0, r7, #28
 80108ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80108f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108f4:	2b01      	cmp	r3, #1
 80108f6:	d120      	bne.n	801093a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	68da      	ldr	r2, [r3, #12]
 8010908:	4b2a      	ldr	r3, [pc, #168]	; (80109b4 <USB_CoreInit+0xd4>)
 801090a:	4013      	ands	r3, r2
 801090c:	687a      	ldr	r2, [r7, #4]
 801090e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	68db      	ldr	r3, [r3, #12]
 8010914:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801091c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801091e:	2b01      	cmp	r3, #1
 8010920:	d105      	bne.n	801092e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	68db      	ldr	r3, [r3, #12]
 8010926:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801092e:	6878      	ldr	r0, [r7, #4]
 8010930:	f000 faac 	bl	8010e8c <USB_CoreReset>
 8010934:	4603      	mov	r3, r0
 8010936:	73fb      	strb	r3, [r7, #15]
 8010938:	e01a      	b.n	8010970 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	68db      	ldr	r3, [r3, #12]
 801093e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010946:	6878      	ldr	r0, [r7, #4]
 8010948:	f000 faa0 	bl	8010e8c <USB_CoreReset>
 801094c:	4603      	mov	r3, r0
 801094e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8010950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010952:	2b00      	cmp	r3, #0
 8010954:	d106      	bne.n	8010964 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801095a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	639a      	str	r2, [r3, #56]	; 0x38
 8010962:	e005      	b.n	8010970 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010968:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8010970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010972:	2b01      	cmp	r3, #1
 8010974:	d116      	bne.n	80109a4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801097a:	b29a      	uxth	r2, r3
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010984:	4b0c      	ldr	r3, [pc, #48]	; (80109b8 <USB_CoreInit+0xd8>)
 8010986:	4313      	orrs	r3, r2
 8010988:	687a      	ldr	r2, [r7, #4]
 801098a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	689b      	ldr	r3, [r3, #8]
 8010990:	f043 0206 	orr.w	r2, r3, #6
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	689b      	ldr	r3, [r3, #8]
 801099c:	f043 0220 	orr.w	r2, r3, #32
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80109a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80109a6:	4618      	mov	r0, r3
 80109a8:	3710      	adds	r7, #16
 80109aa:	46bd      	mov	sp, r7
 80109ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80109b0:	b004      	add	sp, #16
 80109b2:	4770      	bx	lr
 80109b4:	ffbdffbf 	.word	0xffbdffbf
 80109b8:	03ee0000 	.word	0x03ee0000

080109bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80109bc:	b480      	push	{r7}
 80109be:	b083      	sub	sp, #12
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	689b      	ldr	r3, [r3, #8]
 80109c8:	f023 0201 	bic.w	r2, r3, #1
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80109d0:	2300      	movs	r3, #0
}
 80109d2:	4618      	mov	r0, r3
 80109d4:	370c      	adds	r7, #12
 80109d6:	46bd      	mov	sp, r7
 80109d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109dc:	4770      	bx	lr

080109de <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80109de:	b580      	push	{r7, lr}
 80109e0:	b084      	sub	sp, #16
 80109e2:	af00      	add	r7, sp, #0
 80109e4:	6078      	str	r0, [r7, #4]
 80109e6:	460b      	mov	r3, r1
 80109e8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80109ea:	2300      	movs	r3, #0
 80109ec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	68db      	ldr	r3, [r3, #12]
 80109f2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80109fa:	78fb      	ldrb	r3, [r7, #3]
 80109fc:	2b01      	cmp	r3, #1
 80109fe:	d115      	bne.n	8010a2c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	68db      	ldr	r3, [r3, #12]
 8010a04:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8010a0c:	2001      	movs	r0, #1
 8010a0e:	f7f2 fff3 	bl	80039f8 <HAL_Delay>
      ms++;
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	3301      	adds	r3, #1
 8010a16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8010a18:	6878      	ldr	r0, [r7, #4]
 8010a1a:	f000 fa29 	bl	8010e70 <USB_GetMode>
 8010a1e:	4603      	mov	r3, r0
 8010a20:	2b01      	cmp	r3, #1
 8010a22:	d01e      	beq.n	8010a62 <USB_SetCurrentMode+0x84>
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	2b31      	cmp	r3, #49	; 0x31
 8010a28:	d9f0      	bls.n	8010a0c <USB_SetCurrentMode+0x2e>
 8010a2a:	e01a      	b.n	8010a62 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8010a2c:	78fb      	ldrb	r3, [r7, #3]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d115      	bne.n	8010a5e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	68db      	ldr	r3, [r3, #12]
 8010a36:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8010a3e:	2001      	movs	r0, #1
 8010a40:	f7f2 ffda 	bl	80039f8 <HAL_Delay>
      ms++;
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	3301      	adds	r3, #1
 8010a48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8010a4a:	6878      	ldr	r0, [r7, #4]
 8010a4c:	f000 fa10 	bl	8010e70 <USB_GetMode>
 8010a50:	4603      	mov	r3, r0
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d005      	beq.n	8010a62 <USB_SetCurrentMode+0x84>
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	2b31      	cmp	r3, #49	; 0x31
 8010a5a:	d9f0      	bls.n	8010a3e <USB_SetCurrentMode+0x60>
 8010a5c:	e001      	b.n	8010a62 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8010a5e:	2301      	movs	r3, #1
 8010a60:	e005      	b.n	8010a6e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	2b32      	cmp	r3, #50	; 0x32
 8010a66:	d101      	bne.n	8010a6c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8010a68:	2301      	movs	r3, #1
 8010a6a:	e000      	b.n	8010a6e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8010a6c:	2300      	movs	r3, #0
}
 8010a6e:	4618      	mov	r0, r3
 8010a70:	3710      	adds	r7, #16
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}
	...

08010a78 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010a78:	b084      	sub	sp, #16
 8010a7a:	b580      	push	{r7, lr}
 8010a7c:	b086      	sub	sp, #24
 8010a7e:	af00      	add	r7, sp, #0
 8010a80:	6078      	str	r0, [r7, #4]
 8010a82:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010a86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010a92:	2300      	movs	r3, #0
 8010a94:	613b      	str	r3, [r7, #16]
 8010a96:	e009      	b.n	8010aac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010a98:	687a      	ldr	r2, [r7, #4]
 8010a9a:	693b      	ldr	r3, [r7, #16]
 8010a9c:	3340      	adds	r3, #64	; 0x40
 8010a9e:	009b      	lsls	r3, r3, #2
 8010aa0:	4413      	add	r3, r2
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010aa6:	693b      	ldr	r3, [r7, #16]
 8010aa8:	3301      	adds	r3, #1
 8010aaa:	613b      	str	r3, [r7, #16]
 8010aac:	693b      	ldr	r3, [r7, #16]
 8010aae:	2b0e      	cmp	r3, #14
 8010ab0:	d9f2      	bls.n	8010a98 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d11c      	bne.n	8010af2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010abe:	685b      	ldr	r3, [r3, #4]
 8010ac0:	68fa      	ldr	r2, [r7, #12]
 8010ac2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010ac6:	f043 0302 	orr.w	r3, r3, #2
 8010aca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ad0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	601a      	str	r2, [r3, #0]
 8010af0:	e005      	b.n	8010afe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010af6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010b04:	461a      	mov	r2, r3
 8010b06:	2300      	movs	r3, #0
 8010b08:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b10:	4619      	mov	r1, r3
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b18:	461a      	mov	r2, r3
 8010b1a:	680b      	ldr	r3, [r1, #0]
 8010b1c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b20:	2b01      	cmp	r3, #1
 8010b22:	d10c      	bne.n	8010b3e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d104      	bne.n	8010b34 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8010b2a:	2100      	movs	r1, #0
 8010b2c:	6878      	ldr	r0, [r7, #4]
 8010b2e:	f000 f965 	bl	8010dfc <USB_SetDevSpeed>
 8010b32:	e008      	b.n	8010b46 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010b34:	2101      	movs	r1, #1
 8010b36:	6878      	ldr	r0, [r7, #4]
 8010b38:	f000 f960 	bl	8010dfc <USB_SetDevSpeed>
 8010b3c:	e003      	b.n	8010b46 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010b3e:	2103      	movs	r1, #3
 8010b40:	6878      	ldr	r0, [r7, #4]
 8010b42:	f000 f95b 	bl	8010dfc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010b46:	2110      	movs	r1, #16
 8010b48:	6878      	ldr	r0, [r7, #4]
 8010b4a:	f000 f8f3 	bl	8010d34 <USB_FlushTxFifo>
 8010b4e:	4603      	mov	r3, r0
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d001      	beq.n	8010b58 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8010b54:	2301      	movs	r3, #1
 8010b56:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010b58:	6878      	ldr	r0, [r7, #4]
 8010b5a:	f000 f91f 	bl	8010d9c <USB_FlushRxFifo>
 8010b5e:	4603      	mov	r3, r0
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d001      	beq.n	8010b68 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8010b64:	2301      	movs	r3, #1
 8010b66:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b6e:	461a      	mov	r2, r3
 8010b70:	2300      	movs	r3, #0
 8010b72:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b7a:	461a      	mov	r2, r3
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b86:	461a      	mov	r2, r3
 8010b88:	2300      	movs	r3, #0
 8010b8a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	613b      	str	r3, [r7, #16]
 8010b90:	e043      	b.n	8010c1a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010b92:	693b      	ldr	r3, [r7, #16]
 8010b94:	015a      	lsls	r2, r3, #5
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	4413      	add	r3, r2
 8010b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010ba4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010ba8:	d118      	bne.n	8010bdc <USB_DevInit+0x164>
    {
      if (i == 0U)
 8010baa:	693b      	ldr	r3, [r7, #16]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d10a      	bne.n	8010bc6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010bb0:	693b      	ldr	r3, [r7, #16]
 8010bb2:	015a      	lsls	r2, r3, #5
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	4413      	add	r3, r2
 8010bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010bbc:	461a      	mov	r2, r3
 8010bbe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010bc2:	6013      	str	r3, [r2, #0]
 8010bc4:	e013      	b.n	8010bee <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010bc6:	693b      	ldr	r3, [r7, #16]
 8010bc8:	015a      	lsls	r2, r3, #5
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	4413      	add	r3, r2
 8010bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010bd2:	461a      	mov	r2, r3
 8010bd4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010bd8:	6013      	str	r3, [r2, #0]
 8010bda:	e008      	b.n	8010bee <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010bdc:	693b      	ldr	r3, [r7, #16]
 8010bde:	015a      	lsls	r2, r3, #5
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	4413      	add	r3, r2
 8010be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010be8:	461a      	mov	r2, r3
 8010bea:	2300      	movs	r3, #0
 8010bec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010bee:	693b      	ldr	r3, [r7, #16]
 8010bf0:	015a      	lsls	r2, r3, #5
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	4413      	add	r3, r2
 8010bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010bfa:	461a      	mov	r2, r3
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010c00:	693b      	ldr	r3, [r7, #16]
 8010c02:	015a      	lsls	r2, r3, #5
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	4413      	add	r3, r2
 8010c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c0c:	461a      	mov	r2, r3
 8010c0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010c12:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010c14:	693b      	ldr	r3, [r7, #16]
 8010c16:	3301      	adds	r3, #1
 8010c18:	613b      	str	r3, [r7, #16]
 8010c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c1c:	693a      	ldr	r2, [r7, #16]
 8010c1e:	429a      	cmp	r2, r3
 8010c20:	d3b7      	bcc.n	8010b92 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010c22:	2300      	movs	r3, #0
 8010c24:	613b      	str	r3, [r7, #16]
 8010c26:	e043      	b.n	8010cb0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010c28:	693b      	ldr	r3, [r7, #16]
 8010c2a:	015a      	lsls	r2, r3, #5
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	4413      	add	r3, r2
 8010c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010c3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010c3e:	d118      	bne.n	8010c72 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8010c40:	693b      	ldr	r3, [r7, #16]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d10a      	bne.n	8010c5c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010c46:	693b      	ldr	r3, [r7, #16]
 8010c48:	015a      	lsls	r2, r3, #5
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	4413      	add	r3, r2
 8010c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c52:	461a      	mov	r2, r3
 8010c54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010c58:	6013      	str	r3, [r2, #0]
 8010c5a:	e013      	b.n	8010c84 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010c5c:	693b      	ldr	r3, [r7, #16]
 8010c5e:	015a      	lsls	r2, r3, #5
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	4413      	add	r3, r2
 8010c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c68:	461a      	mov	r2, r3
 8010c6a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010c6e:	6013      	str	r3, [r2, #0]
 8010c70:	e008      	b.n	8010c84 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010c72:	693b      	ldr	r3, [r7, #16]
 8010c74:	015a      	lsls	r2, r3, #5
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	4413      	add	r3, r2
 8010c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c7e:	461a      	mov	r2, r3
 8010c80:	2300      	movs	r3, #0
 8010c82:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010c84:	693b      	ldr	r3, [r7, #16]
 8010c86:	015a      	lsls	r2, r3, #5
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	4413      	add	r3, r2
 8010c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c90:	461a      	mov	r2, r3
 8010c92:	2300      	movs	r3, #0
 8010c94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010c96:	693b      	ldr	r3, [r7, #16]
 8010c98:	015a      	lsls	r2, r3, #5
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	4413      	add	r3, r2
 8010c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ca2:	461a      	mov	r2, r3
 8010ca4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010ca8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010caa:	693b      	ldr	r3, [r7, #16]
 8010cac:	3301      	adds	r3, #1
 8010cae:	613b      	str	r3, [r7, #16]
 8010cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb2:	693a      	ldr	r2, [r7, #16]
 8010cb4:	429a      	cmp	r2, r3
 8010cb6:	d3b7      	bcc.n	8010c28 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010cbe:	691b      	ldr	r3, [r3, #16]
 8010cc0:	68fa      	ldr	r2, [r7, #12]
 8010cc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010cc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010cca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	2200      	movs	r2, #0
 8010cd0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8010cd8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d105      	bne.n	8010cec <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	699b      	ldr	r3, [r3, #24]
 8010ce4:	f043 0210 	orr.w	r2, r3, #16
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	699a      	ldr	r2, [r3, #24]
 8010cf0:	4b0e      	ldr	r3, [pc, #56]	; (8010d2c <USB_DevInit+0x2b4>)
 8010cf2:	4313      	orrs	r3, r2
 8010cf4:	687a      	ldr	r2, [r7, #4]
 8010cf6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d005      	beq.n	8010d0a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	699b      	ldr	r3, [r3, #24]
 8010d02:	f043 0208 	orr.w	r2, r3, #8
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8010d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d0c:	2b01      	cmp	r3, #1
 8010d0e:	d105      	bne.n	8010d1c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	699a      	ldr	r2, [r3, #24]
 8010d14:	4b06      	ldr	r3, [pc, #24]	; (8010d30 <USB_DevInit+0x2b8>)
 8010d16:	4313      	orrs	r3, r2
 8010d18:	687a      	ldr	r2, [r7, #4]
 8010d1a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d1e:	4618      	mov	r0, r3
 8010d20:	3718      	adds	r7, #24
 8010d22:	46bd      	mov	sp, r7
 8010d24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010d28:	b004      	add	sp, #16
 8010d2a:	4770      	bx	lr
 8010d2c:	803c3800 	.word	0x803c3800
 8010d30:	40000004 	.word	0x40000004

08010d34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010d34:	b480      	push	{r7}
 8010d36:	b085      	sub	sp, #20
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
 8010d3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010d3e:	2300      	movs	r3, #0
 8010d40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	3301      	adds	r3, #1
 8010d46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	4a13      	ldr	r2, [pc, #76]	; (8010d98 <USB_FlushTxFifo+0x64>)
 8010d4c:	4293      	cmp	r3, r2
 8010d4e:	d901      	bls.n	8010d54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010d50:	2303      	movs	r3, #3
 8010d52:	e01b      	b.n	8010d8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	691b      	ldr	r3, [r3, #16]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	daf2      	bge.n	8010d42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010d60:	683b      	ldr	r3, [r7, #0]
 8010d62:	019b      	lsls	r3, r3, #6
 8010d64:	f043 0220 	orr.w	r2, r3, #32
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	3301      	adds	r3, #1
 8010d70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	4a08      	ldr	r2, [pc, #32]	; (8010d98 <USB_FlushTxFifo+0x64>)
 8010d76:	4293      	cmp	r3, r2
 8010d78:	d901      	bls.n	8010d7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8010d7a:	2303      	movs	r3, #3
 8010d7c:	e006      	b.n	8010d8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	691b      	ldr	r3, [r3, #16]
 8010d82:	f003 0320 	and.w	r3, r3, #32
 8010d86:	2b20      	cmp	r3, #32
 8010d88:	d0f0      	beq.n	8010d6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8010d8a:	2300      	movs	r3, #0
}
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	3714      	adds	r7, #20
 8010d90:	46bd      	mov	sp, r7
 8010d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d96:	4770      	bx	lr
 8010d98:	00030d40 	.word	0x00030d40

08010d9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010d9c:	b480      	push	{r7}
 8010d9e:	b085      	sub	sp, #20
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010da4:	2300      	movs	r3, #0
 8010da6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	3301      	adds	r3, #1
 8010dac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	4a11      	ldr	r2, [pc, #68]	; (8010df8 <USB_FlushRxFifo+0x5c>)
 8010db2:	4293      	cmp	r3, r2
 8010db4:	d901      	bls.n	8010dba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8010db6:	2303      	movs	r3, #3
 8010db8:	e018      	b.n	8010dec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	691b      	ldr	r3, [r3, #16]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	daf2      	bge.n	8010da8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	2210      	movs	r2, #16
 8010dca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	3301      	adds	r3, #1
 8010dd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	4a08      	ldr	r2, [pc, #32]	; (8010df8 <USB_FlushRxFifo+0x5c>)
 8010dd6:	4293      	cmp	r3, r2
 8010dd8:	d901      	bls.n	8010dde <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8010dda:	2303      	movs	r3, #3
 8010ddc:	e006      	b.n	8010dec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	691b      	ldr	r3, [r3, #16]
 8010de2:	f003 0310 	and.w	r3, r3, #16
 8010de6:	2b10      	cmp	r3, #16
 8010de8:	d0f0      	beq.n	8010dcc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8010dea:	2300      	movs	r3, #0
}
 8010dec:	4618      	mov	r0, r3
 8010dee:	3714      	adds	r7, #20
 8010df0:	46bd      	mov	sp, r7
 8010df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df6:	4770      	bx	lr
 8010df8:	00030d40 	.word	0x00030d40

08010dfc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010dfc:	b480      	push	{r7}
 8010dfe:	b085      	sub	sp, #20
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
 8010e04:	460b      	mov	r3, r1
 8010e06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e12:	681a      	ldr	r2, [r3, #0]
 8010e14:	78fb      	ldrb	r3, [r7, #3]
 8010e16:	68f9      	ldr	r1, [r7, #12]
 8010e18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010e1c:	4313      	orrs	r3, r2
 8010e1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010e20:	2300      	movs	r3, #0
}
 8010e22:	4618      	mov	r0, r3
 8010e24:	3714      	adds	r7, #20
 8010e26:	46bd      	mov	sp, r7
 8010e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2c:	4770      	bx	lr

08010e2e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010e2e:	b480      	push	{r7}
 8010e30:	b085      	sub	sp, #20
 8010e32:	af00      	add	r7, sp, #0
 8010e34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	68fa      	ldr	r2, [r7, #12]
 8010e44:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010e48:	f023 0303 	bic.w	r3, r3, #3
 8010e4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e54:	685b      	ldr	r3, [r3, #4]
 8010e56:	68fa      	ldr	r2, [r7, #12]
 8010e58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010e5c:	f043 0302 	orr.w	r3, r3, #2
 8010e60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010e62:	2300      	movs	r3, #0
}
 8010e64:	4618      	mov	r0, r3
 8010e66:	3714      	adds	r7, #20
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6e:	4770      	bx	lr

08010e70 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010e70:	b480      	push	{r7}
 8010e72:	b083      	sub	sp, #12
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	695b      	ldr	r3, [r3, #20]
 8010e7c:	f003 0301 	and.w	r3, r3, #1
}
 8010e80:	4618      	mov	r0, r3
 8010e82:	370c      	adds	r7, #12
 8010e84:	46bd      	mov	sp, r7
 8010e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8a:	4770      	bx	lr

08010e8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010e8c:	b480      	push	{r7}
 8010e8e:	b085      	sub	sp, #20
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010e94:	2300      	movs	r3, #0
 8010e96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	3301      	adds	r3, #1
 8010e9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	4a13      	ldr	r2, [pc, #76]	; (8010ef0 <USB_CoreReset+0x64>)
 8010ea2:	4293      	cmp	r3, r2
 8010ea4:	d901      	bls.n	8010eaa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010ea6:	2303      	movs	r3, #3
 8010ea8:	e01b      	b.n	8010ee2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	691b      	ldr	r3, [r3, #16]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	daf2      	bge.n	8010e98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	691b      	ldr	r3, [r3, #16]
 8010eba:	f043 0201 	orr.w	r2, r3, #1
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	3301      	adds	r3, #1
 8010ec6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	4a09      	ldr	r2, [pc, #36]	; (8010ef0 <USB_CoreReset+0x64>)
 8010ecc:	4293      	cmp	r3, r2
 8010ece:	d901      	bls.n	8010ed4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010ed0:	2303      	movs	r3, #3
 8010ed2:	e006      	b.n	8010ee2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	691b      	ldr	r3, [r3, #16]
 8010ed8:	f003 0301 	and.w	r3, r3, #1
 8010edc:	2b01      	cmp	r3, #1
 8010ede:	d0f0      	beq.n	8010ec2 <USB_CoreReset+0x36>

  return HAL_OK;
 8010ee0:	2300      	movs	r3, #0
}
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	3714      	adds	r7, #20
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eec:	4770      	bx	lr
 8010eee:	bf00      	nop
 8010ef0:	00030d40 	.word	0x00030d40

08010ef4 <__cvt>:
 8010ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ef6:	ed2d 8b02 	vpush	{d8}
 8010efa:	eeb0 8b40 	vmov.f64	d8, d0
 8010efe:	b085      	sub	sp, #20
 8010f00:	4617      	mov	r7, r2
 8010f02:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010f04:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010f06:	ee18 2a90 	vmov	r2, s17
 8010f0a:	f025 0520 	bic.w	r5, r5, #32
 8010f0e:	2a00      	cmp	r2, #0
 8010f10:	bfb6      	itet	lt
 8010f12:	222d      	movlt	r2, #45	; 0x2d
 8010f14:	2200      	movge	r2, #0
 8010f16:	eeb1 8b40 	vneglt.f64	d8, d0
 8010f1a:	2d46      	cmp	r5, #70	; 0x46
 8010f1c:	460c      	mov	r4, r1
 8010f1e:	701a      	strb	r2, [r3, #0]
 8010f20:	d004      	beq.n	8010f2c <__cvt+0x38>
 8010f22:	2d45      	cmp	r5, #69	; 0x45
 8010f24:	d100      	bne.n	8010f28 <__cvt+0x34>
 8010f26:	3401      	adds	r4, #1
 8010f28:	2102      	movs	r1, #2
 8010f2a:	e000      	b.n	8010f2e <__cvt+0x3a>
 8010f2c:	2103      	movs	r1, #3
 8010f2e:	ab03      	add	r3, sp, #12
 8010f30:	9301      	str	r3, [sp, #4]
 8010f32:	ab02      	add	r3, sp, #8
 8010f34:	9300      	str	r3, [sp, #0]
 8010f36:	4622      	mov	r2, r4
 8010f38:	4633      	mov	r3, r6
 8010f3a:	eeb0 0b48 	vmov.f64	d0, d8
 8010f3e:	f001 f847 	bl	8011fd0 <_dtoa_r>
 8010f42:	2d47      	cmp	r5, #71	; 0x47
 8010f44:	d101      	bne.n	8010f4a <__cvt+0x56>
 8010f46:	07fb      	lsls	r3, r7, #31
 8010f48:	d51a      	bpl.n	8010f80 <__cvt+0x8c>
 8010f4a:	2d46      	cmp	r5, #70	; 0x46
 8010f4c:	eb00 0204 	add.w	r2, r0, r4
 8010f50:	d10c      	bne.n	8010f6c <__cvt+0x78>
 8010f52:	7803      	ldrb	r3, [r0, #0]
 8010f54:	2b30      	cmp	r3, #48	; 0x30
 8010f56:	d107      	bne.n	8010f68 <__cvt+0x74>
 8010f58:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f60:	bf1c      	itt	ne
 8010f62:	f1c4 0401 	rsbne	r4, r4, #1
 8010f66:	6034      	strne	r4, [r6, #0]
 8010f68:	6833      	ldr	r3, [r6, #0]
 8010f6a:	441a      	add	r2, r3
 8010f6c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f74:	bf08      	it	eq
 8010f76:	9203      	streq	r2, [sp, #12]
 8010f78:	2130      	movs	r1, #48	; 0x30
 8010f7a:	9b03      	ldr	r3, [sp, #12]
 8010f7c:	4293      	cmp	r3, r2
 8010f7e:	d307      	bcc.n	8010f90 <__cvt+0x9c>
 8010f80:	9b03      	ldr	r3, [sp, #12]
 8010f82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010f84:	1a1b      	subs	r3, r3, r0
 8010f86:	6013      	str	r3, [r2, #0]
 8010f88:	b005      	add	sp, #20
 8010f8a:	ecbd 8b02 	vpop	{d8}
 8010f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f90:	1c5c      	adds	r4, r3, #1
 8010f92:	9403      	str	r4, [sp, #12]
 8010f94:	7019      	strb	r1, [r3, #0]
 8010f96:	e7f0      	b.n	8010f7a <__cvt+0x86>

08010f98 <__exponent>:
 8010f98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	2900      	cmp	r1, #0
 8010f9e:	bfb8      	it	lt
 8010fa0:	4249      	neglt	r1, r1
 8010fa2:	f803 2b02 	strb.w	r2, [r3], #2
 8010fa6:	bfb4      	ite	lt
 8010fa8:	222d      	movlt	r2, #45	; 0x2d
 8010faa:	222b      	movge	r2, #43	; 0x2b
 8010fac:	2909      	cmp	r1, #9
 8010fae:	7042      	strb	r2, [r0, #1]
 8010fb0:	dd2a      	ble.n	8011008 <__exponent+0x70>
 8010fb2:	f10d 0207 	add.w	r2, sp, #7
 8010fb6:	4617      	mov	r7, r2
 8010fb8:	260a      	movs	r6, #10
 8010fba:	4694      	mov	ip, r2
 8010fbc:	fb91 f5f6 	sdiv	r5, r1, r6
 8010fc0:	fb06 1415 	mls	r4, r6, r5, r1
 8010fc4:	3430      	adds	r4, #48	; 0x30
 8010fc6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8010fca:	460c      	mov	r4, r1
 8010fcc:	2c63      	cmp	r4, #99	; 0x63
 8010fce:	f102 32ff 	add.w	r2, r2, #4294967295
 8010fd2:	4629      	mov	r1, r5
 8010fd4:	dcf1      	bgt.n	8010fba <__exponent+0x22>
 8010fd6:	3130      	adds	r1, #48	; 0x30
 8010fd8:	f1ac 0402 	sub.w	r4, ip, #2
 8010fdc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010fe0:	1c41      	adds	r1, r0, #1
 8010fe2:	4622      	mov	r2, r4
 8010fe4:	42ba      	cmp	r2, r7
 8010fe6:	d30a      	bcc.n	8010ffe <__exponent+0x66>
 8010fe8:	f10d 0209 	add.w	r2, sp, #9
 8010fec:	eba2 020c 	sub.w	r2, r2, ip
 8010ff0:	42bc      	cmp	r4, r7
 8010ff2:	bf88      	it	hi
 8010ff4:	2200      	movhi	r2, #0
 8010ff6:	4413      	add	r3, r2
 8010ff8:	1a18      	subs	r0, r3, r0
 8010ffa:	b003      	add	sp, #12
 8010ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ffe:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011002:	f801 5f01 	strb.w	r5, [r1, #1]!
 8011006:	e7ed      	b.n	8010fe4 <__exponent+0x4c>
 8011008:	2330      	movs	r3, #48	; 0x30
 801100a:	3130      	adds	r1, #48	; 0x30
 801100c:	7083      	strb	r3, [r0, #2]
 801100e:	70c1      	strb	r1, [r0, #3]
 8011010:	1d03      	adds	r3, r0, #4
 8011012:	e7f1      	b.n	8010ff8 <__exponent+0x60>
 8011014:	0000      	movs	r0, r0
	...

08011018 <_printf_float>:
 8011018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801101c:	b08b      	sub	sp, #44	; 0x2c
 801101e:	460c      	mov	r4, r1
 8011020:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8011024:	4616      	mov	r6, r2
 8011026:	461f      	mov	r7, r3
 8011028:	4605      	mov	r5, r0
 801102a:	f000 febf 	bl	8011dac <_localeconv_r>
 801102e:	f8d0 b000 	ldr.w	fp, [r0]
 8011032:	4658      	mov	r0, fp
 8011034:	f7ef f9bc 	bl	80003b0 <strlen>
 8011038:	2300      	movs	r3, #0
 801103a:	9308      	str	r3, [sp, #32]
 801103c:	f8d8 3000 	ldr.w	r3, [r8]
 8011040:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011044:	6822      	ldr	r2, [r4, #0]
 8011046:	3307      	adds	r3, #7
 8011048:	f023 0307 	bic.w	r3, r3, #7
 801104c:	f103 0108 	add.w	r1, r3, #8
 8011050:	f8c8 1000 	str.w	r1, [r8]
 8011054:	ed93 0b00 	vldr	d0, [r3]
 8011058:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80112b8 <_printf_float+0x2a0>
 801105c:	eeb0 7bc0 	vabs.f64	d7, d0
 8011060:	eeb4 7b46 	vcmp.f64	d7, d6
 8011064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011068:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801106c:	4682      	mov	sl, r0
 801106e:	dd24      	ble.n	80110ba <_printf_float+0xa2>
 8011070:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011078:	d502      	bpl.n	8011080 <_printf_float+0x68>
 801107a:	232d      	movs	r3, #45	; 0x2d
 801107c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011080:	498f      	ldr	r1, [pc, #572]	; (80112c0 <_printf_float+0x2a8>)
 8011082:	4b90      	ldr	r3, [pc, #576]	; (80112c4 <_printf_float+0x2ac>)
 8011084:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011088:	bf94      	ite	ls
 801108a:	4688      	movls	r8, r1
 801108c:	4698      	movhi	r8, r3
 801108e:	2303      	movs	r3, #3
 8011090:	6123      	str	r3, [r4, #16]
 8011092:	f022 0204 	bic.w	r2, r2, #4
 8011096:	2300      	movs	r3, #0
 8011098:	6022      	str	r2, [r4, #0]
 801109a:	9304      	str	r3, [sp, #16]
 801109c:	9700      	str	r7, [sp, #0]
 801109e:	4633      	mov	r3, r6
 80110a0:	aa09      	add	r2, sp, #36	; 0x24
 80110a2:	4621      	mov	r1, r4
 80110a4:	4628      	mov	r0, r5
 80110a6:	f000 f9d1 	bl	801144c <_printf_common>
 80110aa:	3001      	adds	r0, #1
 80110ac:	f040 808a 	bne.w	80111c4 <_printf_float+0x1ac>
 80110b0:	f04f 30ff 	mov.w	r0, #4294967295
 80110b4:	b00b      	add	sp, #44	; 0x2c
 80110b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110ba:	eeb4 0b40 	vcmp.f64	d0, d0
 80110be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110c2:	d709      	bvc.n	80110d8 <_printf_float+0xc0>
 80110c4:	ee10 3a90 	vmov	r3, s1
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	bfbc      	itt	lt
 80110cc:	232d      	movlt	r3, #45	; 0x2d
 80110ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80110d2:	497d      	ldr	r1, [pc, #500]	; (80112c8 <_printf_float+0x2b0>)
 80110d4:	4b7d      	ldr	r3, [pc, #500]	; (80112cc <_printf_float+0x2b4>)
 80110d6:	e7d5      	b.n	8011084 <_printf_float+0x6c>
 80110d8:	6863      	ldr	r3, [r4, #4]
 80110da:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80110de:	9104      	str	r1, [sp, #16]
 80110e0:	1c59      	adds	r1, r3, #1
 80110e2:	d13c      	bne.n	801115e <_printf_float+0x146>
 80110e4:	2306      	movs	r3, #6
 80110e6:	6063      	str	r3, [r4, #4]
 80110e8:	2300      	movs	r3, #0
 80110ea:	9303      	str	r3, [sp, #12]
 80110ec:	ab08      	add	r3, sp, #32
 80110ee:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80110f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80110f6:	ab07      	add	r3, sp, #28
 80110f8:	6861      	ldr	r1, [r4, #4]
 80110fa:	9300      	str	r3, [sp, #0]
 80110fc:	6022      	str	r2, [r4, #0]
 80110fe:	f10d 031b 	add.w	r3, sp, #27
 8011102:	4628      	mov	r0, r5
 8011104:	f7ff fef6 	bl	8010ef4 <__cvt>
 8011108:	9b04      	ldr	r3, [sp, #16]
 801110a:	9907      	ldr	r1, [sp, #28]
 801110c:	2b47      	cmp	r3, #71	; 0x47
 801110e:	4680      	mov	r8, r0
 8011110:	d108      	bne.n	8011124 <_printf_float+0x10c>
 8011112:	1cc8      	adds	r0, r1, #3
 8011114:	db02      	blt.n	801111c <_printf_float+0x104>
 8011116:	6863      	ldr	r3, [r4, #4]
 8011118:	4299      	cmp	r1, r3
 801111a:	dd41      	ble.n	80111a0 <_printf_float+0x188>
 801111c:	f1a9 0902 	sub.w	r9, r9, #2
 8011120:	fa5f f989 	uxtb.w	r9, r9
 8011124:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011128:	d820      	bhi.n	801116c <_printf_float+0x154>
 801112a:	3901      	subs	r1, #1
 801112c:	464a      	mov	r2, r9
 801112e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011132:	9107      	str	r1, [sp, #28]
 8011134:	f7ff ff30 	bl	8010f98 <__exponent>
 8011138:	9a08      	ldr	r2, [sp, #32]
 801113a:	9004      	str	r0, [sp, #16]
 801113c:	1813      	adds	r3, r2, r0
 801113e:	2a01      	cmp	r2, #1
 8011140:	6123      	str	r3, [r4, #16]
 8011142:	dc02      	bgt.n	801114a <_printf_float+0x132>
 8011144:	6822      	ldr	r2, [r4, #0]
 8011146:	07d2      	lsls	r2, r2, #31
 8011148:	d501      	bpl.n	801114e <_printf_float+0x136>
 801114a:	3301      	adds	r3, #1
 801114c:	6123      	str	r3, [r4, #16]
 801114e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d0a2      	beq.n	801109c <_printf_float+0x84>
 8011156:	232d      	movs	r3, #45	; 0x2d
 8011158:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801115c:	e79e      	b.n	801109c <_printf_float+0x84>
 801115e:	9904      	ldr	r1, [sp, #16]
 8011160:	2947      	cmp	r1, #71	; 0x47
 8011162:	d1c1      	bne.n	80110e8 <_printf_float+0xd0>
 8011164:	2b00      	cmp	r3, #0
 8011166:	d1bf      	bne.n	80110e8 <_printf_float+0xd0>
 8011168:	2301      	movs	r3, #1
 801116a:	e7bc      	b.n	80110e6 <_printf_float+0xce>
 801116c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8011170:	d118      	bne.n	80111a4 <_printf_float+0x18c>
 8011172:	2900      	cmp	r1, #0
 8011174:	6863      	ldr	r3, [r4, #4]
 8011176:	dd0b      	ble.n	8011190 <_printf_float+0x178>
 8011178:	6121      	str	r1, [r4, #16]
 801117a:	b913      	cbnz	r3, 8011182 <_printf_float+0x16a>
 801117c:	6822      	ldr	r2, [r4, #0]
 801117e:	07d0      	lsls	r0, r2, #31
 8011180:	d502      	bpl.n	8011188 <_printf_float+0x170>
 8011182:	3301      	adds	r3, #1
 8011184:	440b      	add	r3, r1
 8011186:	6123      	str	r3, [r4, #16]
 8011188:	2300      	movs	r3, #0
 801118a:	65a1      	str	r1, [r4, #88]	; 0x58
 801118c:	9304      	str	r3, [sp, #16]
 801118e:	e7de      	b.n	801114e <_printf_float+0x136>
 8011190:	b913      	cbnz	r3, 8011198 <_printf_float+0x180>
 8011192:	6822      	ldr	r2, [r4, #0]
 8011194:	07d2      	lsls	r2, r2, #31
 8011196:	d501      	bpl.n	801119c <_printf_float+0x184>
 8011198:	3302      	adds	r3, #2
 801119a:	e7f4      	b.n	8011186 <_printf_float+0x16e>
 801119c:	2301      	movs	r3, #1
 801119e:	e7f2      	b.n	8011186 <_printf_float+0x16e>
 80111a0:	f04f 0967 	mov.w	r9, #103	; 0x67
 80111a4:	9b08      	ldr	r3, [sp, #32]
 80111a6:	4299      	cmp	r1, r3
 80111a8:	db05      	blt.n	80111b6 <_printf_float+0x19e>
 80111aa:	6823      	ldr	r3, [r4, #0]
 80111ac:	6121      	str	r1, [r4, #16]
 80111ae:	07d8      	lsls	r0, r3, #31
 80111b0:	d5ea      	bpl.n	8011188 <_printf_float+0x170>
 80111b2:	1c4b      	adds	r3, r1, #1
 80111b4:	e7e7      	b.n	8011186 <_printf_float+0x16e>
 80111b6:	2900      	cmp	r1, #0
 80111b8:	bfd4      	ite	le
 80111ba:	f1c1 0202 	rsble	r2, r1, #2
 80111be:	2201      	movgt	r2, #1
 80111c0:	4413      	add	r3, r2
 80111c2:	e7e0      	b.n	8011186 <_printf_float+0x16e>
 80111c4:	6823      	ldr	r3, [r4, #0]
 80111c6:	055a      	lsls	r2, r3, #21
 80111c8:	d407      	bmi.n	80111da <_printf_float+0x1c2>
 80111ca:	6923      	ldr	r3, [r4, #16]
 80111cc:	4642      	mov	r2, r8
 80111ce:	4631      	mov	r1, r6
 80111d0:	4628      	mov	r0, r5
 80111d2:	47b8      	blx	r7
 80111d4:	3001      	adds	r0, #1
 80111d6:	d12a      	bne.n	801122e <_printf_float+0x216>
 80111d8:	e76a      	b.n	80110b0 <_printf_float+0x98>
 80111da:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80111de:	f240 80e0 	bls.w	80113a2 <_printf_float+0x38a>
 80111e2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80111e6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80111ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111ee:	d133      	bne.n	8011258 <_printf_float+0x240>
 80111f0:	4a37      	ldr	r2, [pc, #220]	; (80112d0 <_printf_float+0x2b8>)
 80111f2:	2301      	movs	r3, #1
 80111f4:	4631      	mov	r1, r6
 80111f6:	4628      	mov	r0, r5
 80111f8:	47b8      	blx	r7
 80111fa:	3001      	adds	r0, #1
 80111fc:	f43f af58 	beq.w	80110b0 <_printf_float+0x98>
 8011200:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011204:	429a      	cmp	r2, r3
 8011206:	db02      	blt.n	801120e <_printf_float+0x1f6>
 8011208:	6823      	ldr	r3, [r4, #0]
 801120a:	07d8      	lsls	r0, r3, #31
 801120c:	d50f      	bpl.n	801122e <_printf_float+0x216>
 801120e:	4653      	mov	r3, sl
 8011210:	465a      	mov	r2, fp
 8011212:	4631      	mov	r1, r6
 8011214:	4628      	mov	r0, r5
 8011216:	47b8      	blx	r7
 8011218:	3001      	adds	r0, #1
 801121a:	f43f af49 	beq.w	80110b0 <_printf_float+0x98>
 801121e:	f04f 0800 	mov.w	r8, #0
 8011222:	f104 091a 	add.w	r9, r4, #26
 8011226:	9b08      	ldr	r3, [sp, #32]
 8011228:	3b01      	subs	r3, #1
 801122a:	4543      	cmp	r3, r8
 801122c:	dc09      	bgt.n	8011242 <_printf_float+0x22a>
 801122e:	6823      	ldr	r3, [r4, #0]
 8011230:	079b      	lsls	r3, r3, #30
 8011232:	f100 8106 	bmi.w	8011442 <_printf_float+0x42a>
 8011236:	68e0      	ldr	r0, [r4, #12]
 8011238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801123a:	4298      	cmp	r0, r3
 801123c:	bfb8      	it	lt
 801123e:	4618      	movlt	r0, r3
 8011240:	e738      	b.n	80110b4 <_printf_float+0x9c>
 8011242:	2301      	movs	r3, #1
 8011244:	464a      	mov	r2, r9
 8011246:	4631      	mov	r1, r6
 8011248:	4628      	mov	r0, r5
 801124a:	47b8      	blx	r7
 801124c:	3001      	adds	r0, #1
 801124e:	f43f af2f 	beq.w	80110b0 <_printf_float+0x98>
 8011252:	f108 0801 	add.w	r8, r8, #1
 8011256:	e7e6      	b.n	8011226 <_printf_float+0x20e>
 8011258:	9b07      	ldr	r3, [sp, #28]
 801125a:	2b00      	cmp	r3, #0
 801125c:	dc3a      	bgt.n	80112d4 <_printf_float+0x2bc>
 801125e:	4a1c      	ldr	r2, [pc, #112]	; (80112d0 <_printf_float+0x2b8>)
 8011260:	2301      	movs	r3, #1
 8011262:	4631      	mov	r1, r6
 8011264:	4628      	mov	r0, r5
 8011266:	47b8      	blx	r7
 8011268:	3001      	adds	r0, #1
 801126a:	f43f af21 	beq.w	80110b0 <_printf_float+0x98>
 801126e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8011272:	4313      	orrs	r3, r2
 8011274:	d102      	bne.n	801127c <_printf_float+0x264>
 8011276:	6823      	ldr	r3, [r4, #0]
 8011278:	07d9      	lsls	r1, r3, #31
 801127a:	d5d8      	bpl.n	801122e <_printf_float+0x216>
 801127c:	4653      	mov	r3, sl
 801127e:	465a      	mov	r2, fp
 8011280:	4631      	mov	r1, r6
 8011282:	4628      	mov	r0, r5
 8011284:	47b8      	blx	r7
 8011286:	3001      	adds	r0, #1
 8011288:	f43f af12 	beq.w	80110b0 <_printf_float+0x98>
 801128c:	f04f 0900 	mov.w	r9, #0
 8011290:	f104 0a1a 	add.w	sl, r4, #26
 8011294:	9b07      	ldr	r3, [sp, #28]
 8011296:	425b      	negs	r3, r3
 8011298:	454b      	cmp	r3, r9
 801129a:	dc01      	bgt.n	80112a0 <_printf_float+0x288>
 801129c:	9b08      	ldr	r3, [sp, #32]
 801129e:	e795      	b.n	80111cc <_printf_float+0x1b4>
 80112a0:	2301      	movs	r3, #1
 80112a2:	4652      	mov	r2, sl
 80112a4:	4631      	mov	r1, r6
 80112a6:	4628      	mov	r0, r5
 80112a8:	47b8      	blx	r7
 80112aa:	3001      	adds	r0, #1
 80112ac:	f43f af00 	beq.w	80110b0 <_printf_float+0x98>
 80112b0:	f109 0901 	add.w	r9, r9, #1
 80112b4:	e7ee      	b.n	8011294 <_printf_float+0x27c>
 80112b6:	bf00      	nop
 80112b8:	ffffffff 	.word	0xffffffff
 80112bc:	7fefffff 	.word	0x7fefffff
 80112c0:	08015714 	.word	0x08015714
 80112c4:	08015718 	.word	0x08015718
 80112c8:	0801571c 	.word	0x0801571c
 80112cc:	08015720 	.word	0x08015720
 80112d0:	08015724 	.word	0x08015724
 80112d4:	9a08      	ldr	r2, [sp, #32]
 80112d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80112d8:	429a      	cmp	r2, r3
 80112da:	bfa8      	it	ge
 80112dc:	461a      	movge	r2, r3
 80112de:	2a00      	cmp	r2, #0
 80112e0:	4691      	mov	r9, r2
 80112e2:	dc38      	bgt.n	8011356 <_printf_float+0x33e>
 80112e4:	2300      	movs	r3, #0
 80112e6:	9305      	str	r3, [sp, #20]
 80112e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80112ec:	f104 021a 	add.w	r2, r4, #26
 80112f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80112f2:	9905      	ldr	r1, [sp, #20]
 80112f4:	9304      	str	r3, [sp, #16]
 80112f6:	eba3 0309 	sub.w	r3, r3, r9
 80112fa:	428b      	cmp	r3, r1
 80112fc:	dc33      	bgt.n	8011366 <_printf_float+0x34e>
 80112fe:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011302:	429a      	cmp	r2, r3
 8011304:	db3c      	blt.n	8011380 <_printf_float+0x368>
 8011306:	6823      	ldr	r3, [r4, #0]
 8011308:	07da      	lsls	r2, r3, #31
 801130a:	d439      	bmi.n	8011380 <_printf_float+0x368>
 801130c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8011310:	eba2 0903 	sub.w	r9, r2, r3
 8011314:	9b04      	ldr	r3, [sp, #16]
 8011316:	1ad2      	subs	r2, r2, r3
 8011318:	4591      	cmp	r9, r2
 801131a:	bfa8      	it	ge
 801131c:	4691      	movge	r9, r2
 801131e:	f1b9 0f00 	cmp.w	r9, #0
 8011322:	dc35      	bgt.n	8011390 <_printf_float+0x378>
 8011324:	f04f 0800 	mov.w	r8, #0
 8011328:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801132c:	f104 0a1a 	add.w	sl, r4, #26
 8011330:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011334:	1a9b      	subs	r3, r3, r2
 8011336:	eba3 0309 	sub.w	r3, r3, r9
 801133a:	4543      	cmp	r3, r8
 801133c:	f77f af77 	ble.w	801122e <_printf_float+0x216>
 8011340:	2301      	movs	r3, #1
 8011342:	4652      	mov	r2, sl
 8011344:	4631      	mov	r1, r6
 8011346:	4628      	mov	r0, r5
 8011348:	47b8      	blx	r7
 801134a:	3001      	adds	r0, #1
 801134c:	f43f aeb0 	beq.w	80110b0 <_printf_float+0x98>
 8011350:	f108 0801 	add.w	r8, r8, #1
 8011354:	e7ec      	b.n	8011330 <_printf_float+0x318>
 8011356:	4613      	mov	r3, r2
 8011358:	4631      	mov	r1, r6
 801135a:	4642      	mov	r2, r8
 801135c:	4628      	mov	r0, r5
 801135e:	47b8      	blx	r7
 8011360:	3001      	adds	r0, #1
 8011362:	d1bf      	bne.n	80112e4 <_printf_float+0x2cc>
 8011364:	e6a4      	b.n	80110b0 <_printf_float+0x98>
 8011366:	2301      	movs	r3, #1
 8011368:	4631      	mov	r1, r6
 801136a:	4628      	mov	r0, r5
 801136c:	9204      	str	r2, [sp, #16]
 801136e:	47b8      	blx	r7
 8011370:	3001      	adds	r0, #1
 8011372:	f43f ae9d 	beq.w	80110b0 <_printf_float+0x98>
 8011376:	9b05      	ldr	r3, [sp, #20]
 8011378:	9a04      	ldr	r2, [sp, #16]
 801137a:	3301      	adds	r3, #1
 801137c:	9305      	str	r3, [sp, #20]
 801137e:	e7b7      	b.n	80112f0 <_printf_float+0x2d8>
 8011380:	4653      	mov	r3, sl
 8011382:	465a      	mov	r2, fp
 8011384:	4631      	mov	r1, r6
 8011386:	4628      	mov	r0, r5
 8011388:	47b8      	blx	r7
 801138a:	3001      	adds	r0, #1
 801138c:	d1be      	bne.n	801130c <_printf_float+0x2f4>
 801138e:	e68f      	b.n	80110b0 <_printf_float+0x98>
 8011390:	9a04      	ldr	r2, [sp, #16]
 8011392:	464b      	mov	r3, r9
 8011394:	4442      	add	r2, r8
 8011396:	4631      	mov	r1, r6
 8011398:	4628      	mov	r0, r5
 801139a:	47b8      	blx	r7
 801139c:	3001      	adds	r0, #1
 801139e:	d1c1      	bne.n	8011324 <_printf_float+0x30c>
 80113a0:	e686      	b.n	80110b0 <_printf_float+0x98>
 80113a2:	9a08      	ldr	r2, [sp, #32]
 80113a4:	2a01      	cmp	r2, #1
 80113a6:	dc01      	bgt.n	80113ac <_printf_float+0x394>
 80113a8:	07db      	lsls	r3, r3, #31
 80113aa:	d537      	bpl.n	801141c <_printf_float+0x404>
 80113ac:	2301      	movs	r3, #1
 80113ae:	4642      	mov	r2, r8
 80113b0:	4631      	mov	r1, r6
 80113b2:	4628      	mov	r0, r5
 80113b4:	47b8      	blx	r7
 80113b6:	3001      	adds	r0, #1
 80113b8:	f43f ae7a 	beq.w	80110b0 <_printf_float+0x98>
 80113bc:	4653      	mov	r3, sl
 80113be:	465a      	mov	r2, fp
 80113c0:	4631      	mov	r1, r6
 80113c2:	4628      	mov	r0, r5
 80113c4:	47b8      	blx	r7
 80113c6:	3001      	adds	r0, #1
 80113c8:	f43f ae72 	beq.w	80110b0 <_printf_float+0x98>
 80113cc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80113d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80113d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113d8:	9b08      	ldr	r3, [sp, #32]
 80113da:	d01a      	beq.n	8011412 <_printf_float+0x3fa>
 80113dc:	3b01      	subs	r3, #1
 80113de:	f108 0201 	add.w	r2, r8, #1
 80113e2:	4631      	mov	r1, r6
 80113e4:	4628      	mov	r0, r5
 80113e6:	47b8      	blx	r7
 80113e8:	3001      	adds	r0, #1
 80113ea:	d10e      	bne.n	801140a <_printf_float+0x3f2>
 80113ec:	e660      	b.n	80110b0 <_printf_float+0x98>
 80113ee:	2301      	movs	r3, #1
 80113f0:	464a      	mov	r2, r9
 80113f2:	4631      	mov	r1, r6
 80113f4:	4628      	mov	r0, r5
 80113f6:	47b8      	blx	r7
 80113f8:	3001      	adds	r0, #1
 80113fa:	f43f ae59 	beq.w	80110b0 <_printf_float+0x98>
 80113fe:	f108 0801 	add.w	r8, r8, #1
 8011402:	9b08      	ldr	r3, [sp, #32]
 8011404:	3b01      	subs	r3, #1
 8011406:	4543      	cmp	r3, r8
 8011408:	dcf1      	bgt.n	80113ee <_printf_float+0x3d6>
 801140a:	9b04      	ldr	r3, [sp, #16]
 801140c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011410:	e6dd      	b.n	80111ce <_printf_float+0x1b6>
 8011412:	f04f 0800 	mov.w	r8, #0
 8011416:	f104 091a 	add.w	r9, r4, #26
 801141a:	e7f2      	b.n	8011402 <_printf_float+0x3ea>
 801141c:	2301      	movs	r3, #1
 801141e:	4642      	mov	r2, r8
 8011420:	e7df      	b.n	80113e2 <_printf_float+0x3ca>
 8011422:	2301      	movs	r3, #1
 8011424:	464a      	mov	r2, r9
 8011426:	4631      	mov	r1, r6
 8011428:	4628      	mov	r0, r5
 801142a:	47b8      	blx	r7
 801142c:	3001      	adds	r0, #1
 801142e:	f43f ae3f 	beq.w	80110b0 <_printf_float+0x98>
 8011432:	f108 0801 	add.w	r8, r8, #1
 8011436:	68e3      	ldr	r3, [r4, #12]
 8011438:	9909      	ldr	r1, [sp, #36]	; 0x24
 801143a:	1a5b      	subs	r3, r3, r1
 801143c:	4543      	cmp	r3, r8
 801143e:	dcf0      	bgt.n	8011422 <_printf_float+0x40a>
 8011440:	e6f9      	b.n	8011236 <_printf_float+0x21e>
 8011442:	f04f 0800 	mov.w	r8, #0
 8011446:	f104 0919 	add.w	r9, r4, #25
 801144a:	e7f4      	b.n	8011436 <_printf_float+0x41e>

0801144c <_printf_common>:
 801144c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011450:	4616      	mov	r6, r2
 8011452:	4699      	mov	r9, r3
 8011454:	688a      	ldr	r2, [r1, #8]
 8011456:	690b      	ldr	r3, [r1, #16]
 8011458:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801145c:	4293      	cmp	r3, r2
 801145e:	bfb8      	it	lt
 8011460:	4613      	movlt	r3, r2
 8011462:	6033      	str	r3, [r6, #0]
 8011464:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011468:	4607      	mov	r7, r0
 801146a:	460c      	mov	r4, r1
 801146c:	b10a      	cbz	r2, 8011472 <_printf_common+0x26>
 801146e:	3301      	adds	r3, #1
 8011470:	6033      	str	r3, [r6, #0]
 8011472:	6823      	ldr	r3, [r4, #0]
 8011474:	0699      	lsls	r1, r3, #26
 8011476:	bf42      	ittt	mi
 8011478:	6833      	ldrmi	r3, [r6, #0]
 801147a:	3302      	addmi	r3, #2
 801147c:	6033      	strmi	r3, [r6, #0]
 801147e:	6825      	ldr	r5, [r4, #0]
 8011480:	f015 0506 	ands.w	r5, r5, #6
 8011484:	d106      	bne.n	8011494 <_printf_common+0x48>
 8011486:	f104 0a19 	add.w	sl, r4, #25
 801148a:	68e3      	ldr	r3, [r4, #12]
 801148c:	6832      	ldr	r2, [r6, #0]
 801148e:	1a9b      	subs	r3, r3, r2
 8011490:	42ab      	cmp	r3, r5
 8011492:	dc26      	bgt.n	80114e2 <_printf_common+0x96>
 8011494:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011498:	1e13      	subs	r3, r2, #0
 801149a:	6822      	ldr	r2, [r4, #0]
 801149c:	bf18      	it	ne
 801149e:	2301      	movne	r3, #1
 80114a0:	0692      	lsls	r2, r2, #26
 80114a2:	d42b      	bmi.n	80114fc <_printf_common+0xb0>
 80114a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80114a8:	4649      	mov	r1, r9
 80114aa:	4638      	mov	r0, r7
 80114ac:	47c0      	blx	r8
 80114ae:	3001      	adds	r0, #1
 80114b0:	d01e      	beq.n	80114f0 <_printf_common+0xa4>
 80114b2:	6823      	ldr	r3, [r4, #0]
 80114b4:	6922      	ldr	r2, [r4, #16]
 80114b6:	f003 0306 	and.w	r3, r3, #6
 80114ba:	2b04      	cmp	r3, #4
 80114bc:	bf02      	ittt	eq
 80114be:	68e5      	ldreq	r5, [r4, #12]
 80114c0:	6833      	ldreq	r3, [r6, #0]
 80114c2:	1aed      	subeq	r5, r5, r3
 80114c4:	68a3      	ldr	r3, [r4, #8]
 80114c6:	bf0c      	ite	eq
 80114c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80114cc:	2500      	movne	r5, #0
 80114ce:	4293      	cmp	r3, r2
 80114d0:	bfc4      	itt	gt
 80114d2:	1a9b      	subgt	r3, r3, r2
 80114d4:	18ed      	addgt	r5, r5, r3
 80114d6:	2600      	movs	r6, #0
 80114d8:	341a      	adds	r4, #26
 80114da:	42b5      	cmp	r5, r6
 80114dc:	d11a      	bne.n	8011514 <_printf_common+0xc8>
 80114de:	2000      	movs	r0, #0
 80114e0:	e008      	b.n	80114f4 <_printf_common+0xa8>
 80114e2:	2301      	movs	r3, #1
 80114e4:	4652      	mov	r2, sl
 80114e6:	4649      	mov	r1, r9
 80114e8:	4638      	mov	r0, r7
 80114ea:	47c0      	blx	r8
 80114ec:	3001      	adds	r0, #1
 80114ee:	d103      	bne.n	80114f8 <_printf_common+0xac>
 80114f0:	f04f 30ff 	mov.w	r0, #4294967295
 80114f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114f8:	3501      	adds	r5, #1
 80114fa:	e7c6      	b.n	801148a <_printf_common+0x3e>
 80114fc:	18e1      	adds	r1, r4, r3
 80114fe:	1c5a      	adds	r2, r3, #1
 8011500:	2030      	movs	r0, #48	; 0x30
 8011502:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011506:	4422      	add	r2, r4
 8011508:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801150c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011510:	3302      	adds	r3, #2
 8011512:	e7c7      	b.n	80114a4 <_printf_common+0x58>
 8011514:	2301      	movs	r3, #1
 8011516:	4622      	mov	r2, r4
 8011518:	4649      	mov	r1, r9
 801151a:	4638      	mov	r0, r7
 801151c:	47c0      	blx	r8
 801151e:	3001      	adds	r0, #1
 8011520:	d0e6      	beq.n	80114f0 <_printf_common+0xa4>
 8011522:	3601      	adds	r6, #1
 8011524:	e7d9      	b.n	80114da <_printf_common+0x8e>
	...

08011528 <_printf_i>:
 8011528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801152c:	7e0f      	ldrb	r7, [r1, #24]
 801152e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011530:	2f78      	cmp	r7, #120	; 0x78
 8011532:	4691      	mov	r9, r2
 8011534:	4680      	mov	r8, r0
 8011536:	460c      	mov	r4, r1
 8011538:	469a      	mov	sl, r3
 801153a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801153e:	d807      	bhi.n	8011550 <_printf_i+0x28>
 8011540:	2f62      	cmp	r7, #98	; 0x62
 8011542:	d80a      	bhi.n	801155a <_printf_i+0x32>
 8011544:	2f00      	cmp	r7, #0
 8011546:	f000 80d4 	beq.w	80116f2 <_printf_i+0x1ca>
 801154a:	2f58      	cmp	r7, #88	; 0x58
 801154c:	f000 80c0 	beq.w	80116d0 <_printf_i+0x1a8>
 8011550:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011554:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011558:	e03a      	b.n	80115d0 <_printf_i+0xa8>
 801155a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801155e:	2b15      	cmp	r3, #21
 8011560:	d8f6      	bhi.n	8011550 <_printf_i+0x28>
 8011562:	a101      	add	r1, pc, #4	; (adr r1, 8011568 <_printf_i+0x40>)
 8011564:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011568:	080115c1 	.word	0x080115c1
 801156c:	080115d5 	.word	0x080115d5
 8011570:	08011551 	.word	0x08011551
 8011574:	08011551 	.word	0x08011551
 8011578:	08011551 	.word	0x08011551
 801157c:	08011551 	.word	0x08011551
 8011580:	080115d5 	.word	0x080115d5
 8011584:	08011551 	.word	0x08011551
 8011588:	08011551 	.word	0x08011551
 801158c:	08011551 	.word	0x08011551
 8011590:	08011551 	.word	0x08011551
 8011594:	080116d9 	.word	0x080116d9
 8011598:	08011601 	.word	0x08011601
 801159c:	08011693 	.word	0x08011693
 80115a0:	08011551 	.word	0x08011551
 80115a4:	08011551 	.word	0x08011551
 80115a8:	080116fb 	.word	0x080116fb
 80115ac:	08011551 	.word	0x08011551
 80115b0:	08011601 	.word	0x08011601
 80115b4:	08011551 	.word	0x08011551
 80115b8:	08011551 	.word	0x08011551
 80115bc:	0801169b 	.word	0x0801169b
 80115c0:	682b      	ldr	r3, [r5, #0]
 80115c2:	1d1a      	adds	r2, r3, #4
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	602a      	str	r2, [r5, #0]
 80115c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80115cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80115d0:	2301      	movs	r3, #1
 80115d2:	e09f      	b.n	8011714 <_printf_i+0x1ec>
 80115d4:	6820      	ldr	r0, [r4, #0]
 80115d6:	682b      	ldr	r3, [r5, #0]
 80115d8:	0607      	lsls	r7, r0, #24
 80115da:	f103 0104 	add.w	r1, r3, #4
 80115de:	6029      	str	r1, [r5, #0]
 80115e0:	d501      	bpl.n	80115e6 <_printf_i+0xbe>
 80115e2:	681e      	ldr	r6, [r3, #0]
 80115e4:	e003      	b.n	80115ee <_printf_i+0xc6>
 80115e6:	0646      	lsls	r6, r0, #25
 80115e8:	d5fb      	bpl.n	80115e2 <_printf_i+0xba>
 80115ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80115ee:	2e00      	cmp	r6, #0
 80115f0:	da03      	bge.n	80115fa <_printf_i+0xd2>
 80115f2:	232d      	movs	r3, #45	; 0x2d
 80115f4:	4276      	negs	r6, r6
 80115f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80115fa:	485a      	ldr	r0, [pc, #360]	; (8011764 <_printf_i+0x23c>)
 80115fc:	230a      	movs	r3, #10
 80115fe:	e012      	b.n	8011626 <_printf_i+0xfe>
 8011600:	682b      	ldr	r3, [r5, #0]
 8011602:	6820      	ldr	r0, [r4, #0]
 8011604:	1d19      	adds	r1, r3, #4
 8011606:	6029      	str	r1, [r5, #0]
 8011608:	0605      	lsls	r5, r0, #24
 801160a:	d501      	bpl.n	8011610 <_printf_i+0xe8>
 801160c:	681e      	ldr	r6, [r3, #0]
 801160e:	e002      	b.n	8011616 <_printf_i+0xee>
 8011610:	0641      	lsls	r1, r0, #25
 8011612:	d5fb      	bpl.n	801160c <_printf_i+0xe4>
 8011614:	881e      	ldrh	r6, [r3, #0]
 8011616:	4853      	ldr	r0, [pc, #332]	; (8011764 <_printf_i+0x23c>)
 8011618:	2f6f      	cmp	r7, #111	; 0x6f
 801161a:	bf0c      	ite	eq
 801161c:	2308      	moveq	r3, #8
 801161e:	230a      	movne	r3, #10
 8011620:	2100      	movs	r1, #0
 8011622:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011626:	6865      	ldr	r5, [r4, #4]
 8011628:	60a5      	str	r5, [r4, #8]
 801162a:	2d00      	cmp	r5, #0
 801162c:	bfa2      	ittt	ge
 801162e:	6821      	ldrge	r1, [r4, #0]
 8011630:	f021 0104 	bicge.w	r1, r1, #4
 8011634:	6021      	strge	r1, [r4, #0]
 8011636:	b90e      	cbnz	r6, 801163c <_printf_i+0x114>
 8011638:	2d00      	cmp	r5, #0
 801163a:	d04b      	beq.n	80116d4 <_printf_i+0x1ac>
 801163c:	4615      	mov	r5, r2
 801163e:	fbb6 f1f3 	udiv	r1, r6, r3
 8011642:	fb03 6711 	mls	r7, r3, r1, r6
 8011646:	5dc7      	ldrb	r7, [r0, r7]
 8011648:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801164c:	4637      	mov	r7, r6
 801164e:	42bb      	cmp	r3, r7
 8011650:	460e      	mov	r6, r1
 8011652:	d9f4      	bls.n	801163e <_printf_i+0x116>
 8011654:	2b08      	cmp	r3, #8
 8011656:	d10b      	bne.n	8011670 <_printf_i+0x148>
 8011658:	6823      	ldr	r3, [r4, #0]
 801165a:	07de      	lsls	r6, r3, #31
 801165c:	d508      	bpl.n	8011670 <_printf_i+0x148>
 801165e:	6923      	ldr	r3, [r4, #16]
 8011660:	6861      	ldr	r1, [r4, #4]
 8011662:	4299      	cmp	r1, r3
 8011664:	bfde      	ittt	le
 8011666:	2330      	movle	r3, #48	; 0x30
 8011668:	f805 3c01 	strble.w	r3, [r5, #-1]
 801166c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011670:	1b52      	subs	r2, r2, r5
 8011672:	6122      	str	r2, [r4, #16]
 8011674:	f8cd a000 	str.w	sl, [sp]
 8011678:	464b      	mov	r3, r9
 801167a:	aa03      	add	r2, sp, #12
 801167c:	4621      	mov	r1, r4
 801167e:	4640      	mov	r0, r8
 8011680:	f7ff fee4 	bl	801144c <_printf_common>
 8011684:	3001      	adds	r0, #1
 8011686:	d14a      	bne.n	801171e <_printf_i+0x1f6>
 8011688:	f04f 30ff 	mov.w	r0, #4294967295
 801168c:	b004      	add	sp, #16
 801168e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011692:	6823      	ldr	r3, [r4, #0]
 8011694:	f043 0320 	orr.w	r3, r3, #32
 8011698:	6023      	str	r3, [r4, #0]
 801169a:	4833      	ldr	r0, [pc, #204]	; (8011768 <_printf_i+0x240>)
 801169c:	2778      	movs	r7, #120	; 0x78
 801169e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80116a2:	6823      	ldr	r3, [r4, #0]
 80116a4:	6829      	ldr	r1, [r5, #0]
 80116a6:	061f      	lsls	r7, r3, #24
 80116a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80116ac:	d402      	bmi.n	80116b4 <_printf_i+0x18c>
 80116ae:	065f      	lsls	r7, r3, #25
 80116b0:	bf48      	it	mi
 80116b2:	b2b6      	uxthmi	r6, r6
 80116b4:	07df      	lsls	r7, r3, #31
 80116b6:	bf48      	it	mi
 80116b8:	f043 0320 	orrmi.w	r3, r3, #32
 80116bc:	6029      	str	r1, [r5, #0]
 80116be:	bf48      	it	mi
 80116c0:	6023      	strmi	r3, [r4, #0]
 80116c2:	b91e      	cbnz	r6, 80116cc <_printf_i+0x1a4>
 80116c4:	6823      	ldr	r3, [r4, #0]
 80116c6:	f023 0320 	bic.w	r3, r3, #32
 80116ca:	6023      	str	r3, [r4, #0]
 80116cc:	2310      	movs	r3, #16
 80116ce:	e7a7      	b.n	8011620 <_printf_i+0xf8>
 80116d0:	4824      	ldr	r0, [pc, #144]	; (8011764 <_printf_i+0x23c>)
 80116d2:	e7e4      	b.n	801169e <_printf_i+0x176>
 80116d4:	4615      	mov	r5, r2
 80116d6:	e7bd      	b.n	8011654 <_printf_i+0x12c>
 80116d8:	682b      	ldr	r3, [r5, #0]
 80116da:	6826      	ldr	r6, [r4, #0]
 80116dc:	6961      	ldr	r1, [r4, #20]
 80116de:	1d18      	adds	r0, r3, #4
 80116e0:	6028      	str	r0, [r5, #0]
 80116e2:	0635      	lsls	r5, r6, #24
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	d501      	bpl.n	80116ec <_printf_i+0x1c4>
 80116e8:	6019      	str	r1, [r3, #0]
 80116ea:	e002      	b.n	80116f2 <_printf_i+0x1ca>
 80116ec:	0670      	lsls	r0, r6, #25
 80116ee:	d5fb      	bpl.n	80116e8 <_printf_i+0x1c0>
 80116f0:	8019      	strh	r1, [r3, #0]
 80116f2:	2300      	movs	r3, #0
 80116f4:	6123      	str	r3, [r4, #16]
 80116f6:	4615      	mov	r5, r2
 80116f8:	e7bc      	b.n	8011674 <_printf_i+0x14c>
 80116fa:	682b      	ldr	r3, [r5, #0]
 80116fc:	1d1a      	adds	r2, r3, #4
 80116fe:	602a      	str	r2, [r5, #0]
 8011700:	681d      	ldr	r5, [r3, #0]
 8011702:	6862      	ldr	r2, [r4, #4]
 8011704:	2100      	movs	r1, #0
 8011706:	4628      	mov	r0, r5
 8011708:	f7ee fe02 	bl	8000310 <memchr>
 801170c:	b108      	cbz	r0, 8011712 <_printf_i+0x1ea>
 801170e:	1b40      	subs	r0, r0, r5
 8011710:	6060      	str	r0, [r4, #4]
 8011712:	6863      	ldr	r3, [r4, #4]
 8011714:	6123      	str	r3, [r4, #16]
 8011716:	2300      	movs	r3, #0
 8011718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801171c:	e7aa      	b.n	8011674 <_printf_i+0x14c>
 801171e:	6923      	ldr	r3, [r4, #16]
 8011720:	462a      	mov	r2, r5
 8011722:	4649      	mov	r1, r9
 8011724:	4640      	mov	r0, r8
 8011726:	47d0      	blx	sl
 8011728:	3001      	adds	r0, #1
 801172a:	d0ad      	beq.n	8011688 <_printf_i+0x160>
 801172c:	6823      	ldr	r3, [r4, #0]
 801172e:	079b      	lsls	r3, r3, #30
 8011730:	d413      	bmi.n	801175a <_printf_i+0x232>
 8011732:	68e0      	ldr	r0, [r4, #12]
 8011734:	9b03      	ldr	r3, [sp, #12]
 8011736:	4298      	cmp	r0, r3
 8011738:	bfb8      	it	lt
 801173a:	4618      	movlt	r0, r3
 801173c:	e7a6      	b.n	801168c <_printf_i+0x164>
 801173e:	2301      	movs	r3, #1
 8011740:	4632      	mov	r2, r6
 8011742:	4649      	mov	r1, r9
 8011744:	4640      	mov	r0, r8
 8011746:	47d0      	blx	sl
 8011748:	3001      	adds	r0, #1
 801174a:	d09d      	beq.n	8011688 <_printf_i+0x160>
 801174c:	3501      	adds	r5, #1
 801174e:	68e3      	ldr	r3, [r4, #12]
 8011750:	9903      	ldr	r1, [sp, #12]
 8011752:	1a5b      	subs	r3, r3, r1
 8011754:	42ab      	cmp	r3, r5
 8011756:	dcf2      	bgt.n	801173e <_printf_i+0x216>
 8011758:	e7eb      	b.n	8011732 <_printf_i+0x20a>
 801175a:	2500      	movs	r5, #0
 801175c:	f104 0619 	add.w	r6, r4, #25
 8011760:	e7f5      	b.n	801174e <_printf_i+0x226>
 8011762:	bf00      	nop
 8011764:	08015726 	.word	0x08015726
 8011768:	08015737 	.word	0x08015737

0801176c <_scanf_float>:
 801176c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011770:	b087      	sub	sp, #28
 8011772:	4617      	mov	r7, r2
 8011774:	9303      	str	r3, [sp, #12]
 8011776:	688b      	ldr	r3, [r1, #8]
 8011778:	1e5a      	subs	r2, r3, #1
 801177a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801177e:	bf83      	ittte	hi
 8011780:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011784:	195b      	addhi	r3, r3, r5
 8011786:	9302      	strhi	r3, [sp, #8]
 8011788:	2300      	movls	r3, #0
 801178a:	bf86      	itte	hi
 801178c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011790:	608b      	strhi	r3, [r1, #8]
 8011792:	9302      	strls	r3, [sp, #8]
 8011794:	680b      	ldr	r3, [r1, #0]
 8011796:	468b      	mov	fp, r1
 8011798:	2500      	movs	r5, #0
 801179a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801179e:	f84b 3b1c 	str.w	r3, [fp], #28
 80117a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80117a6:	4680      	mov	r8, r0
 80117a8:	460c      	mov	r4, r1
 80117aa:	465e      	mov	r6, fp
 80117ac:	46aa      	mov	sl, r5
 80117ae:	46a9      	mov	r9, r5
 80117b0:	9501      	str	r5, [sp, #4]
 80117b2:	68a2      	ldr	r2, [r4, #8]
 80117b4:	b152      	cbz	r2, 80117cc <_scanf_float+0x60>
 80117b6:	683b      	ldr	r3, [r7, #0]
 80117b8:	781b      	ldrb	r3, [r3, #0]
 80117ba:	2b4e      	cmp	r3, #78	; 0x4e
 80117bc:	d864      	bhi.n	8011888 <_scanf_float+0x11c>
 80117be:	2b40      	cmp	r3, #64	; 0x40
 80117c0:	d83c      	bhi.n	801183c <_scanf_float+0xd0>
 80117c2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80117c6:	b2c8      	uxtb	r0, r1
 80117c8:	280e      	cmp	r0, #14
 80117ca:	d93a      	bls.n	8011842 <_scanf_float+0xd6>
 80117cc:	f1b9 0f00 	cmp.w	r9, #0
 80117d0:	d003      	beq.n	80117da <_scanf_float+0x6e>
 80117d2:	6823      	ldr	r3, [r4, #0]
 80117d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80117d8:	6023      	str	r3, [r4, #0]
 80117da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80117de:	f1ba 0f01 	cmp.w	sl, #1
 80117e2:	f200 8113 	bhi.w	8011a0c <_scanf_float+0x2a0>
 80117e6:	455e      	cmp	r6, fp
 80117e8:	f200 8105 	bhi.w	80119f6 <_scanf_float+0x28a>
 80117ec:	2501      	movs	r5, #1
 80117ee:	4628      	mov	r0, r5
 80117f0:	b007      	add	sp, #28
 80117f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117f6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80117fa:	2a0d      	cmp	r2, #13
 80117fc:	d8e6      	bhi.n	80117cc <_scanf_float+0x60>
 80117fe:	a101      	add	r1, pc, #4	; (adr r1, 8011804 <_scanf_float+0x98>)
 8011800:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011804:	08011943 	.word	0x08011943
 8011808:	080117cd 	.word	0x080117cd
 801180c:	080117cd 	.word	0x080117cd
 8011810:	080117cd 	.word	0x080117cd
 8011814:	080119a3 	.word	0x080119a3
 8011818:	0801197b 	.word	0x0801197b
 801181c:	080117cd 	.word	0x080117cd
 8011820:	080117cd 	.word	0x080117cd
 8011824:	08011951 	.word	0x08011951
 8011828:	080117cd 	.word	0x080117cd
 801182c:	080117cd 	.word	0x080117cd
 8011830:	080117cd 	.word	0x080117cd
 8011834:	080117cd 	.word	0x080117cd
 8011838:	08011909 	.word	0x08011909
 801183c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8011840:	e7db      	b.n	80117fa <_scanf_float+0x8e>
 8011842:	290e      	cmp	r1, #14
 8011844:	d8c2      	bhi.n	80117cc <_scanf_float+0x60>
 8011846:	a001      	add	r0, pc, #4	; (adr r0, 801184c <_scanf_float+0xe0>)
 8011848:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801184c:	080118fb 	.word	0x080118fb
 8011850:	080117cd 	.word	0x080117cd
 8011854:	080118fb 	.word	0x080118fb
 8011858:	0801198f 	.word	0x0801198f
 801185c:	080117cd 	.word	0x080117cd
 8011860:	080118a9 	.word	0x080118a9
 8011864:	080118e5 	.word	0x080118e5
 8011868:	080118e5 	.word	0x080118e5
 801186c:	080118e5 	.word	0x080118e5
 8011870:	080118e5 	.word	0x080118e5
 8011874:	080118e5 	.word	0x080118e5
 8011878:	080118e5 	.word	0x080118e5
 801187c:	080118e5 	.word	0x080118e5
 8011880:	080118e5 	.word	0x080118e5
 8011884:	080118e5 	.word	0x080118e5
 8011888:	2b6e      	cmp	r3, #110	; 0x6e
 801188a:	d809      	bhi.n	80118a0 <_scanf_float+0x134>
 801188c:	2b60      	cmp	r3, #96	; 0x60
 801188e:	d8b2      	bhi.n	80117f6 <_scanf_float+0x8a>
 8011890:	2b54      	cmp	r3, #84	; 0x54
 8011892:	d077      	beq.n	8011984 <_scanf_float+0x218>
 8011894:	2b59      	cmp	r3, #89	; 0x59
 8011896:	d199      	bne.n	80117cc <_scanf_float+0x60>
 8011898:	2d07      	cmp	r5, #7
 801189a:	d197      	bne.n	80117cc <_scanf_float+0x60>
 801189c:	2508      	movs	r5, #8
 801189e:	e029      	b.n	80118f4 <_scanf_float+0x188>
 80118a0:	2b74      	cmp	r3, #116	; 0x74
 80118a2:	d06f      	beq.n	8011984 <_scanf_float+0x218>
 80118a4:	2b79      	cmp	r3, #121	; 0x79
 80118a6:	e7f6      	b.n	8011896 <_scanf_float+0x12a>
 80118a8:	6821      	ldr	r1, [r4, #0]
 80118aa:	05c8      	lsls	r0, r1, #23
 80118ac:	d51a      	bpl.n	80118e4 <_scanf_float+0x178>
 80118ae:	9b02      	ldr	r3, [sp, #8]
 80118b0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80118b4:	6021      	str	r1, [r4, #0]
 80118b6:	f109 0901 	add.w	r9, r9, #1
 80118ba:	b11b      	cbz	r3, 80118c4 <_scanf_float+0x158>
 80118bc:	3b01      	subs	r3, #1
 80118be:	3201      	adds	r2, #1
 80118c0:	9302      	str	r3, [sp, #8]
 80118c2:	60a2      	str	r2, [r4, #8]
 80118c4:	68a3      	ldr	r3, [r4, #8]
 80118c6:	3b01      	subs	r3, #1
 80118c8:	60a3      	str	r3, [r4, #8]
 80118ca:	6923      	ldr	r3, [r4, #16]
 80118cc:	3301      	adds	r3, #1
 80118ce:	6123      	str	r3, [r4, #16]
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	3b01      	subs	r3, #1
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	607b      	str	r3, [r7, #4]
 80118d8:	f340 8084 	ble.w	80119e4 <_scanf_float+0x278>
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	3301      	adds	r3, #1
 80118e0:	603b      	str	r3, [r7, #0]
 80118e2:	e766      	b.n	80117b2 <_scanf_float+0x46>
 80118e4:	eb1a 0f05 	cmn.w	sl, r5
 80118e8:	f47f af70 	bne.w	80117cc <_scanf_float+0x60>
 80118ec:	6822      	ldr	r2, [r4, #0]
 80118ee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80118f2:	6022      	str	r2, [r4, #0]
 80118f4:	f806 3b01 	strb.w	r3, [r6], #1
 80118f8:	e7e4      	b.n	80118c4 <_scanf_float+0x158>
 80118fa:	6822      	ldr	r2, [r4, #0]
 80118fc:	0610      	lsls	r0, r2, #24
 80118fe:	f57f af65 	bpl.w	80117cc <_scanf_float+0x60>
 8011902:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011906:	e7f4      	b.n	80118f2 <_scanf_float+0x186>
 8011908:	f1ba 0f00 	cmp.w	sl, #0
 801190c:	d10e      	bne.n	801192c <_scanf_float+0x1c0>
 801190e:	f1b9 0f00 	cmp.w	r9, #0
 8011912:	d10e      	bne.n	8011932 <_scanf_float+0x1c6>
 8011914:	6822      	ldr	r2, [r4, #0]
 8011916:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801191a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801191e:	d108      	bne.n	8011932 <_scanf_float+0x1c6>
 8011920:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011924:	6022      	str	r2, [r4, #0]
 8011926:	f04f 0a01 	mov.w	sl, #1
 801192a:	e7e3      	b.n	80118f4 <_scanf_float+0x188>
 801192c:	f1ba 0f02 	cmp.w	sl, #2
 8011930:	d055      	beq.n	80119de <_scanf_float+0x272>
 8011932:	2d01      	cmp	r5, #1
 8011934:	d002      	beq.n	801193c <_scanf_float+0x1d0>
 8011936:	2d04      	cmp	r5, #4
 8011938:	f47f af48 	bne.w	80117cc <_scanf_float+0x60>
 801193c:	3501      	adds	r5, #1
 801193e:	b2ed      	uxtb	r5, r5
 8011940:	e7d8      	b.n	80118f4 <_scanf_float+0x188>
 8011942:	f1ba 0f01 	cmp.w	sl, #1
 8011946:	f47f af41 	bne.w	80117cc <_scanf_float+0x60>
 801194a:	f04f 0a02 	mov.w	sl, #2
 801194e:	e7d1      	b.n	80118f4 <_scanf_float+0x188>
 8011950:	b97d      	cbnz	r5, 8011972 <_scanf_float+0x206>
 8011952:	f1b9 0f00 	cmp.w	r9, #0
 8011956:	f47f af3c 	bne.w	80117d2 <_scanf_float+0x66>
 801195a:	6822      	ldr	r2, [r4, #0]
 801195c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011960:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011964:	f47f af39 	bne.w	80117da <_scanf_float+0x6e>
 8011968:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801196c:	6022      	str	r2, [r4, #0]
 801196e:	2501      	movs	r5, #1
 8011970:	e7c0      	b.n	80118f4 <_scanf_float+0x188>
 8011972:	2d03      	cmp	r5, #3
 8011974:	d0e2      	beq.n	801193c <_scanf_float+0x1d0>
 8011976:	2d05      	cmp	r5, #5
 8011978:	e7de      	b.n	8011938 <_scanf_float+0x1cc>
 801197a:	2d02      	cmp	r5, #2
 801197c:	f47f af26 	bne.w	80117cc <_scanf_float+0x60>
 8011980:	2503      	movs	r5, #3
 8011982:	e7b7      	b.n	80118f4 <_scanf_float+0x188>
 8011984:	2d06      	cmp	r5, #6
 8011986:	f47f af21 	bne.w	80117cc <_scanf_float+0x60>
 801198a:	2507      	movs	r5, #7
 801198c:	e7b2      	b.n	80118f4 <_scanf_float+0x188>
 801198e:	6822      	ldr	r2, [r4, #0]
 8011990:	0591      	lsls	r1, r2, #22
 8011992:	f57f af1b 	bpl.w	80117cc <_scanf_float+0x60>
 8011996:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801199a:	6022      	str	r2, [r4, #0]
 801199c:	f8cd 9004 	str.w	r9, [sp, #4]
 80119a0:	e7a8      	b.n	80118f4 <_scanf_float+0x188>
 80119a2:	6822      	ldr	r2, [r4, #0]
 80119a4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80119a8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80119ac:	d006      	beq.n	80119bc <_scanf_float+0x250>
 80119ae:	0550      	lsls	r0, r2, #21
 80119b0:	f57f af0c 	bpl.w	80117cc <_scanf_float+0x60>
 80119b4:	f1b9 0f00 	cmp.w	r9, #0
 80119b8:	f43f af0f 	beq.w	80117da <_scanf_float+0x6e>
 80119bc:	0591      	lsls	r1, r2, #22
 80119be:	bf58      	it	pl
 80119c0:	9901      	ldrpl	r1, [sp, #4]
 80119c2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80119c6:	bf58      	it	pl
 80119c8:	eba9 0101 	subpl.w	r1, r9, r1
 80119cc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80119d0:	bf58      	it	pl
 80119d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80119d6:	6022      	str	r2, [r4, #0]
 80119d8:	f04f 0900 	mov.w	r9, #0
 80119dc:	e78a      	b.n	80118f4 <_scanf_float+0x188>
 80119de:	f04f 0a03 	mov.w	sl, #3
 80119e2:	e787      	b.n	80118f4 <_scanf_float+0x188>
 80119e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80119e8:	4639      	mov	r1, r7
 80119ea:	4640      	mov	r0, r8
 80119ec:	4798      	blx	r3
 80119ee:	2800      	cmp	r0, #0
 80119f0:	f43f aedf 	beq.w	80117b2 <_scanf_float+0x46>
 80119f4:	e6ea      	b.n	80117cc <_scanf_float+0x60>
 80119f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80119fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80119fe:	463a      	mov	r2, r7
 8011a00:	4640      	mov	r0, r8
 8011a02:	4798      	blx	r3
 8011a04:	6923      	ldr	r3, [r4, #16]
 8011a06:	3b01      	subs	r3, #1
 8011a08:	6123      	str	r3, [r4, #16]
 8011a0a:	e6ec      	b.n	80117e6 <_scanf_float+0x7a>
 8011a0c:	1e6b      	subs	r3, r5, #1
 8011a0e:	2b06      	cmp	r3, #6
 8011a10:	d825      	bhi.n	8011a5e <_scanf_float+0x2f2>
 8011a12:	2d02      	cmp	r5, #2
 8011a14:	d836      	bhi.n	8011a84 <_scanf_float+0x318>
 8011a16:	455e      	cmp	r6, fp
 8011a18:	f67f aee8 	bls.w	80117ec <_scanf_float+0x80>
 8011a1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011a20:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011a24:	463a      	mov	r2, r7
 8011a26:	4640      	mov	r0, r8
 8011a28:	4798      	blx	r3
 8011a2a:	6923      	ldr	r3, [r4, #16]
 8011a2c:	3b01      	subs	r3, #1
 8011a2e:	6123      	str	r3, [r4, #16]
 8011a30:	e7f1      	b.n	8011a16 <_scanf_float+0x2aa>
 8011a32:	9802      	ldr	r0, [sp, #8]
 8011a34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011a38:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8011a3c:	9002      	str	r0, [sp, #8]
 8011a3e:	463a      	mov	r2, r7
 8011a40:	4640      	mov	r0, r8
 8011a42:	4798      	blx	r3
 8011a44:	6923      	ldr	r3, [r4, #16]
 8011a46:	3b01      	subs	r3, #1
 8011a48:	6123      	str	r3, [r4, #16]
 8011a4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011a4e:	fa5f fa8a 	uxtb.w	sl, sl
 8011a52:	f1ba 0f02 	cmp.w	sl, #2
 8011a56:	d1ec      	bne.n	8011a32 <_scanf_float+0x2c6>
 8011a58:	3d03      	subs	r5, #3
 8011a5a:	b2ed      	uxtb	r5, r5
 8011a5c:	1b76      	subs	r6, r6, r5
 8011a5e:	6823      	ldr	r3, [r4, #0]
 8011a60:	05da      	lsls	r2, r3, #23
 8011a62:	d52f      	bpl.n	8011ac4 <_scanf_float+0x358>
 8011a64:	055b      	lsls	r3, r3, #21
 8011a66:	d510      	bpl.n	8011a8a <_scanf_float+0x31e>
 8011a68:	455e      	cmp	r6, fp
 8011a6a:	f67f aebf 	bls.w	80117ec <_scanf_float+0x80>
 8011a6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011a72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011a76:	463a      	mov	r2, r7
 8011a78:	4640      	mov	r0, r8
 8011a7a:	4798      	blx	r3
 8011a7c:	6923      	ldr	r3, [r4, #16]
 8011a7e:	3b01      	subs	r3, #1
 8011a80:	6123      	str	r3, [r4, #16]
 8011a82:	e7f1      	b.n	8011a68 <_scanf_float+0x2fc>
 8011a84:	46aa      	mov	sl, r5
 8011a86:	9602      	str	r6, [sp, #8]
 8011a88:	e7df      	b.n	8011a4a <_scanf_float+0x2de>
 8011a8a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011a8e:	6923      	ldr	r3, [r4, #16]
 8011a90:	2965      	cmp	r1, #101	; 0x65
 8011a92:	f103 33ff 	add.w	r3, r3, #4294967295
 8011a96:	f106 35ff 	add.w	r5, r6, #4294967295
 8011a9a:	6123      	str	r3, [r4, #16]
 8011a9c:	d00c      	beq.n	8011ab8 <_scanf_float+0x34c>
 8011a9e:	2945      	cmp	r1, #69	; 0x45
 8011aa0:	d00a      	beq.n	8011ab8 <_scanf_float+0x34c>
 8011aa2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011aa6:	463a      	mov	r2, r7
 8011aa8:	4640      	mov	r0, r8
 8011aaa:	4798      	blx	r3
 8011aac:	6923      	ldr	r3, [r4, #16]
 8011aae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011ab2:	3b01      	subs	r3, #1
 8011ab4:	1eb5      	subs	r5, r6, #2
 8011ab6:	6123      	str	r3, [r4, #16]
 8011ab8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011abc:	463a      	mov	r2, r7
 8011abe:	4640      	mov	r0, r8
 8011ac0:	4798      	blx	r3
 8011ac2:	462e      	mov	r6, r5
 8011ac4:	6825      	ldr	r5, [r4, #0]
 8011ac6:	f015 0510 	ands.w	r5, r5, #16
 8011aca:	d14d      	bne.n	8011b68 <_scanf_float+0x3fc>
 8011acc:	7035      	strb	r5, [r6, #0]
 8011ace:	6823      	ldr	r3, [r4, #0]
 8011ad0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011ad8:	d11a      	bne.n	8011b10 <_scanf_float+0x3a4>
 8011ada:	9b01      	ldr	r3, [sp, #4]
 8011adc:	454b      	cmp	r3, r9
 8011ade:	eba3 0209 	sub.w	r2, r3, r9
 8011ae2:	d122      	bne.n	8011b2a <_scanf_float+0x3be>
 8011ae4:	2200      	movs	r2, #0
 8011ae6:	4659      	mov	r1, fp
 8011ae8:	4640      	mov	r0, r8
 8011aea:	f002 fb53 	bl	8014194 <_strtod_r>
 8011aee:	9b03      	ldr	r3, [sp, #12]
 8011af0:	6821      	ldr	r1, [r4, #0]
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	f011 0f02 	tst.w	r1, #2
 8011af8:	f103 0204 	add.w	r2, r3, #4
 8011afc:	d020      	beq.n	8011b40 <_scanf_float+0x3d4>
 8011afe:	9903      	ldr	r1, [sp, #12]
 8011b00:	600a      	str	r2, [r1, #0]
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	ed83 0b00 	vstr	d0, [r3]
 8011b08:	68e3      	ldr	r3, [r4, #12]
 8011b0a:	3301      	adds	r3, #1
 8011b0c:	60e3      	str	r3, [r4, #12]
 8011b0e:	e66e      	b.n	80117ee <_scanf_float+0x82>
 8011b10:	9b04      	ldr	r3, [sp, #16]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d0e6      	beq.n	8011ae4 <_scanf_float+0x378>
 8011b16:	9905      	ldr	r1, [sp, #20]
 8011b18:	230a      	movs	r3, #10
 8011b1a:	462a      	mov	r2, r5
 8011b1c:	3101      	adds	r1, #1
 8011b1e:	4640      	mov	r0, r8
 8011b20:	f002 fbc0 	bl	80142a4 <_strtol_r>
 8011b24:	9b04      	ldr	r3, [sp, #16]
 8011b26:	9e05      	ldr	r6, [sp, #20]
 8011b28:	1ac2      	subs	r2, r0, r3
 8011b2a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011b2e:	429e      	cmp	r6, r3
 8011b30:	bf28      	it	cs
 8011b32:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8011b36:	490d      	ldr	r1, [pc, #52]	; (8011b6c <_scanf_float+0x400>)
 8011b38:	4630      	mov	r0, r6
 8011b3a:	f000 f8cb 	bl	8011cd4 <siprintf>
 8011b3e:	e7d1      	b.n	8011ae4 <_scanf_float+0x378>
 8011b40:	f011 0f04 	tst.w	r1, #4
 8011b44:	9903      	ldr	r1, [sp, #12]
 8011b46:	600a      	str	r2, [r1, #0]
 8011b48:	d1db      	bne.n	8011b02 <_scanf_float+0x396>
 8011b4a:	eeb4 0b40 	vcmp.f64	d0, d0
 8011b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b52:	681e      	ldr	r6, [r3, #0]
 8011b54:	d705      	bvc.n	8011b62 <_scanf_float+0x3f6>
 8011b56:	4806      	ldr	r0, [pc, #24]	; (8011b70 <_scanf_float+0x404>)
 8011b58:	f000 f9ac 	bl	8011eb4 <nanf>
 8011b5c:	ed86 0a00 	vstr	s0, [r6]
 8011b60:	e7d2      	b.n	8011b08 <_scanf_float+0x39c>
 8011b62:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8011b66:	e7f9      	b.n	8011b5c <_scanf_float+0x3f0>
 8011b68:	2500      	movs	r5, #0
 8011b6a:	e640      	b.n	80117ee <_scanf_float+0x82>
 8011b6c:	08015748 	.word	0x08015748
 8011b70:	08015add 	.word	0x08015add

08011b74 <std>:
 8011b74:	2300      	movs	r3, #0
 8011b76:	b510      	push	{r4, lr}
 8011b78:	4604      	mov	r4, r0
 8011b7a:	e9c0 3300 	strd	r3, r3, [r0]
 8011b7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011b82:	6083      	str	r3, [r0, #8]
 8011b84:	8181      	strh	r1, [r0, #12]
 8011b86:	6643      	str	r3, [r0, #100]	; 0x64
 8011b88:	81c2      	strh	r2, [r0, #14]
 8011b8a:	6183      	str	r3, [r0, #24]
 8011b8c:	4619      	mov	r1, r3
 8011b8e:	2208      	movs	r2, #8
 8011b90:	305c      	adds	r0, #92	; 0x5c
 8011b92:	f000 f902 	bl	8011d9a <memset>
 8011b96:	4b05      	ldr	r3, [pc, #20]	; (8011bac <std+0x38>)
 8011b98:	6263      	str	r3, [r4, #36]	; 0x24
 8011b9a:	4b05      	ldr	r3, [pc, #20]	; (8011bb0 <std+0x3c>)
 8011b9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8011b9e:	4b05      	ldr	r3, [pc, #20]	; (8011bb4 <std+0x40>)
 8011ba0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011ba2:	4b05      	ldr	r3, [pc, #20]	; (8011bb8 <std+0x44>)
 8011ba4:	6224      	str	r4, [r4, #32]
 8011ba6:	6323      	str	r3, [r4, #48]	; 0x30
 8011ba8:	bd10      	pop	{r4, pc}
 8011baa:	bf00      	nop
 8011bac:	08011d15 	.word	0x08011d15
 8011bb0:	08011d37 	.word	0x08011d37
 8011bb4:	08011d6f 	.word	0x08011d6f
 8011bb8:	08011d93 	.word	0x08011d93

08011bbc <stdio_exit_handler>:
 8011bbc:	4a02      	ldr	r2, [pc, #8]	; (8011bc8 <stdio_exit_handler+0xc>)
 8011bbe:	4903      	ldr	r1, [pc, #12]	; (8011bcc <stdio_exit_handler+0x10>)
 8011bc0:	4803      	ldr	r0, [pc, #12]	; (8011bd0 <stdio_exit_handler+0x14>)
 8011bc2:	f000 b869 	b.w	8011c98 <_fwalk_sglue>
 8011bc6:	bf00      	nop
 8011bc8:	24000010 	.word	0x24000010
 8011bcc:	08014665 	.word	0x08014665
 8011bd0:	2400001c 	.word	0x2400001c

08011bd4 <cleanup_stdio>:
 8011bd4:	6841      	ldr	r1, [r0, #4]
 8011bd6:	4b0c      	ldr	r3, [pc, #48]	; (8011c08 <cleanup_stdio+0x34>)
 8011bd8:	4299      	cmp	r1, r3
 8011bda:	b510      	push	{r4, lr}
 8011bdc:	4604      	mov	r4, r0
 8011bde:	d001      	beq.n	8011be4 <cleanup_stdio+0x10>
 8011be0:	f002 fd40 	bl	8014664 <_fflush_r>
 8011be4:	68a1      	ldr	r1, [r4, #8]
 8011be6:	4b09      	ldr	r3, [pc, #36]	; (8011c0c <cleanup_stdio+0x38>)
 8011be8:	4299      	cmp	r1, r3
 8011bea:	d002      	beq.n	8011bf2 <cleanup_stdio+0x1e>
 8011bec:	4620      	mov	r0, r4
 8011bee:	f002 fd39 	bl	8014664 <_fflush_r>
 8011bf2:	68e1      	ldr	r1, [r4, #12]
 8011bf4:	4b06      	ldr	r3, [pc, #24]	; (8011c10 <cleanup_stdio+0x3c>)
 8011bf6:	4299      	cmp	r1, r3
 8011bf8:	d004      	beq.n	8011c04 <cleanup_stdio+0x30>
 8011bfa:	4620      	mov	r0, r4
 8011bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c00:	f002 bd30 	b.w	8014664 <_fflush_r>
 8011c04:	bd10      	pop	{r4, pc}
 8011c06:	bf00      	nop
 8011c08:	24000e00 	.word	0x24000e00
 8011c0c:	24000e68 	.word	0x24000e68
 8011c10:	24000ed0 	.word	0x24000ed0

08011c14 <global_stdio_init.part.0>:
 8011c14:	b510      	push	{r4, lr}
 8011c16:	4b0b      	ldr	r3, [pc, #44]	; (8011c44 <global_stdio_init.part.0+0x30>)
 8011c18:	4c0b      	ldr	r4, [pc, #44]	; (8011c48 <global_stdio_init.part.0+0x34>)
 8011c1a:	4a0c      	ldr	r2, [pc, #48]	; (8011c4c <global_stdio_init.part.0+0x38>)
 8011c1c:	601a      	str	r2, [r3, #0]
 8011c1e:	4620      	mov	r0, r4
 8011c20:	2200      	movs	r2, #0
 8011c22:	2104      	movs	r1, #4
 8011c24:	f7ff ffa6 	bl	8011b74 <std>
 8011c28:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011c2c:	2201      	movs	r2, #1
 8011c2e:	2109      	movs	r1, #9
 8011c30:	f7ff ffa0 	bl	8011b74 <std>
 8011c34:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011c38:	2202      	movs	r2, #2
 8011c3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c3e:	2112      	movs	r1, #18
 8011c40:	f7ff bf98 	b.w	8011b74 <std>
 8011c44:	24000f38 	.word	0x24000f38
 8011c48:	24000e00 	.word	0x24000e00
 8011c4c:	08011bbd 	.word	0x08011bbd

08011c50 <__sfp_lock_acquire>:
 8011c50:	4801      	ldr	r0, [pc, #4]	; (8011c58 <__sfp_lock_acquire+0x8>)
 8011c52:	f000 b91f 	b.w	8011e94 <__retarget_lock_acquire_recursive>
 8011c56:	bf00      	nop
 8011c58:	24000f41 	.word	0x24000f41

08011c5c <__sfp_lock_release>:
 8011c5c:	4801      	ldr	r0, [pc, #4]	; (8011c64 <__sfp_lock_release+0x8>)
 8011c5e:	f000 b91a 	b.w	8011e96 <__retarget_lock_release_recursive>
 8011c62:	bf00      	nop
 8011c64:	24000f41 	.word	0x24000f41

08011c68 <__sinit>:
 8011c68:	b510      	push	{r4, lr}
 8011c6a:	4604      	mov	r4, r0
 8011c6c:	f7ff fff0 	bl	8011c50 <__sfp_lock_acquire>
 8011c70:	6a23      	ldr	r3, [r4, #32]
 8011c72:	b11b      	cbz	r3, 8011c7c <__sinit+0x14>
 8011c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c78:	f7ff bff0 	b.w	8011c5c <__sfp_lock_release>
 8011c7c:	4b04      	ldr	r3, [pc, #16]	; (8011c90 <__sinit+0x28>)
 8011c7e:	6223      	str	r3, [r4, #32]
 8011c80:	4b04      	ldr	r3, [pc, #16]	; (8011c94 <__sinit+0x2c>)
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d1f5      	bne.n	8011c74 <__sinit+0xc>
 8011c88:	f7ff ffc4 	bl	8011c14 <global_stdio_init.part.0>
 8011c8c:	e7f2      	b.n	8011c74 <__sinit+0xc>
 8011c8e:	bf00      	nop
 8011c90:	08011bd5 	.word	0x08011bd5
 8011c94:	24000f38 	.word	0x24000f38

08011c98 <_fwalk_sglue>:
 8011c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c9c:	4607      	mov	r7, r0
 8011c9e:	4688      	mov	r8, r1
 8011ca0:	4614      	mov	r4, r2
 8011ca2:	2600      	movs	r6, #0
 8011ca4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011ca8:	f1b9 0901 	subs.w	r9, r9, #1
 8011cac:	d505      	bpl.n	8011cba <_fwalk_sglue+0x22>
 8011cae:	6824      	ldr	r4, [r4, #0]
 8011cb0:	2c00      	cmp	r4, #0
 8011cb2:	d1f7      	bne.n	8011ca4 <_fwalk_sglue+0xc>
 8011cb4:	4630      	mov	r0, r6
 8011cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cba:	89ab      	ldrh	r3, [r5, #12]
 8011cbc:	2b01      	cmp	r3, #1
 8011cbe:	d907      	bls.n	8011cd0 <_fwalk_sglue+0x38>
 8011cc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011cc4:	3301      	adds	r3, #1
 8011cc6:	d003      	beq.n	8011cd0 <_fwalk_sglue+0x38>
 8011cc8:	4629      	mov	r1, r5
 8011cca:	4638      	mov	r0, r7
 8011ccc:	47c0      	blx	r8
 8011cce:	4306      	orrs	r6, r0
 8011cd0:	3568      	adds	r5, #104	; 0x68
 8011cd2:	e7e9      	b.n	8011ca8 <_fwalk_sglue+0x10>

08011cd4 <siprintf>:
 8011cd4:	b40e      	push	{r1, r2, r3}
 8011cd6:	b500      	push	{lr}
 8011cd8:	b09c      	sub	sp, #112	; 0x70
 8011cda:	ab1d      	add	r3, sp, #116	; 0x74
 8011cdc:	9002      	str	r0, [sp, #8]
 8011cde:	9006      	str	r0, [sp, #24]
 8011ce0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011ce4:	4809      	ldr	r0, [pc, #36]	; (8011d0c <siprintf+0x38>)
 8011ce6:	9107      	str	r1, [sp, #28]
 8011ce8:	9104      	str	r1, [sp, #16]
 8011cea:	4909      	ldr	r1, [pc, #36]	; (8011d10 <siprintf+0x3c>)
 8011cec:	f853 2b04 	ldr.w	r2, [r3], #4
 8011cf0:	9105      	str	r1, [sp, #20]
 8011cf2:	6800      	ldr	r0, [r0, #0]
 8011cf4:	9301      	str	r3, [sp, #4]
 8011cf6:	a902      	add	r1, sp, #8
 8011cf8:	f002 fb30 	bl	801435c <_svfiprintf_r>
 8011cfc:	9b02      	ldr	r3, [sp, #8]
 8011cfe:	2200      	movs	r2, #0
 8011d00:	701a      	strb	r2, [r3, #0]
 8011d02:	b01c      	add	sp, #112	; 0x70
 8011d04:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d08:	b003      	add	sp, #12
 8011d0a:	4770      	bx	lr
 8011d0c:	24000068 	.word	0x24000068
 8011d10:	ffff0208 	.word	0xffff0208

08011d14 <__sread>:
 8011d14:	b510      	push	{r4, lr}
 8011d16:	460c      	mov	r4, r1
 8011d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d1c:	f000 f86c 	bl	8011df8 <_read_r>
 8011d20:	2800      	cmp	r0, #0
 8011d22:	bfab      	itete	ge
 8011d24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011d26:	89a3      	ldrhlt	r3, [r4, #12]
 8011d28:	181b      	addge	r3, r3, r0
 8011d2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011d2e:	bfac      	ite	ge
 8011d30:	6563      	strge	r3, [r4, #84]	; 0x54
 8011d32:	81a3      	strhlt	r3, [r4, #12]
 8011d34:	bd10      	pop	{r4, pc}

08011d36 <__swrite>:
 8011d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d3a:	461f      	mov	r7, r3
 8011d3c:	898b      	ldrh	r3, [r1, #12]
 8011d3e:	05db      	lsls	r3, r3, #23
 8011d40:	4605      	mov	r5, r0
 8011d42:	460c      	mov	r4, r1
 8011d44:	4616      	mov	r6, r2
 8011d46:	d505      	bpl.n	8011d54 <__swrite+0x1e>
 8011d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d4c:	2302      	movs	r3, #2
 8011d4e:	2200      	movs	r2, #0
 8011d50:	f000 f840 	bl	8011dd4 <_lseek_r>
 8011d54:	89a3      	ldrh	r3, [r4, #12]
 8011d56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011d5e:	81a3      	strh	r3, [r4, #12]
 8011d60:	4632      	mov	r2, r6
 8011d62:	463b      	mov	r3, r7
 8011d64:	4628      	mov	r0, r5
 8011d66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d6a:	f000 b857 	b.w	8011e1c <_write_r>

08011d6e <__sseek>:
 8011d6e:	b510      	push	{r4, lr}
 8011d70:	460c      	mov	r4, r1
 8011d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d76:	f000 f82d 	bl	8011dd4 <_lseek_r>
 8011d7a:	1c43      	adds	r3, r0, #1
 8011d7c:	89a3      	ldrh	r3, [r4, #12]
 8011d7e:	bf15      	itete	ne
 8011d80:	6560      	strne	r0, [r4, #84]	; 0x54
 8011d82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011d86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011d8a:	81a3      	strheq	r3, [r4, #12]
 8011d8c:	bf18      	it	ne
 8011d8e:	81a3      	strhne	r3, [r4, #12]
 8011d90:	bd10      	pop	{r4, pc}

08011d92 <__sclose>:
 8011d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d96:	f000 b80d 	b.w	8011db4 <_close_r>

08011d9a <memset>:
 8011d9a:	4402      	add	r2, r0
 8011d9c:	4603      	mov	r3, r0
 8011d9e:	4293      	cmp	r3, r2
 8011da0:	d100      	bne.n	8011da4 <memset+0xa>
 8011da2:	4770      	bx	lr
 8011da4:	f803 1b01 	strb.w	r1, [r3], #1
 8011da8:	e7f9      	b.n	8011d9e <memset+0x4>
	...

08011dac <_localeconv_r>:
 8011dac:	4800      	ldr	r0, [pc, #0]	; (8011db0 <_localeconv_r+0x4>)
 8011dae:	4770      	bx	lr
 8011db0:	2400015c 	.word	0x2400015c

08011db4 <_close_r>:
 8011db4:	b538      	push	{r3, r4, r5, lr}
 8011db6:	4d06      	ldr	r5, [pc, #24]	; (8011dd0 <_close_r+0x1c>)
 8011db8:	2300      	movs	r3, #0
 8011dba:	4604      	mov	r4, r0
 8011dbc:	4608      	mov	r0, r1
 8011dbe:	602b      	str	r3, [r5, #0]
 8011dc0:	f7f1 fc7b 	bl	80036ba <_close>
 8011dc4:	1c43      	adds	r3, r0, #1
 8011dc6:	d102      	bne.n	8011dce <_close_r+0x1a>
 8011dc8:	682b      	ldr	r3, [r5, #0]
 8011dca:	b103      	cbz	r3, 8011dce <_close_r+0x1a>
 8011dcc:	6023      	str	r3, [r4, #0]
 8011dce:	bd38      	pop	{r3, r4, r5, pc}
 8011dd0:	24000f3c 	.word	0x24000f3c

08011dd4 <_lseek_r>:
 8011dd4:	b538      	push	{r3, r4, r5, lr}
 8011dd6:	4d07      	ldr	r5, [pc, #28]	; (8011df4 <_lseek_r+0x20>)
 8011dd8:	4604      	mov	r4, r0
 8011dda:	4608      	mov	r0, r1
 8011ddc:	4611      	mov	r1, r2
 8011dde:	2200      	movs	r2, #0
 8011de0:	602a      	str	r2, [r5, #0]
 8011de2:	461a      	mov	r2, r3
 8011de4:	f7f1 fc90 	bl	8003708 <_lseek>
 8011de8:	1c43      	adds	r3, r0, #1
 8011dea:	d102      	bne.n	8011df2 <_lseek_r+0x1e>
 8011dec:	682b      	ldr	r3, [r5, #0]
 8011dee:	b103      	cbz	r3, 8011df2 <_lseek_r+0x1e>
 8011df0:	6023      	str	r3, [r4, #0]
 8011df2:	bd38      	pop	{r3, r4, r5, pc}
 8011df4:	24000f3c 	.word	0x24000f3c

08011df8 <_read_r>:
 8011df8:	b538      	push	{r3, r4, r5, lr}
 8011dfa:	4d07      	ldr	r5, [pc, #28]	; (8011e18 <_read_r+0x20>)
 8011dfc:	4604      	mov	r4, r0
 8011dfe:	4608      	mov	r0, r1
 8011e00:	4611      	mov	r1, r2
 8011e02:	2200      	movs	r2, #0
 8011e04:	602a      	str	r2, [r5, #0]
 8011e06:	461a      	mov	r2, r3
 8011e08:	f7f1 fc1e 	bl	8003648 <_read>
 8011e0c:	1c43      	adds	r3, r0, #1
 8011e0e:	d102      	bne.n	8011e16 <_read_r+0x1e>
 8011e10:	682b      	ldr	r3, [r5, #0]
 8011e12:	b103      	cbz	r3, 8011e16 <_read_r+0x1e>
 8011e14:	6023      	str	r3, [r4, #0]
 8011e16:	bd38      	pop	{r3, r4, r5, pc}
 8011e18:	24000f3c 	.word	0x24000f3c

08011e1c <_write_r>:
 8011e1c:	b538      	push	{r3, r4, r5, lr}
 8011e1e:	4d07      	ldr	r5, [pc, #28]	; (8011e3c <_write_r+0x20>)
 8011e20:	4604      	mov	r4, r0
 8011e22:	4608      	mov	r0, r1
 8011e24:	4611      	mov	r1, r2
 8011e26:	2200      	movs	r2, #0
 8011e28:	602a      	str	r2, [r5, #0]
 8011e2a:	461a      	mov	r2, r3
 8011e2c:	f7f1 fc29 	bl	8003682 <_write>
 8011e30:	1c43      	adds	r3, r0, #1
 8011e32:	d102      	bne.n	8011e3a <_write_r+0x1e>
 8011e34:	682b      	ldr	r3, [r5, #0]
 8011e36:	b103      	cbz	r3, 8011e3a <_write_r+0x1e>
 8011e38:	6023      	str	r3, [r4, #0]
 8011e3a:	bd38      	pop	{r3, r4, r5, pc}
 8011e3c:	24000f3c 	.word	0x24000f3c

08011e40 <__errno>:
 8011e40:	4b01      	ldr	r3, [pc, #4]	; (8011e48 <__errno+0x8>)
 8011e42:	6818      	ldr	r0, [r3, #0]
 8011e44:	4770      	bx	lr
 8011e46:	bf00      	nop
 8011e48:	24000068 	.word	0x24000068

08011e4c <__libc_init_array>:
 8011e4c:	b570      	push	{r4, r5, r6, lr}
 8011e4e:	4d0d      	ldr	r5, [pc, #52]	; (8011e84 <__libc_init_array+0x38>)
 8011e50:	4c0d      	ldr	r4, [pc, #52]	; (8011e88 <__libc_init_array+0x3c>)
 8011e52:	1b64      	subs	r4, r4, r5
 8011e54:	10a4      	asrs	r4, r4, #2
 8011e56:	2600      	movs	r6, #0
 8011e58:	42a6      	cmp	r6, r4
 8011e5a:	d109      	bne.n	8011e70 <__libc_init_array+0x24>
 8011e5c:	4d0b      	ldr	r5, [pc, #44]	; (8011e8c <__libc_init_array+0x40>)
 8011e5e:	4c0c      	ldr	r4, [pc, #48]	; (8011e90 <__libc_init_array+0x44>)
 8011e60:	f003 fbac 	bl	80155bc <_init>
 8011e64:	1b64      	subs	r4, r4, r5
 8011e66:	10a4      	asrs	r4, r4, #2
 8011e68:	2600      	movs	r6, #0
 8011e6a:	42a6      	cmp	r6, r4
 8011e6c:	d105      	bne.n	8011e7a <__libc_init_array+0x2e>
 8011e6e:	bd70      	pop	{r4, r5, r6, pc}
 8011e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e74:	4798      	blx	r3
 8011e76:	3601      	adds	r6, #1
 8011e78:	e7ee      	b.n	8011e58 <__libc_init_array+0xc>
 8011e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e7e:	4798      	blx	r3
 8011e80:	3601      	adds	r6, #1
 8011e82:	e7f2      	b.n	8011e6a <__libc_init_array+0x1e>
 8011e84:	08015b50 	.word	0x08015b50
 8011e88:	08015b50 	.word	0x08015b50
 8011e8c:	08015b50 	.word	0x08015b50
 8011e90:	08015b54 	.word	0x08015b54

08011e94 <__retarget_lock_acquire_recursive>:
 8011e94:	4770      	bx	lr

08011e96 <__retarget_lock_release_recursive>:
 8011e96:	4770      	bx	lr

08011e98 <memcpy>:
 8011e98:	440a      	add	r2, r1
 8011e9a:	4291      	cmp	r1, r2
 8011e9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8011ea0:	d100      	bne.n	8011ea4 <memcpy+0xc>
 8011ea2:	4770      	bx	lr
 8011ea4:	b510      	push	{r4, lr}
 8011ea6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011eaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011eae:	4291      	cmp	r1, r2
 8011eb0:	d1f9      	bne.n	8011ea6 <memcpy+0xe>
 8011eb2:	bd10      	pop	{r4, pc}

08011eb4 <nanf>:
 8011eb4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011ebc <nanf+0x8>
 8011eb8:	4770      	bx	lr
 8011eba:	bf00      	nop
 8011ebc:	7fc00000 	.word	0x7fc00000

08011ec0 <quorem>:
 8011ec0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ec4:	6903      	ldr	r3, [r0, #16]
 8011ec6:	690c      	ldr	r4, [r1, #16]
 8011ec8:	42a3      	cmp	r3, r4
 8011eca:	4607      	mov	r7, r0
 8011ecc:	db7e      	blt.n	8011fcc <quorem+0x10c>
 8011ece:	3c01      	subs	r4, #1
 8011ed0:	f101 0814 	add.w	r8, r1, #20
 8011ed4:	f100 0514 	add.w	r5, r0, #20
 8011ed8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011edc:	9301      	str	r3, [sp, #4]
 8011ede:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011ee2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011ee6:	3301      	adds	r3, #1
 8011ee8:	429a      	cmp	r2, r3
 8011eea:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011eee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011ef2:	fbb2 f6f3 	udiv	r6, r2, r3
 8011ef6:	d331      	bcc.n	8011f5c <quorem+0x9c>
 8011ef8:	f04f 0e00 	mov.w	lr, #0
 8011efc:	4640      	mov	r0, r8
 8011efe:	46ac      	mov	ip, r5
 8011f00:	46f2      	mov	sl, lr
 8011f02:	f850 2b04 	ldr.w	r2, [r0], #4
 8011f06:	b293      	uxth	r3, r2
 8011f08:	fb06 e303 	mla	r3, r6, r3, lr
 8011f0c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011f10:	0c1a      	lsrs	r2, r3, #16
 8011f12:	b29b      	uxth	r3, r3
 8011f14:	ebaa 0303 	sub.w	r3, sl, r3
 8011f18:	f8dc a000 	ldr.w	sl, [ip]
 8011f1c:	fa13 f38a 	uxtah	r3, r3, sl
 8011f20:	fb06 220e 	mla	r2, r6, lr, r2
 8011f24:	9300      	str	r3, [sp, #0]
 8011f26:	9b00      	ldr	r3, [sp, #0]
 8011f28:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011f2c:	b292      	uxth	r2, r2
 8011f2e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011f32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011f36:	f8bd 3000 	ldrh.w	r3, [sp]
 8011f3a:	4581      	cmp	r9, r0
 8011f3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011f40:	f84c 3b04 	str.w	r3, [ip], #4
 8011f44:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011f48:	d2db      	bcs.n	8011f02 <quorem+0x42>
 8011f4a:	f855 300b 	ldr.w	r3, [r5, fp]
 8011f4e:	b92b      	cbnz	r3, 8011f5c <quorem+0x9c>
 8011f50:	9b01      	ldr	r3, [sp, #4]
 8011f52:	3b04      	subs	r3, #4
 8011f54:	429d      	cmp	r5, r3
 8011f56:	461a      	mov	r2, r3
 8011f58:	d32c      	bcc.n	8011fb4 <quorem+0xf4>
 8011f5a:	613c      	str	r4, [r7, #16]
 8011f5c:	4638      	mov	r0, r7
 8011f5e:	f001 f969 	bl	8013234 <__mcmp>
 8011f62:	2800      	cmp	r0, #0
 8011f64:	db22      	blt.n	8011fac <quorem+0xec>
 8011f66:	3601      	adds	r6, #1
 8011f68:	4629      	mov	r1, r5
 8011f6a:	2000      	movs	r0, #0
 8011f6c:	f858 2b04 	ldr.w	r2, [r8], #4
 8011f70:	f8d1 c000 	ldr.w	ip, [r1]
 8011f74:	b293      	uxth	r3, r2
 8011f76:	1ac3      	subs	r3, r0, r3
 8011f78:	0c12      	lsrs	r2, r2, #16
 8011f7a:	fa13 f38c 	uxtah	r3, r3, ip
 8011f7e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8011f82:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011f86:	b29b      	uxth	r3, r3
 8011f88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011f8c:	45c1      	cmp	r9, r8
 8011f8e:	f841 3b04 	str.w	r3, [r1], #4
 8011f92:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011f96:	d2e9      	bcs.n	8011f6c <quorem+0xac>
 8011f98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011f9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011fa0:	b922      	cbnz	r2, 8011fac <quorem+0xec>
 8011fa2:	3b04      	subs	r3, #4
 8011fa4:	429d      	cmp	r5, r3
 8011fa6:	461a      	mov	r2, r3
 8011fa8:	d30a      	bcc.n	8011fc0 <quorem+0x100>
 8011faa:	613c      	str	r4, [r7, #16]
 8011fac:	4630      	mov	r0, r6
 8011fae:	b003      	add	sp, #12
 8011fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fb4:	6812      	ldr	r2, [r2, #0]
 8011fb6:	3b04      	subs	r3, #4
 8011fb8:	2a00      	cmp	r2, #0
 8011fba:	d1ce      	bne.n	8011f5a <quorem+0x9a>
 8011fbc:	3c01      	subs	r4, #1
 8011fbe:	e7c9      	b.n	8011f54 <quorem+0x94>
 8011fc0:	6812      	ldr	r2, [r2, #0]
 8011fc2:	3b04      	subs	r3, #4
 8011fc4:	2a00      	cmp	r2, #0
 8011fc6:	d1f0      	bne.n	8011faa <quorem+0xea>
 8011fc8:	3c01      	subs	r4, #1
 8011fca:	e7eb      	b.n	8011fa4 <quorem+0xe4>
 8011fcc:	2000      	movs	r0, #0
 8011fce:	e7ee      	b.n	8011fae <quorem+0xee>

08011fd0 <_dtoa_r>:
 8011fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fd4:	ed2d 8b02 	vpush	{d8}
 8011fd8:	69c5      	ldr	r5, [r0, #28]
 8011fda:	b091      	sub	sp, #68	; 0x44
 8011fdc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011fe0:	ec59 8b10 	vmov	r8, r9, d0
 8011fe4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8011fe6:	9106      	str	r1, [sp, #24]
 8011fe8:	4606      	mov	r6, r0
 8011fea:	9208      	str	r2, [sp, #32]
 8011fec:	930c      	str	r3, [sp, #48]	; 0x30
 8011fee:	b975      	cbnz	r5, 801200e <_dtoa_r+0x3e>
 8011ff0:	2010      	movs	r0, #16
 8011ff2:	f000 fda5 	bl	8012b40 <malloc>
 8011ff6:	4602      	mov	r2, r0
 8011ff8:	61f0      	str	r0, [r6, #28]
 8011ffa:	b920      	cbnz	r0, 8012006 <_dtoa_r+0x36>
 8011ffc:	4ba6      	ldr	r3, [pc, #664]	; (8012298 <_dtoa_r+0x2c8>)
 8011ffe:	21ef      	movs	r1, #239	; 0xef
 8012000:	48a6      	ldr	r0, [pc, #664]	; (801229c <_dtoa_r+0x2cc>)
 8012002:	f002 fb9d 	bl	8014740 <__assert_func>
 8012006:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801200a:	6005      	str	r5, [r0, #0]
 801200c:	60c5      	str	r5, [r0, #12]
 801200e:	69f3      	ldr	r3, [r6, #28]
 8012010:	6819      	ldr	r1, [r3, #0]
 8012012:	b151      	cbz	r1, 801202a <_dtoa_r+0x5a>
 8012014:	685a      	ldr	r2, [r3, #4]
 8012016:	604a      	str	r2, [r1, #4]
 8012018:	2301      	movs	r3, #1
 801201a:	4093      	lsls	r3, r2
 801201c:	608b      	str	r3, [r1, #8]
 801201e:	4630      	mov	r0, r6
 8012020:	f000 fe82 	bl	8012d28 <_Bfree>
 8012024:	69f3      	ldr	r3, [r6, #28]
 8012026:	2200      	movs	r2, #0
 8012028:	601a      	str	r2, [r3, #0]
 801202a:	f1b9 0300 	subs.w	r3, r9, #0
 801202e:	bfbb      	ittet	lt
 8012030:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012034:	9303      	strlt	r3, [sp, #12]
 8012036:	2300      	movge	r3, #0
 8012038:	2201      	movlt	r2, #1
 801203a:	bfac      	ite	ge
 801203c:	6023      	strge	r3, [r4, #0]
 801203e:	6022      	strlt	r2, [r4, #0]
 8012040:	4b97      	ldr	r3, [pc, #604]	; (80122a0 <_dtoa_r+0x2d0>)
 8012042:	9c03      	ldr	r4, [sp, #12]
 8012044:	43a3      	bics	r3, r4
 8012046:	d11c      	bne.n	8012082 <_dtoa_r+0xb2>
 8012048:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801204a:	f242 730f 	movw	r3, #9999	; 0x270f
 801204e:	6013      	str	r3, [r2, #0]
 8012050:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8012054:	ea53 0308 	orrs.w	r3, r3, r8
 8012058:	f000 84fb 	beq.w	8012a52 <_dtoa_r+0xa82>
 801205c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801205e:	b963      	cbnz	r3, 801207a <_dtoa_r+0xaa>
 8012060:	4b90      	ldr	r3, [pc, #576]	; (80122a4 <_dtoa_r+0x2d4>)
 8012062:	e020      	b.n	80120a6 <_dtoa_r+0xd6>
 8012064:	4b90      	ldr	r3, [pc, #576]	; (80122a8 <_dtoa_r+0x2d8>)
 8012066:	9301      	str	r3, [sp, #4]
 8012068:	3308      	adds	r3, #8
 801206a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801206c:	6013      	str	r3, [r2, #0]
 801206e:	9801      	ldr	r0, [sp, #4]
 8012070:	b011      	add	sp, #68	; 0x44
 8012072:	ecbd 8b02 	vpop	{d8}
 8012076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801207a:	4b8a      	ldr	r3, [pc, #552]	; (80122a4 <_dtoa_r+0x2d4>)
 801207c:	9301      	str	r3, [sp, #4]
 801207e:	3303      	adds	r3, #3
 8012080:	e7f3      	b.n	801206a <_dtoa_r+0x9a>
 8012082:	ed9d 8b02 	vldr	d8, [sp, #8]
 8012086:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801208a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801208e:	d10c      	bne.n	80120aa <_dtoa_r+0xda>
 8012090:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012092:	2301      	movs	r3, #1
 8012094:	6013      	str	r3, [r2, #0]
 8012096:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012098:	2b00      	cmp	r3, #0
 801209a:	f000 84d7 	beq.w	8012a4c <_dtoa_r+0xa7c>
 801209e:	4b83      	ldr	r3, [pc, #524]	; (80122ac <_dtoa_r+0x2dc>)
 80120a0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80120a2:	6013      	str	r3, [r2, #0]
 80120a4:	3b01      	subs	r3, #1
 80120a6:	9301      	str	r3, [sp, #4]
 80120a8:	e7e1      	b.n	801206e <_dtoa_r+0x9e>
 80120aa:	aa0e      	add	r2, sp, #56	; 0x38
 80120ac:	a90f      	add	r1, sp, #60	; 0x3c
 80120ae:	4630      	mov	r0, r6
 80120b0:	eeb0 0b48 	vmov.f64	d0, d8
 80120b4:	f001 f9d4 	bl	8013460 <__d2b>
 80120b8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80120bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80120be:	4605      	mov	r5, r0
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d046      	beq.n	8012152 <_dtoa_r+0x182>
 80120c4:	eeb0 7b48 	vmov.f64	d7, d8
 80120c8:	ee18 1a90 	vmov	r1, s17
 80120cc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80120d0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80120d4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80120d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80120dc:	2000      	movs	r0, #0
 80120de:	ee07 1a90 	vmov	s15, r1
 80120e2:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 80120e6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8012280 <_dtoa_r+0x2b0>
 80120ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 80120ee:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8012288 <_dtoa_r+0x2b8>
 80120f2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80120f6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8012290 <_dtoa_r+0x2c0>
 80120fa:	ee07 3a90 	vmov	s15, r3
 80120fe:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8012102:	eeb0 7b46 	vmov.f64	d7, d6
 8012106:	eea4 7b05 	vfma.f64	d7, d4, d5
 801210a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801210e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012116:	ee16 ba90 	vmov	fp, s13
 801211a:	9009      	str	r0, [sp, #36]	; 0x24
 801211c:	d508      	bpl.n	8012130 <_dtoa_r+0x160>
 801211e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012122:	eeb4 6b47 	vcmp.f64	d6, d7
 8012126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801212a:	bf18      	it	ne
 801212c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8012130:	f1bb 0f16 	cmp.w	fp, #22
 8012134:	d82b      	bhi.n	801218e <_dtoa_r+0x1be>
 8012136:	495e      	ldr	r1, [pc, #376]	; (80122b0 <_dtoa_r+0x2e0>)
 8012138:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801213c:	ed91 7b00 	vldr	d7, [r1]
 8012140:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012148:	d501      	bpl.n	801214e <_dtoa_r+0x17e>
 801214a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801214e:	2100      	movs	r1, #0
 8012150:	e01e      	b.n	8012190 <_dtoa_r+0x1c0>
 8012152:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012154:	4413      	add	r3, r2
 8012156:	f203 4132 	addw	r1, r3, #1074	; 0x432
 801215a:	2920      	cmp	r1, #32
 801215c:	bfc1      	itttt	gt
 801215e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8012162:	408c      	lslgt	r4, r1
 8012164:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8012168:	fa28 f101 	lsrgt.w	r1, r8, r1
 801216c:	bfd6      	itet	le
 801216e:	f1c1 0120 	rsble	r1, r1, #32
 8012172:	4321      	orrgt	r1, r4
 8012174:	fa08 f101 	lslle.w	r1, r8, r1
 8012178:	ee07 1a90 	vmov	s15, r1
 801217c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012180:	3b01      	subs	r3, #1
 8012182:	ee17 1a90 	vmov	r1, s15
 8012186:	2001      	movs	r0, #1
 8012188:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801218c:	e7a7      	b.n	80120de <_dtoa_r+0x10e>
 801218e:	2101      	movs	r1, #1
 8012190:	1ad2      	subs	r2, r2, r3
 8012192:	1e53      	subs	r3, r2, #1
 8012194:	9305      	str	r3, [sp, #20]
 8012196:	bf45      	ittet	mi
 8012198:	f1c2 0301 	rsbmi	r3, r2, #1
 801219c:	9304      	strmi	r3, [sp, #16]
 801219e:	2300      	movpl	r3, #0
 80121a0:	2300      	movmi	r3, #0
 80121a2:	bf4c      	ite	mi
 80121a4:	9305      	strmi	r3, [sp, #20]
 80121a6:	9304      	strpl	r3, [sp, #16]
 80121a8:	f1bb 0f00 	cmp.w	fp, #0
 80121ac:	910b      	str	r1, [sp, #44]	; 0x2c
 80121ae:	db18      	blt.n	80121e2 <_dtoa_r+0x212>
 80121b0:	9b05      	ldr	r3, [sp, #20]
 80121b2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80121b6:	445b      	add	r3, fp
 80121b8:	9305      	str	r3, [sp, #20]
 80121ba:	2300      	movs	r3, #0
 80121bc:	9a06      	ldr	r2, [sp, #24]
 80121be:	2a09      	cmp	r2, #9
 80121c0:	d848      	bhi.n	8012254 <_dtoa_r+0x284>
 80121c2:	2a05      	cmp	r2, #5
 80121c4:	bfc4      	itt	gt
 80121c6:	3a04      	subgt	r2, #4
 80121c8:	9206      	strgt	r2, [sp, #24]
 80121ca:	9a06      	ldr	r2, [sp, #24]
 80121cc:	f1a2 0202 	sub.w	r2, r2, #2
 80121d0:	bfcc      	ite	gt
 80121d2:	2400      	movgt	r4, #0
 80121d4:	2401      	movle	r4, #1
 80121d6:	2a03      	cmp	r2, #3
 80121d8:	d847      	bhi.n	801226a <_dtoa_r+0x29a>
 80121da:	e8df f002 	tbb	[pc, r2]
 80121de:	2d0b      	.short	0x2d0b
 80121e0:	392b      	.short	0x392b
 80121e2:	9b04      	ldr	r3, [sp, #16]
 80121e4:	2200      	movs	r2, #0
 80121e6:	eba3 030b 	sub.w	r3, r3, fp
 80121ea:	9304      	str	r3, [sp, #16]
 80121ec:	920a      	str	r2, [sp, #40]	; 0x28
 80121ee:	f1cb 0300 	rsb	r3, fp, #0
 80121f2:	e7e3      	b.n	80121bc <_dtoa_r+0x1ec>
 80121f4:	2200      	movs	r2, #0
 80121f6:	9207      	str	r2, [sp, #28]
 80121f8:	9a08      	ldr	r2, [sp, #32]
 80121fa:	2a00      	cmp	r2, #0
 80121fc:	dc38      	bgt.n	8012270 <_dtoa_r+0x2a0>
 80121fe:	f04f 0a01 	mov.w	sl, #1
 8012202:	46d1      	mov	r9, sl
 8012204:	4652      	mov	r2, sl
 8012206:	f8cd a020 	str.w	sl, [sp, #32]
 801220a:	69f7      	ldr	r7, [r6, #28]
 801220c:	2100      	movs	r1, #0
 801220e:	2004      	movs	r0, #4
 8012210:	f100 0c14 	add.w	ip, r0, #20
 8012214:	4594      	cmp	ip, r2
 8012216:	d930      	bls.n	801227a <_dtoa_r+0x2aa>
 8012218:	6079      	str	r1, [r7, #4]
 801221a:	4630      	mov	r0, r6
 801221c:	930d      	str	r3, [sp, #52]	; 0x34
 801221e:	f000 fd43 	bl	8012ca8 <_Balloc>
 8012222:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012224:	9001      	str	r0, [sp, #4]
 8012226:	4602      	mov	r2, r0
 8012228:	2800      	cmp	r0, #0
 801222a:	d145      	bne.n	80122b8 <_dtoa_r+0x2e8>
 801222c:	4b21      	ldr	r3, [pc, #132]	; (80122b4 <_dtoa_r+0x2e4>)
 801222e:	f240 11af 	movw	r1, #431	; 0x1af
 8012232:	e6e5      	b.n	8012000 <_dtoa_r+0x30>
 8012234:	2201      	movs	r2, #1
 8012236:	e7de      	b.n	80121f6 <_dtoa_r+0x226>
 8012238:	2200      	movs	r2, #0
 801223a:	9207      	str	r2, [sp, #28]
 801223c:	9a08      	ldr	r2, [sp, #32]
 801223e:	eb0b 0a02 	add.w	sl, fp, r2
 8012242:	f10a 0901 	add.w	r9, sl, #1
 8012246:	464a      	mov	r2, r9
 8012248:	2a01      	cmp	r2, #1
 801224a:	bfb8      	it	lt
 801224c:	2201      	movlt	r2, #1
 801224e:	e7dc      	b.n	801220a <_dtoa_r+0x23a>
 8012250:	2201      	movs	r2, #1
 8012252:	e7f2      	b.n	801223a <_dtoa_r+0x26a>
 8012254:	2401      	movs	r4, #1
 8012256:	2200      	movs	r2, #0
 8012258:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801225c:	f04f 3aff 	mov.w	sl, #4294967295
 8012260:	2100      	movs	r1, #0
 8012262:	46d1      	mov	r9, sl
 8012264:	2212      	movs	r2, #18
 8012266:	9108      	str	r1, [sp, #32]
 8012268:	e7cf      	b.n	801220a <_dtoa_r+0x23a>
 801226a:	2201      	movs	r2, #1
 801226c:	9207      	str	r2, [sp, #28]
 801226e:	e7f5      	b.n	801225c <_dtoa_r+0x28c>
 8012270:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012274:	46d1      	mov	r9, sl
 8012276:	4652      	mov	r2, sl
 8012278:	e7c7      	b.n	801220a <_dtoa_r+0x23a>
 801227a:	3101      	adds	r1, #1
 801227c:	0040      	lsls	r0, r0, #1
 801227e:	e7c7      	b.n	8012210 <_dtoa_r+0x240>
 8012280:	636f4361 	.word	0x636f4361
 8012284:	3fd287a7 	.word	0x3fd287a7
 8012288:	8b60c8b3 	.word	0x8b60c8b3
 801228c:	3fc68a28 	.word	0x3fc68a28
 8012290:	509f79fb 	.word	0x509f79fb
 8012294:	3fd34413 	.word	0x3fd34413
 8012298:	0801575a 	.word	0x0801575a
 801229c:	08015771 	.word	0x08015771
 80122a0:	7ff00000 	.word	0x7ff00000
 80122a4:	08015756 	.word	0x08015756
 80122a8:	0801574d 	.word	0x0801574d
 80122ac:	08015725 	.word	0x08015725
 80122b0:	08015860 	.word	0x08015860
 80122b4:	080157c9 	.word	0x080157c9
 80122b8:	69f2      	ldr	r2, [r6, #28]
 80122ba:	9901      	ldr	r1, [sp, #4]
 80122bc:	6011      	str	r1, [r2, #0]
 80122be:	f1b9 0f0e 	cmp.w	r9, #14
 80122c2:	d86c      	bhi.n	801239e <_dtoa_r+0x3ce>
 80122c4:	2c00      	cmp	r4, #0
 80122c6:	d06a      	beq.n	801239e <_dtoa_r+0x3ce>
 80122c8:	f1bb 0f00 	cmp.w	fp, #0
 80122cc:	f340 80a0 	ble.w	8012410 <_dtoa_r+0x440>
 80122d0:	4ac1      	ldr	r2, [pc, #772]	; (80125d8 <_dtoa_r+0x608>)
 80122d2:	f00b 010f 	and.w	r1, fp, #15
 80122d6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80122da:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80122de:	ed92 7b00 	vldr	d7, [r2]
 80122e2:	ea4f 122b 	mov.w	r2, fp, asr #4
 80122e6:	f000 8087 	beq.w	80123f8 <_dtoa_r+0x428>
 80122ea:	49bc      	ldr	r1, [pc, #752]	; (80125dc <_dtoa_r+0x60c>)
 80122ec:	ed91 6b08 	vldr	d6, [r1, #32]
 80122f0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80122f4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80122f8:	f002 020f 	and.w	r2, r2, #15
 80122fc:	2103      	movs	r1, #3
 80122fe:	48b7      	ldr	r0, [pc, #732]	; (80125dc <_dtoa_r+0x60c>)
 8012300:	2a00      	cmp	r2, #0
 8012302:	d17b      	bne.n	80123fc <_dtoa_r+0x42c>
 8012304:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012308:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801230c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012310:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012312:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012316:	2a00      	cmp	r2, #0
 8012318:	f000 80a0 	beq.w	801245c <_dtoa_r+0x48c>
 801231c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012320:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012328:	f140 8098 	bpl.w	801245c <_dtoa_r+0x48c>
 801232c:	f1b9 0f00 	cmp.w	r9, #0
 8012330:	f000 8094 	beq.w	801245c <_dtoa_r+0x48c>
 8012334:	f1ba 0f00 	cmp.w	sl, #0
 8012338:	dd2f      	ble.n	801239a <_dtoa_r+0x3ca>
 801233a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801233e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012342:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012346:	f10b 32ff 	add.w	r2, fp, #4294967295
 801234a:	3101      	adds	r1, #1
 801234c:	4654      	mov	r4, sl
 801234e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012352:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8012356:	ee07 1a90 	vmov	s15, r1
 801235a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801235e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012362:	ee15 7a90 	vmov	r7, s11
 8012366:	ec51 0b15 	vmov	r0, r1, d5
 801236a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 801236e:	2c00      	cmp	r4, #0
 8012370:	d177      	bne.n	8012462 <_dtoa_r+0x492>
 8012372:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012376:	ee36 6b47 	vsub.f64	d6, d6, d7
 801237a:	ec41 0b17 	vmov	d7, r0, r1
 801237e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012386:	f300 826a 	bgt.w	801285e <_dtoa_r+0x88e>
 801238a:	eeb1 7b47 	vneg.f64	d7, d7
 801238e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012396:	f100 8260 	bmi.w	801285a <_dtoa_r+0x88a>
 801239a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801239e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80123a0:	2a00      	cmp	r2, #0
 80123a2:	f2c0 811d 	blt.w	80125e0 <_dtoa_r+0x610>
 80123a6:	f1bb 0f0e 	cmp.w	fp, #14
 80123aa:	f300 8119 	bgt.w	80125e0 <_dtoa_r+0x610>
 80123ae:	4b8a      	ldr	r3, [pc, #552]	; (80125d8 <_dtoa_r+0x608>)
 80123b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80123b4:	ed93 6b00 	vldr	d6, [r3]
 80123b8:	9b08      	ldr	r3, [sp, #32]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	f280 80b7 	bge.w	801252e <_dtoa_r+0x55e>
 80123c0:	f1b9 0f00 	cmp.w	r9, #0
 80123c4:	f300 80b3 	bgt.w	801252e <_dtoa_r+0x55e>
 80123c8:	f040 8246 	bne.w	8012858 <_dtoa_r+0x888>
 80123cc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80123d0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80123d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80123d8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80123dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123e0:	464c      	mov	r4, r9
 80123e2:	464f      	mov	r7, r9
 80123e4:	f280 821c 	bge.w	8012820 <_dtoa_r+0x850>
 80123e8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80123ec:	2331      	movs	r3, #49	; 0x31
 80123ee:	f808 3b01 	strb.w	r3, [r8], #1
 80123f2:	f10b 0b01 	add.w	fp, fp, #1
 80123f6:	e218      	b.n	801282a <_dtoa_r+0x85a>
 80123f8:	2102      	movs	r1, #2
 80123fa:	e780      	b.n	80122fe <_dtoa_r+0x32e>
 80123fc:	07d4      	lsls	r4, r2, #31
 80123fe:	d504      	bpl.n	801240a <_dtoa_r+0x43a>
 8012400:	ed90 6b00 	vldr	d6, [r0]
 8012404:	3101      	adds	r1, #1
 8012406:	ee27 7b06 	vmul.f64	d7, d7, d6
 801240a:	1052      	asrs	r2, r2, #1
 801240c:	3008      	adds	r0, #8
 801240e:	e777      	b.n	8012300 <_dtoa_r+0x330>
 8012410:	d022      	beq.n	8012458 <_dtoa_r+0x488>
 8012412:	f1cb 0200 	rsb	r2, fp, #0
 8012416:	4970      	ldr	r1, [pc, #448]	; (80125d8 <_dtoa_r+0x608>)
 8012418:	f002 000f 	and.w	r0, r2, #15
 801241c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8012420:	ed91 7b00 	vldr	d7, [r1]
 8012424:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012428:	ed8d 7b02 	vstr	d7, [sp, #8]
 801242c:	486b      	ldr	r0, [pc, #428]	; (80125dc <_dtoa_r+0x60c>)
 801242e:	1112      	asrs	r2, r2, #4
 8012430:	2400      	movs	r4, #0
 8012432:	2102      	movs	r1, #2
 8012434:	b92a      	cbnz	r2, 8012442 <_dtoa_r+0x472>
 8012436:	2c00      	cmp	r4, #0
 8012438:	f43f af6a 	beq.w	8012310 <_dtoa_r+0x340>
 801243c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012440:	e766      	b.n	8012310 <_dtoa_r+0x340>
 8012442:	07d7      	lsls	r7, r2, #31
 8012444:	d505      	bpl.n	8012452 <_dtoa_r+0x482>
 8012446:	ed90 6b00 	vldr	d6, [r0]
 801244a:	3101      	adds	r1, #1
 801244c:	2401      	movs	r4, #1
 801244e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012452:	1052      	asrs	r2, r2, #1
 8012454:	3008      	adds	r0, #8
 8012456:	e7ed      	b.n	8012434 <_dtoa_r+0x464>
 8012458:	2102      	movs	r1, #2
 801245a:	e759      	b.n	8012310 <_dtoa_r+0x340>
 801245c:	465a      	mov	r2, fp
 801245e:	464c      	mov	r4, r9
 8012460:	e775      	b.n	801234e <_dtoa_r+0x37e>
 8012462:	ec41 0b17 	vmov	d7, r0, r1
 8012466:	495c      	ldr	r1, [pc, #368]	; (80125d8 <_dtoa_r+0x608>)
 8012468:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 801246c:	ed11 4b02 	vldr	d4, [r1, #-8]
 8012470:	9901      	ldr	r1, [sp, #4]
 8012472:	440c      	add	r4, r1
 8012474:	9907      	ldr	r1, [sp, #28]
 8012476:	b351      	cbz	r1, 80124ce <_dtoa_r+0x4fe>
 8012478:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801247c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8012480:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012484:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012488:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801248c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012490:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012494:	ee14 1a90 	vmov	r1, s9
 8012498:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801249c:	3130      	adds	r1, #48	; 0x30
 801249e:	ee36 6b45 	vsub.f64	d6, d6, d5
 80124a2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80124a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124aa:	f808 1b01 	strb.w	r1, [r8], #1
 80124ae:	d439      	bmi.n	8012524 <_dtoa_r+0x554>
 80124b0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80124b4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80124b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124bc:	d472      	bmi.n	80125a4 <_dtoa_r+0x5d4>
 80124be:	45a0      	cmp	r8, r4
 80124c0:	f43f af6b 	beq.w	801239a <_dtoa_r+0x3ca>
 80124c4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80124c8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80124cc:	e7e0      	b.n	8012490 <_dtoa_r+0x4c0>
 80124ce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80124d2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80124d6:	4620      	mov	r0, r4
 80124d8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80124dc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80124e0:	ee14 1a90 	vmov	r1, s9
 80124e4:	3130      	adds	r1, #48	; 0x30
 80124e6:	f808 1b01 	strb.w	r1, [r8], #1
 80124ea:	45a0      	cmp	r8, r4
 80124ec:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80124f0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80124f4:	d118      	bne.n	8012528 <_dtoa_r+0x558>
 80124f6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80124fa:	ee37 4b05 	vadd.f64	d4, d7, d5
 80124fe:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012506:	dc4d      	bgt.n	80125a4 <_dtoa_r+0x5d4>
 8012508:	ee35 5b47 	vsub.f64	d5, d5, d7
 801250c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8012510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012514:	f57f af41 	bpl.w	801239a <_dtoa_r+0x3ca>
 8012518:	4680      	mov	r8, r0
 801251a:	3801      	subs	r0, #1
 801251c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8012520:	2b30      	cmp	r3, #48	; 0x30
 8012522:	d0f9      	beq.n	8012518 <_dtoa_r+0x548>
 8012524:	4693      	mov	fp, r2
 8012526:	e02a      	b.n	801257e <_dtoa_r+0x5ae>
 8012528:	ee26 6b03 	vmul.f64	d6, d6, d3
 801252c:	e7d6      	b.n	80124dc <_dtoa_r+0x50c>
 801252e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012532:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8012536:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801253a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801253e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012542:	ee15 3a10 	vmov	r3, s10
 8012546:	3330      	adds	r3, #48	; 0x30
 8012548:	f808 3b01 	strb.w	r3, [r8], #1
 801254c:	9b01      	ldr	r3, [sp, #4]
 801254e:	eba8 0303 	sub.w	r3, r8, r3
 8012552:	4599      	cmp	r9, r3
 8012554:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012558:	eea3 7b46 	vfms.f64	d7, d3, d6
 801255c:	d133      	bne.n	80125c6 <_dtoa_r+0x5f6>
 801255e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012562:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801256a:	dc1a      	bgt.n	80125a2 <_dtoa_r+0x5d2>
 801256c:	eeb4 7b46 	vcmp.f64	d7, d6
 8012570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012574:	d103      	bne.n	801257e <_dtoa_r+0x5ae>
 8012576:	ee15 3a10 	vmov	r3, s10
 801257a:	07d9      	lsls	r1, r3, #31
 801257c:	d411      	bmi.n	80125a2 <_dtoa_r+0x5d2>
 801257e:	4629      	mov	r1, r5
 8012580:	4630      	mov	r0, r6
 8012582:	f000 fbd1 	bl	8012d28 <_Bfree>
 8012586:	2300      	movs	r3, #0
 8012588:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801258a:	f888 3000 	strb.w	r3, [r8]
 801258e:	f10b 0301 	add.w	r3, fp, #1
 8012592:	6013      	str	r3, [r2, #0]
 8012594:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012596:	2b00      	cmp	r3, #0
 8012598:	f43f ad69 	beq.w	801206e <_dtoa_r+0x9e>
 801259c:	f8c3 8000 	str.w	r8, [r3]
 80125a0:	e565      	b.n	801206e <_dtoa_r+0x9e>
 80125a2:	465a      	mov	r2, fp
 80125a4:	4643      	mov	r3, r8
 80125a6:	4698      	mov	r8, r3
 80125a8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80125ac:	2939      	cmp	r1, #57	; 0x39
 80125ae:	d106      	bne.n	80125be <_dtoa_r+0x5ee>
 80125b0:	9901      	ldr	r1, [sp, #4]
 80125b2:	4299      	cmp	r1, r3
 80125b4:	d1f7      	bne.n	80125a6 <_dtoa_r+0x5d6>
 80125b6:	9801      	ldr	r0, [sp, #4]
 80125b8:	2130      	movs	r1, #48	; 0x30
 80125ba:	3201      	adds	r2, #1
 80125bc:	7001      	strb	r1, [r0, #0]
 80125be:	7819      	ldrb	r1, [r3, #0]
 80125c0:	3101      	adds	r1, #1
 80125c2:	7019      	strb	r1, [r3, #0]
 80125c4:	e7ae      	b.n	8012524 <_dtoa_r+0x554>
 80125c6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80125ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80125ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125d2:	d1b2      	bne.n	801253a <_dtoa_r+0x56a>
 80125d4:	e7d3      	b.n	801257e <_dtoa_r+0x5ae>
 80125d6:	bf00      	nop
 80125d8:	08015860 	.word	0x08015860
 80125dc:	08015838 	.word	0x08015838
 80125e0:	9907      	ldr	r1, [sp, #28]
 80125e2:	2900      	cmp	r1, #0
 80125e4:	f000 80d0 	beq.w	8012788 <_dtoa_r+0x7b8>
 80125e8:	9906      	ldr	r1, [sp, #24]
 80125ea:	2901      	cmp	r1, #1
 80125ec:	f300 80b4 	bgt.w	8012758 <_dtoa_r+0x788>
 80125f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80125f2:	2900      	cmp	r1, #0
 80125f4:	f000 80ac 	beq.w	8012750 <_dtoa_r+0x780>
 80125f8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80125fc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012600:	461c      	mov	r4, r3
 8012602:	9309      	str	r3, [sp, #36]	; 0x24
 8012604:	9b04      	ldr	r3, [sp, #16]
 8012606:	4413      	add	r3, r2
 8012608:	9304      	str	r3, [sp, #16]
 801260a:	9b05      	ldr	r3, [sp, #20]
 801260c:	2101      	movs	r1, #1
 801260e:	4413      	add	r3, r2
 8012610:	4630      	mov	r0, r6
 8012612:	9305      	str	r3, [sp, #20]
 8012614:	f000 fc88 	bl	8012f28 <__i2b>
 8012618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801261a:	4607      	mov	r7, r0
 801261c:	f1b8 0f00 	cmp.w	r8, #0
 8012620:	d00d      	beq.n	801263e <_dtoa_r+0x66e>
 8012622:	9a05      	ldr	r2, [sp, #20]
 8012624:	2a00      	cmp	r2, #0
 8012626:	dd0a      	ble.n	801263e <_dtoa_r+0x66e>
 8012628:	4542      	cmp	r2, r8
 801262a:	9904      	ldr	r1, [sp, #16]
 801262c:	bfa8      	it	ge
 801262e:	4642      	movge	r2, r8
 8012630:	1a89      	subs	r1, r1, r2
 8012632:	9104      	str	r1, [sp, #16]
 8012634:	9905      	ldr	r1, [sp, #20]
 8012636:	eba8 0802 	sub.w	r8, r8, r2
 801263a:	1a8a      	subs	r2, r1, r2
 801263c:	9205      	str	r2, [sp, #20]
 801263e:	b303      	cbz	r3, 8012682 <_dtoa_r+0x6b2>
 8012640:	9a07      	ldr	r2, [sp, #28]
 8012642:	2a00      	cmp	r2, #0
 8012644:	f000 80a5 	beq.w	8012792 <_dtoa_r+0x7c2>
 8012648:	2c00      	cmp	r4, #0
 801264a:	dd13      	ble.n	8012674 <_dtoa_r+0x6a4>
 801264c:	4639      	mov	r1, r7
 801264e:	4622      	mov	r2, r4
 8012650:	4630      	mov	r0, r6
 8012652:	930d      	str	r3, [sp, #52]	; 0x34
 8012654:	f000 fd28 	bl	80130a8 <__pow5mult>
 8012658:	462a      	mov	r2, r5
 801265a:	4601      	mov	r1, r0
 801265c:	4607      	mov	r7, r0
 801265e:	4630      	mov	r0, r6
 8012660:	f000 fc78 	bl	8012f54 <__multiply>
 8012664:	4629      	mov	r1, r5
 8012666:	9009      	str	r0, [sp, #36]	; 0x24
 8012668:	4630      	mov	r0, r6
 801266a:	f000 fb5d 	bl	8012d28 <_Bfree>
 801266e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012670:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012672:	4615      	mov	r5, r2
 8012674:	1b1a      	subs	r2, r3, r4
 8012676:	d004      	beq.n	8012682 <_dtoa_r+0x6b2>
 8012678:	4629      	mov	r1, r5
 801267a:	4630      	mov	r0, r6
 801267c:	f000 fd14 	bl	80130a8 <__pow5mult>
 8012680:	4605      	mov	r5, r0
 8012682:	2101      	movs	r1, #1
 8012684:	4630      	mov	r0, r6
 8012686:	f000 fc4f 	bl	8012f28 <__i2b>
 801268a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801268c:	2b00      	cmp	r3, #0
 801268e:	4604      	mov	r4, r0
 8012690:	f340 8081 	ble.w	8012796 <_dtoa_r+0x7c6>
 8012694:	461a      	mov	r2, r3
 8012696:	4601      	mov	r1, r0
 8012698:	4630      	mov	r0, r6
 801269a:	f000 fd05 	bl	80130a8 <__pow5mult>
 801269e:	9b06      	ldr	r3, [sp, #24]
 80126a0:	2b01      	cmp	r3, #1
 80126a2:	4604      	mov	r4, r0
 80126a4:	dd7a      	ble.n	801279c <_dtoa_r+0x7cc>
 80126a6:	2300      	movs	r3, #0
 80126a8:	9309      	str	r3, [sp, #36]	; 0x24
 80126aa:	6922      	ldr	r2, [r4, #16]
 80126ac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80126b0:	6910      	ldr	r0, [r2, #16]
 80126b2:	f000 fbeb 	bl	8012e8c <__hi0bits>
 80126b6:	f1c0 0020 	rsb	r0, r0, #32
 80126ba:	9b05      	ldr	r3, [sp, #20]
 80126bc:	4418      	add	r0, r3
 80126be:	f010 001f 	ands.w	r0, r0, #31
 80126c2:	f000 8093 	beq.w	80127ec <_dtoa_r+0x81c>
 80126c6:	f1c0 0220 	rsb	r2, r0, #32
 80126ca:	2a04      	cmp	r2, #4
 80126cc:	f340 8085 	ble.w	80127da <_dtoa_r+0x80a>
 80126d0:	9b04      	ldr	r3, [sp, #16]
 80126d2:	f1c0 001c 	rsb	r0, r0, #28
 80126d6:	4403      	add	r3, r0
 80126d8:	9304      	str	r3, [sp, #16]
 80126da:	9b05      	ldr	r3, [sp, #20]
 80126dc:	4480      	add	r8, r0
 80126de:	4403      	add	r3, r0
 80126e0:	9305      	str	r3, [sp, #20]
 80126e2:	9b04      	ldr	r3, [sp, #16]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	dd05      	ble.n	80126f4 <_dtoa_r+0x724>
 80126e8:	4629      	mov	r1, r5
 80126ea:	461a      	mov	r2, r3
 80126ec:	4630      	mov	r0, r6
 80126ee:	f000 fd35 	bl	801315c <__lshift>
 80126f2:	4605      	mov	r5, r0
 80126f4:	9b05      	ldr	r3, [sp, #20]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	dd05      	ble.n	8012706 <_dtoa_r+0x736>
 80126fa:	4621      	mov	r1, r4
 80126fc:	461a      	mov	r2, r3
 80126fe:	4630      	mov	r0, r6
 8012700:	f000 fd2c 	bl	801315c <__lshift>
 8012704:	4604      	mov	r4, r0
 8012706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012708:	2b00      	cmp	r3, #0
 801270a:	d071      	beq.n	80127f0 <_dtoa_r+0x820>
 801270c:	4621      	mov	r1, r4
 801270e:	4628      	mov	r0, r5
 8012710:	f000 fd90 	bl	8013234 <__mcmp>
 8012714:	2800      	cmp	r0, #0
 8012716:	da6b      	bge.n	80127f0 <_dtoa_r+0x820>
 8012718:	2300      	movs	r3, #0
 801271a:	4629      	mov	r1, r5
 801271c:	220a      	movs	r2, #10
 801271e:	4630      	mov	r0, r6
 8012720:	f000 fb24 	bl	8012d6c <__multadd>
 8012724:	9b07      	ldr	r3, [sp, #28]
 8012726:	f10b 3bff 	add.w	fp, fp, #4294967295
 801272a:	4605      	mov	r5, r0
 801272c:	2b00      	cmp	r3, #0
 801272e:	f000 8197 	beq.w	8012a60 <_dtoa_r+0xa90>
 8012732:	4639      	mov	r1, r7
 8012734:	2300      	movs	r3, #0
 8012736:	220a      	movs	r2, #10
 8012738:	4630      	mov	r0, r6
 801273a:	f000 fb17 	bl	8012d6c <__multadd>
 801273e:	f1ba 0f00 	cmp.w	sl, #0
 8012742:	4607      	mov	r7, r0
 8012744:	f300 8093 	bgt.w	801286e <_dtoa_r+0x89e>
 8012748:	9b06      	ldr	r3, [sp, #24]
 801274a:	2b02      	cmp	r3, #2
 801274c:	dc57      	bgt.n	80127fe <_dtoa_r+0x82e>
 801274e:	e08e      	b.n	801286e <_dtoa_r+0x89e>
 8012750:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012752:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012756:	e751      	b.n	80125fc <_dtoa_r+0x62c>
 8012758:	f109 34ff 	add.w	r4, r9, #4294967295
 801275c:	42a3      	cmp	r3, r4
 801275e:	bfbf      	itttt	lt
 8012760:	1ae2      	sublt	r2, r4, r3
 8012762:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8012764:	189b      	addlt	r3, r3, r2
 8012766:	930a      	strlt	r3, [sp, #40]	; 0x28
 8012768:	bfae      	itee	ge
 801276a:	1b1c      	subge	r4, r3, r4
 801276c:	4623      	movlt	r3, r4
 801276e:	2400      	movlt	r4, #0
 8012770:	f1b9 0f00 	cmp.w	r9, #0
 8012774:	bfb5      	itete	lt
 8012776:	9a04      	ldrlt	r2, [sp, #16]
 8012778:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801277c:	eba2 0809 	sublt.w	r8, r2, r9
 8012780:	464a      	movge	r2, r9
 8012782:	bfb8      	it	lt
 8012784:	2200      	movlt	r2, #0
 8012786:	e73c      	b.n	8012602 <_dtoa_r+0x632>
 8012788:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801278c:	9f07      	ldr	r7, [sp, #28]
 801278e:	461c      	mov	r4, r3
 8012790:	e744      	b.n	801261c <_dtoa_r+0x64c>
 8012792:	461a      	mov	r2, r3
 8012794:	e770      	b.n	8012678 <_dtoa_r+0x6a8>
 8012796:	9b06      	ldr	r3, [sp, #24]
 8012798:	2b01      	cmp	r3, #1
 801279a:	dc18      	bgt.n	80127ce <_dtoa_r+0x7fe>
 801279c:	9b02      	ldr	r3, [sp, #8]
 801279e:	b9b3      	cbnz	r3, 80127ce <_dtoa_r+0x7fe>
 80127a0:	9b03      	ldr	r3, [sp, #12]
 80127a2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80127a6:	b9a2      	cbnz	r2, 80127d2 <_dtoa_r+0x802>
 80127a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80127ac:	0d12      	lsrs	r2, r2, #20
 80127ae:	0512      	lsls	r2, r2, #20
 80127b0:	b18a      	cbz	r2, 80127d6 <_dtoa_r+0x806>
 80127b2:	9b04      	ldr	r3, [sp, #16]
 80127b4:	3301      	adds	r3, #1
 80127b6:	9304      	str	r3, [sp, #16]
 80127b8:	9b05      	ldr	r3, [sp, #20]
 80127ba:	3301      	adds	r3, #1
 80127bc:	9305      	str	r3, [sp, #20]
 80127be:	2301      	movs	r3, #1
 80127c0:	9309      	str	r3, [sp, #36]	; 0x24
 80127c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	f47f af70 	bne.w	80126aa <_dtoa_r+0x6da>
 80127ca:	2001      	movs	r0, #1
 80127cc:	e775      	b.n	80126ba <_dtoa_r+0x6ea>
 80127ce:	2300      	movs	r3, #0
 80127d0:	e7f6      	b.n	80127c0 <_dtoa_r+0x7f0>
 80127d2:	9b02      	ldr	r3, [sp, #8]
 80127d4:	e7f4      	b.n	80127c0 <_dtoa_r+0x7f0>
 80127d6:	9209      	str	r2, [sp, #36]	; 0x24
 80127d8:	e7f3      	b.n	80127c2 <_dtoa_r+0x7f2>
 80127da:	d082      	beq.n	80126e2 <_dtoa_r+0x712>
 80127dc:	9b04      	ldr	r3, [sp, #16]
 80127de:	321c      	adds	r2, #28
 80127e0:	4413      	add	r3, r2
 80127e2:	9304      	str	r3, [sp, #16]
 80127e4:	9b05      	ldr	r3, [sp, #20]
 80127e6:	4490      	add	r8, r2
 80127e8:	4413      	add	r3, r2
 80127ea:	e779      	b.n	80126e0 <_dtoa_r+0x710>
 80127ec:	4602      	mov	r2, r0
 80127ee:	e7f5      	b.n	80127dc <_dtoa_r+0x80c>
 80127f0:	f1b9 0f00 	cmp.w	r9, #0
 80127f4:	dc36      	bgt.n	8012864 <_dtoa_r+0x894>
 80127f6:	9b06      	ldr	r3, [sp, #24]
 80127f8:	2b02      	cmp	r3, #2
 80127fa:	dd33      	ble.n	8012864 <_dtoa_r+0x894>
 80127fc:	46ca      	mov	sl, r9
 80127fe:	f1ba 0f00 	cmp.w	sl, #0
 8012802:	d10d      	bne.n	8012820 <_dtoa_r+0x850>
 8012804:	4621      	mov	r1, r4
 8012806:	4653      	mov	r3, sl
 8012808:	2205      	movs	r2, #5
 801280a:	4630      	mov	r0, r6
 801280c:	f000 faae 	bl	8012d6c <__multadd>
 8012810:	4601      	mov	r1, r0
 8012812:	4604      	mov	r4, r0
 8012814:	4628      	mov	r0, r5
 8012816:	f000 fd0d 	bl	8013234 <__mcmp>
 801281a:	2800      	cmp	r0, #0
 801281c:	f73f ade4 	bgt.w	80123e8 <_dtoa_r+0x418>
 8012820:	9b08      	ldr	r3, [sp, #32]
 8012822:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012826:	ea6f 0b03 	mvn.w	fp, r3
 801282a:	f04f 0900 	mov.w	r9, #0
 801282e:	4621      	mov	r1, r4
 8012830:	4630      	mov	r0, r6
 8012832:	f000 fa79 	bl	8012d28 <_Bfree>
 8012836:	2f00      	cmp	r7, #0
 8012838:	f43f aea1 	beq.w	801257e <_dtoa_r+0x5ae>
 801283c:	f1b9 0f00 	cmp.w	r9, #0
 8012840:	d005      	beq.n	801284e <_dtoa_r+0x87e>
 8012842:	45b9      	cmp	r9, r7
 8012844:	d003      	beq.n	801284e <_dtoa_r+0x87e>
 8012846:	4649      	mov	r1, r9
 8012848:	4630      	mov	r0, r6
 801284a:	f000 fa6d 	bl	8012d28 <_Bfree>
 801284e:	4639      	mov	r1, r7
 8012850:	4630      	mov	r0, r6
 8012852:	f000 fa69 	bl	8012d28 <_Bfree>
 8012856:	e692      	b.n	801257e <_dtoa_r+0x5ae>
 8012858:	2400      	movs	r4, #0
 801285a:	4627      	mov	r7, r4
 801285c:	e7e0      	b.n	8012820 <_dtoa_r+0x850>
 801285e:	4693      	mov	fp, r2
 8012860:	4627      	mov	r7, r4
 8012862:	e5c1      	b.n	80123e8 <_dtoa_r+0x418>
 8012864:	9b07      	ldr	r3, [sp, #28]
 8012866:	46ca      	mov	sl, r9
 8012868:	2b00      	cmp	r3, #0
 801286a:	f000 8100 	beq.w	8012a6e <_dtoa_r+0xa9e>
 801286e:	f1b8 0f00 	cmp.w	r8, #0
 8012872:	dd05      	ble.n	8012880 <_dtoa_r+0x8b0>
 8012874:	4639      	mov	r1, r7
 8012876:	4642      	mov	r2, r8
 8012878:	4630      	mov	r0, r6
 801287a:	f000 fc6f 	bl	801315c <__lshift>
 801287e:	4607      	mov	r7, r0
 8012880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012882:	2b00      	cmp	r3, #0
 8012884:	d05d      	beq.n	8012942 <_dtoa_r+0x972>
 8012886:	6879      	ldr	r1, [r7, #4]
 8012888:	4630      	mov	r0, r6
 801288a:	f000 fa0d 	bl	8012ca8 <_Balloc>
 801288e:	4680      	mov	r8, r0
 8012890:	b928      	cbnz	r0, 801289e <_dtoa_r+0x8ce>
 8012892:	4b82      	ldr	r3, [pc, #520]	; (8012a9c <_dtoa_r+0xacc>)
 8012894:	4602      	mov	r2, r0
 8012896:	f240 21ef 	movw	r1, #751	; 0x2ef
 801289a:	f7ff bbb1 	b.w	8012000 <_dtoa_r+0x30>
 801289e:	693a      	ldr	r2, [r7, #16]
 80128a0:	3202      	adds	r2, #2
 80128a2:	0092      	lsls	r2, r2, #2
 80128a4:	f107 010c 	add.w	r1, r7, #12
 80128a8:	300c      	adds	r0, #12
 80128aa:	f7ff faf5 	bl	8011e98 <memcpy>
 80128ae:	2201      	movs	r2, #1
 80128b0:	4641      	mov	r1, r8
 80128b2:	4630      	mov	r0, r6
 80128b4:	f000 fc52 	bl	801315c <__lshift>
 80128b8:	9b01      	ldr	r3, [sp, #4]
 80128ba:	3301      	adds	r3, #1
 80128bc:	9304      	str	r3, [sp, #16]
 80128be:	9b01      	ldr	r3, [sp, #4]
 80128c0:	4453      	add	r3, sl
 80128c2:	9308      	str	r3, [sp, #32]
 80128c4:	9b02      	ldr	r3, [sp, #8]
 80128c6:	f003 0301 	and.w	r3, r3, #1
 80128ca:	46b9      	mov	r9, r7
 80128cc:	9307      	str	r3, [sp, #28]
 80128ce:	4607      	mov	r7, r0
 80128d0:	9b04      	ldr	r3, [sp, #16]
 80128d2:	4621      	mov	r1, r4
 80128d4:	3b01      	subs	r3, #1
 80128d6:	4628      	mov	r0, r5
 80128d8:	9302      	str	r3, [sp, #8]
 80128da:	f7ff faf1 	bl	8011ec0 <quorem>
 80128de:	4603      	mov	r3, r0
 80128e0:	3330      	adds	r3, #48	; 0x30
 80128e2:	9005      	str	r0, [sp, #20]
 80128e4:	4649      	mov	r1, r9
 80128e6:	4628      	mov	r0, r5
 80128e8:	9309      	str	r3, [sp, #36]	; 0x24
 80128ea:	f000 fca3 	bl	8013234 <__mcmp>
 80128ee:	463a      	mov	r2, r7
 80128f0:	4682      	mov	sl, r0
 80128f2:	4621      	mov	r1, r4
 80128f4:	4630      	mov	r0, r6
 80128f6:	f000 fcb9 	bl	801326c <__mdiff>
 80128fa:	68c2      	ldr	r2, [r0, #12]
 80128fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128fe:	4680      	mov	r8, r0
 8012900:	bb0a      	cbnz	r2, 8012946 <_dtoa_r+0x976>
 8012902:	4601      	mov	r1, r0
 8012904:	4628      	mov	r0, r5
 8012906:	f000 fc95 	bl	8013234 <__mcmp>
 801290a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801290c:	4602      	mov	r2, r0
 801290e:	4641      	mov	r1, r8
 8012910:	4630      	mov	r0, r6
 8012912:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8012916:	f000 fa07 	bl	8012d28 <_Bfree>
 801291a:	9b06      	ldr	r3, [sp, #24]
 801291c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801291e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012922:	ea43 0102 	orr.w	r1, r3, r2
 8012926:	9b07      	ldr	r3, [sp, #28]
 8012928:	4319      	orrs	r1, r3
 801292a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801292c:	d10d      	bne.n	801294a <_dtoa_r+0x97a>
 801292e:	2b39      	cmp	r3, #57	; 0x39
 8012930:	d029      	beq.n	8012986 <_dtoa_r+0x9b6>
 8012932:	f1ba 0f00 	cmp.w	sl, #0
 8012936:	dd01      	ble.n	801293c <_dtoa_r+0x96c>
 8012938:	9b05      	ldr	r3, [sp, #20]
 801293a:	3331      	adds	r3, #49	; 0x31
 801293c:	9a02      	ldr	r2, [sp, #8]
 801293e:	7013      	strb	r3, [r2, #0]
 8012940:	e775      	b.n	801282e <_dtoa_r+0x85e>
 8012942:	4638      	mov	r0, r7
 8012944:	e7b8      	b.n	80128b8 <_dtoa_r+0x8e8>
 8012946:	2201      	movs	r2, #1
 8012948:	e7e1      	b.n	801290e <_dtoa_r+0x93e>
 801294a:	f1ba 0f00 	cmp.w	sl, #0
 801294e:	db06      	blt.n	801295e <_dtoa_r+0x98e>
 8012950:	9906      	ldr	r1, [sp, #24]
 8012952:	ea41 0a0a 	orr.w	sl, r1, sl
 8012956:	9907      	ldr	r1, [sp, #28]
 8012958:	ea5a 0a01 	orrs.w	sl, sl, r1
 801295c:	d120      	bne.n	80129a0 <_dtoa_r+0x9d0>
 801295e:	2a00      	cmp	r2, #0
 8012960:	ddec      	ble.n	801293c <_dtoa_r+0x96c>
 8012962:	4629      	mov	r1, r5
 8012964:	2201      	movs	r2, #1
 8012966:	4630      	mov	r0, r6
 8012968:	9304      	str	r3, [sp, #16]
 801296a:	f000 fbf7 	bl	801315c <__lshift>
 801296e:	4621      	mov	r1, r4
 8012970:	4605      	mov	r5, r0
 8012972:	f000 fc5f 	bl	8013234 <__mcmp>
 8012976:	2800      	cmp	r0, #0
 8012978:	9b04      	ldr	r3, [sp, #16]
 801297a:	dc02      	bgt.n	8012982 <_dtoa_r+0x9b2>
 801297c:	d1de      	bne.n	801293c <_dtoa_r+0x96c>
 801297e:	07da      	lsls	r2, r3, #31
 8012980:	d5dc      	bpl.n	801293c <_dtoa_r+0x96c>
 8012982:	2b39      	cmp	r3, #57	; 0x39
 8012984:	d1d8      	bne.n	8012938 <_dtoa_r+0x968>
 8012986:	9a02      	ldr	r2, [sp, #8]
 8012988:	2339      	movs	r3, #57	; 0x39
 801298a:	7013      	strb	r3, [r2, #0]
 801298c:	4643      	mov	r3, r8
 801298e:	4698      	mov	r8, r3
 8012990:	3b01      	subs	r3, #1
 8012992:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8012996:	2a39      	cmp	r2, #57	; 0x39
 8012998:	d051      	beq.n	8012a3e <_dtoa_r+0xa6e>
 801299a:	3201      	adds	r2, #1
 801299c:	701a      	strb	r2, [r3, #0]
 801299e:	e746      	b.n	801282e <_dtoa_r+0x85e>
 80129a0:	2a00      	cmp	r2, #0
 80129a2:	dd03      	ble.n	80129ac <_dtoa_r+0x9dc>
 80129a4:	2b39      	cmp	r3, #57	; 0x39
 80129a6:	d0ee      	beq.n	8012986 <_dtoa_r+0x9b6>
 80129a8:	3301      	adds	r3, #1
 80129aa:	e7c7      	b.n	801293c <_dtoa_r+0x96c>
 80129ac:	9a04      	ldr	r2, [sp, #16]
 80129ae:	9908      	ldr	r1, [sp, #32]
 80129b0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80129b4:	428a      	cmp	r2, r1
 80129b6:	d02b      	beq.n	8012a10 <_dtoa_r+0xa40>
 80129b8:	4629      	mov	r1, r5
 80129ba:	2300      	movs	r3, #0
 80129bc:	220a      	movs	r2, #10
 80129be:	4630      	mov	r0, r6
 80129c0:	f000 f9d4 	bl	8012d6c <__multadd>
 80129c4:	45b9      	cmp	r9, r7
 80129c6:	4605      	mov	r5, r0
 80129c8:	f04f 0300 	mov.w	r3, #0
 80129cc:	f04f 020a 	mov.w	r2, #10
 80129d0:	4649      	mov	r1, r9
 80129d2:	4630      	mov	r0, r6
 80129d4:	d107      	bne.n	80129e6 <_dtoa_r+0xa16>
 80129d6:	f000 f9c9 	bl	8012d6c <__multadd>
 80129da:	4681      	mov	r9, r0
 80129dc:	4607      	mov	r7, r0
 80129de:	9b04      	ldr	r3, [sp, #16]
 80129e0:	3301      	adds	r3, #1
 80129e2:	9304      	str	r3, [sp, #16]
 80129e4:	e774      	b.n	80128d0 <_dtoa_r+0x900>
 80129e6:	f000 f9c1 	bl	8012d6c <__multadd>
 80129ea:	4639      	mov	r1, r7
 80129ec:	4681      	mov	r9, r0
 80129ee:	2300      	movs	r3, #0
 80129f0:	220a      	movs	r2, #10
 80129f2:	4630      	mov	r0, r6
 80129f4:	f000 f9ba 	bl	8012d6c <__multadd>
 80129f8:	4607      	mov	r7, r0
 80129fa:	e7f0      	b.n	80129de <_dtoa_r+0xa0e>
 80129fc:	f1ba 0f00 	cmp.w	sl, #0
 8012a00:	9a01      	ldr	r2, [sp, #4]
 8012a02:	bfcc      	ite	gt
 8012a04:	46d0      	movgt	r8, sl
 8012a06:	f04f 0801 	movle.w	r8, #1
 8012a0a:	4490      	add	r8, r2
 8012a0c:	f04f 0900 	mov.w	r9, #0
 8012a10:	4629      	mov	r1, r5
 8012a12:	2201      	movs	r2, #1
 8012a14:	4630      	mov	r0, r6
 8012a16:	9302      	str	r3, [sp, #8]
 8012a18:	f000 fba0 	bl	801315c <__lshift>
 8012a1c:	4621      	mov	r1, r4
 8012a1e:	4605      	mov	r5, r0
 8012a20:	f000 fc08 	bl	8013234 <__mcmp>
 8012a24:	2800      	cmp	r0, #0
 8012a26:	dcb1      	bgt.n	801298c <_dtoa_r+0x9bc>
 8012a28:	d102      	bne.n	8012a30 <_dtoa_r+0xa60>
 8012a2a:	9b02      	ldr	r3, [sp, #8]
 8012a2c:	07db      	lsls	r3, r3, #31
 8012a2e:	d4ad      	bmi.n	801298c <_dtoa_r+0x9bc>
 8012a30:	4643      	mov	r3, r8
 8012a32:	4698      	mov	r8, r3
 8012a34:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012a38:	2a30      	cmp	r2, #48	; 0x30
 8012a3a:	d0fa      	beq.n	8012a32 <_dtoa_r+0xa62>
 8012a3c:	e6f7      	b.n	801282e <_dtoa_r+0x85e>
 8012a3e:	9a01      	ldr	r2, [sp, #4]
 8012a40:	429a      	cmp	r2, r3
 8012a42:	d1a4      	bne.n	801298e <_dtoa_r+0x9be>
 8012a44:	f10b 0b01 	add.w	fp, fp, #1
 8012a48:	2331      	movs	r3, #49	; 0x31
 8012a4a:	e778      	b.n	801293e <_dtoa_r+0x96e>
 8012a4c:	4b14      	ldr	r3, [pc, #80]	; (8012aa0 <_dtoa_r+0xad0>)
 8012a4e:	f7ff bb2a 	b.w	80120a6 <_dtoa_r+0xd6>
 8012a52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	f47f ab05 	bne.w	8012064 <_dtoa_r+0x94>
 8012a5a:	4b12      	ldr	r3, [pc, #72]	; (8012aa4 <_dtoa_r+0xad4>)
 8012a5c:	f7ff bb23 	b.w	80120a6 <_dtoa_r+0xd6>
 8012a60:	f1ba 0f00 	cmp.w	sl, #0
 8012a64:	dc03      	bgt.n	8012a6e <_dtoa_r+0xa9e>
 8012a66:	9b06      	ldr	r3, [sp, #24]
 8012a68:	2b02      	cmp	r3, #2
 8012a6a:	f73f aec8 	bgt.w	80127fe <_dtoa_r+0x82e>
 8012a6e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012a72:	4621      	mov	r1, r4
 8012a74:	4628      	mov	r0, r5
 8012a76:	f7ff fa23 	bl	8011ec0 <quorem>
 8012a7a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012a7e:	f808 3b01 	strb.w	r3, [r8], #1
 8012a82:	9a01      	ldr	r2, [sp, #4]
 8012a84:	eba8 0202 	sub.w	r2, r8, r2
 8012a88:	4592      	cmp	sl, r2
 8012a8a:	ddb7      	ble.n	80129fc <_dtoa_r+0xa2c>
 8012a8c:	4629      	mov	r1, r5
 8012a8e:	2300      	movs	r3, #0
 8012a90:	220a      	movs	r2, #10
 8012a92:	4630      	mov	r0, r6
 8012a94:	f000 f96a 	bl	8012d6c <__multadd>
 8012a98:	4605      	mov	r5, r0
 8012a9a:	e7ea      	b.n	8012a72 <_dtoa_r+0xaa2>
 8012a9c:	080157c9 	.word	0x080157c9
 8012aa0:	08015724 	.word	0x08015724
 8012aa4:	0801574d 	.word	0x0801574d

08012aa8 <_free_r>:
 8012aa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012aaa:	2900      	cmp	r1, #0
 8012aac:	d044      	beq.n	8012b38 <_free_r+0x90>
 8012aae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ab2:	9001      	str	r0, [sp, #4]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	f1a1 0404 	sub.w	r4, r1, #4
 8012aba:	bfb8      	it	lt
 8012abc:	18e4      	addlt	r4, r4, r3
 8012abe:	f000 f8e7 	bl	8012c90 <__malloc_lock>
 8012ac2:	4a1e      	ldr	r2, [pc, #120]	; (8012b3c <_free_r+0x94>)
 8012ac4:	9801      	ldr	r0, [sp, #4]
 8012ac6:	6813      	ldr	r3, [r2, #0]
 8012ac8:	b933      	cbnz	r3, 8012ad8 <_free_r+0x30>
 8012aca:	6063      	str	r3, [r4, #4]
 8012acc:	6014      	str	r4, [r2, #0]
 8012ace:	b003      	add	sp, #12
 8012ad0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012ad4:	f000 b8e2 	b.w	8012c9c <__malloc_unlock>
 8012ad8:	42a3      	cmp	r3, r4
 8012ada:	d908      	bls.n	8012aee <_free_r+0x46>
 8012adc:	6825      	ldr	r5, [r4, #0]
 8012ade:	1961      	adds	r1, r4, r5
 8012ae0:	428b      	cmp	r3, r1
 8012ae2:	bf01      	itttt	eq
 8012ae4:	6819      	ldreq	r1, [r3, #0]
 8012ae6:	685b      	ldreq	r3, [r3, #4]
 8012ae8:	1949      	addeq	r1, r1, r5
 8012aea:	6021      	streq	r1, [r4, #0]
 8012aec:	e7ed      	b.n	8012aca <_free_r+0x22>
 8012aee:	461a      	mov	r2, r3
 8012af0:	685b      	ldr	r3, [r3, #4]
 8012af2:	b10b      	cbz	r3, 8012af8 <_free_r+0x50>
 8012af4:	42a3      	cmp	r3, r4
 8012af6:	d9fa      	bls.n	8012aee <_free_r+0x46>
 8012af8:	6811      	ldr	r1, [r2, #0]
 8012afa:	1855      	adds	r5, r2, r1
 8012afc:	42a5      	cmp	r5, r4
 8012afe:	d10b      	bne.n	8012b18 <_free_r+0x70>
 8012b00:	6824      	ldr	r4, [r4, #0]
 8012b02:	4421      	add	r1, r4
 8012b04:	1854      	adds	r4, r2, r1
 8012b06:	42a3      	cmp	r3, r4
 8012b08:	6011      	str	r1, [r2, #0]
 8012b0a:	d1e0      	bne.n	8012ace <_free_r+0x26>
 8012b0c:	681c      	ldr	r4, [r3, #0]
 8012b0e:	685b      	ldr	r3, [r3, #4]
 8012b10:	6053      	str	r3, [r2, #4]
 8012b12:	440c      	add	r4, r1
 8012b14:	6014      	str	r4, [r2, #0]
 8012b16:	e7da      	b.n	8012ace <_free_r+0x26>
 8012b18:	d902      	bls.n	8012b20 <_free_r+0x78>
 8012b1a:	230c      	movs	r3, #12
 8012b1c:	6003      	str	r3, [r0, #0]
 8012b1e:	e7d6      	b.n	8012ace <_free_r+0x26>
 8012b20:	6825      	ldr	r5, [r4, #0]
 8012b22:	1961      	adds	r1, r4, r5
 8012b24:	428b      	cmp	r3, r1
 8012b26:	bf04      	itt	eq
 8012b28:	6819      	ldreq	r1, [r3, #0]
 8012b2a:	685b      	ldreq	r3, [r3, #4]
 8012b2c:	6063      	str	r3, [r4, #4]
 8012b2e:	bf04      	itt	eq
 8012b30:	1949      	addeq	r1, r1, r5
 8012b32:	6021      	streq	r1, [r4, #0]
 8012b34:	6054      	str	r4, [r2, #4]
 8012b36:	e7ca      	b.n	8012ace <_free_r+0x26>
 8012b38:	b003      	add	sp, #12
 8012b3a:	bd30      	pop	{r4, r5, pc}
 8012b3c:	24000f44 	.word	0x24000f44

08012b40 <malloc>:
 8012b40:	4b02      	ldr	r3, [pc, #8]	; (8012b4c <malloc+0xc>)
 8012b42:	4601      	mov	r1, r0
 8012b44:	6818      	ldr	r0, [r3, #0]
 8012b46:	f000 b823 	b.w	8012b90 <_malloc_r>
 8012b4a:	bf00      	nop
 8012b4c:	24000068 	.word	0x24000068

08012b50 <sbrk_aligned>:
 8012b50:	b570      	push	{r4, r5, r6, lr}
 8012b52:	4e0e      	ldr	r6, [pc, #56]	; (8012b8c <sbrk_aligned+0x3c>)
 8012b54:	460c      	mov	r4, r1
 8012b56:	6831      	ldr	r1, [r6, #0]
 8012b58:	4605      	mov	r5, r0
 8012b5a:	b911      	cbnz	r1, 8012b62 <sbrk_aligned+0x12>
 8012b5c:	f001 fdd6 	bl	801470c <_sbrk_r>
 8012b60:	6030      	str	r0, [r6, #0]
 8012b62:	4621      	mov	r1, r4
 8012b64:	4628      	mov	r0, r5
 8012b66:	f001 fdd1 	bl	801470c <_sbrk_r>
 8012b6a:	1c43      	adds	r3, r0, #1
 8012b6c:	d00a      	beq.n	8012b84 <sbrk_aligned+0x34>
 8012b6e:	1cc4      	adds	r4, r0, #3
 8012b70:	f024 0403 	bic.w	r4, r4, #3
 8012b74:	42a0      	cmp	r0, r4
 8012b76:	d007      	beq.n	8012b88 <sbrk_aligned+0x38>
 8012b78:	1a21      	subs	r1, r4, r0
 8012b7a:	4628      	mov	r0, r5
 8012b7c:	f001 fdc6 	bl	801470c <_sbrk_r>
 8012b80:	3001      	adds	r0, #1
 8012b82:	d101      	bne.n	8012b88 <sbrk_aligned+0x38>
 8012b84:	f04f 34ff 	mov.w	r4, #4294967295
 8012b88:	4620      	mov	r0, r4
 8012b8a:	bd70      	pop	{r4, r5, r6, pc}
 8012b8c:	24000f48 	.word	0x24000f48

08012b90 <_malloc_r>:
 8012b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b94:	1ccd      	adds	r5, r1, #3
 8012b96:	f025 0503 	bic.w	r5, r5, #3
 8012b9a:	3508      	adds	r5, #8
 8012b9c:	2d0c      	cmp	r5, #12
 8012b9e:	bf38      	it	cc
 8012ba0:	250c      	movcc	r5, #12
 8012ba2:	2d00      	cmp	r5, #0
 8012ba4:	4607      	mov	r7, r0
 8012ba6:	db01      	blt.n	8012bac <_malloc_r+0x1c>
 8012ba8:	42a9      	cmp	r1, r5
 8012baa:	d905      	bls.n	8012bb8 <_malloc_r+0x28>
 8012bac:	230c      	movs	r3, #12
 8012bae:	603b      	str	r3, [r7, #0]
 8012bb0:	2600      	movs	r6, #0
 8012bb2:	4630      	mov	r0, r6
 8012bb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bb8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8012c8c <_malloc_r+0xfc>
 8012bbc:	f000 f868 	bl	8012c90 <__malloc_lock>
 8012bc0:	f8d8 3000 	ldr.w	r3, [r8]
 8012bc4:	461c      	mov	r4, r3
 8012bc6:	bb5c      	cbnz	r4, 8012c20 <_malloc_r+0x90>
 8012bc8:	4629      	mov	r1, r5
 8012bca:	4638      	mov	r0, r7
 8012bcc:	f7ff ffc0 	bl	8012b50 <sbrk_aligned>
 8012bd0:	1c43      	adds	r3, r0, #1
 8012bd2:	4604      	mov	r4, r0
 8012bd4:	d155      	bne.n	8012c82 <_malloc_r+0xf2>
 8012bd6:	f8d8 4000 	ldr.w	r4, [r8]
 8012bda:	4626      	mov	r6, r4
 8012bdc:	2e00      	cmp	r6, #0
 8012bde:	d145      	bne.n	8012c6c <_malloc_r+0xdc>
 8012be0:	2c00      	cmp	r4, #0
 8012be2:	d048      	beq.n	8012c76 <_malloc_r+0xe6>
 8012be4:	6823      	ldr	r3, [r4, #0]
 8012be6:	4631      	mov	r1, r6
 8012be8:	4638      	mov	r0, r7
 8012bea:	eb04 0903 	add.w	r9, r4, r3
 8012bee:	f001 fd8d 	bl	801470c <_sbrk_r>
 8012bf2:	4581      	cmp	r9, r0
 8012bf4:	d13f      	bne.n	8012c76 <_malloc_r+0xe6>
 8012bf6:	6821      	ldr	r1, [r4, #0]
 8012bf8:	1a6d      	subs	r5, r5, r1
 8012bfa:	4629      	mov	r1, r5
 8012bfc:	4638      	mov	r0, r7
 8012bfe:	f7ff ffa7 	bl	8012b50 <sbrk_aligned>
 8012c02:	3001      	adds	r0, #1
 8012c04:	d037      	beq.n	8012c76 <_malloc_r+0xe6>
 8012c06:	6823      	ldr	r3, [r4, #0]
 8012c08:	442b      	add	r3, r5
 8012c0a:	6023      	str	r3, [r4, #0]
 8012c0c:	f8d8 3000 	ldr.w	r3, [r8]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d038      	beq.n	8012c86 <_malloc_r+0xf6>
 8012c14:	685a      	ldr	r2, [r3, #4]
 8012c16:	42a2      	cmp	r2, r4
 8012c18:	d12b      	bne.n	8012c72 <_malloc_r+0xe2>
 8012c1a:	2200      	movs	r2, #0
 8012c1c:	605a      	str	r2, [r3, #4]
 8012c1e:	e00f      	b.n	8012c40 <_malloc_r+0xb0>
 8012c20:	6822      	ldr	r2, [r4, #0]
 8012c22:	1b52      	subs	r2, r2, r5
 8012c24:	d41f      	bmi.n	8012c66 <_malloc_r+0xd6>
 8012c26:	2a0b      	cmp	r2, #11
 8012c28:	d917      	bls.n	8012c5a <_malloc_r+0xca>
 8012c2a:	1961      	adds	r1, r4, r5
 8012c2c:	42a3      	cmp	r3, r4
 8012c2e:	6025      	str	r5, [r4, #0]
 8012c30:	bf18      	it	ne
 8012c32:	6059      	strne	r1, [r3, #4]
 8012c34:	6863      	ldr	r3, [r4, #4]
 8012c36:	bf08      	it	eq
 8012c38:	f8c8 1000 	streq.w	r1, [r8]
 8012c3c:	5162      	str	r2, [r4, r5]
 8012c3e:	604b      	str	r3, [r1, #4]
 8012c40:	4638      	mov	r0, r7
 8012c42:	f104 060b 	add.w	r6, r4, #11
 8012c46:	f000 f829 	bl	8012c9c <__malloc_unlock>
 8012c4a:	f026 0607 	bic.w	r6, r6, #7
 8012c4e:	1d23      	adds	r3, r4, #4
 8012c50:	1af2      	subs	r2, r6, r3
 8012c52:	d0ae      	beq.n	8012bb2 <_malloc_r+0x22>
 8012c54:	1b9b      	subs	r3, r3, r6
 8012c56:	50a3      	str	r3, [r4, r2]
 8012c58:	e7ab      	b.n	8012bb2 <_malloc_r+0x22>
 8012c5a:	42a3      	cmp	r3, r4
 8012c5c:	6862      	ldr	r2, [r4, #4]
 8012c5e:	d1dd      	bne.n	8012c1c <_malloc_r+0x8c>
 8012c60:	f8c8 2000 	str.w	r2, [r8]
 8012c64:	e7ec      	b.n	8012c40 <_malloc_r+0xb0>
 8012c66:	4623      	mov	r3, r4
 8012c68:	6864      	ldr	r4, [r4, #4]
 8012c6a:	e7ac      	b.n	8012bc6 <_malloc_r+0x36>
 8012c6c:	4634      	mov	r4, r6
 8012c6e:	6876      	ldr	r6, [r6, #4]
 8012c70:	e7b4      	b.n	8012bdc <_malloc_r+0x4c>
 8012c72:	4613      	mov	r3, r2
 8012c74:	e7cc      	b.n	8012c10 <_malloc_r+0x80>
 8012c76:	230c      	movs	r3, #12
 8012c78:	603b      	str	r3, [r7, #0]
 8012c7a:	4638      	mov	r0, r7
 8012c7c:	f000 f80e 	bl	8012c9c <__malloc_unlock>
 8012c80:	e797      	b.n	8012bb2 <_malloc_r+0x22>
 8012c82:	6025      	str	r5, [r4, #0]
 8012c84:	e7dc      	b.n	8012c40 <_malloc_r+0xb0>
 8012c86:	605b      	str	r3, [r3, #4]
 8012c88:	deff      	udf	#255	; 0xff
 8012c8a:	bf00      	nop
 8012c8c:	24000f44 	.word	0x24000f44

08012c90 <__malloc_lock>:
 8012c90:	4801      	ldr	r0, [pc, #4]	; (8012c98 <__malloc_lock+0x8>)
 8012c92:	f7ff b8ff 	b.w	8011e94 <__retarget_lock_acquire_recursive>
 8012c96:	bf00      	nop
 8012c98:	24000f40 	.word	0x24000f40

08012c9c <__malloc_unlock>:
 8012c9c:	4801      	ldr	r0, [pc, #4]	; (8012ca4 <__malloc_unlock+0x8>)
 8012c9e:	f7ff b8fa 	b.w	8011e96 <__retarget_lock_release_recursive>
 8012ca2:	bf00      	nop
 8012ca4:	24000f40 	.word	0x24000f40

08012ca8 <_Balloc>:
 8012ca8:	b570      	push	{r4, r5, r6, lr}
 8012caa:	69c6      	ldr	r6, [r0, #28]
 8012cac:	4604      	mov	r4, r0
 8012cae:	460d      	mov	r5, r1
 8012cb0:	b976      	cbnz	r6, 8012cd0 <_Balloc+0x28>
 8012cb2:	2010      	movs	r0, #16
 8012cb4:	f7ff ff44 	bl	8012b40 <malloc>
 8012cb8:	4602      	mov	r2, r0
 8012cba:	61e0      	str	r0, [r4, #28]
 8012cbc:	b920      	cbnz	r0, 8012cc8 <_Balloc+0x20>
 8012cbe:	4b18      	ldr	r3, [pc, #96]	; (8012d20 <_Balloc+0x78>)
 8012cc0:	4818      	ldr	r0, [pc, #96]	; (8012d24 <_Balloc+0x7c>)
 8012cc2:	216b      	movs	r1, #107	; 0x6b
 8012cc4:	f001 fd3c 	bl	8014740 <__assert_func>
 8012cc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012ccc:	6006      	str	r6, [r0, #0]
 8012cce:	60c6      	str	r6, [r0, #12]
 8012cd0:	69e6      	ldr	r6, [r4, #28]
 8012cd2:	68f3      	ldr	r3, [r6, #12]
 8012cd4:	b183      	cbz	r3, 8012cf8 <_Balloc+0x50>
 8012cd6:	69e3      	ldr	r3, [r4, #28]
 8012cd8:	68db      	ldr	r3, [r3, #12]
 8012cda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012cde:	b9b8      	cbnz	r0, 8012d10 <_Balloc+0x68>
 8012ce0:	2101      	movs	r1, #1
 8012ce2:	fa01 f605 	lsl.w	r6, r1, r5
 8012ce6:	1d72      	adds	r2, r6, #5
 8012ce8:	0092      	lsls	r2, r2, #2
 8012cea:	4620      	mov	r0, r4
 8012cec:	f001 fd46 	bl	801477c <_calloc_r>
 8012cf0:	b160      	cbz	r0, 8012d0c <_Balloc+0x64>
 8012cf2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012cf6:	e00e      	b.n	8012d16 <_Balloc+0x6e>
 8012cf8:	2221      	movs	r2, #33	; 0x21
 8012cfa:	2104      	movs	r1, #4
 8012cfc:	4620      	mov	r0, r4
 8012cfe:	f001 fd3d 	bl	801477c <_calloc_r>
 8012d02:	69e3      	ldr	r3, [r4, #28]
 8012d04:	60f0      	str	r0, [r6, #12]
 8012d06:	68db      	ldr	r3, [r3, #12]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d1e4      	bne.n	8012cd6 <_Balloc+0x2e>
 8012d0c:	2000      	movs	r0, #0
 8012d0e:	bd70      	pop	{r4, r5, r6, pc}
 8012d10:	6802      	ldr	r2, [r0, #0]
 8012d12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012d16:	2300      	movs	r3, #0
 8012d18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012d1c:	e7f7      	b.n	8012d0e <_Balloc+0x66>
 8012d1e:	bf00      	nop
 8012d20:	0801575a 	.word	0x0801575a
 8012d24:	080157da 	.word	0x080157da

08012d28 <_Bfree>:
 8012d28:	b570      	push	{r4, r5, r6, lr}
 8012d2a:	69c6      	ldr	r6, [r0, #28]
 8012d2c:	4605      	mov	r5, r0
 8012d2e:	460c      	mov	r4, r1
 8012d30:	b976      	cbnz	r6, 8012d50 <_Bfree+0x28>
 8012d32:	2010      	movs	r0, #16
 8012d34:	f7ff ff04 	bl	8012b40 <malloc>
 8012d38:	4602      	mov	r2, r0
 8012d3a:	61e8      	str	r0, [r5, #28]
 8012d3c:	b920      	cbnz	r0, 8012d48 <_Bfree+0x20>
 8012d3e:	4b09      	ldr	r3, [pc, #36]	; (8012d64 <_Bfree+0x3c>)
 8012d40:	4809      	ldr	r0, [pc, #36]	; (8012d68 <_Bfree+0x40>)
 8012d42:	218f      	movs	r1, #143	; 0x8f
 8012d44:	f001 fcfc 	bl	8014740 <__assert_func>
 8012d48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012d4c:	6006      	str	r6, [r0, #0]
 8012d4e:	60c6      	str	r6, [r0, #12]
 8012d50:	b13c      	cbz	r4, 8012d62 <_Bfree+0x3a>
 8012d52:	69eb      	ldr	r3, [r5, #28]
 8012d54:	6862      	ldr	r2, [r4, #4]
 8012d56:	68db      	ldr	r3, [r3, #12]
 8012d58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012d5c:	6021      	str	r1, [r4, #0]
 8012d5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012d62:	bd70      	pop	{r4, r5, r6, pc}
 8012d64:	0801575a 	.word	0x0801575a
 8012d68:	080157da 	.word	0x080157da

08012d6c <__multadd>:
 8012d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d70:	690d      	ldr	r5, [r1, #16]
 8012d72:	4607      	mov	r7, r0
 8012d74:	460c      	mov	r4, r1
 8012d76:	461e      	mov	r6, r3
 8012d78:	f101 0c14 	add.w	ip, r1, #20
 8012d7c:	2000      	movs	r0, #0
 8012d7e:	f8dc 3000 	ldr.w	r3, [ip]
 8012d82:	b299      	uxth	r1, r3
 8012d84:	fb02 6101 	mla	r1, r2, r1, r6
 8012d88:	0c1e      	lsrs	r6, r3, #16
 8012d8a:	0c0b      	lsrs	r3, r1, #16
 8012d8c:	fb02 3306 	mla	r3, r2, r6, r3
 8012d90:	b289      	uxth	r1, r1
 8012d92:	3001      	adds	r0, #1
 8012d94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012d98:	4285      	cmp	r5, r0
 8012d9a:	f84c 1b04 	str.w	r1, [ip], #4
 8012d9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012da2:	dcec      	bgt.n	8012d7e <__multadd+0x12>
 8012da4:	b30e      	cbz	r6, 8012dea <__multadd+0x7e>
 8012da6:	68a3      	ldr	r3, [r4, #8]
 8012da8:	42ab      	cmp	r3, r5
 8012daa:	dc19      	bgt.n	8012de0 <__multadd+0x74>
 8012dac:	6861      	ldr	r1, [r4, #4]
 8012dae:	4638      	mov	r0, r7
 8012db0:	3101      	adds	r1, #1
 8012db2:	f7ff ff79 	bl	8012ca8 <_Balloc>
 8012db6:	4680      	mov	r8, r0
 8012db8:	b928      	cbnz	r0, 8012dc6 <__multadd+0x5a>
 8012dba:	4602      	mov	r2, r0
 8012dbc:	4b0c      	ldr	r3, [pc, #48]	; (8012df0 <__multadd+0x84>)
 8012dbe:	480d      	ldr	r0, [pc, #52]	; (8012df4 <__multadd+0x88>)
 8012dc0:	21ba      	movs	r1, #186	; 0xba
 8012dc2:	f001 fcbd 	bl	8014740 <__assert_func>
 8012dc6:	6922      	ldr	r2, [r4, #16]
 8012dc8:	3202      	adds	r2, #2
 8012dca:	f104 010c 	add.w	r1, r4, #12
 8012dce:	0092      	lsls	r2, r2, #2
 8012dd0:	300c      	adds	r0, #12
 8012dd2:	f7ff f861 	bl	8011e98 <memcpy>
 8012dd6:	4621      	mov	r1, r4
 8012dd8:	4638      	mov	r0, r7
 8012dda:	f7ff ffa5 	bl	8012d28 <_Bfree>
 8012dde:	4644      	mov	r4, r8
 8012de0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012de4:	3501      	adds	r5, #1
 8012de6:	615e      	str	r6, [r3, #20]
 8012de8:	6125      	str	r5, [r4, #16]
 8012dea:	4620      	mov	r0, r4
 8012dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012df0:	080157c9 	.word	0x080157c9
 8012df4:	080157da 	.word	0x080157da

08012df8 <__s2b>:
 8012df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012dfc:	460c      	mov	r4, r1
 8012dfe:	4615      	mov	r5, r2
 8012e00:	461f      	mov	r7, r3
 8012e02:	2209      	movs	r2, #9
 8012e04:	3308      	adds	r3, #8
 8012e06:	4606      	mov	r6, r0
 8012e08:	fb93 f3f2 	sdiv	r3, r3, r2
 8012e0c:	2100      	movs	r1, #0
 8012e0e:	2201      	movs	r2, #1
 8012e10:	429a      	cmp	r2, r3
 8012e12:	db09      	blt.n	8012e28 <__s2b+0x30>
 8012e14:	4630      	mov	r0, r6
 8012e16:	f7ff ff47 	bl	8012ca8 <_Balloc>
 8012e1a:	b940      	cbnz	r0, 8012e2e <__s2b+0x36>
 8012e1c:	4602      	mov	r2, r0
 8012e1e:	4b19      	ldr	r3, [pc, #100]	; (8012e84 <__s2b+0x8c>)
 8012e20:	4819      	ldr	r0, [pc, #100]	; (8012e88 <__s2b+0x90>)
 8012e22:	21d3      	movs	r1, #211	; 0xd3
 8012e24:	f001 fc8c 	bl	8014740 <__assert_func>
 8012e28:	0052      	lsls	r2, r2, #1
 8012e2a:	3101      	adds	r1, #1
 8012e2c:	e7f0      	b.n	8012e10 <__s2b+0x18>
 8012e2e:	9b08      	ldr	r3, [sp, #32]
 8012e30:	6143      	str	r3, [r0, #20]
 8012e32:	2d09      	cmp	r5, #9
 8012e34:	f04f 0301 	mov.w	r3, #1
 8012e38:	6103      	str	r3, [r0, #16]
 8012e3a:	dd16      	ble.n	8012e6a <__s2b+0x72>
 8012e3c:	f104 0909 	add.w	r9, r4, #9
 8012e40:	46c8      	mov	r8, r9
 8012e42:	442c      	add	r4, r5
 8012e44:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012e48:	4601      	mov	r1, r0
 8012e4a:	3b30      	subs	r3, #48	; 0x30
 8012e4c:	220a      	movs	r2, #10
 8012e4e:	4630      	mov	r0, r6
 8012e50:	f7ff ff8c 	bl	8012d6c <__multadd>
 8012e54:	45a0      	cmp	r8, r4
 8012e56:	d1f5      	bne.n	8012e44 <__s2b+0x4c>
 8012e58:	f1a5 0408 	sub.w	r4, r5, #8
 8012e5c:	444c      	add	r4, r9
 8012e5e:	1b2d      	subs	r5, r5, r4
 8012e60:	1963      	adds	r3, r4, r5
 8012e62:	42bb      	cmp	r3, r7
 8012e64:	db04      	blt.n	8012e70 <__s2b+0x78>
 8012e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e6a:	340a      	adds	r4, #10
 8012e6c:	2509      	movs	r5, #9
 8012e6e:	e7f6      	b.n	8012e5e <__s2b+0x66>
 8012e70:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012e74:	4601      	mov	r1, r0
 8012e76:	3b30      	subs	r3, #48	; 0x30
 8012e78:	220a      	movs	r2, #10
 8012e7a:	4630      	mov	r0, r6
 8012e7c:	f7ff ff76 	bl	8012d6c <__multadd>
 8012e80:	e7ee      	b.n	8012e60 <__s2b+0x68>
 8012e82:	bf00      	nop
 8012e84:	080157c9 	.word	0x080157c9
 8012e88:	080157da 	.word	0x080157da

08012e8c <__hi0bits>:
 8012e8c:	0c03      	lsrs	r3, r0, #16
 8012e8e:	041b      	lsls	r3, r3, #16
 8012e90:	b9d3      	cbnz	r3, 8012ec8 <__hi0bits+0x3c>
 8012e92:	0400      	lsls	r0, r0, #16
 8012e94:	2310      	movs	r3, #16
 8012e96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012e9a:	bf04      	itt	eq
 8012e9c:	0200      	lsleq	r0, r0, #8
 8012e9e:	3308      	addeq	r3, #8
 8012ea0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012ea4:	bf04      	itt	eq
 8012ea6:	0100      	lsleq	r0, r0, #4
 8012ea8:	3304      	addeq	r3, #4
 8012eaa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012eae:	bf04      	itt	eq
 8012eb0:	0080      	lsleq	r0, r0, #2
 8012eb2:	3302      	addeq	r3, #2
 8012eb4:	2800      	cmp	r0, #0
 8012eb6:	db05      	blt.n	8012ec4 <__hi0bits+0x38>
 8012eb8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012ebc:	f103 0301 	add.w	r3, r3, #1
 8012ec0:	bf08      	it	eq
 8012ec2:	2320      	moveq	r3, #32
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	4770      	bx	lr
 8012ec8:	2300      	movs	r3, #0
 8012eca:	e7e4      	b.n	8012e96 <__hi0bits+0xa>

08012ecc <__lo0bits>:
 8012ecc:	6803      	ldr	r3, [r0, #0]
 8012ece:	f013 0207 	ands.w	r2, r3, #7
 8012ed2:	d00c      	beq.n	8012eee <__lo0bits+0x22>
 8012ed4:	07d9      	lsls	r1, r3, #31
 8012ed6:	d422      	bmi.n	8012f1e <__lo0bits+0x52>
 8012ed8:	079a      	lsls	r2, r3, #30
 8012eda:	bf49      	itett	mi
 8012edc:	085b      	lsrmi	r3, r3, #1
 8012ede:	089b      	lsrpl	r3, r3, #2
 8012ee0:	6003      	strmi	r3, [r0, #0]
 8012ee2:	2201      	movmi	r2, #1
 8012ee4:	bf5c      	itt	pl
 8012ee6:	6003      	strpl	r3, [r0, #0]
 8012ee8:	2202      	movpl	r2, #2
 8012eea:	4610      	mov	r0, r2
 8012eec:	4770      	bx	lr
 8012eee:	b299      	uxth	r1, r3
 8012ef0:	b909      	cbnz	r1, 8012ef6 <__lo0bits+0x2a>
 8012ef2:	0c1b      	lsrs	r3, r3, #16
 8012ef4:	2210      	movs	r2, #16
 8012ef6:	b2d9      	uxtb	r1, r3
 8012ef8:	b909      	cbnz	r1, 8012efe <__lo0bits+0x32>
 8012efa:	3208      	adds	r2, #8
 8012efc:	0a1b      	lsrs	r3, r3, #8
 8012efe:	0719      	lsls	r1, r3, #28
 8012f00:	bf04      	itt	eq
 8012f02:	091b      	lsreq	r3, r3, #4
 8012f04:	3204      	addeq	r2, #4
 8012f06:	0799      	lsls	r1, r3, #30
 8012f08:	bf04      	itt	eq
 8012f0a:	089b      	lsreq	r3, r3, #2
 8012f0c:	3202      	addeq	r2, #2
 8012f0e:	07d9      	lsls	r1, r3, #31
 8012f10:	d403      	bmi.n	8012f1a <__lo0bits+0x4e>
 8012f12:	085b      	lsrs	r3, r3, #1
 8012f14:	f102 0201 	add.w	r2, r2, #1
 8012f18:	d003      	beq.n	8012f22 <__lo0bits+0x56>
 8012f1a:	6003      	str	r3, [r0, #0]
 8012f1c:	e7e5      	b.n	8012eea <__lo0bits+0x1e>
 8012f1e:	2200      	movs	r2, #0
 8012f20:	e7e3      	b.n	8012eea <__lo0bits+0x1e>
 8012f22:	2220      	movs	r2, #32
 8012f24:	e7e1      	b.n	8012eea <__lo0bits+0x1e>
	...

08012f28 <__i2b>:
 8012f28:	b510      	push	{r4, lr}
 8012f2a:	460c      	mov	r4, r1
 8012f2c:	2101      	movs	r1, #1
 8012f2e:	f7ff febb 	bl	8012ca8 <_Balloc>
 8012f32:	4602      	mov	r2, r0
 8012f34:	b928      	cbnz	r0, 8012f42 <__i2b+0x1a>
 8012f36:	4b05      	ldr	r3, [pc, #20]	; (8012f4c <__i2b+0x24>)
 8012f38:	4805      	ldr	r0, [pc, #20]	; (8012f50 <__i2b+0x28>)
 8012f3a:	f240 1145 	movw	r1, #325	; 0x145
 8012f3e:	f001 fbff 	bl	8014740 <__assert_func>
 8012f42:	2301      	movs	r3, #1
 8012f44:	6144      	str	r4, [r0, #20]
 8012f46:	6103      	str	r3, [r0, #16]
 8012f48:	bd10      	pop	{r4, pc}
 8012f4a:	bf00      	nop
 8012f4c:	080157c9 	.word	0x080157c9
 8012f50:	080157da 	.word	0x080157da

08012f54 <__multiply>:
 8012f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f58:	4691      	mov	r9, r2
 8012f5a:	690a      	ldr	r2, [r1, #16]
 8012f5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012f60:	429a      	cmp	r2, r3
 8012f62:	bfb8      	it	lt
 8012f64:	460b      	movlt	r3, r1
 8012f66:	460c      	mov	r4, r1
 8012f68:	bfbc      	itt	lt
 8012f6a:	464c      	movlt	r4, r9
 8012f6c:	4699      	movlt	r9, r3
 8012f6e:	6927      	ldr	r7, [r4, #16]
 8012f70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012f74:	68a3      	ldr	r3, [r4, #8]
 8012f76:	6861      	ldr	r1, [r4, #4]
 8012f78:	eb07 060a 	add.w	r6, r7, sl
 8012f7c:	42b3      	cmp	r3, r6
 8012f7e:	b085      	sub	sp, #20
 8012f80:	bfb8      	it	lt
 8012f82:	3101      	addlt	r1, #1
 8012f84:	f7ff fe90 	bl	8012ca8 <_Balloc>
 8012f88:	b930      	cbnz	r0, 8012f98 <__multiply+0x44>
 8012f8a:	4602      	mov	r2, r0
 8012f8c:	4b44      	ldr	r3, [pc, #272]	; (80130a0 <__multiply+0x14c>)
 8012f8e:	4845      	ldr	r0, [pc, #276]	; (80130a4 <__multiply+0x150>)
 8012f90:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8012f94:	f001 fbd4 	bl	8014740 <__assert_func>
 8012f98:	f100 0514 	add.w	r5, r0, #20
 8012f9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012fa0:	462b      	mov	r3, r5
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	4543      	cmp	r3, r8
 8012fa6:	d321      	bcc.n	8012fec <__multiply+0x98>
 8012fa8:	f104 0314 	add.w	r3, r4, #20
 8012fac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012fb0:	f109 0314 	add.w	r3, r9, #20
 8012fb4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012fb8:	9202      	str	r2, [sp, #8]
 8012fba:	1b3a      	subs	r2, r7, r4
 8012fbc:	3a15      	subs	r2, #21
 8012fbe:	f022 0203 	bic.w	r2, r2, #3
 8012fc2:	3204      	adds	r2, #4
 8012fc4:	f104 0115 	add.w	r1, r4, #21
 8012fc8:	428f      	cmp	r7, r1
 8012fca:	bf38      	it	cc
 8012fcc:	2204      	movcc	r2, #4
 8012fce:	9201      	str	r2, [sp, #4]
 8012fd0:	9a02      	ldr	r2, [sp, #8]
 8012fd2:	9303      	str	r3, [sp, #12]
 8012fd4:	429a      	cmp	r2, r3
 8012fd6:	d80c      	bhi.n	8012ff2 <__multiply+0x9e>
 8012fd8:	2e00      	cmp	r6, #0
 8012fda:	dd03      	ble.n	8012fe4 <__multiply+0x90>
 8012fdc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d05b      	beq.n	801309c <__multiply+0x148>
 8012fe4:	6106      	str	r6, [r0, #16]
 8012fe6:	b005      	add	sp, #20
 8012fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fec:	f843 2b04 	str.w	r2, [r3], #4
 8012ff0:	e7d8      	b.n	8012fa4 <__multiply+0x50>
 8012ff2:	f8b3 a000 	ldrh.w	sl, [r3]
 8012ff6:	f1ba 0f00 	cmp.w	sl, #0
 8012ffa:	d024      	beq.n	8013046 <__multiply+0xf2>
 8012ffc:	f104 0e14 	add.w	lr, r4, #20
 8013000:	46a9      	mov	r9, r5
 8013002:	f04f 0c00 	mov.w	ip, #0
 8013006:	f85e 2b04 	ldr.w	r2, [lr], #4
 801300a:	f8d9 1000 	ldr.w	r1, [r9]
 801300e:	fa1f fb82 	uxth.w	fp, r2
 8013012:	b289      	uxth	r1, r1
 8013014:	fb0a 110b 	mla	r1, sl, fp, r1
 8013018:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801301c:	f8d9 2000 	ldr.w	r2, [r9]
 8013020:	4461      	add	r1, ip
 8013022:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013026:	fb0a c20b 	mla	r2, sl, fp, ip
 801302a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801302e:	b289      	uxth	r1, r1
 8013030:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013034:	4577      	cmp	r7, lr
 8013036:	f849 1b04 	str.w	r1, [r9], #4
 801303a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801303e:	d8e2      	bhi.n	8013006 <__multiply+0xb2>
 8013040:	9a01      	ldr	r2, [sp, #4]
 8013042:	f845 c002 	str.w	ip, [r5, r2]
 8013046:	9a03      	ldr	r2, [sp, #12]
 8013048:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801304c:	3304      	adds	r3, #4
 801304e:	f1b9 0f00 	cmp.w	r9, #0
 8013052:	d021      	beq.n	8013098 <__multiply+0x144>
 8013054:	6829      	ldr	r1, [r5, #0]
 8013056:	f104 0c14 	add.w	ip, r4, #20
 801305a:	46ae      	mov	lr, r5
 801305c:	f04f 0a00 	mov.w	sl, #0
 8013060:	f8bc b000 	ldrh.w	fp, [ip]
 8013064:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013068:	fb09 220b 	mla	r2, r9, fp, r2
 801306c:	4452      	add	r2, sl
 801306e:	b289      	uxth	r1, r1
 8013070:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013074:	f84e 1b04 	str.w	r1, [lr], #4
 8013078:	f85c 1b04 	ldr.w	r1, [ip], #4
 801307c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013080:	f8be 1000 	ldrh.w	r1, [lr]
 8013084:	fb09 110a 	mla	r1, r9, sl, r1
 8013088:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801308c:	4567      	cmp	r7, ip
 801308e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013092:	d8e5      	bhi.n	8013060 <__multiply+0x10c>
 8013094:	9a01      	ldr	r2, [sp, #4]
 8013096:	50a9      	str	r1, [r5, r2]
 8013098:	3504      	adds	r5, #4
 801309a:	e799      	b.n	8012fd0 <__multiply+0x7c>
 801309c:	3e01      	subs	r6, #1
 801309e:	e79b      	b.n	8012fd8 <__multiply+0x84>
 80130a0:	080157c9 	.word	0x080157c9
 80130a4:	080157da 	.word	0x080157da

080130a8 <__pow5mult>:
 80130a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130ac:	4615      	mov	r5, r2
 80130ae:	f012 0203 	ands.w	r2, r2, #3
 80130b2:	4606      	mov	r6, r0
 80130b4:	460f      	mov	r7, r1
 80130b6:	d007      	beq.n	80130c8 <__pow5mult+0x20>
 80130b8:	4c25      	ldr	r4, [pc, #148]	; (8013150 <__pow5mult+0xa8>)
 80130ba:	3a01      	subs	r2, #1
 80130bc:	2300      	movs	r3, #0
 80130be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80130c2:	f7ff fe53 	bl	8012d6c <__multadd>
 80130c6:	4607      	mov	r7, r0
 80130c8:	10ad      	asrs	r5, r5, #2
 80130ca:	d03d      	beq.n	8013148 <__pow5mult+0xa0>
 80130cc:	69f4      	ldr	r4, [r6, #28]
 80130ce:	b97c      	cbnz	r4, 80130f0 <__pow5mult+0x48>
 80130d0:	2010      	movs	r0, #16
 80130d2:	f7ff fd35 	bl	8012b40 <malloc>
 80130d6:	4602      	mov	r2, r0
 80130d8:	61f0      	str	r0, [r6, #28]
 80130da:	b928      	cbnz	r0, 80130e8 <__pow5mult+0x40>
 80130dc:	4b1d      	ldr	r3, [pc, #116]	; (8013154 <__pow5mult+0xac>)
 80130de:	481e      	ldr	r0, [pc, #120]	; (8013158 <__pow5mult+0xb0>)
 80130e0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80130e4:	f001 fb2c 	bl	8014740 <__assert_func>
 80130e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80130ec:	6004      	str	r4, [r0, #0]
 80130ee:	60c4      	str	r4, [r0, #12]
 80130f0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80130f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80130f8:	b94c      	cbnz	r4, 801310e <__pow5mult+0x66>
 80130fa:	f240 2171 	movw	r1, #625	; 0x271
 80130fe:	4630      	mov	r0, r6
 8013100:	f7ff ff12 	bl	8012f28 <__i2b>
 8013104:	2300      	movs	r3, #0
 8013106:	f8c8 0008 	str.w	r0, [r8, #8]
 801310a:	4604      	mov	r4, r0
 801310c:	6003      	str	r3, [r0, #0]
 801310e:	f04f 0900 	mov.w	r9, #0
 8013112:	07eb      	lsls	r3, r5, #31
 8013114:	d50a      	bpl.n	801312c <__pow5mult+0x84>
 8013116:	4639      	mov	r1, r7
 8013118:	4622      	mov	r2, r4
 801311a:	4630      	mov	r0, r6
 801311c:	f7ff ff1a 	bl	8012f54 <__multiply>
 8013120:	4639      	mov	r1, r7
 8013122:	4680      	mov	r8, r0
 8013124:	4630      	mov	r0, r6
 8013126:	f7ff fdff 	bl	8012d28 <_Bfree>
 801312a:	4647      	mov	r7, r8
 801312c:	106d      	asrs	r5, r5, #1
 801312e:	d00b      	beq.n	8013148 <__pow5mult+0xa0>
 8013130:	6820      	ldr	r0, [r4, #0]
 8013132:	b938      	cbnz	r0, 8013144 <__pow5mult+0x9c>
 8013134:	4622      	mov	r2, r4
 8013136:	4621      	mov	r1, r4
 8013138:	4630      	mov	r0, r6
 801313a:	f7ff ff0b 	bl	8012f54 <__multiply>
 801313e:	6020      	str	r0, [r4, #0]
 8013140:	f8c0 9000 	str.w	r9, [r0]
 8013144:	4604      	mov	r4, r0
 8013146:	e7e4      	b.n	8013112 <__pow5mult+0x6a>
 8013148:	4638      	mov	r0, r7
 801314a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801314e:	bf00      	nop
 8013150:	08015928 	.word	0x08015928
 8013154:	0801575a 	.word	0x0801575a
 8013158:	080157da 	.word	0x080157da

0801315c <__lshift>:
 801315c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013160:	460c      	mov	r4, r1
 8013162:	6849      	ldr	r1, [r1, #4]
 8013164:	6923      	ldr	r3, [r4, #16]
 8013166:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801316a:	68a3      	ldr	r3, [r4, #8]
 801316c:	4607      	mov	r7, r0
 801316e:	4691      	mov	r9, r2
 8013170:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013174:	f108 0601 	add.w	r6, r8, #1
 8013178:	42b3      	cmp	r3, r6
 801317a:	db0b      	blt.n	8013194 <__lshift+0x38>
 801317c:	4638      	mov	r0, r7
 801317e:	f7ff fd93 	bl	8012ca8 <_Balloc>
 8013182:	4605      	mov	r5, r0
 8013184:	b948      	cbnz	r0, 801319a <__lshift+0x3e>
 8013186:	4602      	mov	r2, r0
 8013188:	4b28      	ldr	r3, [pc, #160]	; (801322c <__lshift+0xd0>)
 801318a:	4829      	ldr	r0, [pc, #164]	; (8013230 <__lshift+0xd4>)
 801318c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8013190:	f001 fad6 	bl	8014740 <__assert_func>
 8013194:	3101      	adds	r1, #1
 8013196:	005b      	lsls	r3, r3, #1
 8013198:	e7ee      	b.n	8013178 <__lshift+0x1c>
 801319a:	2300      	movs	r3, #0
 801319c:	f100 0114 	add.w	r1, r0, #20
 80131a0:	f100 0210 	add.w	r2, r0, #16
 80131a4:	4618      	mov	r0, r3
 80131a6:	4553      	cmp	r3, sl
 80131a8:	db33      	blt.n	8013212 <__lshift+0xb6>
 80131aa:	6920      	ldr	r0, [r4, #16]
 80131ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80131b0:	f104 0314 	add.w	r3, r4, #20
 80131b4:	f019 091f 	ands.w	r9, r9, #31
 80131b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80131bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80131c0:	d02b      	beq.n	801321a <__lshift+0xbe>
 80131c2:	f1c9 0e20 	rsb	lr, r9, #32
 80131c6:	468a      	mov	sl, r1
 80131c8:	2200      	movs	r2, #0
 80131ca:	6818      	ldr	r0, [r3, #0]
 80131cc:	fa00 f009 	lsl.w	r0, r0, r9
 80131d0:	4310      	orrs	r0, r2
 80131d2:	f84a 0b04 	str.w	r0, [sl], #4
 80131d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80131da:	459c      	cmp	ip, r3
 80131dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80131e0:	d8f3      	bhi.n	80131ca <__lshift+0x6e>
 80131e2:	ebac 0304 	sub.w	r3, ip, r4
 80131e6:	3b15      	subs	r3, #21
 80131e8:	f023 0303 	bic.w	r3, r3, #3
 80131ec:	3304      	adds	r3, #4
 80131ee:	f104 0015 	add.w	r0, r4, #21
 80131f2:	4584      	cmp	ip, r0
 80131f4:	bf38      	it	cc
 80131f6:	2304      	movcc	r3, #4
 80131f8:	50ca      	str	r2, [r1, r3]
 80131fa:	b10a      	cbz	r2, 8013200 <__lshift+0xa4>
 80131fc:	f108 0602 	add.w	r6, r8, #2
 8013200:	3e01      	subs	r6, #1
 8013202:	4638      	mov	r0, r7
 8013204:	612e      	str	r6, [r5, #16]
 8013206:	4621      	mov	r1, r4
 8013208:	f7ff fd8e 	bl	8012d28 <_Bfree>
 801320c:	4628      	mov	r0, r5
 801320e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013212:	f842 0f04 	str.w	r0, [r2, #4]!
 8013216:	3301      	adds	r3, #1
 8013218:	e7c5      	b.n	80131a6 <__lshift+0x4a>
 801321a:	3904      	subs	r1, #4
 801321c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013220:	f841 2f04 	str.w	r2, [r1, #4]!
 8013224:	459c      	cmp	ip, r3
 8013226:	d8f9      	bhi.n	801321c <__lshift+0xc0>
 8013228:	e7ea      	b.n	8013200 <__lshift+0xa4>
 801322a:	bf00      	nop
 801322c:	080157c9 	.word	0x080157c9
 8013230:	080157da 	.word	0x080157da

08013234 <__mcmp>:
 8013234:	b530      	push	{r4, r5, lr}
 8013236:	6902      	ldr	r2, [r0, #16]
 8013238:	690c      	ldr	r4, [r1, #16]
 801323a:	1b12      	subs	r2, r2, r4
 801323c:	d10e      	bne.n	801325c <__mcmp+0x28>
 801323e:	f100 0314 	add.w	r3, r0, #20
 8013242:	3114      	adds	r1, #20
 8013244:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013248:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801324c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013250:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013254:	42a5      	cmp	r5, r4
 8013256:	d003      	beq.n	8013260 <__mcmp+0x2c>
 8013258:	d305      	bcc.n	8013266 <__mcmp+0x32>
 801325a:	2201      	movs	r2, #1
 801325c:	4610      	mov	r0, r2
 801325e:	bd30      	pop	{r4, r5, pc}
 8013260:	4283      	cmp	r3, r0
 8013262:	d3f3      	bcc.n	801324c <__mcmp+0x18>
 8013264:	e7fa      	b.n	801325c <__mcmp+0x28>
 8013266:	f04f 32ff 	mov.w	r2, #4294967295
 801326a:	e7f7      	b.n	801325c <__mcmp+0x28>

0801326c <__mdiff>:
 801326c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013270:	460c      	mov	r4, r1
 8013272:	4606      	mov	r6, r0
 8013274:	4611      	mov	r1, r2
 8013276:	4620      	mov	r0, r4
 8013278:	4690      	mov	r8, r2
 801327a:	f7ff ffdb 	bl	8013234 <__mcmp>
 801327e:	1e05      	subs	r5, r0, #0
 8013280:	d110      	bne.n	80132a4 <__mdiff+0x38>
 8013282:	4629      	mov	r1, r5
 8013284:	4630      	mov	r0, r6
 8013286:	f7ff fd0f 	bl	8012ca8 <_Balloc>
 801328a:	b930      	cbnz	r0, 801329a <__mdiff+0x2e>
 801328c:	4b3a      	ldr	r3, [pc, #232]	; (8013378 <__mdiff+0x10c>)
 801328e:	4602      	mov	r2, r0
 8013290:	f240 2137 	movw	r1, #567	; 0x237
 8013294:	4839      	ldr	r0, [pc, #228]	; (801337c <__mdiff+0x110>)
 8013296:	f001 fa53 	bl	8014740 <__assert_func>
 801329a:	2301      	movs	r3, #1
 801329c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80132a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132a4:	bfa4      	itt	ge
 80132a6:	4643      	movge	r3, r8
 80132a8:	46a0      	movge	r8, r4
 80132aa:	4630      	mov	r0, r6
 80132ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80132b0:	bfa6      	itte	ge
 80132b2:	461c      	movge	r4, r3
 80132b4:	2500      	movge	r5, #0
 80132b6:	2501      	movlt	r5, #1
 80132b8:	f7ff fcf6 	bl	8012ca8 <_Balloc>
 80132bc:	b920      	cbnz	r0, 80132c8 <__mdiff+0x5c>
 80132be:	4b2e      	ldr	r3, [pc, #184]	; (8013378 <__mdiff+0x10c>)
 80132c0:	4602      	mov	r2, r0
 80132c2:	f240 2145 	movw	r1, #581	; 0x245
 80132c6:	e7e5      	b.n	8013294 <__mdiff+0x28>
 80132c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80132cc:	6926      	ldr	r6, [r4, #16]
 80132ce:	60c5      	str	r5, [r0, #12]
 80132d0:	f104 0914 	add.w	r9, r4, #20
 80132d4:	f108 0514 	add.w	r5, r8, #20
 80132d8:	f100 0e14 	add.w	lr, r0, #20
 80132dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80132e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80132e4:	f108 0210 	add.w	r2, r8, #16
 80132e8:	46f2      	mov	sl, lr
 80132ea:	2100      	movs	r1, #0
 80132ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80132f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80132f4:	fa11 f88b 	uxtah	r8, r1, fp
 80132f8:	b299      	uxth	r1, r3
 80132fa:	0c1b      	lsrs	r3, r3, #16
 80132fc:	eba8 0801 	sub.w	r8, r8, r1
 8013300:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013304:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013308:	fa1f f888 	uxth.w	r8, r8
 801330c:	1419      	asrs	r1, r3, #16
 801330e:	454e      	cmp	r6, r9
 8013310:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013314:	f84a 3b04 	str.w	r3, [sl], #4
 8013318:	d8e8      	bhi.n	80132ec <__mdiff+0x80>
 801331a:	1b33      	subs	r3, r6, r4
 801331c:	3b15      	subs	r3, #21
 801331e:	f023 0303 	bic.w	r3, r3, #3
 8013322:	3304      	adds	r3, #4
 8013324:	3415      	adds	r4, #21
 8013326:	42a6      	cmp	r6, r4
 8013328:	bf38      	it	cc
 801332a:	2304      	movcc	r3, #4
 801332c:	441d      	add	r5, r3
 801332e:	4473      	add	r3, lr
 8013330:	469e      	mov	lr, r3
 8013332:	462e      	mov	r6, r5
 8013334:	4566      	cmp	r6, ip
 8013336:	d30e      	bcc.n	8013356 <__mdiff+0xea>
 8013338:	f10c 0203 	add.w	r2, ip, #3
 801333c:	1b52      	subs	r2, r2, r5
 801333e:	f022 0203 	bic.w	r2, r2, #3
 8013342:	3d03      	subs	r5, #3
 8013344:	45ac      	cmp	ip, r5
 8013346:	bf38      	it	cc
 8013348:	2200      	movcc	r2, #0
 801334a:	4413      	add	r3, r2
 801334c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013350:	b17a      	cbz	r2, 8013372 <__mdiff+0x106>
 8013352:	6107      	str	r7, [r0, #16]
 8013354:	e7a4      	b.n	80132a0 <__mdiff+0x34>
 8013356:	f856 8b04 	ldr.w	r8, [r6], #4
 801335a:	fa11 f288 	uxtah	r2, r1, r8
 801335e:	1414      	asrs	r4, r2, #16
 8013360:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013364:	b292      	uxth	r2, r2
 8013366:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801336a:	f84e 2b04 	str.w	r2, [lr], #4
 801336e:	1421      	asrs	r1, r4, #16
 8013370:	e7e0      	b.n	8013334 <__mdiff+0xc8>
 8013372:	3f01      	subs	r7, #1
 8013374:	e7ea      	b.n	801334c <__mdiff+0xe0>
 8013376:	bf00      	nop
 8013378:	080157c9 	.word	0x080157c9
 801337c:	080157da 	.word	0x080157da

08013380 <__ulp>:
 8013380:	b082      	sub	sp, #8
 8013382:	ed8d 0b00 	vstr	d0, [sp]
 8013386:	9a01      	ldr	r2, [sp, #4]
 8013388:	4b0f      	ldr	r3, [pc, #60]	; (80133c8 <__ulp+0x48>)
 801338a:	4013      	ands	r3, r2
 801338c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8013390:	2b00      	cmp	r3, #0
 8013392:	dc08      	bgt.n	80133a6 <__ulp+0x26>
 8013394:	425b      	negs	r3, r3
 8013396:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801339a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801339e:	da04      	bge.n	80133aa <__ulp+0x2a>
 80133a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80133a4:	4113      	asrs	r3, r2
 80133a6:	2200      	movs	r2, #0
 80133a8:	e008      	b.n	80133bc <__ulp+0x3c>
 80133aa:	f1a2 0314 	sub.w	r3, r2, #20
 80133ae:	2b1e      	cmp	r3, #30
 80133b0:	bfda      	itte	le
 80133b2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80133b6:	40da      	lsrle	r2, r3
 80133b8:	2201      	movgt	r2, #1
 80133ba:	2300      	movs	r3, #0
 80133bc:	4619      	mov	r1, r3
 80133be:	4610      	mov	r0, r2
 80133c0:	ec41 0b10 	vmov	d0, r0, r1
 80133c4:	b002      	add	sp, #8
 80133c6:	4770      	bx	lr
 80133c8:	7ff00000 	.word	0x7ff00000

080133cc <__b2d>:
 80133cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133d0:	6906      	ldr	r6, [r0, #16]
 80133d2:	f100 0814 	add.w	r8, r0, #20
 80133d6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80133da:	1f37      	subs	r7, r6, #4
 80133dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80133e0:	4610      	mov	r0, r2
 80133e2:	f7ff fd53 	bl	8012e8c <__hi0bits>
 80133e6:	f1c0 0320 	rsb	r3, r0, #32
 80133ea:	280a      	cmp	r0, #10
 80133ec:	600b      	str	r3, [r1, #0]
 80133ee:	491b      	ldr	r1, [pc, #108]	; (801345c <__b2d+0x90>)
 80133f0:	dc15      	bgt.n	801341e <__b2d+0x52>
 80133f2:	f1c0 0c0b 	rsb	ip, r0, #11
 80133f6:	fa22 f30c 	lsr.w	r3, r2, ip
 80133fa:	45b8      	cmp	r8, r7
 80133fc:	ea43 0501 	orr.w	r5, r3, r1
 8013400:	bf34      	ite	cc
 8013402:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013406:	2300      	movcs	r3, #0
 8013408:	3015      	adds	r0, #21
 801340a:	fa02 f000 	lsl.w	r0, r2, r0
 801340e:	fa23 f30c 	lsr.w	r3, r3, ip
 8013412:	4303      	orrs	r3, r0
 8013414:	461c      	mov	r4, r3
 8013416:	ec45 4b10 	vmov	d0, r4, r5
 801341a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801341e:	45b8      	cmp	r8, r7
 8013420:	bf3a      	itte	cc
 8013422:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013426:	f1a6 0708 	subcc.w	r7, r6, #8
 801342a:	2300      	movcs	r3, #0
 801342c:	380b      	subs	r0, #11
 801342e:	d012      	beq.n	8013456 <__b2d+0x8a>
 8013430:	f1c0 0120 	rsb	r1, r0, #32
 8013434:	fa23 f401 	lsr.w	r4, r3, r1
 8013438:	4082      	lsls	r2, r0
 801343a:	4322      	orrs	r2, r4
 801343c:	4547      	cmp	r7, r8
 801343e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8013442:	bf8c      	ite	hi
 8013444:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8013448:	2200      	movls	r2, #0
 801344a:	4083      	lsls	r3, r0
 801344c:	40ca      	lsrs	r2, r1
 801344e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013452:	4313      	orrs	r3, r2
 8013454:	e7de      	b.n	8013414 <__b2d+0x48>
 8013456:	ea42 0501 	orr.w	r5, r2, r1
 801345a:	e7db      	b.n	8013414 <__b2d+0x48>
 801345c:	3ff00000 	.word	0x3ff00000

08013460 <__d2b>:
 8013460:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013464:	460f      	mov	r7, r1
 8013466:	2101      	movs	r1, #1
 8013468:	ec59 8b10 	vmov	r8, r9, d0
 801346c:	4616      	mov	r6, r2
 801346e:	f7ff fc1b 	bl	8012ca8 <_Balloc>
 8013472:	4604      	mov	r4, r0
 8013474:	b930      	cbnz	r0, 8013484 <__d2b+0x24>
 8013476:	4602      	mov	r2, r0
 8013478:	4b24      	ldr	r3, [pc, #144]	; (801350c <__d2b+0xac>)
 801347a:	4825      	ldr	r0, [pc, #148]	; (8013510 <__d2b+0xb0>)
 801347c:	f240 310f 	movw	r1, #783	; 0x30f
 8013480:	f001 f95e 	bl	8014740 <__assert_func>
 8013484:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013488:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801348c:	bb2d      	cbnz	r5, 80134da <__d2b+0x7a>
 801348e:	9301      	str	r3, [sp, #4]
 8013490:	f1b8 0300 	subs.w	r3, r8, #0
 8013494:	d026      	beq.n	80134e4 <__d2b+0x84>
 8013496:	4668      	mov	r0, sp
 8013498:	9300      	str	r3, [sp, #0]
 801349a:	f7ff fd17 	bl	8012ecc <__lo0bits>
 801349e:	e9dd 1200 	ldrd	r1, r2, [sp]
 80134a2:	b1e8      	cbz	r0, 80134e0 <__d2b+0x80>
 80134a4:	f1c0 0320 	rsb	r3, r0, #32
 80134a8:	fa02 f303 	lsl.w	r3, r2, r3
 80134ac:	430b      	orrs	r3, r1
 80134ae:	40c2      	lsrs	r2, r0
 80134b0:	6163      	str	r3, [r4, #20]
 80134b2:	9201      	str	r2, [sp, #4]
 80134b4:	9b01      	ldr	r3, [sp, #4]
 80134b6:	61a3      	str	r3, [r4, #24]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	bf14      	ite	ne
 80134bc:	2202      	movne	r2, #2
 80134be:	2201      	moveq	r2, #1
 80134c0:	6122      	str	r2, [r4, #16]
 80134c2:	b1bd      	cbz	r5, 80134f4 <__d2b+0x94>
 80134c4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80134c8:	4405      	add	r5, r0
 80134ca:	603d      	str	r5, [r7, #0]
 80134cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80134d0:	6030      	str	r0, [r6, #0]
 80134d2:	4620      	mov	r0, r4
 80134d4:	b003      	add	sp, #12
 80134d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80134da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80134de:	e7d6      	b.n	801348e <__d2b+0x2e>
 80134e0:	6161      	str	r1, [r4, #20]
 80134e2:	e7e7      	b.n	80134b4 <__d2b+0x54>
 80134e4:	a801      	add	r0, sp, #4
 80134e6:	f7ff fcf1 	bl	8012ecc <__lo0bits>
 80134ea:	9b01      	ldr	r3, [sp, #4]
 80134ec:	6163      	str	r3, [r4, #20]
 80134ee:	3020      	adds	r0, #32
 80134f0:	2201      	movs	r2, #1
 80134f2:	e7e5      	b.n	80134c0 <__d2b+0x60>
 80134f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80134f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80134fc:	6038      	str	r0, [r7, #0]
 80134fe:	6918      	ldr	r0, [r3, #16]
 8013500:	f7ff fcc4 	bl	8012e8c <__hi0bits>
 8013504:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013508:	e7e2      	b.n	80134d0 <__d2b+0x70>
 801350a:	bf00      	nop
 801350c:	080157c9 	.word	0x080157c9
 8013510:	080157da 	.word	0x080157da

08013514 <__ratio>:
 8013514:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013518:	4688      	mov	r8, r1
 801351a:	4669      	mov	r1, sp
 801351c:	4681      	mov	r9, r0
 801351e:	f7ff ff55 	bl	80133cc <__b2d>
 8013522:	a901      	add	r1, sp, #4
 8013524:	4640      	mov	r0, r8
 8013526:	ec55 4b10 	vmov	r4, r5, d0
 801352a:	ee10 aa10 	vmov	sl, s0
 801352e:	f7ff ff4d 	bl	80133cc <__b2d>
 8013532:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013536:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801353a:	1ad2      	subs	r2, r2, r3
 801353c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8013540:	1a5b      	subs	r3, r3, r1
 8013542:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8013546:	ec57 6b10 	vmov	r6, r7, d0
 801354a:	2b00      	cmp	r3, #0
 801354c:	bfd6      	itet	le
 801354e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013552:	462a      	movgt	r2, r5
 8013554:	463a      	movle	r2, r7
 8013556:	46ab      	mov	fp, r5
 8013558:	bfd6      	itet	le
 801355a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801355e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8013562:	ee00 3a90 	vmovle	s1, r3
 8013566:	ec4b ab17 	vmov	d7, sl, fp
 801356a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801356e:	b003      	add	sp, #12
 8013570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013574 <__copybits>:
 8013574:	3901      	subs	r1, #1
 8013576:	b570      	push	{r4, r5, r6, lr}
 8013578:	1149      	asrs	r1, r1, #5
 801357a:	6914      	ldr	r4, [r2, #16]
 801357c:	3101      	adds	r1, #1
 801357e:	f102 0314 	add.w	r3, r2, #20
 8013582:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013586:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801358a:	1f05      	subs	r5, r0, #4
 801358c:	42a3      	cmp	r3, r4
 801358e:	d30c      	bcc.n	80135aa <__copybits+0x36>
 8013590:	1aa3      	subs	r3, r4, r2
 8013592:	3b11      	subs	r3, #17
 8013594:	f023 0303 	bic.w	r3, r3, #3
 8013598:	3211      	adds	r2, #17
 801359a:	42a2      	cmp	r2, r4
 801359c:	bf88      	it	hi
 801359e:	2300      	movhi	r3, #0
 80135a0:	4418      	add	r0, r3
 80135a2:	2300      	movs	r3, #0
 80135a4:	4288      	cmp	r0, r1
 80135a6:	d305      	bcc.n	80135b4 <__copybits+0x40>
 80135a8:	bd70      	pop	{r4, r5, r6, pc}
 80135aa:	f853 6b04 	ldr.w	r6, [r3], #4
 80135ae:	f845 6f04 	str.w	r6, [r5, #4]!
 80135b2:	e7eb      	b.n	801358c <__copybits+0x18>
 80135b4:	f840 3b04 	str.w	r3, [r0], #4
 80135b8:	e7f4      	b.n	80135a4 <__copybits+0x30>

080135ba <__any_on>:
 80135ba:	f100 0214 	add.w	r2, r0, #20
 80135be:	6900      	ldr	r0, [r0, #16]
 80135c0:	114b      	asrs	r3, r1, #5
 80135c2:	4298      	cmp	r0, r3
 80135c4:	b510      	push	{r4, lr}
 80135c6:	db11      	blt.n	80135ec <__any_on+0x32>
 80135c8:	dd0a      	ble.n	80135e0 <__any_on+0x26>
 80135ca:	f011 011f 	ands.w	r1, r1, #31
 80135ce:	d007      	beq.n	80135e0 <__any_on+0x26>
 80135d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80135d4:	fa24 f001 	lsr.w	r0, r4, r1
 80135d8:	fa00 f101 	lsl.w	r1, r0, r1
 80135dc:	428c      	cmp	r4, r1
 80135de:	d10b      	bne.n	80135f8 <__any_on+0x3e>
 80135e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80135e4:	4293      	cmp	r3, r2
 80135e6:	d803      	bhi.n	80135f0 <__any_on+0x36>
 80135e8:	2000      	movs	r0, #0
 80135ea:	bd10      	pop	{r4, pc}
 80135ec:	4603      	mov	r3, r0
 80135ee:	e7f7      	b.n	80135e0 <__any_on+0x26>
 80135f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80135f4:	2900      	cmp	r1, #0
 80135f6:	d0f5      	beq.n	80135e4 <__any_on+0x2a>
 80135f8:	2001      	movs	r0, #1
 80135fa:	e7f6      	b.n	80135ea <__any_on+0x30>

080135fc <sulp>:
 80135fc:	b570      	push	{r4, r5, r6, lr}
 80135fe:	4604      	mov	r4, r0
 8013600:	460d      	mov	r5, r1
 8013602:	4616      	mov	r6, r2
 8013604:	ec45 4b10 	vmov	d0, r4, r5
 8013608:	f7ff feba 	bl	8013380 <__ulp>
 801360c:	b17e      	cbz	r6, 801362e <sulp+0x32>
 801360e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013612:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013616:	2b00      	cmp	r3, #0
 8013618:	dd09      	ble.n	801362e <sulp+0x32>
 801361a:	051b      	lsls	r3, r3, #20
 801361c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8013620:	2000      	movs	r0, #0
 8013622:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8013626:	ec41 0b17 	vmov	d7, r0, r1
 801362a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801362e:	bd70      	pop	{r4, r5, r6, pc}

08013630 <_strtod_l>:
 8013630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013634:	ed2d 8b0e 	vpush	{d8-d14}
 8013638:	b097      	sub	sp, #92	; 0x5c
 801363a:	4604      	mov	r4, r0
 801363c:	920d      	str	r2, [sp, #52]	; 0x34
 801363e:	2200      	movs	r2, #0
 8013640:	9212      	str	r2, [sp, #72]	; 0x48
 8013642:	468a      	mov	sl, r1
 8013644:	f04f 0800 	mov.w	r8, #0
 8013648:	f04f 0900 	mov.w	r9, #0
 801364c:	460a      	mov	r2, r1
 801364e:	9211      	str	r2, [sp, #68]	; 0x44
 8013650:	7811      	ldrb	r1, [r2, #0]
 8013652:	292b      	cmp	r1, #43	; 0x2b
 8013654:	d04c      	beq.n	80136f0 <_strtod_l+0xc0>
 8013656:	d839      	bhi.n	80136cc <_strtod_l+0x9c>
 8013658:	290d      	cmp	r1, #13
 801365a:	d833      	bhi.n	80136c4 <_strtod_l+0x94>
 801365c:	2908      	cmp	r1, #8
 801365e:	d833      	bhi.n	80136c8 <_strtod_l+0x98>
 8013660:	2900      	cmp	r1, #0
 8013662:	d03c      	beq.n	80136de <_strtod_l+0xae>
 8013664:	2200      	movs	r2, #0
 8013666:	9208      	str	r2, [sp, #32]
 8013668:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801366a:	7832      	ldrb	r2, [r6, #0]
 801366c:	2a30      	cmp	r2, #48	; 0x30
 801366e:	f040 80b8 	bne.w	80137e2 <_strtod_l+0x1b2>
 8013672:	7872      	ldrb	r2, [r6, #1]
 8013674:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8013678:	2a58      	cmp	r2, #88	; 0x58
 801367a:	d170      	bne.n	801375e <_strtod_l+0x12e>
 801367c:	9302      	str	r3, [sp, #8]
 801367e:	9b08      	ldr	r3, [sp, #32]
 8013680:	9301      	str	r3, [sp, #4]
 8013682:	ab12      	add	r3, sp, #72	; 0x48
 8013684:	9300      	str	r3, [sp, #0]
 8013686:	4a91      	ldr	r2, [pc, #580]	; (80138cc <_strtod_l+0x29c>)
 8013688:	ab13      	add	r3, sp, #76	; 0x4c
 801368a:	a911      	add	r1, sp, #68	; 0x44
 801368c:	4620      	mov	r0, r4
 801368e:	f001 f8f3 	bl	8014878 <__gethex>
 8013692:	f010 070f 	ands.w	r7, r0, #15
 8013696:	4605      	mov	r5, r0
 8013698:	d005      	beq.n	80136a6 <_strtod_l+0x76>
 801369a:	2f06      	cmp	r7, #6
 801369c:	d12a      	bne.n	80136f4 <_strtod_l+0xc4>
 801369e:	3601      	adds	r6, #1
 80136a0:	2300      	movs	r3, #0
 80136a2:	9611      	str	r6, [sp, #68]	; 0x44
 80136a4:	9308      	str	r3, [sp, #32]
 80136a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	f040 8555 	bne.w	8014158 <_strtod_l+0xb28>
 80136ae:	9b08      	ldr	r3, [sp, #32]
 80136b0:	ec49 8b10 	vmov	d0, r8, r9
 80136b4:	b1cb      	cbz	r3, 80136ea <_strtod_l+0xba>
 80136b6:	eeb1 0b40 	vneg.f64	d0, d0
 80136ba:	b017      	add	sp, #92	; 0x5c
 80136bc:	ecbd 8b0e 	vpop	{d8-d14}
 80136c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136c4:	2920      	cmp	r1, #32
 80136c6:	d1cd      	bne.n	8013664 <_strtod_l+0x34>
 80136c8:	3201      	adds	r2, #1
 80136ca:	e7c0      	b.n	801364e <_strtod_l+0x1e>
 80136cc:	292d      	cmp	r1, #45	; 0x2d
 80136ce:	d1c9      	bne.n	8013664 <_strtod_l+0x34>
 80136d0:	2101      	movs	r1, #1
 80136d2:	9108      	str	r1, [sp, #32]
 80136d4:	1c51      	adds	r1, r2, #1
 80136d6:	9111      	str	r1, [sp, #68]	; 0x44
 80136d8:	7852      	ldrb	r2, [r2, #1]
 80136da:	2a00      	cmp	r2, #0
 80136dc:	d1c4      	bne.n	8013668 <_strtod_l+0x38>
 80136de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80136e0:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	f040 8535 	bne.w	8014154 <_strtod_l+0xb24>
 80136ea:	ec49 8b10 	vmov	d0, r8, r9
 80136ee:	e7e4      	b.n	80136ba <_strtod_l+0x8a>
 80136f0:	2100      	movs	r1, #0
 80136f2:	e7ee      	b.n	80136d2 <_strtod_l+0xa2>
 80136f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80136f6:	b13a      	cbz	r2, 8013708 <_strtod_l+0xd8>
 80136f8:	2135      	movs	r1, #53	; 0x35
 80136fa:	a814      	add	r0, sp, #80	; 0x50
 80136fc:	f7ff ff3a 	bl	8013574 <__copybits>
 8013700:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013702:	4620      	mov	r0, r4
 8013704:	f7ff fb10 	bl	8012d28 <_Bfree>
 8013708:	1e7b      	subs	r3, r7, #1
 801370a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801370c:	2b04      	cmp	r3, #4
 801370e:	d806      	bhi.n	801371e <_strtod_l+0xee>
 8013710:	e8df f003 	tbb	[pc, r3]
 8013714:	201d0314 	.word	0x201d0314
 8013718:	14          	.byte	0x14
 8013719:	00          	.byte	0x00
 801371a:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 801371e:	05eb      	lsls	r3, r5, #23
 8013720:	bf48      	it	mi
 8013722:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8013726:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801372a:	0d1b      	lsrs	r3, r3, #20
 801372c:	051b      	lsls	r3, r3, #20
 801372e:	2b00      	cmp	r3, #0
 8013730:	d1b9      	bne.n	80136a6 <_strtod_l+0x76>
 8013732:	f7fe fb85 	bl	8011e40 <__errno>
 8013736:	2322      	movs	r3, #34	; 0x22
 8013738:	6003      	str	r3, [r0, #0]
 801373a:	e7b4      	b.n	80136a6 <_strtod_l+0x76>
 801373c:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8013740:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013744:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013748:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801374c:	e7e7      	b.n	801371e <_strtod_l+0xee>
 801374e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80138d4 <_strtod_l+0x2a4>
 8013752:	e7e4      	b.n	801371e <_strtod_l+0xee>
 8013754:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8013758:	f04f 38ff 	mov.w	r8, #4294967295
 801375c:	e7df      	b.n	801371e <_strtod_l+0xee>
 801375e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013760:	1c5a      	adds	r2, r3, #1
 8013762:	9211      	str	r2, [sp, #68]	; 0x44
 8013764:	785b      	ldrb	r3, [r3, #1]
 8013766:	2b30      	cmp	r3, #48	; 0x30
 8013768:	d0f9      	beq.n	801375e <_strtod_l+0x12e>
 801376a:	2b00      	cmp	r3, #0
 801376c:	d09b      	beq.n	80136a6 <_strtod_l+0x76>
 801376e:	2301      	movs	r3, #1
 8013770:	9306      	str	r3, [sp, #24]
 8013772:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013774:	9309      	str	r3, [sp, #36]	; 0x24
 8013776:	2300      	movs	r3, #0
 8013778:	9305      	str	r3, [sp, #20]
 801377a:	9307      	str	r3, [sp, #28]
 801377c:	461e      	mov	r6, r3
 801377e:	220a      	movs	r2, #10
 8013780:	9811      	ldr	r0, [sp, #68]	; 0x44
 8013782:	7805      	ldrb	r5, [r0, #0]
 8013784:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8013788:	b2d9      	uxtb	r1, r3
 801378a:	2909      	cmp	r1, #9
 801378c:	d92b      	bls.n	80137e6 <_strtod_l+0x1b6>
 801378e:	4950      	ldr	r1, [pc, #320]	; (80138d0 <_strtod_l+0x2a0>)
 8013790:	2201      	movs	r2, #1
 8013792:	f000 ffa9 	bl	80146e8 <strncmp>
 8013796:	2800      	cmp	r0, #0
 8013798:	d035      	beq.n	8013806 <_strtod_l+0x1d6>
 801379a:	2000      	movs	r0, #0
 801379c:	462a      	mov	r2, r5
 801379e:	4633      	mov	r3, r6
 80137a0:	4683      	mov	fp, r0
 80137a2:	4601      	mov	r1, r0
 80137a4:	2a65      	cmp	r2, #101	; 0x65
 80137a6:	d001      	beq.n	80137ac <_strtod_l+0x17c>
 80137a8:	2a45      	cmp	r2, #69	; 0x45
 80137aa:	d118      	bne.n	80137de <_strtod_l+0x1ae>
 80137ac:	b91b      	cbnz	r3, 80137b6 <_strtod_l+0x186>
 80137ae:	9b06      	ldr	r3, [sp, #24]
 80137b0:	4303      	orrs	r3, r0
 80137b2:	d094      	beq.n	80136de <_strtod_l+0xae>
 80137b4:	2300      	movs	r3, #0
 80137b6:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 80137ba:	f10a 0201 	add.w	r2, sl, #1
 80137be:	9211      	str	r2, [sp, #68]	; 0x44
 80137c0:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80137c4:	2a2b      	cmp	r2, #43	; 0x2b
 80137c6:	d075      	beq.n	80138b4 <_strtod_l+0x284>
 80137c8:	2a2d      	cmp	r2, #45	; 0x2d
 80137ca:	d07b      	beq.n	80138c4 <_strtod_l+0x294>
 80137cc:	f04f 0e00 	mov.w	lr, #0
 80137d0:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80137d4:	2d09      	cmp	r5, #9
 80137d6:	f240 8083 	bls.w	80138e0 <_strtod_l+0x2b0>
 80137da:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80137de:	2500      	movs	r5, #0
 80137e0:	e09e      	b.n	8013920 <_strtod_l+0x2f0>
 80137e2:	2300      	movs	r3, #0
 80137e4:	e7c4      	b.n	8013770 <_strtod_l+0x140>
 80137e6:	2e08      	cmp	r6, #8
 80137e8:	bfd5      	itete	le
 80137ea:	9907      	ldrle	r1, [sp, #28]
 80137ec:	9905      	ldrgt	r1, [sp, #20]
 80137ee:	fb02 3301 	mlale	r3, r2, r1, r3
 80137f2:	fb02 3301 	mlagt	r3, r2, r1, r3
 80137f6:	f100 0001 	add.w	r0, r0, #1
 80137fa:	bfd4      	ite	le
 80137fc:	9307      	strle	r3, [sp, #28]
 80137fe:	9305      	strgt	r3, [sp, #20]
 8013800:	3601      	adds	r6, #1
 8013802:	9011      	str	r0, [sp, #68]	; 0x44
 8013804:	e7bc      	b.n	8013780 <_strtod_l+0x150>
 8013806:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013808:	1c5a      	adds	r2, r3, #1
 801380a:	9211      	str	r2, [sp, #68]	; 0x44
 801380c:	785a      	ldrb	r2, [r3, #1]
 801380e:	b3ae      	cbz	r6, 801387c <_strtod_l+0x24c>
 8013810:	4683      	mov	fp, r0
 8013812:	4633      	mov	r3, r6
 8013814:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8013818:	2909      	cmp	r1, #9
 801381a:	d912      	bls.n	8013842 <_strtod_l+0x212>
 801381c:	2101      	movs	r1, #1
 801381e:	e7c1      	b.n	80137a4 <_strtod_l+0x174>
 8013820:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013822:	1c5a      	adds	r2, r3, #1
 8013824:	9211      	str	r2, [sp, #68]	; 0x44
 8013826:	785a      	ldrb	r2, [r3, #1]
 8013828:	3001      	adds	r0, #1
 801382a:	2a30      	cmp	r2, #48	; 0x30
 801382c:	d0f8      	beq.n	8013820 <_strtod_l+0x1f0>
 801382e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8013832:	2b08      	cmp	r3, #8
 8013834:	f200 8495 	bhi.w	8014162 <_strtod_l+0xb32>
 8013838:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801383a:	9309      	str	r3, [sp, #36]	; 0x24
 801383c:	4683      	mov	fp, r0
 801383e:	2000      	movs	r0, #0
 8013840:	4603      	mov	r3, r0
 8013842:	3a30      	subs	r2, #48	; 0x30
 8013844:	f100 0101 	add.w	r1, r0, #1
 8013848:	d012      	beq.n	8013870 <_strtod_l+0x240>
 801384a:	448b      	add	fp, r1
 801384c:	eb00 0c03 	add.w	ip, r0, r3
 8013850:	4619      	mov	r1, r3
 8013852:	250a      	movs	r5, #10
 8013854:	4561      	cmp	r1, ip
 8013856:	d113      	bne.n	8013880 <_strtod_l+0x250>
 8013858:	1819      	adds	r1, r3, r0
 801385a:	2908      	cmp	r1, #8
 801385c:	f103 0301 	add.w	r3, r3, #1
 8013860:	4403      	add	r3, r0
 8013862:	dc1b      	bgt.n	801389c <_strtod_l+0x26c>
 8013864:	9807      	ldr	r0, [sp, #28]
 8013866:	210a      	movs	r1, #10
 8013868:	fb01 2200 	mla	r2, r1, r0, r2
 801386c:	9207      	str	r2, [sp, #28]
 801386e:	2100      	movs	r1, #0
 8013870:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013872:	1c50      	adds	r0, r2, #1
 8013874:	9011      	str	r0, [sp, #68]	; 0x44
 8013876:	7852      	ldrb	r2, [r2, #1]
 8013878:	4608      	mov	r0, r1
 801387a:	e7cb      	b.n	8013814 <_strtod_l+0x1e4>
 801387c:	4630      	mov	r0, r6
 801387e:	e7d4      	b.n	801382a <_strtod_l+0x1fa>
 8013880:	2908      	cmp	r1, #8
 8013882:	f101 0101 	add.w	r1, r1, #1
 8013886:	dc03      	bgt.n	8013890 <_strtod_l+0x260>
 8013888:	9f07      	ldr	r7, [sp, #28]
 801388a:	436f      	muls	r7, r5
 801388c:	9707      	str	r7, [sp, #28]
 801388e:	e7e1      	b.n	8013854 <_strtod_l+0x224>
 8013890:	2910      	cmp	r1, #16
 8013892:	bfde      	ittt	le
 8013894:	9f05      	ldrle	r7, [sp, #20]
 8013896:	436f      	mulle	r7, r5
 8013898:	9705      	strle	r7, [sp, #20]
 801389a:	e7db      	b.n	8013854 <_strtod_l+0x224>
 801389c:	2b10      	cmp	r3, #16
 801389e:	bfdf      	itttt	le
 80138a0:	9805      	ldrle	r0, [sp, #20]
 80138a2:	210a      	movle	r1, #10
 80138a4:	fb01 2200 	mlale	r2, r1, r0, r2
 80138a8:	9205      	strle	r2, [sp, #20]
 80138aa:	e7e0      	b.n	801386e <_strtod_l+0x23e>
 80138ac:	f04f 0b00 	mov.w	fp, #0
 80138b0:	2101      	movs	r1, #1
 80138b2:	e77c      	b.n	80137ae <_strtod_l+0x17e>
 80138b4:	f04f 0e00 	mov.w	lr, #0
 80138b8:	f10a 0202 	add.w	r2, sl, #2
 80138bc:	9211      	str	r2, [sp, #68]	; 0x44
 80138be:	f89a 2002 	ldrb.w	r2, [sl, #2]
 80138c2:	e785      	b.n	80137d0 <_strtod_l+0x1a0>
 80138c4:	f04f 0e01 	mov.w	lr, #1
 80138c8:	e7f6      	b.n	80138b8 <_strtod_l+0x288>
 80138ca:	bf00      	nop
 80138cc:	08015938 	.word	0x08015938
 80138d0:	08015934 	.word	0x08015934
 80138d4:	7ff00000 	.word	0x7ff00000
 80138d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80138da:	1c55      	adds	r5, r2, #1
 80138dc:	9511      	str	r5, [sp, #68]	; 0x44
 80138de:	7852      	ldrb	r2, [r2, #1]
 80138e0:	2a30      	cmp	r2, #48	; 0x30
 80138e2:	d0f9      	beq.n	80138d8 <_strtod_l+0x2a8>
 80138e4:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80138e8:	2d08      	cmp	r5, #8
 80138ea:	f63f af78 	bhi.w	80137de <_strtod_l+0x1ae>
 80138ee:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80138f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80138f4:	920a      	str	r2, [sp, #40]	; 0x28
 80138f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80138f8:	1c55      	adds	r5, r2, #1
 80138fa:	9511      	str	r5, [sp, #68]	; 0x44
 80138fc:	7852      	ldrb	r2, [r2, #1]
 80138fe:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8013902:	2f09      	cmp	r7, #9
 8013904:	d937      	bls.n	8013976 <_strtod_l+0x346>
 8013906:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8013908:	1bed      	subs	r5, r5, r7
 801390a:	2d08      	cmp	r5, #8
 801390c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8013910:	dc02      	bgt.n	8013918 <_strtod_l+0x2e8>
 8013912:	4565      	cmp	r5, ip
 8013914:	bfa8      	it	ge
 8013916:	4665      	movge	r5, ip
 8013918:	f1be 0f00 	cmp.w	lr, #0
 801391c:	d000      	beq.n	8013920 <_strtod_l+0x2f0>
 801391e:	426d      	negs	r5, r5
 8013920:	2b00      	cmp	r3, #0
 8013922:	d14d      	bne.n	80139c0 <_strtod_l+0x390>
 8013924:	9b06      	ldr	r3, [sp, #24]
 8013926:	4303      	orrs	r3, r0
 8013928:	f47f aebd 	bne.w	80136a6 <_strtod_l+0x76>
 801392c:	2900      	cmp	r1, #0
 801392e:	f47f aed6 	bne.w	80136de <_strtod_l+0xae>
 8013932:	2a69      	cmp	r2, #105	; 0x69
 8013934:	d027      	beq.n	8013986 <_strtod_l+0x356>
 8013936:	dc24      	bgt.n	8013982 <_strtod_l+0x352>
 8013938:	2a49      	cmp	r2, #73	; 0x49
 801393a:	d024      	beq.n	8013986 <_strtod_l+0x356>
 801393c:	2a4e      	cmp	r2, #78	; 0x4e
 801393e:	f47f aece 	bne.w	80136de <_strtod_l+0xae>
 8013942:	4995      	ldr	r1, [pc, #596]	; (8013b98 <_strtod_l+0x568>)
 8013944:	a811      	add	r0, sp, #68	; 0x44
 8013946:	f001 f9d7 	bl	8014cf8 <__match>
 801394a:	2800      	cmp	r0, #0
 801394c:	f43f aec7 	beq.w	80136de <_strtod_l+0xae>
 8013950:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013952:	781b      	ldrb	r3, [r3, #0]
 8013954:	2b28      	cmp	r3, #40	; 0x28
 8013956:	d12d      	bne.n	80139b4 <_strtod_l+0x384>
 8013958:	4990      	ldr	r1, [pc, #576]	; (8013b9c <_strtod_l+0x56c>)
 801395a:	aa14      	add	r2, sp, #80	; 0x50
 801395c:	a811      	add	r0, sp, #68	; 0x44
 801395e:	f001 f9df 	bl	8014d20 <__hexnan>
 8013962:	2805      	cmp	r0, #5
 8013964:	d126      	bne.n	80139b4 <_strtod_l+0x384>
 8013966:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013968:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801396c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8013970:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8013974:	e697      	b.n	80136a6 <_strtod_l+0x76>
 8013976:	250a      	movs	r5, #10
 8013978:	fb05 2c0c 	mla	ip, r5, ip, r2
 801397c:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8013980:	e7b9      	b.n	80138f6 <_strtod_l+0x2c6>
 8013982:	2a6e      	cmp	r2, #110	; 0x6e
 8013984:	e7db      	b.n	801393e <_strtod_l+0x30e>
 8013986:	4986      	ldr	r1, [pc, #536]	; (8013ba0 <_strtod_l+0x570>)
 8013988:	a811      	add	r0, sp, #68	; 0x44
 801398a:	f001 f9b5 	bl	8014cf8 <__match>
 801398e:	2800      	cmp	r0, #0
 8013990:	f43f aea5 	beq.w	80136de <_strtod_l+0xae>
 8013994:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013996:	4983      	ldr	r1, [pc, #524]	; (8013ba4 <_strtod_l+0x574>)
 8013998:	3b01      	subs	r3, #1
 801399a:	a811      	add	r0, sp, #68	; 0x44
 801399c:	9311      	str	r3, [sp, #68]	; 0x44
 801399e:	f001 f9ab 	bl	8014cf8 <__match>
 80139a2:	b910      	cbnz	r0, 80139aa <_strtod_l+0x37a>
 80139a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80139a6:	3301      	adds	r3, #1
 80139a8:	9311      	str	r3, [sp, #68]	; 0x44
 80139aa:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8013bb8 <_strtod_l+0x588>
 80139ae:	f04f 0800 	mov.w	r8, #0
 80139b2:	e678      	b.n	80136a6 <_strtod_l+0x76>
 80139b4:	487c      	ldr	r0, [pc, #496]	; (8013ba8 <_strtod_l+0x578>)
 80139b6:	f000 febb 	bl	8014730 <nan>
 80139ba:	ec59 8b10 	vmov	r8, r9, d0
 80139be:	e672      	b.n	80136a6 <_strtod_l+0x76>
 80139c0:	eddd 7a07 	vldr	s15, [sp, #28]
 80139c4:	eba5 020b 	sub.w	r2, r5, fp
 80139c8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80139cc:	2e00      	cmp	r6, #0
 80139ce:	bf08      	it	eq
 80139d0:	461e      	moveq	r6, r3
 80139d2:	2b10      	cmp	r3, #16
 80139d4:	9206      	str	r2, [sp, #24]
 80139d6:	461a      	mov	r2, r3
 80139d8:	bfa8      	it	ge
 80139da:	2210      	movge	r2, #16
 80139dc:	2b09      	cmp	r3, #9
 80139de:	ec59 8b17 	vmov	r8, r9, d7
 80139e2:	dd0c      	ble.n	80139fe <_strtod_l+0x3ce>
 80139e4:	4971      	ldr	r1, [pc, #452]	; (8013bac <_strtod_l+0x57c>)
 80139e6:	eddd 6a05 	vldr	s13, [sp, #20]
 80139ea:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80139ee:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80139f2:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80139f6:	eea7 6b05 	vfma.f64	d6, d7, d5
 80139fa:	ec59 8b16 	vmov	r8, r9, d6
 80139fe:	2b0f      	cmp	r3, #15
 8013a00:	dc37      	bgt.n	8013a72 <_strtod_l+0x442>
 8013a02:	9906      	ldr	r1, [sp, #24]
 8013a04:	2900      	cmp	r1, #0
 8013a06:	f43f ae4e 	beq.w	80136a6 <_strtod_l+0x76>
 8013a0a:	dd23      	ble.n	8013a54 <_strtod_l+0x424>
 8013a0c:	2916      	cmp	r1, #22
 8013a0e:	dc0b      	bgt.n	8013a28 <_strtod_l+0x3f8>
 8013a10:	4b66      	ldr	r3, [pc, #408]	; (8013bac <_strtod_l+0x57c>)
 8013a12:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8013a16:	ed93 7b00 	vldr	d7, [r3]
 8013a1a:	ec49 8b16 	vmov	d6, r8, r9
 8013a1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013a22:	ec59 8b17 	vmov	r8, r9, d7
 8013a26:	e63e      	b.n	80136a6 <_strtod_l+0x76>
 8013a28:	9806      	ldr	r0, [sp, #24]
 8013a2a:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8013a2e:	4281      	cmp	r1, r0
 8013a30:	db1f      	blt.n	8013a72 <_strtod_l+0x442>
 8013a32:	4a5e      	ldr	r2, [pc, #376]	; (8013bac <_strtod_l+0x57c>)
 8013a34:	f1c3 030f 	rsb	r3, r3, #15
 8013a38:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8013a3c:	ed91 7b00 	vldr	d7, [r1]
 8013a40:	ec49 8b16 	vmov	d6, r8, r9
 8013a44:	1ac3      	subs	r3, r0, r3
 8013a46:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013a4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013a4e:	ed92 6b00 	vldr	d6, [r2]
 8013a52:	e7e4      	b.n	8013a1e <_strtod_l+0x3ee>
 8013a54:	9906      	ldr	r1, [sp, #24]
 8013a56:	3116      	adds	r1, #22
 8013a58:	db0b      	blt.n	8013a72 <_strtod_l+0x442>
 8013a5a:	4b54      	ldr	r3, [pc, #336]	; (8013bac <_strtod_l+0x57c>)
 8013a5c:	ebab 0505 	sub.w	r5, fp, r5
 8013a60:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013a64:	ed95 7b00 	vldr	d7, [r5]
 8013a68:	ec49 8b16 	vmov	d6, r8, r9
 8013a6c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013a70:	e7d7      	b.n	8013a22 <_strtod_l+0x3f2>
 8013a72:	9906      	ldr	r1, [sp, #24]
 8013a74:	1a9a      	subs	r2, r3, r2
 8013a76:	440a      	add	r2, r1
 8013a78:	2a00      	cmp	r2, #0
 8013a7a:	dd6e      	ble.n	8013b5a <_strtod_l+0x52a>
 8013a7c:	f012 000f 	ands.w	r0, r2, #15
 8013a80:	d00a      	beq.n	8013a98 <_strtod_l+0x468>
 8013a82:	494a      	ldr	r1, [pc, #296]	; (8013bac <_strtod_l+0x57c>)
 8013a84:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013a88:	ed91 7b00 	vldr	d7, [r1]
 8013a8c:	ec49 8b16 	vmov	d6, r8, r9
 8013a90:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013a94:	ec59 8b17 	vmov	r8, r9, d7
 8013a98:	f032 020f 	bics.w	r2, r2, #15
 8013a9c:	d04e      	beq.n	8013b3c <_strtod_l+0x50c>
 8013a9e:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8013aa2:	dd22      	ble.n	8013aea <_strtod_l+0x4ba>
 8013aa4:	2500      	movs	r5, #0
 8013aa6:	462e      	mov	r6, r5
 8013aa8:	9507      	str	r5, [sp, #28]
 8013aaa:	462f      	mov	r7, r5
 8013aac:	2322      	movs	r3, #34	; 0x22
 8013aae:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8013bb8 <_strtod_l+0x588>
 8013ab2:	6023      	str	r3, [r4, #0]
 8013ab4:	f04f 0800 	mov.w	r8, #0
 8013ab8:	9b07      	ldr	r3, [sp, #28]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	f43f adf3 	beq.w	80136a6 <_strtod_l+0x76>
 8013ac0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013ac2:	4620      	mov	r0, r4
 8013ac4:	f7ff f930 	bl	8012d28 <_Bfree>
 8013ac8:	4639      	mov	r1, r7
 8013aca:	4620      	mov	r0, r4
 8013acc:	f7ff f92c 	bl	8012d28 <_Bfree>
 8013ad0:	4631      	mov	r1, r6
 8013ad2:	4620      	mov	r0, r4
 8013ad4:	f7ff f928 	bl	8012d28 <_Bfree>
 8013ad8:	9907      	ldr	r1, [sp, #28]
 8013ada:	4620      	mov	r0, r4
 8013adc:	f7ff f924 	bl	8012d28 <_Bfree>
 8013ae0:	4629      	mov	r1, r5
 8013ae2:	4620      	mov	r0, r4
 8013ae4:	f7ff f920 	bl	8012d28 <_Bfree>
 8013ae8:	e5dd      	b.n	80136a6 <_strtod_l+0x76>
 8013aea:	2000      	movs	r0, #0
 8013aec:	ec49 8b17 	vmov	d7, r8, r9
 8013af0:	4f2f      	ldr	r7, [pc, #188]	; (8013bb0 <_strtod_l+0x580>)
 8013af2:	1112      	asrs	r2, r2, #4
 8013af4:	4601      	mov	r1, r0
 8013af6:	2a01      	cmp	r2, #1
 8013af8:	dc23      	bgt.n	8013b42 <_strtod_l+0x512>
 8013afa:	b108      	cbz	r0, 8013b00 <_strtod_l+0x4d0>
 8013afc:	ec59 8b17 	vmov	r8, r9, d7
 8013b00:	4a2b      	ldr	r2, [pc, #172]	; (8013bb0 <_strtod_l+0x580>)
 8013b02:	482c      	ldr	r0, [pc, #176]	; (8013bb4 <_strtod_l+0x584>)
 8013b04:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8013b08:	ed92 7b00 	vldr	d7, [r2]
 8013b0c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8013b10:	ec49 8b16 	vmov	d6, r8, r9
 8013b14:	4a28      	ldr	r2, [pc, #160]	; (8013bb8 <_strtod_l+0x588>)
 8013b16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013b1a:	ee17 1a90 	vmov	r1, s15
 8013b1e:	400a      	ands	r2, r1
 8013b20:	4282      	cmp	r2, r0
 8013b22:	ec59 8b17 	vmov	r8, r9, d7
 8013b26:	d8bd      	bhi.n	8013aa4 <_strtod_l+0x474>
 8013b28:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8013b2c:	4282      	cmp	r2, r0
 8013b2e:	bf86      	itte	hi
 8013b30:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 8013bbc <_strtod_l+0x58c>
 8013b34:	f04f 38ff 	movhi.w	r8, #4294967295
 8013b38:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8013b3c:	2200      	movs	r2, #0
 8013b3e:	9205      	str	r2, [sp, #20]
 8013b40:	e076      	b.n	8013c30 <_strtod_l+0x600>
 8013b42:	f012 0f01 	tst.w	r2, #1
 8013b46:	d004      	beq.n	8013b52 <_strtod_l+0x522>
 8013b48:	ed97 6b00 	vldr	d6, [r7]
 8013b4c:	2001      	movs	r0, #1
 8013b4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013b52:	3101      	adds	r1, #1
 8013b54:	1052      	asrs	r2, r2, #1
 8013b56:	3708      	adds	r7, #8
 8013b58:	e7cd      	b.n	8013af6 <_strtod_l+0x4c6>
 8013b5a:	d0ef      	beq.n	8013b3c <_strtod_l+0x50c>
 8013b5c:	4252      	negs	r2, r2
 8013b5e:	f012 000f 	ands.w	r0, r2, #15
 8013b62:	d00a      	beq.n	8013b7a <_strtod_l+0x54a>
 8013b64:	4911      	ldr	r1, [pc, #68]	; (8013bac <_strtod_l+0x57c>)
 8013b66:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013b6a:	ed91 7b00 	vldr	d7, [r1]
 8013b6e:	ec49 8b16 	vmov	d6, r8, r9
 8013b72:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013b76:	ec59 8b17 	vmov	r8, r9, d7
 8013b7a:	1112      	asrs	r2, r2, #4
 8013b7c:	d0de      	beq.n	8013b3c <_strtod_l+0x50c>
 8013b7e:	2a1f      	cmp	r2, #31
 8013b80:	dd1e      	ble.n	8013bc0 <_strtod_l+0x590>
 8013b82:	2500      	movs	r5, #0
 8013b84:	462e      	mov	r6, r5
 8013b86:	9507      	str	r5, [sp, #28]
 8013b88:	462f      	mov	r7, r5
 8013b8a:	2322      	movs	r3, #34	; 0x22
 8013b8c:	f04f 0800 	mov.w	r8, #0
 8013b90:	f04f 0900 	mov.w	r9, #0
 8013b94:	6023      	str	r3, [r4, #0]
 8013b96:	e78f      	b.n	8013ab8 <_strtod_l+0x488>
 8013b98:	08015721 	.word	0x08015721
 8013b9c:	0801594c 	.word	0x0801594c
 8013ba0:	08015719 	.word	0x08015719
 8013ba4:	08015750 	.word	0x08015750
 8013ba8:	08015add 	.word	0x08015add
 8013bac:	08015860 	.word	0x08015860
 8013bb0:	08015838 	.word	0x08015838
 8013bb4:	7ca00000 	.word	0x7ca00000
 8013bb8:	7ff00000 	.word	0x7ff00000
 8013bbc:	7fefffff 	.word	0x7fefffff
 8013bc0:	f012 0110 	ands.w	r1, r2, #16
 8013bc4:	bf18      	it	ne
 8013bc6:	216a      	movne	r1, #106	; 0x6a
 8013bc8:	9105      	str	r1, [sp, #20]
 8013bca:	ec49 8b17 	vmov	d7, r8, r9
 8013bce:	49be      	ldr	r1, [pc, #760]	; (8013ec8 <_strtod_l+0x898>)
 8013bd0:	2000      	movs	r0, #0
 8013bd2:	07d7      	lsls	r7, r2, #31
 8013bd4:	d504      	bpl.n	8013be0 <_strtod_l+0x5b0>
 8013bd6:	ed91 6b00 	vldr	d6, [r1]
 8013bda:	2001      	movs	r0, #1
 8013bdc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013be0:	1052      	asrs	r2, r2, #1
 8013be2:	f101 0108 	add.w	r1, r1, #8
 8013be6:	d1f4      	bne.n	8013bd2 <_strtod_l+0x5a2>
 8013be8:	b108      	cbz	r0, 8013bee <_strtod_l+0x5be>
 8013bea:	ec59 8b17 	vmov	r8, r9, d7
 8013bee:	9a05      	ldr	r2, [sp, #20]
 8013bf0:	b1ba      	cbz	r2, 8013c22 <_strtod_l+0x5f2>
 8013bf2:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8013bf6:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8013bfa:	2a00      	cmp	r2, #0
 8013bfc:	4648      	mov	r0, r9
 8013bfe:	dd10      	ble.n	8013c22 <_strtod_l+0x5f2>
 8013c00:	2a1f      	cmp	r2, #31
 8013c02:	f340 812c 	ble.w	8013e5e <_strtod_l+0x82e>
 8013c06:	2a34      	cmp	r2, #52	; 0x34
 8013c08:	bfde      	ittt	le
 8013c0a:	f04f 32ff 	movle.w	r2, #4294967295
 8013c0e:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8013c12:	408a      	lslle	r2, r1
 8013c14:	f04f 0800 	mov.w	r8, #0
 8013c18:	bfcc      	ite	gt
 8013c1a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8013c1e:	ea02 0900 	andle.w	r9, r2, r0
 8013c22:	ec49 8b17 	vmov	d7, r8, r9
 8013c26:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c2e:	d0a8      	beq.n	8013b82 <_strtod_l+0x552>
 8013c30:	9a07      	ldr	r2, [sp, #28]
 8013c32:	9200      	str	r2, [sp, #0]
 8013c34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013c36:	4632      	mov	r2, r6
 8013c38:	4620      	mov	r0, r4
 8013c3a:	f7ff f8dd 	bl	8012df8 <__s2b>
 8013c3e:	9007      	str	r0, [sp, #28]
 8013c40:	2800      	cmp	r0, #0
 8013c42:	f43f af2f 	beq.w	8013aa4 <_strtod_l+0x474>
 8013c46:	9a06      	ldr	r2, [sp, #24]
 8013c48:	2a00      	cmp	r2, #0
 8013c4a:	ebab 0305 	sub.w	r3, fp, r5
 8013c4e:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8013ea8 <_strtod_l+0x878>
 8013c52:	bfa8      	it	ge
 8013c54:	2300      	movge	r3, #0
 8013c56:	ed9f ab96 	vldr	d10, [pc, #600]	; 8013eb0 <_strtod_l+0x880>
 8013c5a:	ed9f bb97 	vldr	d11, [pc, #604]	; 8013eb8 <_strtod_l+0x888>
 8013c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8013c60:	2500      	movs	r5, #0
 8013c62:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013c66:	930c      	str	r3, [sp, #48]	; 0x30
 8013c68:	462e      	mov	r6, r5
 8013c6a:	9b07      	ldr	r3, [sp, #28]
 8013c6c:	4620      	mov	r0, r4
 8013c6e:	6859      	ldr	r1, [r3, #4]
 8013c70:	f7ff f81a 	bl	8012ca8 <_Balloc>
 8013c74:	4607      	mov	r7, r0
 8013c76:	2800      	cmp	r0, #0
 8013c78:	f43f af18 	beq.w	8013aac <_strtod_l+0x47c>
 8013c7c:	9b07      	ldr	r3, [sp, #28]
 8013c7e:	691a      	ldr	r2, [r3, #16]
 8013c80:	3202      	adds	r2, #2
 8013c82:	f103 010c 	add.w	r1, r3, #12
 8013c86:	0092      	lsls	r2, r2, #2
 8013c88:	300c      	adds	r0, #12
 8013c8a:	f7fe f905 	bl	8011e98 <memcpy>
 8013c8e:	ec49 8b10 	vmov	d0, r8, r9
 8013c92:	aa14      	add	r2, sp, #80	; 0x50
 8013c94:	a913      	add	r1, sp, #76	; 0x4c
 8013c96:	4620      	mov	r0, r4
 8013c98:	f7ff fbe2 	bl	8013460 <__d2b>
 8013c9c:	ec49 8b18 	vmov	d8, r8, r9
 8013ca0:	9012      	str	r0, [sp, #72]	; 0x48
 8013ca2:	2800      	cmp	r0, #0
 8013ca4:	f43f af02 	beq.w	8013aac <_strtod_l+0x47c>
 8013ca8:	2101      	movs	r1, #1
 8013caa:	4620      	mov	r0, r4
 8013cac:	f7ff f93c 	bl	8012f28 <__i2b>
 8013cb0:	4606      	mov	r6, r0
 8013cb2:	2800      	cmp	r0, #0
 8013cb4:	f43f aefa 	beq.w	8013aac <_strtod_l+0x47c>
 8013cb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013cba:	9914      	ldr	r1, [sp, #80]	; 0x50
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	bfab      	itete	ge
 8013cc0:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8013cc2:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8013cc4:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8013cc8:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8013ccc:	bfac      	ite	ge
 8013cce:	eb03 0b02 	addge.w	fp, r3, r2
 8013cd2:	eba2 0a03 	sublt.w	sl, r2, r3
 8013cd6:	9a05      	ldr	r2, [sp, #20]
 8013cd8:	1a9b      	subs	r3, r3, r2
 8013cda:	440b      	add	r3, r1
 8013cdc:	4a7b      	ldr	r2, [pc, #492]	; (8013ecc <_strtod_l+0x89c>)
 8013cde:	3b01      	subs	r3, #1
 8013ce0:	4293      	cmp	r3, r2
 8013ce2:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8013ce6:	f280 80cd 	bge.w	8013e84 <_strtod_l+0x854>
 8013cea:	1ad2      	subs	r2, r2, r3
 8013cec:	2a1f      	cmp	r2, #31
 8013cee:	eba1 0102 	sub.w	r1, r1, r2
 8013cf2:	f04f 0001 	mov.w	r0, #1
 8013cf6:	f300 80b9 	bgt.w	8013e6c <_strtod_l+0x83c>
 8013cfa:	fa00 f302 	lsl.w	r3, r0, r2
 8013cfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8013d00:	2300      	movs	r3, #0
 8013d02:	930a      	str	r3, [sp, #40]	; 0x28
 8013d04:	eb0b 0301 	add.w	r3, fp, r1
 8013d08:	9a05      	ldr	r2, [sp, #20]
 8013d0a:	459b      	cmp	fp, r3
 8013d0c:	448a      	add	sl, r1
 8013d0e:	4492      	add	sl, r2
 8013d10:	465a      	mov	r2, fp
 8013d12:	bfa8      	it	ge
 8013d14:	461a      	movge	r2, r3
 8013d16:	4552      	cmp	r2, sl
 8013d18:	bfa8      	it	ge
 8013d1a:	4652      	movge	r2, sl
 8013d1c:	2a00      	cmp	r2, #0
 8013d1e:	bfc2      	ittt	gt
 8013d20:	1a9b      	subgt	r3, r3, r2
 8013d22:	ebaa 0a02 	subgt.w	sl, sl, r2
 8013d26:	ebab 0b02 	subgt.w	fp, fp, r2
 8013d2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013d2c:	2a00      	cmp	r2, #0
 8013d2e:	dd18      	ble.n	8013d62 <_strtod_l+0x732>
 8013d30:	4631      	mov	r1, r6
 8013d32:	4620      	mov	r0, r4
 8013d34:	930f      	str	r3, [sp, #60]	; 0x3c
 8013d36:	f7ff f9b7 	bl	80130a8 <__pow5mult>
 8013d3a:	4606      	mov	r6, r0
 8013d3c:	2800      	cmp	r0, #0
 8013d3e:	f43f aeb5 	beq.w	8013aac <_strtod_l+0x47c>
 8013d42:	4601      	mov	r1, r0
 8013d44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013d46:	4620      	mov	r0, r4
 8013d48:	f7ff f904 	bl	8012f54 <__multiply>
 8013d4c:	900e      	str	r0, [sp, #56]	; 0x38
 8013d4e:	2800      	cmp	r0, #0
 8013d50:	f43f aeac 	beq.w	8013aac <_strtod_l+0x47c>
 8013d54:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013d56:	4620      	mov	r0, r4
 8013d58:	f7fe ffe6 	bl	8012d28 <_Bfree>
 8013d5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013d5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013d60:	9212      	str	r2, [sp, #72]	; 0x48
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	f300 8093 	bgt.w	8013e8e <_strtod_l+0x85e>
 8013d68:	9b06      	ldr	r3, [sp, #24]
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	dd08      	ble.n	8013d80 <_strtod_l+0x750>
 8013d6e:	4639      	mov	r1, r7
 8013d70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013d72:	4620      	mov	r0, r4
 8013d74:	f7ff f998 	bl	80130a8 <__pow5mult>
 8013d78:	4607      	mov	r7, r0
 8013d7a:	2800      	cmp	r0, #0
 8013d7c:	f43f ae96 	beq.w	8013aac <_strtod_l+0x47c>
 8013d80:	f1ba 0f00 	cmp.w	sl, #0
 8013d84:	dd08      	ble.n	8013d98 <_strtod_l+0x768>
 8013d86:	4639      	mov	r1, r7
 8013d88:	4652      	mov	r2, sl
 8013d8a:	4620      	mov	r0, r4
 8013d8c:	f7ff f9e6 	bl	801315c <__lshift>
 8013d90:	4607      	mov	r7, r0
 8013d92:	2800      	cmp	r0, #0
 8013d94:	f43f ae8a 	beq.w	8013aac <_strtod_l+0x47c>
 8013d98:	f1bb 0f00 	cmp.w	fp, #0
 8013d9c:	dd08      	ble.n	8013db0 <_strtod_l+0x780>
 8013d9e:	4631      	mov	r1, r6
 8013da0:	465a      	mov	r2, fp
 8013da2:	4620      	mov	r0, r4
 8013da4:	f7ff f9da 	bl	801315c <__lshift>
 8013da8:	4606      	mov	r6, r0
 8013daa:	2800      	cmp	r0, #0
 8013dac:	f43f ae7e 	beq.w	8013aac <_strtod_l+0x47c>
 8013db0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013db2:	463a      	mov	r2, r7
 8013db4:	4620      	mov	r0, r4
 8013db6:	f7ff fa59 	bl	801326c <__mdiff>
 8013dba:	4605      	mov	r5, r0
 8013dbc:	2800      	cmp	r0, #0
 8013dbe:	f43f ae75 	beq.w	8013aac <_strtod_l+0x47c>
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8013dc8:	60c3      	str	r3, [r0, #12]
 8013dca:	4631      	mov	r1, r6
 8013dcc:	f7ff fa32 	bl	8013234 <__mcmp>
 8013dd0:	2800      	cmp	r0, #0
 8013dd2:	da7f      	bge.n	8013ed4 <_strtod_l+0x8a4>
 8013dd4:	ea5a 0a08 	orrs.w	sl, sl, r8
 8013dd8:	f040 80a5 	bne.w	8013f26 <_strtod_l+0x8f6>
 8013ddc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	f040 80a0 	bne.w	8013f26 <_strtod_l+0x8f6>
 8013de6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013dea:	0d1b      	lsrs	r3, r3, #20
 8013dec:	051b      	lsls	r3, r3, #20
 8013dee:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013df2:	f240 8098 	bls.w	8013f26 <_strtod_l+0x8f6>
 8013df6:	696b      	ldr	r3, [r5, #20]
 8013df8:	b91b      	cbnz	r3, 8013e02 <_strtod_l+0x7d2>
 8013dfa:	692b      	ldr	r3, [r5, #16]
 8013dfc:	2b01      	cmp	r3, #1
 8013dfe:	f340 8092 	ble.w	8013f26 <_strtod_l+0x8f6>
 8013e02:	4629      	mov	r1, r5
 8013e04:	2201      	movs	r2, #1
 8013e06:	4620      	mov	r0, r4
 8013e08:	f7ff f9a8 	bl	801315c <__lshift>
 8013e0c:	4631      	mov	r1, r6
 8013e0e:	4605      	mov	r5, r0
 8013e10:	f7ff fa10 	bl	8013234 <__mcmp>
 8013e14:	2800      	cmp	r0, #0
 8013e16:	f340 8086 	ble.w	8013f26 <_strtod_l+0x8f6>
 8013e1a:	9905      	ldr	r1, [sp, #20]
 8013e1c:	4a2c      	ldr	r2, [pc, #176]	; (8013ed0 <_strtod_l+0x8a0>)
 8013e1e:	464b      	mov	r3, r9
 8013e20:	2900      	cmp	r1, #0
 8013e22:	f000 809f 	beq.w	8013f64 <_strtod_l+0x934>
 8013e26:	ea02 0109 	and.w	r1, r2, r9
 8013e2a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013e2e:	f300 8099 	bgt.w	8013f64 <_strtod_l+0x934>
 8013e32:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013e36:	f77f aea8 	ble.w	8013b8a <_strtod_l+0x55a>
 8013e3a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8013ec0 <_strtod_l+0x890>
 8013e3e:	ec49 8b16 	vmov	d6, r8, r9
 8013e42:	4b23      	ldr	r3, [pc, #140]	; (8013ed0 <_strtod_l+0x8a0>)
 8013e44:	ee26 7b07 	vmul.f64	d7, d6, d7
 8013e48:	ee17 2a90 	vmov	r2, s15
 8013e4c:	4013      	ands	r3, r2
 8013e4e:	ec59 8b17 	vmov	r8, r9, d7
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	f47f ae34 	bne.w	8013ac0 <_strtod_l+0x490>
 8013e58:	2322      	movs	r3, #34	; 0x22
 8013e5a:	6023      	str	r3, [r4, #0]
 8013e5c:	e630      	b.n	8013ac0 <_strtod_l+0x490>
 8013e5e:	f04f 31ff 	mov.w	r1, #4294967295
 8013e62:	fa01 f202 	lsl.w	r2, r1, r2
 8013e66:	ea02 0808 	and.w	r8, r2, r8
 8013e6a:	e6da      	b.n	8013c22 <_strtod_l+0x5f2>
 8013e6c:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8013e70:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8013e74:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8013e78:	33e2      	adds	r3, #226	; 0xe2
 8013e7a:	fa00 f303 	lsl.w	r3, r0, r3
 8013e7e:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8013e82:	e73f      	b.n	8013d04 <_strtod_l+0x6d4>
 8013e84:	2200      	movs	r2, #0
 8013e86:	2301      	movs	r3, #1
 8013e88:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013e8c:	e73a      	b.n	8013d04 <_strtod_l+0x6d4>
 8013e8e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013e90:	461a      	mov	r2, r3
 8013e92:	4620      	mov	r0, r4
 8013e94:	f7ff f962 	bl	801315c <__lshift>
 8013e98:	9012      	str	r0, [sp, #72]	; 0x48
 8013e9a:	2800      	cmp	r0, #0
 8013e9c:	f47f af64 	bne.w	8013d68 <_strtod_l+0x738>
 8013ea0:	e604      	b.n	8013aac <_strtod_l+0x47c>
 8013ea2:	bf00      	nop
 8013ea4:	f3af 8000 	nop.w
 8013ea8:	94a03595 	.word	0x94a03595
 8013eac:	3fcfffff 	.word	0x3fcfffff
 8013eb0:	94a03595 	.word	0x94a03595
 8013eb4:	3fdfffff 	.word	0x3fdfffff
 8013eb8:	35afe535 	.word	0x35afe535
 8013ebc:	3fe00000 	.word	0x3fe00000
 8013ec0:	00000000 	.word	0x00000000
 8013ec4:	39500000 	.word	0x39500000
 8013ec8:	08015960 	.word	0x08015960
 8013ecc:	fffffc02 	.word	0xfffffc02
 8013ed0:	7ff00000 	.word	0x7ff00000
 8013ed4:	46cb      	mov	fp, r9
 8013ed6:	d15f      	bne.n	8013f98 <_strtod_l+0x968>
 8013ed8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013edc:	f1ba 0f00 	cmp.w	sl, #0
 8013ee0:	d02a      	beq.n	8013f38 <_strtod_l+0x908>
 8013ee2:	4aa7      	ldr	r2, [pc, #668]	; (8014180 <_strtod_l+0xb50>)
 8013ee4:	4293      	cmp	r3, r2
 8013ee6:	d12b      	bne.n	8013f40 <_strtod_l+0x910>
 8013ee8:	9b05      	ldr	r3, [sp, #20]
 8013eea:	4642      	mov	r2, r8
 8013eec:	b1fb      	cbz	r3, 8013f2e <_strtod_l+0x8fe>
 8013eee:	4ba5      	ldr	r3, [pc, #660]	; (8014184 <_strtod_l+0xb54>)
 8013ef0:	ea09 0303 	and.w	r3, r9, r3
 8013ef4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8013efc:	d81a      	bhi.n	8013f34 <_strtod_l+0x904>
 8013efe:	0d1b      	lsrs	r3, r3, #20
 8013f00:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013f04:	fa01 f303 	lsl.w	r3, r1, r3
 8013f08:	429a      	cmp	r2, r3
 8013f0a:	d119      	bne.n	8013f40 <_strtod_l+0x910>
 8013f0c:	4b9e      	ldr	r3, [pc, #632]	; (8014188 <_strtod_l+0xb58>)
 8013f0e:	459b      	cmp	fp, r3
 8013f10:	d102      	bne.n	8013f18 <_strtod_l+0x8e8>
 8013f12:	3201      	adds	r2, #1
 8013f14:	f43f adca 	beq.w	8013aac <_strtod_l+0x47c>
 8013f18:	4b9a      	ldr	r3, [pc, #616]	; (8014184 <_strtod_l+0xb54>)
 8013f1a:	ea0b 0303 	and.w	r3, fp, r3
 8013f1e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8013f22:	f04f 0800 	mov.w	r8, #0
 8013f26:	9b05      	ldr	r3, [sp, #20]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d186      	bne.n	8013e3a <_strtod_l+0x80a>
 8013f2c:	e5c8      	b.n	8013ac0 <_strtod_l+0x490>
 8013f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8013f32:	e7e9      	b.n	8013f08 <_strtod_l+0x8d8>
 8013f34:	460b      	mov	r3, r1
 8013f36:	e7e7      	b.n	8013f08 <_strtod_l+0x8d8>
 8013f38:	ea53 0308 	orrs.w	r3, r3, r8
 8013f3c:	f43f af6d 	beq.w	8013e1a <_strtod_l+0x7ea>
 8013f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f42:	b1cb      	cbz	r3, 8013f78 <_strtod_l+0x948>
 8013f44:	ea13 0f0b 	tst.w	r3, fp
 8013f48:	d0ed      	beq.n	8013f26 <_strtod_l+0x8f6>
 8013f4a:	9a05      	ldr	r2, [sp, #20]
 8013f4c:	4640      	mov	r0, r8
 8013f4e:	4649      	mov	r1, r9
 8013f50:	f1ba 0f00 	cmp.w	sl, #0
 8013f54:	d014      	beq.n	8013f80 <_strtod_l+0x950>
 8013f56:	f7ff fb51 	bl	80135fc <sulp>
 8013f5a:	ee38 7b00 	vadd.f64	d7, d8, d0
 8013f5e:	ec59 8b17 	vmov	r8, r9, d7
 8013f62:	e7e0      	b.n	8013f26 <_strtod_l+0x8f6>
 8013f64:	4013      	ands	r3, r2
 8013f66:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013f6a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8013f6e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8013f72:	f04f 38ff 	mov.w	r8, #4294967295
 8013f76:	e7d6      	b.n	8013f26 <_strtod_l+0x8f6>
 8013f78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f7a:	ea13 0f08 	tst.w	r3, r8
 8013f7e:	e7e3      	b.n	8013f48 <_strtod_l+0x918>
 8013f80:	f7ff fb3c 	bl	80135fc <sulp>
 8013f84:	ee38 0b40 	vsub.f64	d0, d8, d0
 8013f88:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8013f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f90:	ec59 8b10 	vmov	r8, r9, d0
 8013f94:	d1c7      	bne.n	8013f26 <_strtod_l+0x8f6>
 8013f96:	e5f8      	b.n	8013b8a <_strtod_l+0x55a>
 8013f98:	4631      	mov	r1, r6
 8013f9a:	4628      	mov	r0, r5
 8013f9c:	f7ff faba 	bl	8013514 <__ratio>
 8013fa0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8013fa4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fac:	d85f      	bhi.n	801406e <_strtod_l+0xa3e>
 8013fae:	f1ba 0f00 	cmp.w	sl, #0
 8013fb2:	d166      	bne.n	8014082 <_strtod_l+0xa52>
 8013fb4:	f1b8 0f00 	cmp.w	r8, #0
 8013fb8:	d14d      	bne.n	8014056 <_strtod_l+0xa26>
 8013fba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013fbe:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d162      	bne.n	801408c <_strtod_l+0xa5c>
 8013fc6:	eeb4 0bcd 	vcmpe.f64	d0, d13
 8013fca:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8013fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fd2:	d401      	bmi.n	8013fd8 <_strtod_l+0x9a8>
 8013fd4:	ee20 db0d 	vmul.f64	d13, d0, d13
 8013fd8:	eeb1 cb4d 	vneg.f64	d12, d13
 8013fdc:	4869      	ldr	r0, [pc, #420]	; (8014184 <_strtod_l+0xb54>)
 8013fde:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8014190 <_strtod_l+0xb60>
 8013fe2:	ea0b 0100 	and.w	r1, fp, r0
 8013fe6:	4561      	cmp	r1, ip
 8013fe8:	ec53 2b1c 	vmov	r2, r3, d12
 8013fec:	d17a      	bne.n	80140e4 <_strtod_l+0xab4>
 8013fee:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8013ff2:	ec49 8b10 	vmov	d0, r8, r9
 8013ff6:	910a      	str	r1, [sp, #40]	; 0x28
 8013ff8:	f7ff f9c2 	bl	8013380 <__ulp>
 8013ffc:	ec49 8b1e 	vmov	d14, r8, r9
 8014000:	4860      	ldr	r0, [pc, #384]	; (8014184 <_strtod_l+0xb54>)
 8014002:	eea0 eb0c 	vfma.f64	d14, d0, d12
 8014006:	ee1e 3a90 	vmov	r3, s29
 801400a:	4a60      	ldr	r2, [pc, #384]	; (801418c <_strtod_l+0xb5c>)
 801400c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801400e:	4018      	ands	r0, r3
 8014010:	4290      	cmp	r0, r2
 8014012:	ec59 8b1e 	vmov	r8, r9, d14
 8014016:	d93c      	bls.n	8014092 <_strtod_l+0xa62>
 8014018:	ee18 2a90 	vmov	r2, s17
 801401c:	4b5a      	ldr	r3, [pc, #360]	; (8014188 <_strtod_l+0xb58>)
 801401e:	429a      	cmp	r2, r3
 8014020:	d104      	bne.n	801402c <_strtod_l+0x9fc>
 8014022:	ee18 3a10 	vmov	r3, s16
 8014026:	3301      	adds	r3, #1
 8014028:	f43f ad40 	beq.w	8013aac <_strtod_l+0x47c>
 801402c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8014188 <_strtod_l+0xb58>
 8014030:	f04f 38ff 	mov.w	r8, #4294967295
 8014034:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014036:	4620      	mov	r0, r4
 8014038:	f7fe fe76 	bl	8012d28 <_Bfree>
 801403c:	4639      	mov	r1, r7
 801403e:	4620      	mov	r0, r4
 8014040:	f7fe fe72 	bl	8012d28 <_Bfree>
 8014044:	4631      	mov	r1, r6
 8014046:	4620      	mov	r0, r4
 8014048:	f7fe fe6e 	bl	8012d28 <_Bfree>
 801404c:	4629      	mov	r1, r5
 801404e:	4620      	mov	r0, r4
 8014050:	f7fe fe6a 	bl	8012d28 <_Bfree>
 8014054:	e609      	b.n	8013c6a <_strtod_l+0x63a>
 8014056:	f1b8 0f01 	cmp.w	r8, #1
 801405a:	d103      	bne.n	8014064 <_strtod_l+0xa34>
 801405c:	f1b9 0f00 	cmp.w	r9, #0
 8014060:	f43f ad93 	beq.w	8013b8a <_strtod_l+0x55a>
 8014064:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8014068:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801406c:	e7b6      	b.n	8013fdc <_strtod_l+0x9ac>
 801406e:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8014072:	ee20 db0d 	vmul.f64	d13, d0, d13
 8014076:	f1ba 0f00 	cmp.w	sl, #0
 801407a:	d0ad      	beq.n	8013fd8 <_strtod_l+0x9a8>
 801407c:	eeb0 cb4d 	vmov.f64	d12, d13
 8014080:	e7ac      	b.n	8013fdc <_strtod_l+0x9ac>
 8014082:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 8014086:	eeb0 db4c 	vmov.f64	d13, d12
 801408a:	e7a7      	b.n	8013fdc <_strtod_l+0x9ac>
 801408c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8014090:	e7a4      	b.n	8013fdc <_strtod_l+0x9ac>
 8014092:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8014096:	9b05      	ldr	r3, [sp, #20]
 8014098:	46cb      	mov	fp, r9
 801409a:	2b00      	cmp	r3, #0
 801409c:	d1ca      	bne.n	8014034 <_strtod_l+0xa04>
 801409e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80140a2:	0d1b      	lsrs	r3, r3, #20
 80140a4:	051b      	lsls	r3, r3, #20
 80140a6:	4299      	cmp	r1, r3
 80140a8:	d1c4      	bne.n	8014034 <_strtod_l+0xa04>
 80140aa:	ec51 0b1d 	vmov	r0, r1, d13
 80140ae:	f7ec fb5b 	bl	8000768 <__aeabi_d2lz>
 80140b2:	f7ec fb13 	bl	80006dc <__aeabi_l2d>
 80140b6:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 80140ba:	ec41 0b17 	vmov	d7, r0, r1
 80140be:	ea4b 0b08 	orr.w	fp, fp, r8
 80140c2:	ea5b 0b0a 	orrs.w	fp, fp, sl
 80140c6:	ee3d db47 	vsub.f64	d13, d13, d7
 80140ca:	d03c      	beq.n	8014146 <_strtod_l+0xb16>
 80140cc:	eeb4 dbca 	vcmpe.f64	d13, d10
 80140d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140d4:	f53f acf4 	bmi.w	8013ac0 <_strtod_l+0x490>
 80140d8:	eeb4 dbcb 	vcmpe.f64	d13, d11
 80140dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140e0:	dda8      	ble.n	8014034 <_strtod_l+0xa04>
 80140e2:	e4ed      	b.n	8013ac0 <_strtod_l+0x490>
 80140e4:	9805      	ldr	r0, [sp, #20]
 80140e6:	b1f0      	cbz	r0, 8014126 <_strtod_l+0xaf6>
 80140e8:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80140ec:	d81b      	bhi.n	8014126 <_strtod_l+0xaf6>
 80140ee:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8014178 <_strtod_l+0xb48>
 80140f2:	eeb4 dbc7 	vcmpe.f64	d13, d7
 80140f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140fa:	d811      	bhi.n	8014120 <_strtod_l+0xaf0>
 80140fc:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8014100:	ee1d 3a10 	vmov	r3, s26
 8014104:	2b01      	cmp	r3, #1
 8014106:	bf38      	it	cc
 8014108:	2301      	movcc	r3, #1
 801410a:	ee0d 3a10 	vmov	s26, r3
 801410e:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8014112:	f1ba 0f00 	cmp.w	sl, #0
 8014116:	d113      	bne.n	8014140 <_strtod_l+0xb10>
 8014118:	eeb1 7b4d 	vneg.f64	d7, d13
 801411c:	ec53 2b17 	vmov	r2, r3, d7
 8014120:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8014124:	1a43      	subs	r3, r0, r1
 8014126:	eeb0 0b48 	vmov.f64	d0, d8
 801412a:	ec43 2b1c 	vmov	d12, r2, r3
 801412e:	910a      	str	r1, [sp, #40]	; 0x28
 8014130:	f7ff f926 	bl	8013380 <__ulp>
 8014134:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014136:	eeac 8b00 	vfma.f64	d8, d12, d0
 801413a:	ec59 8b18 	vmov	r8, r9, d8
 801413e:	e7aa      	b.n	8014096 <_strtod_l+0xa66>
 8014140:	eeb0 7b4d 	vmov.f64	d7, d13
 8014144:	e7ea      	b.n	801411c <_strtod_l+0xaec>
 8014146:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801414a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801414e:	f57f af71 	bpl.w	8014034 <_strtod_l+0xa04>
 8014152:	e4b5      	b.n	8013ac0 <_strtod_l+0x490>
 8014154:	2300      	movs	r3, #0
 8014156:	9308      	str	r3, [sp, #32]
 8014158:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801415a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801415c:	6013      	str	r3, [r2, #0]
 801415e:	f7ff baa6 	b.w	80136ae <_strtod_l+0x7e>
 8014162:	2a65      	cmp	r2, #101	; 0x65
 8014164:	f43f aba2 	beq.w	80138ac <_strtod_l+0x27c>
 8014168:	2a45      	cmp	r2, #69	; 0x45
 801416a:	f43f ab9f 	beq.w	80138ac <_strtod_l+0x27c>
 801416e:	2101      	movs	r1, #1
 8014170:	f7ff bbd8 	b.w	8013924 <_strtod_l+0x2f4>
 8014174:	f3af 8000 	nop.w
 8014178:	ffc00000 	.word	0xffc00000
 801417c:	41dfffff 	.word	0x41dfffff
 8014180:	000fffff 	.word	0x000fffff
 8014184:	7ff00000 	.word	0x7ff00000
 8014188:	7fefffff 	.word	0x7fefffff
 801418c:	7c9fffff 	.word	0x7c9fffff
 8014190:	7fe00000 	.word	0x7fe00000

08014194 <_strtod_r>:
 8014194:	4b01      	ldr	r3, [pc, #4]	; (801419c <_strtod_r+0x8>)
 8014196:	f7ff ba4b 	b.w	8013630 <_strtod_l>
 801419a:	bf00      	nop
 801419c:	2400006c 	.word	0x2400006c

080141a0 <_strtol_l.constprop.0>:
 80141a0:	2b01      	cmp	r3, #1
 80141a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141a6:	d001      	beq.n	80141ac <_strtol_l.constprop.0+0xc>
 80141a8:	2b24      	cmp	r3, #36	; 0x24
 80141aa:	d906      	bls.n	80141ba <_strtol_l.constprop.0+0x1a>
 80141ac:	f7fd fe48 	bl	8011e40 <__errno>
 80141b0:	2316      	movs	r3, #22
 80141b2:	6003      	str	r3, [r0, #0]
 80141b4:	2000      	movs	r0, #0
 80141b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141ba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80142a0 <_strtol_l.constprop.0+0x100>
 80141be:	460d      	mov	r5, r1
 80141c0:	462e      	mov	r6, r5
 80141c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80141c6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80141ca:	f017 0708 	ands.w	r7, r7, #8
 80141ce:	d1f7      	bne.n	80141c0 <_strtol_l.constprop.0+0x20>
 80141d0:	2c2d      	cmp	r4, #45	; 0x2d
 80141d2:	d132      	bne.n	801423a <_strtol_l.constprop.0+0x9a>
 80141d4:	782c      	ldrb	r4, [r5, #0]
 80141d6:	2701      	movs	r7, #1
 80141d8:	1cb5      	adds	r5, r6, #2
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d05b      	beq.n	8014296 <_strtol_l.constprop.0+0xf6>
 80141de:	2b10      	cmp	r3, #16
 80141e0:	d109      	bne.n	80141f6 <_strtol_l.constprop.0+0x56>
 80141e2:	2c30      	cmp	r4, #48	; 0x30
 80141e4:	d107      	bne.n	80141f6 <_strtol_l.constprop.0+0x56>
 80141e6:	782c      	ldrb	r4, [r5, #0]
 80141e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80141ec:	2c58      	cmp	r4, #88	; 0x58
 80141ee:	d14d      	bne.n	801428c <_strtol_l.constprop.0+0xec>
 80141f0:	786c      	ldrb	r4, [r5, #1]
 80141f2:	2310      	movs	r3, #16
 80141f4:	3502      	adds	r5, #2
 80141f6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80141fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80141fe:	f04f 0e00 	mov.w	lr, #0
 8014202:	fbb8 f9f3 	udiv	r9, r8, r3
 8014206:	4676      	mov	r6, lr
 8014208:	fb03 8a19 	mls	sl, r3, r9, r8
 801420c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8014210:	f1bc 0f09 	cmp.w	ip, #9
 8014214:	d816      	bhi.n	8014244 <_strtol_l.constprop.0+0xa4>
 8014216:	4664      	mov	r4, ip
 8014218:	42a3      	cmp	r3, r4
 801421a:	dd24      	ble.n	8014266 <_strtol_l.constprop.0+0xc6>
 801421c:	f1be 3fff 	cmp.w	lr, #4294967295
 8014220:	d008      	beq.n	8014234 <_strtol_l.constprop.0+0x94>
 8014222:	45b1      	cmp	r9, r6
 8014224:	d31c      	bcc.n	8014260 <_strtol_l.constprop.0+0xc0>
 8014226:	d101      	bne.n	801422c <_strtol_l.constprop.0+0x8c>
 8014228:	45a2      	cmp	sl, r4
 801422a:	db19      	blt.n	8014260 <_strtol_l.constprop.0+0xc0>
 801422c:	fb06 4603 	mla	r6, r6, r3, r4
 8014230:	f04f 0e01 	mov.w	lr, #1
 8014234:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014238:	e7e8      	b.n	801420c <_strtol_l.constprop.0+0x6c>
 801423a:	2c2b      	cmp	r4, #43	; 0x2b
 801423c:	bf04      	itt	eq
 801423e:	782c      	ldrbeq	r4, [r5, #0]
 8014240:	1cb5      	addeq	r5, r6, #2
 8014242:	e7ca      	b.n	80141da <_strtol_l.constprop.0+0x3a>
 8014244:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014248:	f1bc 0f19 	cmp.w	ip, #25
 801424c:	d801      	bhi.n	8014252 <_strtol_l.constprop.0+0xb2>
 801424e:	3c37      	subs	r4, #55	; 0x37
 8014250:	e7e2      	b.n	8014218 <_strtol_l.constprop.0+0x78>
 8014252:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8014256:	f1bc 0f19 	cmp.w	ip, #25
 801425a:	d804      	bhi.n	8014266 <_strtol_l.constprop.0+0xc6>
 801425c:	3c57      	subs	r4, #87	; 0x57
 801425e:	e7db      	b.n	8014218 <_strtol_l.constprop.0+0x78>
 8014260:	f04f 3eff 	mov.w	lr, #4294967295
 8014264:	e7e6      	b.n	8014234 <_strtol_l.constprop.0+0x94>
 8014266:	f1be 3fff 	cmp.w	lr, #4294967295
 801426a:	d105      	bne.n	8014278 <_strtol_l.constprop.0+0xd8>
 801426c:	2322      	movs	r3, #34	; 0x22
 801426e:	6003      	str	r3, [r0, #0]
 8014270:	4646      	mov	r6, r8
 8014272:	b942      	cbnz	r2, 8014286 <_strtol_l.constprop.0+0xe6>
 8014274:	4630      	mov	r0, r6
 8014276:	e79e      	b.n	80141b6 <_strtol_l.constprop.0+0x16>
 8014278:	b107      	cbz	r7, 801427c <_strtol_l.constprop.0+0xdc>
 801427a:	4276      	negs	r6, r6
 801427c:	2a00      	cmp	r2, #0
 801427e:	d0f9      	beq.n	8014274 <_strtol_l.constprop.0+0xd4>
 8014280:	f1be 0f00 	cmp.w	lr, #0
 8014284:	d000      	beq.n	8014288 <_strtol_l.constprop.0+0xe8>
 8014286:	1e69      	subs	r1, r5, #1
 8014288:	6011      	str	r1, [r2, #0]
 801428a:	e7f3      	b.n	8014274 <_strtol_l.constprop.0+0xd4>
 801428c:	2430      	movs	r4, #48	; 0x30
 801428e:	2b00      	cmp	r3, #0
 8014290:	d1b1      	bne.n	80141f6 <_strtol_l.constprop.0+0x56>
 8014292:	2308      	movs	r3, #8
 8014294:	e7af      	b.n	80141f6 <_strtol_l.constprop.0+0x56>
 8014296:	2c30      	cmp	r4, #48	; 0x30
 8014298:	d0a5      	beq.n	80141e6 <_strtol_l.constprop.0+0x46>
 801429a:	230a      	movs	r3, #10
 801429c:	e7ab      	b.n	80141f6 <_strtol_l.constprop.0+0x56>
 801429e:	bf00      	nop
 80142a0:	08015989 	.word	0x08015989

080142a4 <_strtol_r>:
 80142a4:	f7ff bf7c 	b.w	80141a0 <_strtol_l.constprop.0>

080142a8 <__ssputs_r>:
 80142a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142ac:	688e      	ldr	r6, [r1, #8]
 80142ae:	461f      	mov	r7, r3
 80142b0:	42be      	cmp	r6, r7
 80142b2:	680b      	ldr	r3, [r1, #0]
 80142b4:	4682      	mov	sl, r0
 80142b6:	460c      	mov	r4, r1
 80142b8:	4690      	mov	r8, r2
 80142ba:	d82c      	bhi.n	8014316 <__ssputs_r+0x6e>
 80142bc:	898a      	ldrh	r2, [r1, #12]
 80142be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80142c2:	d026      	beq.n	8014312 <__ssputs_r+0x6a>
 80142c4:	6965      	ldr	r5, [r4, #20]
 80142c6:	6909      	ldr	r1, [r1, #16]
 80142c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80142cc:	eba3 0901 	sub.w	r9, r3, r1
 80142d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80142d4:	1c7b      	adds	r3, r7, #1
 80142d6:	444b      	add	r3, r9
 80142d8:	106d      	asrs	r5, r5, #1
 80142da:	429d      	cmp	r5, r3
 80142dc:	bf38      	it	cc
 80142de:	461d      	movcc	r5, r3
 80142e0:	0553      	lsls	r3, r2, #21
 80142e2:	d527      	bpl.n	8014334 <__ssputs_r+0x8c>
 80142e4:	4629      	mov	r1, r5
 80142e6:	f7fe fc53 	bl	8012b90 <_malloc_r>
 80142ea:	4606      	mov	r6, r0
 80142ec:	b360      	cbz	r0, 8014348 <__ssputs_r+0xa0>
 80142ee:	6921      	ldr	r1, [r4, #16]
 80142f0:	464a      	mov	r2, r9
 80142f2:	f7fd fdd1 	bl	8011e98 <memcpy>
 80142f6:	89a3      	ldrh	r3, [r4, #12]
 80142f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80142fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014300:	81a3      	strh	r3, [r4, #12]
 8014302:	6126      	str	r6, [r4, #16]
 8014304:	6165      	str	r5, [r4, #20]
 8014306:	444e      	add	r6, r9
 8014308:	eba5 0509 	sub.w	r5, r5, r9
 801430c:	6026      	str	r6, [r4, #0]
 801430e:	60a5      	str	r5, [r4, #8]
 8014310:	463e      	mov	r6, r7
 8014312:	42be      	cmp	r6, r7
 8014314:	d900      	bls.n	8014318 <__ssputs_r+0x70>
 8014316:	463e      	mov	r6, r7
 8014318:	6820      	ldr	r0, [r4, #0]
 801431a:	4632      	mov	r2, r6
 801431c:	4641      	mov	r1, r8
 801431e:	f000 f9c9 	bl	80146b4 <memmove>
 8014322:	68a3      	ldr	r3, [r4, #8]
 8014324:	1b9b      	subs	r3, r3, r6
 8014326:	60a3      	str	r3, [r4, #8]
 8014328:	6823      	ldr	r3, [r4, #0]
 801432a:	4433      	add	r3, r6
 801432c:	6023      	str	r3, [r4, #0]
 801432e:	2000      	movs	r0, #0
 8014330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014334:	462a      	mov	r2, r5
 8014336:	f000 fda0 	bl	8014e7a <_realloc_r>
 801433a:	4606      	mov	r6, r0
 801433c:	2800      	cmp	r0, #0
 801433e:	d1e0      	bne.n	8014302 <__ssputs_r+0x5a>
 8014340:	6921      	ldr	r1, [r4, #16]
 8014342:	4650      	mov	r0, sl
 8014344:	f7fe fbb0 	bl	8012aa8 <_free_r>
 8014348:	230c      	movs	r3, #12
 801434a:	f8ca 3000 	str.w	r3, [sl]
 801434e:	89a3      	ldrh	r3, [r4, #12]
 8014350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014354:	81a3      	strh	r3, [r4, #12]
 8014356:	f04f 30ff 	mov.w	r0, #4294967295
 801435a:	e7e9      	b.n	8014330 <__ssputs_r+0x88>

0801435c <_svfiprintf_r>:
 801435c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014360:	4698      	mov	r8, r3
 8014362:	898b      	ldrh	r3, [r1, #12]
 8014364:	061b      	lsls	r3, r3, #24
 8014366:	b09d      	sub	sp, #116	; 0x74
 8014368:	4607      	mov	r7, r0
 801436a:	460d      	mov	r5, r1
 801436c:	4614      	mov	r4, r2
 801436e:	d50e      	bpl.n	801438e <_svfiprintf_r+0x32>
 8014370:	690b      	ldr	r3, [r1, #16]
 8014372:	b963      	cbnz	r3, 801438e <_svfiprintf_r+0x32>
 8014374:	2140      	movs	r1, #64	; 0x40
 8014376:	f7fe fc0b 	bl	8012b90 <_malloc_r>
 801437a:	6028      	str	r0, [r5, #0]
 801437c:	6128      	str	r0, [r5, #16]
 801437e:	b920      	cbnz	r0, 801438a <_svfiprintf_r+0x2e>
 8014380:	230c      	movs	r3, #12
 8014382:	603b      	str	r3, [r7, #0]
 8014384:	f04f 30ff 	mov.w	r0, #4294967295
 8014388:	e0d0      	b.n	801452c <_svfiprintf_r+0x1d0>
 801438a:	2340      	movs	r3, #64	; 0x40
 801438c:	616b      	str	r3, [r5, #20]
 801438e:	2300      	movs	r3, #0
 8014390:	9309      	str	r3, [sp, #36]	; 0x24
 8014392:	2320      	movs	r3, #32
 8014394:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014398:	f8cd 800c 	str.w	r8, [sp, #12]
 801439c:	2330      	movs	r3, #48	; 0x30
 801439e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8014544 <_svfiprintf_r+0x1e8>
 80143a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80143a6:	f04f 0901 	mov.w	r9, #1
 80143aa:	4623      	mov	r3, r4
 80143ac:	469a      	mov	sl, r3
 80143ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80143b2:	b10a      	cbz	r2, 80143b8 <_svfiprintf_r+0x5c>
 80143b4:	2a25      	cmp	r2, #37	; 0x25
 80143b6:	d1f9      	bne.n	80143ac <_svfiprintf_r+0x50>
 80143b8:	ebba 0b04 	subs.w	fp, sl, r4
 80143bc:	d00b      	beq.n	80143d6 <_svfiprintf_r+0x7a>
 80143be:	465b      	mov	r3, fp
 80143c0:	4622      	mov	r2, r4
 80143c2:	4629      	mov	r1, r5
 80143c4:	4638      	mov	r0, r7
 80143c6:	f7ff ff6f 	bl	80142a8 <__ssputs_r>
 80143ca:	3001      	adds	r0, #1
 80143cc:	f000 80a9 	beq.w	8014522 <_svfiprintf_r+0x1c6>
 80143d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80143d2:	445a      	add	r2, fp
 80143d4:	9209      	str	r2, [sp, #36]	; 0x24
 80143d6:	f89a 3000 	ldrb.w	r3, [sl]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	f000 80a1 	beq.w	8014522 <_svfiprintf_r+0x1c6>
 80143e0:	2300      	movs	r3, #0
 80143e2:	f04f 32ff 	mov.w	r2, #4294967295
 80143e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80143ea:	f10a 0a01 	add.w	sl, sl, #1
 80143ee:	9304      	str	r3, [sp, #16]
 80143f0:	9307      	str	r3, [sp, #28]
 80143f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80143f6:	931a      	str	r3, [sp, #104]	; 0x68
 80143f8:	4654      	mov	r4, sl
 80143fa:	2205      	movs	r2, #5
 80143fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014400:	4850      	ldr	r0, [pc, #320]	; (8014544 <_svfiprintf_r+0x1e8>)
 8014402:	f7eb ff85 	bl	8000310 <memchr>
 8014406:	9a04      	ldr	r2, [sp, #16]
 8014408:	b9d8      	cbnz	r0, 8014442 <_svfiprintf_r+0xe6>
 801440a:	06d0      	lsls	r0, r2, #27
 801440c:	bf44      	itt	mi
 801440e:	2320      	movmi	r3, #32
 8014410:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014414:	0711      	lsls	r1, r2, #28
 8014416:	bf44      	itt	mi
 8014418:	232b      	movmi	r3, #43	; 0x2b
 801441a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801441e:	f89a 3000 	ldrb.w	r3, [sl]
 8014422:	2b2a      	cmp	r3, #42	; 0x2a
 8014424:	d015      	beq.n	8014452 <_svfiprintf_r+0xf6>
 8014426:	9a07      	ldr	r2, [sp, #28]
 8014428:	4654      	mov	r4, sl
 801442a:	2000      	movs	r0, #0
 801442c:	f04f 0c0a 	mov.w	ip, #10
 8014430:	4621      	mov	r1, r4
 8014432:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014436:	3b30      	subs	r3, #48	; 0x30
 8014438:	2b09      	cmp	r3, #9
 801443a:	d94d      	bls.n	80144d8 <_svfiprintf_r+0x17c>
 801443c:	b1b0      	cbz	r0, 801446c <_svfiprintf_r+0x110>
 801443e:	9207      	str	r2, [sp, #28]
 8014440:	e014      	b.n	801446c <_svfiprintf_r+0x110>
 8014442:	eba0 0308 	sub.w	r3, r0, r8
 8014446:	fa09 f303 	lsl.w	r3, r9, r3
 801444a:	4313      	orrs	r3, r2
 801444c:	9304      	str	r3, [sp, #16]
 801444e:	46a2      	mov	sl, r4
 8014450:	e7d2      	b.n	80143f8 <_svfiprintf_r+0x9c>
 8014452:	9b03      	ldr	r3, [sp, #12]
 8014454:	1d19      	adds	r1, r3, #4
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	9103      	str	r1, [sp, #12]
 801445a:	2b00      	cmp	r3, #0
 801445c:	bfbb      	ittet	lt
 801445e:	425b      	neglt	r3, r3
 8014460:	f042 0202 	orrlt.w	r2, r2, #2
 8014464:	9307      	strge	r3, [sp, #28]
 8014466:	9307      	strlt	r3, [sp, #28]
 8014468:	bfb8      	it	lt
 801446a:	9204      	strlt	r2, [sp, #16]
 801446c:	7823      	ldrb	r3, [r4, #0]
 801446e:	2b2e      	cmp	r3, #46	; 0x2e
 8014470:	d10c      	bne.n	801448c <_svfiprintf_r+0x130>
 8014472:	7863      	ldrb	r3, [r4, #1]
 8014474:	2b2a      	cmp	r3, #42	; 0x2a
 8014476:	d134      	bne.n	80144e2 <_svfiprintf_r+0x186>
 8014478:	9b03      	ldr	r3, [sp, #12]
 801447a:	1d1a      	adds	r2, r3, #4
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	9203      	str	r2, [sp, #12]
 8014480:	2b00      	cmp	r3, #0
 8014482:	bfb8      	it	lt
 8014484:	f04f 33ff 	movlt.w	r3, #4294967295
 8014488:	3402      	adds	r4, #2
 801448a:	9305      	str	r3, [sp, #20]
 801448c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8014554 <_svfiprintf_r+0x1f8>
 8014490:	7821      	ldrb	r1, [r4, #0]
 8014492:	2203      	movs	r2, #3
 8014494:	4650      	mov	r0, sl
 8014496:	f7eb ff3b 	bl	8000310 <memchr>
 801449a:	b138      	cbz	r0, 80144ac <_svfiprintf_r+0x150>
 801449c:	9b04      	ldr	r3, [sp, #16]
 801449e:	eba0 000a 	sub.w	r0, r0, sl
 80144a2:	2240      	movs	r2, #64	; 0x40
 80144a4:	4082      	lsls	r2, r0
 80144a6:	4313      	orrs	r3, r2
 80144a8:	3401      	adds	r4, #1
 80144aa:	9304      	str	r3, [sp, #16]
 80144ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144b0:	4825      	ldr	r0, [pc, #148]	; (8014548 <_svfiprintf_r+0x1ec>)
 80144b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80144b6:	2206      	movs	r2, #6
 80144b8:	f7eb ff2a 	bl	8000310 <memchr>
 80144bc:	2800      	cmp	r0, #0
 80144be:	d038      	beq.n	8014532 <_svfiprintf_r+0x1d6>
 80144c0:	4b22      	ldr	r3, [pc, #136]	; (801454c <_svfiprintf_r+0x1f0>)
 80144c2:	bb1b      	cbnz	r3, 801450c <_svfiprintf_r+0x1b0>
 80144c4:	9b03      	ldr	r3, [sp, #12]
 80144c6:	3307      	adds	r3, #7
 80144c8:	f023 0307 	bic.w	r3, r3, #7
 80144cc:	3308      	adds	r3, #8
 80144ce:	9303      	str	r3, [sp, #12]
 80144d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144d2:	4433      	add	r3, r6
 80144d4:	9309      	str	r3, [sp, #36]	; 0x24
 80144d6:	e768      	b.n	80143aa <_svfiprintf_r+0x4e>
 80144d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80144dc:	460c      	mov	r4, r1
 80144de:	2001      	movs	r0, #1
 80144e0:	e7a6      	b.n	8014430 <_svfiprintf_r+0xd4>
 80144e2:	2300      	movs	r3, #0
 80144e4:	3401      	adds	r4, #1
 80144e6:	9305      	str	r3, [sp, #20]
 80144e8:	4619      	mov	r1, r3
 80144ea:	f04f 0c0a 	mov.w	ip, #10
 80144ee:	4620      	mov	r0, r4
 80144f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80144f4:	3a30      	subs	r2, #48	; 0x30
 80144f6:	2a09      	cmp	r2, #9
 80144f8:	d903      	bls.n	8014502 <_svfiprintf_r+0x1a6>
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d0c6      	beq.n	801448c <_svfiprintf_r+0x130>
 80144fe:	9105      	str	r1, [sp, #20]
 8014500:	e7c4      	b.n	801448c <_svfiprintf_r+0x130>
 8014502:	fb0c 2101 	mla	r1, ip, r1, r2
 8014506:	4604      	mov	r4, r0
 8014508:	2301      	movs	r3, #1
 801450a:	e7f0      	b.n	80144ee <_svfiprintf_r+0x192>
 801450c:	ab03      	add	r3, sp, #12
 801450e:	9300      	str	r3, [sp, #0]
 8014510:	462a      	mov	r2, r5
 8014512:	4b0f      	ldr	r3, [pc, #60]	; (8014550 <_svfiprintf_r+0x1f4>)
 8014514:	a904      	add	r1, sp, #16
 8014516:	4638      	mov	r0, r7
 8014518:	f7fc fd7e 	bl	8011018 <_printf_float>
 801451c:	1c42      	adds	r2, r0, #1
 801451e:	4606      	mov	r6, r0
 8014520:	d1d6      	bne.n	80144d0 <_svfiprintf_r+0x174>
 8014522:	89ab      	ldrh	r3, [r5, #12]
 8014524:	065b      	lsls	r3, r3, #25
 8014526:	f53f af2d 	bmi.w	8014384 <_svfiprintf_r+0x28>
 801452a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801452c:	b01d      	add	sp, #116	; 0x74
 801452e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014532:	ab03      	add	r3, sp, #12
 8014534:	9300      	str	r3, [sp, #0]
 8014536:	462a      	mov	r2, r5
 8014538:	4b05      	ldr	r3, [pc, #20]	; (8014550 <_svfiprintf_r+0x1f4>)
 801453a:	a904      	add	r1, sp, #16
 801453c:	4638      	mov	r0, r7
 801453e:	f7fc fff3 	bl	8011528 <_printf_i>
 8014542:	e7eb      	b.n	801451c <_svfiprintf_r+0x1c0>
 8014544:	08015a89 	.word	0x08015a89
 8014548:	08015a93 	.word	0x08015a93
 801454c:	08011019 	.word	0x08011019
 8014550:	080142a9 	.word	0x080142a9
 8014554:	08015a8f 	.word	0x08015a8f

08014558 <__sflush_r>:
 8014558:	898a      	ldrh	r2, [r1, #12]
 801455a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801455e:	4605      	mov	r5, r0
 8014560:	0710      	lsls	r0, r2, #28
 8014562:	460c      	mov	r4, r1
 8014564:	d458      	bmi.n	8014618 <__sflush_r+0xc0>
 8014566:	684b      	ldr	r3, [r1, #4]
 8014568:	2b00      	cmp	r3, #0
 801456a:	dc05      	bgt.n	8014578 <__sflush_r+0x20>
 801456c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801456e:	2b00      	cmp	r3, #0
 8014570:	dc02      	bgt.n	8014578 <__sflush_r+0x20>
 8014572:	2000      	movs	r0, #0
 8014574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014578:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801457a:	2e00      	cmp	r6, #0
 801457c:	d0f9      	beq.n	8014572 <__sflush_r+0x1a>
 801457e:	2300      	movs	r3, #0
 8014580:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014584:	682f      	ldr	r7, [r5, #0]
 8014586:	6a21      	ldr	r1, [r4, #32]
 8014588:	602b      	str	r3, [r5, #0]
 801458a:	d032      	beq.n	80145f2 <__sflush_r+0x9a>
 801458c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801458e:	89a3      	ldrh	r3, [r4, #12]
 8014590:	075a      	lsls	r2, r3, #29
 8014592:	d505      	bpl.n	80145a0 <__sflush_r+0x48>
 8014594:	6863      	ldr	r3, [r4, #4]
 8014596:	1ac0      	subs	r0, r0, r3
 8014598:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801459a:	b10b      	cbz	r3, 80145a0 <__sflush_r+0x48>
 801459c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801459e:	1ac0      	subs	r0, r0, r3
 80145a0:	2300      	movs	r3, #0
 80145a2:	4602      	mov	r2, r0
 80145a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80145a6:	6a21      	ldr	r1, [r4, #32]
 80145a8:	4628      	mov	r0, r5
 80145aa:	47b0      	blx	r6
 80145ac:	1c43      	adds	r3, r0, #1
 80145ae:	89a3      	ldrh	r3, [r4, #12]
 80145b0:	d106      	bne.n	80145c0 <__sflush_r+0x68>
 80145b2:	6829      	ldr	r1, [r5, #0]
 80145b4:	291d      	cmp	r1, #29
 80145b6:	d82b      	bhi.n	8014610 <__sflush_r+0xb8>
 80145b8:	4a29      	ldr	r2, [pc, #164]	; (8014660 <__sflush_r+0x108>)
 80145ba:	410a      	asrs	r2, r1
 80145bc:	07d6      	lsls	r6, r2, #31
 80145be:	d427      	bmi.n	8014610 <__sflush_r+0xb8>
 80145c0:	2200      	movs	r2, #0
 80145c2:	6062      	str	r2, [r4, #4]
 80145c4:	04d9      	lsls	r1, r3, #19
 80145c6:	6922      	ldr	r2, [r4, #16]
 80145c8:	6022      	str	r2, [r4, #0]
 80145ca:	d504      	bpl.n	80145d6 <__sflush_r+0x7e>
 80145cc:	1c42      	adds	r2, r0, #1
 80145ce:	d101      	bne.n	80145d4 <__sflush_r+0x7c>
 80145d0:	682b      	ldr	r3, [r5, #0]
 80145d2:	b903      	cbnz	r3, 80145d6 <__sflush_r+0x7e>
 80145d4:	6560      	str	r0, [r4, #84]	; 0x54
 80145d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80145d8:	602f      	str	r7, [r5, #0]
 80145da:	2900      	cmp	r1, #0
 80145dc:	d0c9      	beq.n	8014572 <__sflush_r+0x1a>
 80145de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80145e2:	4299      	cmp	r1, r3
 80145e4:	d002      	beq.n	80145ec <__sflush_r+0x94>
 80145e6:	4628      	mov	r0, r5
 80145e8:	f7fe fa5e 	bl	8012aa8 <_free_r>
 80145ec:	2000      	movs	r0, #0
 80145ee:	6360      	str	r0, [r4, #52]	; 0x34
 80145f0:	e7c0      	b.n	8014574 <__sflush_r+0x1c>
 80145f2:	2301      	movs	r3, #1
 80145f4:	4628      	mov	r0, r5
 80145f6:	47b0      	blx	r6
 80145f8:	1c41      	adds	r1, r0, #1
 80145fa:	d1c8      	bne.n	801458e <__sflush_r+0x36>
 80145fc:	682b      	ldr	r3, [r5, #0]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d0c5      	beq.n	801458e <__sflush_r+0x36>
 8014602:	2b1d      	cmp	r3, #29
 8014604:	d001      	beq.n	801460a <__sflush_r+0xb2>
 8014606:	2b16      	cmp	r3, #22
 8014608:	d101      	bne.n	801460e <__sflush_r+0xb6>
 801460a:	602f      	str	r7, [r5, #0]
 801460c:	e7b1      	b.n	8014572 <__sflush_r+0x1a>
 801460e:	89a3      	ldrh	r3, [r4, #12]
 8014610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014614:	81a3      	strh	r3, [r4, #12]
 8014616:	e7ad      	b.n	8014574 <__sflush_r+0x1c>
 8014618:	690f      	ldr	r7, [r1, #16]
 801461a:	2f00      	cmp	r7, #0
 801461c:	d0a9      	beq.n	8014572 <__sflush_r+0x1a>
 801461e:	0793      	lsls	r3, r2, #30
 8014620:	680e      	ldr	r6, [r1, #0]
 8014622:	bf08      	it	eq
 8014624:	694b      	ldreq	r3, [r1, #20]
 8014626:	600f      	str	r7, [r1, #0]
 8014628:	bf18      	it	ne
 801462a:	2300      	movne	r3, #0
 801462c:	eba6 0807 	sub.w	r8, r6, r7
 8014630:	608b      	str	r3, [r1, #8]
 8014632:	f1b8 0f00 	cmp.w	r8, #0
 8014636:	dd9c      	ble.n	8014572 <__sflush_r+0x1a>
 8014638:	6a21      	ldr	r1, [r4, #32]
 801463a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801463c:	4643      	mov	r3, r8
 801463e:	463a      	mov	r2, r7
 8014640:	4628      	mov	r0, r5
 8014642:	47b0      	blx	r6
 8014644:	2800      	cmp	r0, #0
 8014646:	dc06      	bgt.n	8014656 <__sflush_r+0xfe>
 8014648:	89a3      	ldrh	r3, [r4, #12]
 801464a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801464e:	81a3      	strh	r3, [r4, #12]
 8014650:	f04f 30ff 	mov.w	r0, #4294967295
 8014654:	e78e      	b.n	8014574 <__sflush_r+0x1c>
 8014656:	4407      	add	r7, r0
 8014658:	eba8 0800 	sub.w	r8, r8, r0
 801465c:	e7e9      	b.n	8014632 <__sflush_r+0xda>
 801465e:	bf00      	nop
 8014660:	dfbffffe 	.word	0xdfbffffe

08014664 <_fflush_r>:
 8014664:	b538      	push	{r3, r4, r5, lr}
 8014666:	690b      	ldr	r3, [r1, #16]
 8014668:	4605      	mov	r5, r0
 801466a:	460c      	mov	r4, r1
 801466c:	b913      	cbnz	r3, 8014674 <_fflush_r+0x10>
 801466e:	2500      	movs	r5, #0
 8014670:	4628      	mov	r0, r5
 8014672:	bd38      	pop	{r3, r4, r5, pc}
 8014674:	b118      	cbz	r0, 801467e <_fflush_r+0x1a>
 8014676:	6a03      	ldr	r3, [r0, #32]
 8014678:	b90b      	cbnz	r3, 801467e <_fflush_r+0x1a>
 801467a:	f7fd faf5 	bl	8011c68 <__sinit>
 801467e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014682:	2b00      	cmp	r3, #0
 8014684:	d0f3      	beq.n	801466e <_fflush_r+0xa>
 8014686:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014688:	07d0      	lsls	r0, r2, #31
 801468a:	d404      	bmi.n	8014696 <_fflush_r+0x32>
 801468c:	0599      	lsls	r1, r3, #22
 801468e:	d402      	bmi.n	8014696 <_fflush_r+0x32>
 8014690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014692:	f7fd fbff 	bl	8011e94 <__retarget_lock_acquire_recursive>
 8014696:	4628      	mov	r0, r5
 8014698:	4621      	mov	r1, r4
 801469a:	f7ff ff5d 	bl	8014558 <__sflush_r>
 801469e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80146a0:	07da      	lsls	r2, r3, #31
 80146a2:	4605      	mov	r5, r0
 80146a4:	d4e4      	bmi.n	8014670 <_fflush_r+0xc>
 80146a6:	89a3      	ldrh	r3, [r4, #12]
 80146a8:	059b      	lsls	r3, r3, #22
 80146aa:	d4e1      	bmi.n	8014670 <_fflush_r+0xc>
 80146ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80146ae:	f7fd fbf2 	bl	8011e96 <__retarget_lock_release_recursive>
 80146b2:	e7dd      	b.n	8014670 <_fflush_r+0xc>

080146b4 <memmove>:
 80146b4:	4288      	cmp	r0, r1
 80146b6:	b510      	push	{r4, lr}
 80146b8:	eb01 0402 	add.w	r4, r1, r2
 80146bc:	d902      	bls.n	80146c4 <memmove+0x10>
 80146be:	4284      	cmp	r4, r0
 80146c0:	4623      	mov	r3, r4
 80146c2:	d807      	bhi.n	80146d4 <memmove+0x20>
 80146c4:	1e43      	subs	r3, r0, #1
 80146c6:	42a1      	cmp	r1, r4
 80146c8:	d008      	beq.n	80146dc <memmove+0x28>
 80146ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80146ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80146d2:	e7f8      	b.n	80146c6 <memmove+0x12>
 80146d4:	4402      	add	r2, r0
 80146d6:	4601      	mov	r1, r0
 80146d8:	428a      	cmp	r2, r1
 80146da:	d100      	bne.n	80146de <memmove+0x2a>
 80146dc:	bd10      	pop	{r4, pc}
 80146de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80146e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80146e6:	e7f7      	b.n	80146d8 <memmove+0x24>

080146e8 <strncmp>:
 80146e8:	b510      	push	{r4, lr}
 80146ea:	b16a      	cbz	r2, 8014708 <strncmp+0x20>
 80146ec:	3901      	subs	r1, #1
 80146ee:	1884      	adds	r4, r0, r2
 80146f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80146f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80146f8:	429a      	cmp	r2, r3
 80146fa:	d103      	bne.n	8014704 <strncmp+0x1c>
 80146fc:	42a0      	cmp	r0, r4
 80146fe:	d001      	beq.n	8014704 <strncmp+0x1c>
 8014700:	2a00      	cmp	r2, #0
 8014702:	d1f5      	bne.n	80146f0 <strncmp+0x8>
 8014704:	1ad0      	subs	r0, r2, r3
 8014706:	bd10      	pop	{r4, pc}
 8014708:	4610      	mov	r0, r2
 801470a:	e7fc      	b.n	8014706 <strncmp+0x1e>

0801470c <_sbrk_r>:
 801470c:	b538      	push	{r3, r4, r5, lr}
 801470e:	4d06      	ldr	r5, [pc, #24]	; (8014728 <_sbrk_r+0x1c>)
 8014710:	2300      	movs	r3, #0
 8014712:	4604      	mov	r4, r0
 8014714:	4608      	mov	r0, r1
 8014716:	602b      	str	r3, [r5, #0]
 8014718:	f7ef f804 	bl	8003724 <_sbrk>
 801471c:	1c43      	adds	r3, r0, #1
 801471e:	d102      	bne.n	8014726 <_sbrk_r+0x1a>
 8014720:	682b      	ldr	r3, [r5, #0]
 8014722:	b103      	cbz	r3, 8014726 <_sbrk_r+0x1a>
 8014724:	6023      	str	r3, [r4, #0]
 8014726:	bd38      	pop	{r3, r4, r5, pc}
 8014728:	24000f3c 	.word	0x24000f3c
 801472c:	00000000 	.word	0x00000000

08014730 <nan>:
 8014730:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014738 <nan+0x8>
 8014734:	4770      	bx	lr
 8014736:	bf00      	nop
 8014738:	00000000 	.word	0x00000000
 801473c:	7ff80000 	.word	0x7ff80000

08014740 <__assert_func>:
 8014740:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014742:	4614      	mov	r4, r2
 8014744:	461a      	mov	r2, r3
 8014746:	4b09      	ldr	r3, [pc, #36]	; (801476c <__assert_func+0x2c>)
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	4605      	mov	r5, r0
 801474c:	68d8      	ldr	r0, [r3, #12]
 801474e:	b14c      	cbz	r4, 8014764 <__assert_func+0x24>
 8014750:	4b07      	ldr	r3, [pc, #28]	; (8014770 <__assert_func+0x30>)
 8014752:	9100      	str	r1, [sp, #0]
 8014754:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014758:	4906      	ldr	r1, [pc, #24]	; (8014774 <__assert_func+0x34>)
 801475a:	462b      	mov	r3, r5
 801475c:	f000 fbca 	bl	8014ef4 <fiprintf>
 8014760:	f000 fbda 	bl	8014f18 <abort>
 8014764:	4b04      	ldr	r3, [pc, #16]	; (8014778 <__assert_func+0x38>)
 8014766:	461c      	mov	r4, r3
 8014768:	e7f3      	b.n	8014752 <__assert_func+0x12>
 801476a:	bf00      	nop
 801476c:	24000068 	.word	0x24000068
 8014770:	08015aa2 	.word	0x08015aa2
 8014774:	08015aaf 	.word	0x08015aaf
 8014778:	08015add 	.word	0x08015add

0801477c <_calloc_r>:
 801477c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801477e:	fba1 2402 	umull	r2, r4, r1, r2
 8014782:	b94c      	cbnz	r4, 8014798 <_calloc_r+0x1c>
 8014784:	4611      	mov	r1, r2
 8014786:	9201      	str	r2, [sp, #4]
 8014788:	f7fe fa02 	bl	8012b90 <_malloc_r>
 801478c:	9a01      	ldr	r2, [sp, #4]
 801478e:	4605      	mov	r5, r0
 8014790:	b930      	cbnz	r0, 80147a0 <_calloc_r+0x24>
 8014792:	4628      	mov	r0, r5
 8014794:	b003      	add	sp, #12
 8014796:	bd30      	pop	{r4, r5, pc}
 8014798:	220c      	movs	r2, #12
 801479a:	6002      	str	r2, [r0, #0]
 801479c:	2500      	movs	r5, #0
 801479e:	e7f8      	b.n	8014792 <_calloc_r+0x16>
 80147a0:	4621      	mov	r1, r4
 80147a2:	f7fd fafa 	bl	8011d9a <memset>
 80147a6:	e7f4      	b.n	8014792 <_calloc_r+0x16>

080147a8 <rshift>:
 80147a8:	6903      	ldr	r3, [r0, #16]
 80147aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80147ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80147b2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80147b6:	f100 0414 	add.w	r4, r0, #20
 80147ba:	dd45      	ble.n	8014848 <rshift+0xa0>
 80147bc:	f011 011f 	ands.w	r1, r1, #31
 80147c0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80147c4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80147c8:	d10c      	bne.n	80147e4 <rshift+0x3c>
 80147ca:	f100 0710 	add.w	r7, r0, #16
 80147ce:	4629      	mov	r1, r5
 80147d0:	42b1      	cmp	r1, r6
 80147d2:	d334      	bcc.n	801483e <rshift+0x96>
 80147d4:	1a9b      	subs	r3, r3, r2
 80147d6:	009b      	lsls	r3, r3, #2
 80147d8:	1eea      	subs	r2, r5, #3
 80147da:	4296      	cmp	r6, r2
 80147dc:	bf38      	it	cc
 80147de:	2300      	movcc	r3, #0
 80147e0:	4423      	add	r3, r4
 80147e2:	e015      	b.n	8014810 <rshift+0x68>
 80147e4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80147e8:	f1c1 0820 	rsb	r8, r1, #32
 80147ec:	40cf      	lsrs	r7, r1
 80147ee:	f105 0e04 	add.w	lr, r5, #4
 80147f2:	46a1      	mov	r9, r4
 80147f4:	4576      	cmp	r6, lr
 80147f6:	46f4      	mov	ip, lr
 80147f8:	d815      	bhi.n	8014826 <rshift+0x7e>
 80147fa:	1a9a      	subs	r2, r3, r2
 80147fc:	0092      	lsls	r2, r2, #2
 80147fe:	3a04      	subs	r2, #4
 8014800:	3501      	adds	r5, #1
 8014802:	42ae      	cmp	r6, r5
 8014804:	bf38      	it	cc
 8014806:	2200      	movcc	r2, #0
 8014808:	18a3      	adds	r3, r4, r2
 801480a:	50a7      	str	r7, [r4, r2]
 801480c:	b107      	cbz	r7, 8014810 <rshift+0x68>
 801480e:	3304      	adds	r3, #4
 8014810:	1b1a      	subs	r2, r3, r4
 8014812:	42a3      	cmp	r3, r4
 8014814:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014818:	bf08      	it	eq
 801481a:	2300      	moveq	r3, #0
 801481c:	6102      	str	r2, [r0, #16]
 801481e:	bf08      	it	eq
 8014820:	6143      	streq	r3, [r0, #20]
 8014822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014826:	f8dc c000 	ldr.w	ip, [ip]
 801482a:	fa0c fc08 	lsl.w	ip, ip, r8
 801482e:	ea4c 0707 	orr.w	r7, ip, r7
 8014832:	f849 7b04 	str.w	r7, [r9], #4
 8014836:	f85e 7b04 	ldr.w	r7, [lr], #4
 801483a:	40cf      	lsrs	r7, r1
 801483c:	e7da      	b.n	80147f4 <rshift+0x4c>
 801483e:	f851 cb04 	ldr.w	ip, [r1], #4
 8014842:	f847 cf04 	str.w	ip, [r7, #4]!
 8014846:	e7c3      	b.n	80147d0 <rshift+0x28>
 8014848:	4623      	mov	r3, r4
 801484a:	e7e1      	b.n	8014810 <rshift+0x68>

0801484c <__hexdig_fun>:
 801484c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014850:	2b09      	cmp	r3, #9
 8014852:	d802      	bhi.n	801485a <__hexdig_fun+0xe>
 8014854:	3820      	subs	r0, #32
 8014856:	b2c0      	uxtb	r0, r0
 8014858:	4770      	bx	lr
 801485a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801485e:	2b05      	cmp	r3, #5
 8014860:	d801      	bhi.n	8014866 <__hexdig_fun+0x1a>
 8014862:	3847      	subs	r0, #71	; 0x47
 8014864:	e7f7      	b.n	8014856 <__hexdig_fun+0xa>
 8014866:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801486a:	2b05      	cmp	r3, #5
 801486c:	d801      	bhi.n	8014872 <__hexdig_fun+0x26>
 801486e:	3827      	subs	r0, #39	; 0x27
 8014870:	e7f1      	b.n	8014856 <__hexdig_fun+0xa>
 8014872:	2000      	movs	r0, #0
 8014874:	4770      	bx	lr
	...

08014878 <__gethex>:
 8014878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801487c:	4617      	mov	r7, r2
 801487e:	680a      	ldr	r2, [r1, #0]
 8014880:	b085      	sub	sp, #20
 8014882:	f102 0b02 	add.w	fp, r2, #2
 8014886:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801488a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801488e:	4681      	mov	r9, r0
 8014890:	468a      	mov	sl, r1
 8014892:	9302      	str	r3, [sp, #8]
 8014894:	32fe      	adds	r2, #254	; 0xfe
 8014896:	eb02 030b 	add.w	r3, r2, fp
 801489a:	46d8      	mov	r8, fp
 801489c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80148a0:	9301      	str	r3, [sp, #4]
 80148a2:	2830      	cmp	r0, #48	; 0x30
 80148a4:	d0f7      	beq.n	8014896 <__gethex+0x1e>
 80148a6:	f7ff ffd1 	bl	801484c <__hexdig_fun>
 80148aa:	4604      	mov	r4, r0
 80148ac:	2800      	cmp	r0, #0
 80148ae:	d138      	bne.n	8014922 <__gethex+0xaa>
 80148b0:	49a7      	ldr	r1, [pc, #668]	; (8014b50 <__gethex+0x2d8>)
 80148b2:	2201      	movs	r2, #1
 80148b4:	4640      	mov	r0, r8
 80148b6:	f7ff ff17 	bl	80146e8 <strncmp>
 80148ba:	4606      	mov	r6, r0
 80148bc:	2800      	cmp	r0, #0
 80148be:	d169      	bne.n	8014994 <__gethex+0x11c>
 80148c0:	f898 0001 	ldrb.w	r0, [r8, #1]
 80148c4:	465d      	mov	r5, fp
 80148c6:	f7ff ffc1 	bl	801484c <__hexdig_fun>
 80148ca:	2800      	cmp	r0, #0
 80148cc:	d064      	beq.n	8014998 <__gethex+0x120>
 80148ce:	465a      	mov	r2, fp
 80148d0:	7810      	ldrb	r0, [r2, #0]
 80148d2:	2830      	cmp	r0, #48	; 0x30
 80148d4:	4690      	mov	r8, r2
 80148d6:	f102 0201 	add.w	r2, r2, #1
 80148da:	d0f9      	beq.n	80148d0 <__gethex+0x58>
 80148dc:	f7ff ffb6 	bl	801484c <__hexdig_fun>
 80148e0:	2301      	movs	r3, #1
 80148e2:	fab0 f480 	clz	r4, r0
 80148e6:	0964      	lsrs	r4, r4, #5
 80148e8:	465e      	mov	r6, fp
 80148ea:	9301      	str	r3, [sp, #4]
 80148ec:	4642      	mov	r2, r8
 80148ee:	4615      	mov	r5, r2
 80148f0:	3201      	adds	r2, #1
 80148f2:	7828      	ldrb	r0, [r5, #0]
 80148f4:	f7ff ffaa 	bl	801484c <__hexdig_fun>
 80148f8:	2800      	cmp	r0, #0
 80148fa:	d1f8      	bne.n	80148ee <__gethex+0x76>
 80148fc:	4994      	ldr	r1, [pc, #592]	; (8014b50 <__gethex+0x2d8>)
 80148fe:	2201      	movs	r2, #1
 8014900:	4628      	mov	r0, r5
 8014902:	f7ff fef1 	bl	80146e8 <strncmp>
 8014906:	b978      	cbnz	r0, 8014928 <__gethex+0xb0>
 8014908:	b946      	cbnz	r6, 801491c <__gethex+0xa4>
 801490a:	1c6e      	adds	r6, r5, #1
 801490c:	4632      	mov	r2, r6
 801490e:	4615      	mov	r5, r2
 8014910:	3201      	adds	r2, #1
 8014912:	7828      	ldrb	r0, [r5, #0]
 8014914:	f7ff ff9a 	bl	801484c <__hexdig_fun>
 8014918:	2800      	cmp	r0, #0
 801491a:	d1f8      	bne.n	801490e <__gethex+0x96>
 801491c:	1b73      	subs	r3, r6, r5
 801491e:	009e      	lsls	r6, r3, #2
 8014920:	e004      	b.n	801492c <__gethex+0xb4>
 8014922:	2400      	movs	r4, #0
 8014924:	4626      	mov	r6, r4
 8014926:	e7e1      	b.n	80148ec <__gethex+0x74>
 8014928:	2e00      	cmp	r6, #0
 801492a:	d1f7      	bne.n	801491c <__gethex+0xa4>
 801492c:	782b      	ldrb	r3, [r5, #0]
 801492e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014932:	2b50      	cmp	r3, #80	; 0x50
 8014934:	d13d      	bne.n	80149b2 <__gethex+0x13a>
 8014936:	786b      	ldrb	r3, [r5, #1]
 8014938:	2b2b      	cmp	r3, #43	; 0x2b
 801493a:	d02f      	beq.n	801499c <__gethex+0x124>
 801493c:	2b2d      	cmp	r3, #45	; 0x2d
 801493e:	d031      	beq.n	80149a4 <__gethex+0x12c>
 8014940:	1c69      	adds	r1, r5, #1
 8014942:	f04f 0b00 	mov.w	fp, #0
 8014946:	7808      	ldrb	r0, [r1, #0]
 8014948:	f7ff ff80 	bl	801484c <__hexdig_fun>
 801494c:	1e42      	subs	r2, r0, #1
 801494e:	b2d2      	uxtb	r2, r2
 8014950:	2a18      	cmp	r2, #24
 8014952:	d82e      	bhi.n	80149b2 <__gethex+0x13a>
 8014954:	f1a0 0210 	sub.w	r2, r0, #16
 8014958:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801495c:	f7ff ff76 	bl	801484c <__hexdig_fun>
 8014960:	f100 3cff 	add.w	ip, r0, #4294967295
 8014964:	fa5f fc8c 	uxtb.w	ip, ip
 8014968:	f1bc 0f18 	cmp.w	ip, #24
 801496c:	d91d      	bls.n	80149aa <__gethex+0x132>
 801496e:	f1bb 0f00 	cmp.w	fp, #0
 8014972:	d000      	beq.n	8014976 <__gethex+0xfe>
 8014974:	4252      	negs	r2, r2
 8014976:	4416      	add	r6, r2
 8014978:	f8ca 1000 	str.w	r1, [sl]
 801497c:	b1dc      	cbz	r4, 80149b6 <__gethex+0x13e>
 801497e:	9b01      	ldr	r3, [sp, #4]
 8014980:	2b00      	cmp	r3, #0
 8014982:	bf14      	ite	ne
 8014984:	f04f 0800 	movne.w	r8, #0
 8014988:	f04f 0806 	moveq.w	r8, #6
 801498c:	4640      	mov	r0, r8
 801498e:	b005      	add	sp, #20
 8014990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014994:	4645      	mov	r5, r8
 8014996:	4626      	mov	r6, r4
 8014998:	2401      	movs	r4, #1
 801499a:	e7c7      	b.n	801492c <__gethex+0xb4>
 801499c:	f04f 0b00 	mov.w	fp, #0
 80149a0:	1ca9      	adds	r1, r5, #2
 80149a2:	e7d0      	b.n	8014946 <__gethex+0xce>
 80149a4:	f04f 0b01 	mov.w	fp, #1
 80149a8:	e7fa      	b.n	80149a0 <__gethex+0x128>
 80149aa:	230a      	movs	r3, #10
 80149ac:	fb03 0002 	mla	r0, r3, r2, r0
 80149b0:	e7d0      	b.n	8014954 <__gethex+0xdc>
 80149b2:	4629      	mov	r1, r5
 80149b4:	e7e0      	b.n	8014978 <__gethex+0x100>
 80149b6:	eba5 0308 	sub.w	r3, r5, r8
 80149ba:	3b01      	subs	r3, #1
 80149bc:	4621      	mov	r1, r4
 80149be:	2b07      	cmp	r3, #7
 80149c0:	dc0a      	bgt.n	80149d8 <__gethex+0x160>
 80149c2:	4648      	mov	r0, r9
 80149c4:	f7fe f970 	bl	8012ca8 <_Balloc>
 80149c8:	4604      	mov	r4, r0
 80149ca:	b940      	cbnz	r0, 80149de <__gethex+0x166>
 80149cc:	4b61      	ldr	r3, [pc, #388]	; (8014b54 <__gethex+0x2dc>)
 80149ce:	4602      	mov	r2, r0
 80149d0:	21e4      	movs	r1, #228	; 0xe4
 80149d2:	4861      	ldr	r0, [pc, #388]	; (8014b58 <__gethex+0x2e0>)
 80149d4:	f7ff feb4 	bl	8014740 <__assert_func>
 80149d8:	3101      	adds	r1, #1
 80149da:	105b      	asrs	r3, r3, #1
 80149dc:	e7ef      	b.n	80149be <__gethex+0x146>
 80149de:	f100 0a14 	add.w	sl, r0, #20
 80149e2:	2300      	movs	r3, #0
 80149e4:	495a      	ldr	r1, [pc, #360]	; (8014b50 <__gethex+0x2d8>)
 80149e6:	f8cd a004 	str.w	sl, [sp, #4]
 80149ea:	469b      	mov	fp, r3
 80149ec:	45a8      	cmp	r8, r5
 80149ee:	d342      	bcc.n	8014a76 <__gethex+0x1fe>
 80149f0:	9801      	ldr	r0, [sp, #4]
 80149f2:	f840 bb04 	str.w	fp, [r0], #4
 80149f6:	eba0 000a 	sub.w	r0, r0, sl
 80149fa:	1080      	asrs	r0, r0, #2
 80149fc:	6120      	str	r0, [r4, #16]
 80149fe:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8014a02:	4658      	mov	r0, fp
 8014a04:	f7fe fa42 	bl	8012e8c <__hi0bits>
 8014a08:	683d      	ldr	r5, [r7, #0]
 8014a0a:	eba8 0000 	sub.w	r0, r8, r0
 8014a0e:	42a8      	cmp	r0, r5
 8014a10:	dd59      	ble.n	8014ac6 <__gethex+0x24e>
 8014a12:	eba0 0805 	sub.w	r8, r0, r5
 8014a16:	4641      	mov	r1, r8
 8014a18:	4620      	mov	r0, r4
 8014a1a:	f7fe fdce 	bl	80135ba <__any_on>
 8014a1e:	4683      	mov	fp, r0
 8014a20:	b1b8      	cbz	r0, 8014a52 <__gethex+0x1da>
 8014a22:	f108 33ff 	add.w	r3, r8, #4294967295
 8014a26:	1159      	asrs	r1, r3, #5
 8014a28:	f003 021f 	and.w	r2, r3, #31
 8014a2c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014a30:	f04f 0b01 	mov.w	fp, #1
 8014a34:	fa0b f202 	lsl.w	r2, fp, r2
 8014a38:	420a      	tst	r2, r1
 8014a3a:	d00a      	beq.n	8014a52 <__gethex+0x1da>
 8014a3c:	455b      	cmp	r3, fp
 8014a3e:	dd06      	ble.n	8014a4e <__gethex+0x1d6>
 8014a40:	f1a8 0102 	sub.w	r1, r8, #2
 8014a44:	4620      	mov	r0, r4
 8014a46:	f7fe fdb8 	bl	80135ba <__any_on>
 8014a4a:	2800      	cmp	r0, #0
 8014a4c:	d138      	bne.n	8014ac0 <__gethex+0x248>
 8014a4e:	f04f 0b02 	mov.w	fp, #2
 8014a52:	4641      	mov	r1, r8
 8014a54:	4620      	mov	r0, r4
 8014a56:	f7ff fea7 	bl	80147a8 <rshift>
 8014a5a:	4446      	add	r6, r8
 8014a5c:	68bb      	ldr	r3, [r7, #8]
 8014a5e:	42b3      	cmp	r3, r6
 8014a60:	da41      	bge.n	8014ae6 <__gethex+0x26e>
 8014a62:	4621      	mov	r1, r4
 8014a64:	4648      	mov	r0, r9
 8014a66:	f7fe f95f 	bl	8012d28 <_Bfree>
 8014a6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014a6c:	2300      	movs	r3, #0
 8014a6e:	6013      	str	r3, [r2, #0]
 8014a70:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8014a74:	e78a      	b.n	801498c <__gethex+0x114>
 8014a76:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8014a7a:	2a2e      	cmp	r2, #46	; 0x2e
 8014a7c:	d014      	beq.n	8014aa8 <__gethex+0x230>
 8014a7e:	2b20      	cmp	r3, #32
 8014a80:	d106      	bne.n	8014a90 <__gethex+0x218>
 8014a82:	9b01      	ldr	r3, [sp, #4]
 8014a84:	f843 bb04 	str.w	fp, [r3], #4
 8014a88:	f04f 0b00 	mov.w	fp, #0
 8014a8c:	9301      	str	r3, [sp, #4]
 8014a8e:	465b      	mov	r3, fp
 8014a90:	7828      	ldrb	r0, [r5, #0]
 8014a92:	9303      	str	r3, [sp, #12]
 8014a94:	f7ff feda 	bl	801484c <__hexdig_fun>
 8014a98:	9b03      	ldr	r3, [sp, #12]
 8014a9a:	f000 000f 	and.w	r0, r0, #15
 8014a9e:	4098      	lsls	r0, r3
 8014aa0:	ea4b 0b00 	orr.w	fp, fp, r0
 8014aa4:	3304      	adds	r3, #4
 8014aa6:	e7a1      	b.n	80149ec <__gethex+0x174>
 8014aa8:	45a8      	cmp	r8, r5
 8014aaa:	d8e8      	bhi.n	8014a7e <__gethex+0x206>
 8014aac:	2201      	movs	r2, #1
 8014aae:	4628      	mov	r0, r5
 8014ab0:	9303      	str	r3, [sp, #12]
 8014ab2:	f7ff fe19 	bl	80146e8 <strncmp>
 8014ab6:	4926      	ldr	r1, [pc, #152]	; (8014b50 <__gethex+0x2d8>)
 8014ab8:	9b03      	ldr	r3, [sp, #12]
 8014aba:	2800      	cmp	r0, #0
 8014abc:	d1df      	bne.n	8014a7e <__gethex+0x206>
 8014abe:	e795      	b.n	80149ec <__gethex+0x174>
 8014ac0:	f04f 0b03 	mov.w	fp, #3
 8014ac4:	e7c5      	b.n	8014a52 <__gethex+0x1da>
 8014ac6:	da0b      	bge.n	8014ae0 <__gethex+0x268>
 8014ac8:	eba5 0800 	sub.w	r8, r5, r0
 8014acc:	4621      	mov	r1, r4
 8014ace:	4642      	mov	r2, r8
 8014ad0:	4648      	mov	r0, r9
 8014ad2:	f7fe fb43 	bl	801315c <__lshift>
 8014ad6:	eba6 0608 	sub.w	r6, r6, r8
 8014ada:	4604      	mov	r4, r0
 8014adc:	f100 0a14 	add.w	sl, r0, #20
 8014ae0:	f04f 0b00 	mov.w	fp, #0
 8014ae4:	e7ba      	b.n	8014a5c <__gethex+0x1e4>
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	42b3      	cmp	r3, r6
 8014aea:	dd73      	ble.n	8014bd4 <__gethex+0x35c>
 8014aec:	1b9e      	subs	r6, r3, r6
 8014aee:	42b5      	cmp	r5, r6
 8014af0:	dc34      	bgt.n	8014b5c <__gethex+0x2e4>
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	2b02      	cmp	r3, #2
 8014af6:	d023      	beq.n	8014b40 <__gethex+0x2c8>
 8014af8:	2b03      	cmp	r3, #3
 8014afa:	d025      	beq.n	8014b48 <__gethex+0x2d0>
 8014afc:	2b01      	cmp	r3, #1
 8014afe:	d115      	bne.n	8014b2c <__gethex+0x2b4>
 8014b00:	42b5      	cmp	r5, r6
 8014b02:	d113      	bne.n	8014b2c <__gethex+0x2b4>
 8014b04:	2d01      	cmp	r5, #1
 8014b06:	d10b      	bne.n	8014b20 <__gethex+0x2a8>
 8014b08:	9a02      	ldr	r2, [sp, #8]
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	6013      	str	r3, [r2, #0]
 8014b0e:	2301      	movs	r3, #1
 8014b10:	6123      	str	r3, [r4, #16]
 8014b12:	f8ca 3000 	str.w	r3, [sl]
 8014b16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014b18:	f04f 0862 	mov.w	r8, #98	; 0x62
 8014b1c:	601c      	str	r4, [r3, #0]
 8014b1e:	e735      	b.n	801498c <__gethex+0x114>
 8014b20:	1e69      	subs	r1, r5, #1
 8014b22:	4620      	mov	r0, r4
 8014b24:	f7fe fd49 	bl	80135ba <__any_on>
 8014b28:	2800      	cmp	r0, #0
 8014b2a:	d1ed      	bne.n	8014b08 <__gethex+0x290>
 8014b2c:	4621      	mov	r1, r4
 8014b2e:	4648      	mov	r0, r9
 8014b30:	f7fe f8fa 	bl	8012d28 <_Bfree>
 8014b34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014b36:	2300      	movs	r3, #0
 8014b38:	6013      	str	r3, [r2, #0]
 8014b3a:	f04f 0850 	mov.w	r8, #80	; 0x50
 8014b3e:	e725      	b.n	801498c <__gethex+0x114>
 8014b40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d1f2      	bne.n	8014b2c <__gethex+0x2b4>
 8014b46:	e7df      	b.n	8014b08 <__gethex+0x290>
 8014b48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d1dc      	bne.n	8014b08 <__gethex+0x290>
 8014b4e:	e7ed      	b.n	8014b2c <__gethex+0x2b4>
 8014b50:	08015934 	.word	0x08015934
 8014b54:	080157c9 	.word	0x080157c9
 8014b58:	08015ade 	.word	0x08015ade
 8014b5c:	f106 38ff 	add.w	r8, r6, #4294967295
 8014b60:	f1bb 0f00 	cmp.w	fp, #0
 8014b64:	d133      	bne.n	8014bce <__gethex+0x356>
 8014b66:	f1b8 0f00 	cmp.w	r8, #0
 8014b6a:	d004      	beq.n	8014b76 <__gethex+0x2fe>
 8014b6c:	4641      	mov	r1, r8
 8014b6e:	4620      	mov	r0, r4
 8014b70:	f7fe fd23 	bl	80135ba <__any_on>
 8014b74:	4683      	mov	fp, r0
 8014b76:	ea4f 1268 	mov.w	r2, r8, asr #5
 8014b7a:	2301      	movs	r3, #1
 8014b7c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014b80:	f008 081f 	and.w	r8, r8, #31
 8014b84:	fa03 f308 	lsl.w	r3, r3, r8
 8014b88:	4213      	tst	r3, r2
 8014b8a:	4631      	mov	r1, r6
 8014b8c:	4620      	mov	r0, r4
 8014b8e:	bf18      	it	ne
 8014b90:	f04b 0b02 	orrne.w	fp, fp, #2
 8014b94:	1bad      	subs	r5, r5, r6
 8014b96:	f7ff fe07 	bl	80147a8 <rshift>
 8014b9a:	687e      	ldr	r6, [r7, #4]
 8014b9c:	f04f 0802 	mov.w	r8, #2
 8014ba0:	f1bb 0f00 	cmp.w	fp, #0
 8014ba4:	d04a      	beq.n	8014c3c <__gethex+0x3c4>
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	2b02      	cmp	r3, #2
 8014baa:	d016      	beq.n	8014bda <__gethex+0x362>
 8014bac:	2b03      	cmp	r3, #3
 8014bae:	d018      	beq.n	8014be2 <__gethex+0x36a>
 8014bb0:	2b01      	cmp	r3, #1
 8014bb2:	d109      	bne.n	8014bc8 <__gethex+0x350>
 8014bb4:	f01b 0f02 	tst.w	fp, #2
 8014bb8:	d006      	beq.n	8014bc8 <__gethex+0x350>
 8014bba:	f8da 3000 	ldr.w	r3, [sl]
 8014bbe:	ea4b 0b03 	orr.w	fp, fp, r3
 8014bc2:	f01b 0f01 	tst.w	fp, #1
 8014bc6:	d10f      	bne.n	8014be8 <__gethex+0x370>
 8014bc8:	f048 0810 	orr.w	r8, r8, #16
 8014bcc:	e036      	b.n	8014c3c <__gethex+0x3c4>
 8014bce:	f04f 0b01 	mov.w	fp, #1
 8014bd2:	e7d0      	b.n	8014b76 <__gethex+0x2fe>
 8014bd4:	f04f 0801 	mov.w	r8, #1
 8014bd8:	e7e2      	b.n	8014ba0 <__gethex+0x328>
 8014bda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014bdc:	f1c3 0301 	rsb	r3, r3, #1
 8014be0:	930f      	str	r3, [sp, #60]	; 0x3c
 8014be2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d0ef      	beq.n	8014bc8 <__gethex+0x350>
 8014be8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014bec:	f104 0214 	add.w	r2, r4, #20
 8014bf0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8014bf4:	9301      	str	r3, [sp, #4]
 8014bf6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8014bfa:	2300      	movs	r3, #0
 8014bfc:	4694      	mov	ip, r2
 8014bfe:	f852 1b04 	ldr.w	r1, [r2], #4
 8014c02:	f1b1 3fff 	cmp.w	r1, #4294967295
 8014c06:	d01e      	beq.n	8014c46 <__gethex+0x3ce>
 8014c08:	3101      	adds	r1, #1
 8014c0a:	f8cc 1000 	str.w	r1, [ip]
 8014c0e:	f1b8 0f02 	cmp.w	r8, #2
 8014c12:	f104 0214 	add.w	r2, r4, #20
 8014c16:	d13d      	bne.n	8014c94 <__gethex+0x41c>
 8014c18:	683b      	ldr	r3, [r7, #0]
 8014c1a:	3b01      	subs	r3, #1
 8014c1c:	42ab      	cmp	r3, r5
 8014c1e:	d10b      	bne.n	8014c38 <__gethex+0x3c0>
 8014c20:	1169      	asrs	r1, r5, #5
 8014c22:	2301      	movs	r3, #1
 8014c24:	f005 051f 	and.w	r5, r5, #31
 8014c28:	fa03 f505 	lsl.w	r5, r3, r5
 8014c2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014c30:	421d      	tst	r5, r3
 8014c32:	bf18      	it	ne
 8014c34:	f04f 0801 	movne.w	r8, #1
 8014c38:	f048 0820 	orr.w	r8, r8, #32
 8014c3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014c3e:	601c      	str	r4, [r3, #0]
 8014c40:	9b02      	ldr	r3, [sp, #8]
 8014c42:	601e      	str	r6, [r3, #0]
 8014c44:	e6a2      	b.n	801498c <__gethex+0x114>
 8014c46:	4290      	cmp	r0, r2
 8014c48:	f842 3c04 	str.w	r3, [r2, #-4]
 8014c4c:	d8d6      	bhi.n	8014bfc <__gethex+0x384>
 8014c4e:	68a2      	ldr	r2, [r4, #8]
 8014c50:	4593      	cmp	fp, r2
 8014c52:	db17      	blt.n	8014c84 <__gethex+0x40c>
 8014c54:	6861      	ldr	r1, [r4, #4]
 8014c56:	4648      	mov	r0, r9
 8014c58:	3101      	adds	r1, #1
 8014c5a:	f7fe f825 	bl	8012ca8 <_Balloc>
 8014c5e:	4682      	mov	sl, r0
 8014c60:	b918      	cbnz	r0, 8014c6a <__gethex+0x3f2>
 8014c62:	4b1b      	ldr	r3, [pc, #108]	; (8014cd0 <__gethex+0x458>)
 8014c64:	4602      	mov	r2, r0
 8014c66:	2184      	movs	r1, #132	; 0x84
 8014c68:	e6b3      	b.n	80149d2 <__gethex+0x15a>
 8014c6a:	6922      	ldr	r2, [r4, #16]
 8014c6c:	3202      	adds	r2, #2
 8014c6e:	f104 010c 	add.w	r1, r4, #12
 8014c72:	0092      	lsls	r2, r2, #2
 8014c74:	300c      	adds	r0, #12
 8014c76:	f7fd f90f 	bl	8011e98 <memcpy>
 8014c7a:	4621      	mov	r1, r4
 8014c7c:	4648      	mov	r0, r9
 8014c7e:	f7fe f853 	bl	8012d28 <_Bfree>
 8014c82:	4654      	mov	r4, sl
 8014c84:	6922      	ldr	r2, [r4, #16]
 8014c86:	1c51      	adds	r1, r2, #1
 8014c88:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014c8c:	6121      	str	r1, [r4, #16]
 8014c8e:	2101      	movs	r1, #1
 8014c90:	6151      	str	r1, [r2, #20]
 8014c92:	e7bc      	b.n	8014c0e <__gethex+0x396>
 8014c94:	6921      	ldr	r1, [r4, #16]
 8014c96:	4559      	cmp	r1, fp
 8014c98:	dd0b      	ble.n	8014cb2 <__gethex+0x43a>
 8014c9a:	2101      	movs	r1, #1
 8014c9c:	4620      	mov	r0, r4
 8014c9e:	f7ff fd83 	bl	80147a8 <rshift>
 8014ca2:	68bb      	ldr	r3, [r7, #8]
 8014ca4:	3601      	adds	r6, #1
 8014ca6:	42b3      	cmp	r3, r6
 8014ca8:	f6ff aedb 	blt.w	8014a62 <__gethex+0x1ea>
 8014cac:	f04f 0801 	mov.w	r8, #1
 8014cb0:	e7c2      	b.n	8014c38 <__gethex+0x3c0>
 8014cb2:	f015 051f 	ands.w	r5, r5, #31
 8014cb6:	d0f9      	beq.n	8014cac <__gethex+0x434>
 8014cb8:	9b01      	ldr	r3, [sp, #4]
 8014cba:	441a      	add	r2, r3
 8014cbc:	f1c5 0520 	rsb	r5, r5, #32
 8014cc0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8014cc4:	f7fe f8e2 	bl	8012e8c <__hi0bits>
 8014cc8:	42a8      	cmp	r0, r5
 8014cca:	dbe6      	blt.n	8014c9a <__gethex+0x422>
 8014ccc:	e7ee      	b.n	8014cac <__gethex+0x434>
 8014cce:	bf00      	nop
 8014cd0:	080157c9 	.word	0x080157c9

08014cd4 <L_shift>:
 8014cd4:	f1c2 0208 	rsb	r2, r2, #8
 8014cd8:	0092      	lsls	r2, r2, #2
 8014cda:	b570      	push	{r4, r5, r6, lr}
 8014cdc:	f1c2 0620 	rsb	r6, r2, #32
 8014ce0:	6843      	ldr	r3, [r0, #4]
 8014ce2:	6804      	ldr	r4, [r0, #0]
 8014ce4:	fa03 f506 	lsl.w	r5, r3, r6
 8014ce8:	432c      	orrs	r4, r5
 8014cea:	40d3      	lsrs	r3, r2
 8014cec:	6004      	str	r4, [r0, #0]
 8014cee:	f840 3f04 	str.w	r3, [r0, #4]!
 8014cf2:	4288      	cmp	r0, r1
 8014cf4:	d3f4      	bcc.n	8014ce0 <L_shift+0xc>
 8014cf6:	bd70      	pop	{r4, r5, r6, pc}

08014cf8 <__match>:
 8014cf8:	b530      	push	{r4, r5, lr}
 8014cfa:	6803      	ldr	r3, [r0, #0]
 8014cfc:	3301      	adds	r3, #1
 8014cfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014d02:	b914      	cbnz	r4, 8014d0a <__match+0x12>
 8014d04:	6003      	str	r3, [r0, #0]
 8014d06:	2001      	movs	r0, #1
 8014d08:	bd30      	pop	{r4, r5, pc}
 8014d0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014d0e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014d12:	2d19      	cmp	r5, #25
 8014d14:	bf98      	it	ls
 8014d16:	3220      	addls	r2, #32
 8014d18:	42a2      	cmp	r2, r4
 8014d1a:	d0f0      	beq.n	8014cfe <__match+0x6>
 8014d1c:	2000      	movs	r0, #0
 8014d1e:	e7f3      	b.n	8014d08 <__match+0x10>

08014d20 <__hexnan>:
 8014d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d24:	680b      	ldr	r3, [r1, #0]
 8014d26:	6801      	ldr	r1, [r0, #0]
 8014d28:	115e      	asrs	r6, r3, #5
 8014d2a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014d2e:	f013 031f 	ands.w	r3, r3, #31
 8014d32:	b087      	sub	sp, #28
 8014d34:	bf18      	it	ne
 8014d36:	3604      	addne	r6, #4
 8014d38:	2500      	movs	r5, #0
 8014d3a:	1f37      	subs	r7, r6, #4
 8014d3c:	4682      	mov	sl, r0
 8014d3e:	4690      	mov	r8, r2
 8014d40:	9301      	str	r3, [sp, #4]
 8014d42:	f846 5c04 	str.w	r5, [r6, #-4]
 8014d46:	46b9      	mov	r9, r7
 8014d48:	463c      	mov	r4, r7
 8014d4a:	9502      	str	r5, [sp, #8]
 8014d4c:	46ab      	mov	fp, r5
 8014d4e:	784a      	ldrb	r2, [r1, #1]
 8014d50:	1c4b      	adds	r3, r1, #1
 8014d52:	9303      	str	r3, [sp, #12]
 8014d54:	b342      	cbz	r2, 8014da8 <__hexnan+0x88>
 8014d56:	4610      	mov	r0, r2
 8014d58:	9105      	str	r1, [sp, #20]
 8014d5a:	9204      	str	r2, [sp, #16]
 8014d5c:	f7ff fd76 	bl	801484c <__hexdig_fun>
 8014d60:	2800      	cmp	r0, #0
 8014d62:	d14f      	bne.n	8014e04 <__hexnan+0xe4>
 8014d64:	9a04      	ldr	r2, [sp, #16]
 8014d66:	9905      	ldr	r1, [sp, #20]
 8014d68:	2a20      	cmp	r2, #32
 8014d6a:	d818      	bhi.n	8014d9e <__hexnan+0x7e>
 8014d6c:	9b02      	ldr	r3, [sp, #8]
 8014d6e:	459b      	cmp	fp, r3
 8014d70:	dd13      	ble.n	8014d9a <__hexnan+0x7a>
 8014d72:	454c      	cmp	r4, r9
 8014d74:	d206      	bcs.n	8014d84 <__hexnan+0x64>
 8014d76:	2d07      	cmp	r5, #7
 8014d78:	dc04      	bgt.n	8014d84 <__hexnan+0x64>
 8014d7a:	462a      	mov	r2, r5
 8014d7c:	4649      	mov	r1, r9
 8014d7e:	4620      	mov	r0, r4
 8014d80:	f7ff ffa8 	bl	8014cd4 <L_shift>
 8014d84:	4544      	cmp	r4, r8
 8014d86:	d950      	bls.n	8014e2a <__hexnan+0x10a>
 8014d88:	2300      	movs	r3, #0
 8014d8a:	f1a4 0904 	sub.w	r9, r4, #4
 8014d8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8014d92:	f8cd b008 	str.w	fp, [sp, #8]
 8014d96:	464c      	mov	r4, r9
 8014d98:	461d      	mov	r5, r3
 8014d9a:	9903      	ldr	r1, [sp, #12]
 8014d9c:	e7d7      	b.n	8014d4e <__hexnan+0x2e>
 8014d9e:	2a29      	cmp	r2, #41	; 0x29
 8014da0:	d155      	bne.n	8014e4e <__hexnan+0x12e>
 8014da2:	3102      	adds	r1, #2
 8014da4:	f8ca 1000 	str.w	r1, [sl]
 8014da8:	f1bb 0f00 	cmp.w	fp, #0
 8014dac:	d04f      	beq.n	8014e4e <__hexnan+0x12e>
 8014dae:	454c      	cmp	r4, r9
 8014db0:	d206      	bcs.n	8014dc0 <__hexnan+0xa0>
 8014db2:	2d07      	cmp	r5, #7
 8014db4:	dc04      	bgt.n	8014dc0 <__hexnan+0xa0>
 8014db6:	462a      	mov	r2, r5
 8014db8:	4649      	mov	r1, r9
 8014dba:	4620      	mov	r0, r4
 8014dbc:	f7ff ff8a 	bl	8014cd4 <L_shift>
 8014dc0:	4544      	cmp	r4, r8
 8014dc2:	d934      	bls.n	8014e2e <__hexnan+0x10e>
 8014dc4:	f1a8 0204 	sub.w	r2, r8, #4
 8014dc8:	4623      	mov	r3, r4
 8014dca:	f853 1b04 	ldr.w	r1, [r3], #4
 8014dce:	f842 1f04 	str.w	r1, [r2, #4]!
 8014dd2:	429f      	cmp	r7, r3
 8014dd4:	d2f9      	bcs.n	8014dca <__hexnan+0xaa>
 8014dd6:	1b3b      	subs	r3, r7, r4
 8014dd8:	f023 0303 	bic.w	r3, r3, #3
 8014ddc:	3304      	adds	r3, #4
 8014dde:	3e03      	subs	r6, #3
 8014de0:	3401      	adds	r4, #1
 8014de2:	42a6      	cmp	r6, r4
 8014de4:	bf38      	it	cc
 8014de6:	2304      	movcc	r3, #4
 8014de8:	4443      	add	r3, r8
 8014dea:	2200      	movs	r2, #0
 8014dec:	f843 2b04 	str.w	r2, [r3], #4
 8014df0:	429f      	cmp	r7, r3
 8014df2:	d2fb      	bcs.n	8014dec <__hexnan+0xcc>
 8014df4:	683b      	ldr	r3, [r7, #0]
 8014df6:	b91b      	cbnz	r3, 8014e00 <__hexnan+0xe0>
 8014df8:	4547      	cmp	r7, r8
 8014dfa:	d126      	bne.n	8014e4a <__hexnan+0x12a>
 8014dfc:	2301      	movs	r3, #1
 8014dfe:	603b      	str	r3, [r7, #0]
 8014e00:	2005      	movs	r0, #5
 8014e02:	e025      	b.n	8014e50 <__hexnan+0x130>
 8014e04:	3501      	adds	r5, #1
 8014e06:	2d08      	cmp	r5, #8
 8014e08:	f10b 0b01 	add.w	fp, fp, #1
 8014e0c:	dd06      	ble.n	8014e1c <__hexnan+0xfc>
 8014e0e:	4544      	cmp	r4, r8
 8014e10:	d9c3      	bls.n	8014d9a <__hexnan+0x7a>
 8014e12:	2300      	movs	r3, #0
 8014e14:	f844 3c04 	str.w	r3, [r4, #-4]
 8014e18:	2501      	movs	r5, #1
 8014e1a:	3c04      	subs	r4, #4
 8014e1c:	6822      	ldr	r2, [r4, #0]
 8014e1e:	f000 000f 	and.w	r0, r0, #15
 8014e22:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014e26:	6020      	str	r0, [r4, #0]
 8014e28:	e7b7      	b.n	8014d9a <__hexnan+0x7a>
 8014e2a:	2508      	movs	r5, #8
 8014e2c:	e7b5      	b.n	8014d9a <__hexnan+0x7a>
 8014e2e:	9b01      	ldr	r3, [sp, #4]
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d0df      	beq.n	8014df4 <__hexnan+0xd4>
 8014e34:	f1c3 0320 	rsb	r3, r3, #32
 8014e38:	f04f 32ff 	mov.w	r2, #4294967295
 8014e3c:	40da      	lsrs	r2, r3
 8014e3e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8014e42:	4013      	ands	r3, r2
 8014e44:	f846 3c04 	str.w	r3, [r6, #-4]
 8014e48:	e7d4      	b.n	8014df4 <__hexnan+0xd4>
 8014e4a:	3f04      	subs	r7, #4
 8014e4c:	e7d2      	b.n	8014df4 <__hexnan+0xd4>
 8014e4e:	2004      	movs	r0, #4
 8014e50:	b007      	add	sp, #28
 8014e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014e56 <__ascii_mbtowc>:
 8014e56:	b082      	sub	sp, #8
 8014e58:	b901      	cbnz	r1, 8014e5c <__ascii_mbtowc+0x6>
 8014e5a:	a901      	add	r1, sp, #4
 8014e5c:	b142      	cbz	r2, 8014e70 <__ascii_mbtowc+0x1a>
 8014e5e:	b14b      	cbz	r3, 8014e74 <__ascii_mbtowc+0x1e>
 8014e60:	7813      	ldrb	r3, [r2, #0]
 8014e62:	600b      	str	r3, [r1, #0]
 8014e64:	7812      	ldrb	r2, [r2, #0]
 8014e66:	1e10      	subs	r0, r2, #0
 8014e68:	bf18      	it	ne
 8014e6a:	2001      	movne	r0, #1
 8014e6c:	b002      	add	sp, #8
 8014e6e:	4770      	bx	lr
 8014e70:	4610      	mov	r0, r2
 8014e72:	e7fb      	b.n	8014e6c <__ascii_mbtowc+0x16>
 8014e74:	f06f 0001 	mvn.w	r0, #1
 8014e78:	e7f8      	b.n	8014e6c <__ascii_mbtowc+0x16>

08014e7a <_realloc_r>:
 8014e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e7e:	4680      	mov	r8, r0
 8014e80:	4614      	mov	r4, r2
 8014e82:	460e      	mov	r6, r1
 8014e84:	b921      	cbnz	r1, 8014e90 <_realloc_r+0x16>
 8014e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014e8a:	4611      	mov	r1, r2
 8014e8c:	f7fd be80 	b.w	8012b90 <_malloc_r>
 8014e90:	b92a      	cbnz	r2, 8014e9e <_realloc_r+0x24>
 8014e92:	f7fd fe09 	bl	8012aa8 <_free_r>
 8014e96:	4625      	mov	r5, r4
 8014e98:	4628      	mov	r0, r5
 8014e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e9e:	f000 f842 	bl	8014f26 <_malloc_usable_size_r>
 8014ea2:	4284      	cmp	r4, r0
 8014ea4:	4607      	mov	r7, r0
 8014ea6:	d802      	bhi.n	8014eae <_realloc_r+0x34>
 8014ea8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014eac:	d812      	bhi.n	8014ed4 <_realloc_r+0x5a>
 8014eae:	4621      	mov	r1, r4
 8014eb0:	4640      	mov	r0, r8
 8014eb2:	f7fd fe6d 	bl	8012b90 <_malloc_r>
 8014eb6:	4605      	mov	r5, r0
 8014eb8:	2800      	cmp	r0, #0
 8014eba:	d0ed      	beq.n	8014e98 <_realloc_r+0x1e>
 8014ebc:	42bc      	cmp	r4, r7
 8014ebe:	4622      	mov	r2, r4
 8014ec0:	4631      	mov	r1, r6
 8014ec2:	bf28      	it	cs
 8014ec4:	463a      	movcs	r2, r7
 8014ec6:	f7fc ffe7 	bl	8011e98 <memcpy>
 8014eca:	4631      	mov	r1, r6
 8014ecc:	4640      	mov	r0, r8
 8014ece:	f7fd fdeb 	bl	8012aa8 <_free_r>
 8014ed2:	e7e1      	b.n	8014e98 <_realloc_r+0x1e>
 8014ed4:	4635      	mov	r5, r6
 8014ed6:	e7df      	b.n	8014e98 <_realloc_r+0x1e>

08014ed8 <__ascii_wctomb>:
 8014ed8:	b149      	cbz	r1, 8014eee <__ascii_wctomb+0x16>
 8014eda:	2aff      	cmp	r2, #255	; 0xff
 8014edc:	bf85      	ittet	hi
 8014ede:	238a      	movhi	r3, #138	; 0x8a
 8014ee0:	6003      	strhi	r3, [r0, #0]
 8014ee2:	700a      	strbls	r2, [r1, #0]
 8014ee4:	f04f 30ff 	movhi.w	r0, #4294967295
 8014ee8:	bf98      	it	ls
 8014eea:	2001      	movls	r0, #1
 8014eec:	4770      	bx	lr
 8014eee:	4608      	mov	r0, r1
 8014ef0:	4770      	bx	lr
	...

08014ef4 <fiprintf>:
 8014ef4:	b40e      	push	{r1, r2, r3}
 8014ef6:	b503      	push	{r0, r1, lr}
 8014ef8:	4601      	mov	r1, r0
 8014efa:	ab03      	add	r3, sp, #12
 8014efc:	4805      	ldr	r0, [pc, #20]	; (8014f14 <fiprintf+0x20>)
 8014efe:	f853 2b04 	ldr.w	r2, [r3], #4
 8014f02:	6800      	ldr	r0, [r0, #0]
 8014f04:	9301      	str	r3, [sp, #4]
 8014f06:	f000 f83f 	bl	8014f88 <_vfiprintf_r>
 8014f0a:	b002      	add	sp, #8
 8014f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014f10:	b003      	add	sp, #12
 8014f12:	4770      	bx	lr
 8014f14:	24000068 	.word	0x24000068

08014f18 <abort>:
 8014f18:	b508      	push	{r3, lr}
 8014f1a:	2006      	movs	r0, #6
 8014f1c:	f000 fa0c 	bl	8015338 <raise>
 8014f20:	2001      	movs	r0, #1
 8014f22:	f7ee fb87 	bl	8003634 <_exit>

08014f26 <_malloc_usable_size_r>:
 8014f26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014f2a:	1f18      	subs	r0, r3, #4
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	bfbc      	itt	lt
 8014f30:	580b      	ldrlt	r3, [r1, r0]
 8014f32:	18c0      	addlt	r0, r0, r3
 8014f34:	4770      	bx	lr

08014f36 <__sfputc_r>:
 8014f36:	6893      	ldr	r3, [r2, #8]
 8014f38:	3b01      	subs	r3, #1
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	b410      	push	{r4}
 8014f3e:	6093      	str	r3, [r2, #8]
 8014f40:	da08      	bge.n	8014f54 <__sfputc_r+0x1e>
 8014f42:	6994      	ldr	r4, [r2, #24]
 8014f44:	42a3      	cmp	r3, r4
 8014f46:	db01      	blt.n	8014f4c <__sfputc_r+0x16>
 8014f48:	290a      	cmp	r1, #10
 8014f4a:	d103      	bne.n	8014f54 <__sfputc_r+0x1e>
 8014f4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f50:	f000 b934 	b.w	80151bc <__swbuf_r>
 8014f54:	6813      	ldr	r3, [r2, #0]
 8014f56:	1c58      	adds	r0, r3, #1
 8014f58:	6010      	str	r0, [r2, #0]
 8014f5a:	7019      	strb	r1, [r3, #0]
 8014f5c:	4608      	mov	r0, r1
 8014f5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f62:	4770      	bx	lr

08014f64 <__sfputs_r>:
 8014f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f66:	4606      	mov	r6, r0
 8014f68:	460f      	mov	r7, r1
 8014f6a:	4614      	mov	r4, r2
 8014f6c:	18d5      	adds	r5, r2, r3
 8014f6e:	42ac      	cmp	r4, r5
 8014f70:	d101      	bne.n	8014f76 <__sfputs_r+0x12>
 8014f72:	2000      	movs	r0, #0
 8014f74:	e007      	b.n	8014f86 <__sfputs_r+0x22>
 8014f76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f7a:	463a      	mov	r2, r7
 8014f7c:	4630      	mov	r0, r6
 8014f7e:	f7ff ffda 	bl	8014f36 <__sfputc_r>
 8014f82:	1c43      	adds	r3, r0, #1
 8014f84:	d1f3      	bne.n	8014f6e <__sfputs_r+0xa>
 8014f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014f88 <_vfiprintf_r>:
 8014f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f8c:	460d      	mov	r5, r1
 8014f8e:	b09d      	sub	sp, #116	; 0x74
 8014f90:	4614      	mov	r4, r2
 8014f92:	4698      	mov	r8, r3
 8014f94:	4606      	mov	r6, r0
 8014f96:	b118      	cbz	r0, 8014fa0 <_vfiprintf_r+0x18>
 8014f98:	6a03      	ldr	r3, [r0, #32]
 8014f9a:	b90b      	cbnz	r3, 8014fa0 <_vfiprintf_r+0x18>
 8014f9c:	f7fc fe64 	bl	8011c68 <__sinit>
 8014fa0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014fa2:	07d9      	lsls	r1, r3, #31
 8014fa4:	d405      	bmi.n	8014fb2 <_vfiprintf_r+0x2a>
 8014fa6:	89ab      	ldrh	r3, [r5, #12]
 8014fa8:	059a      	lsls	r2, r3, #22
 8014faa:	d402      	bmi.n	8014fb2 <_vfiprintf_r+0x2a>
 8014fac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014fae:	f7fc ff71 	bl	8011e94 <__retarget_lock_acquire_recursive>
 8014fb2:	89ab      	ldrh	r3, [r5, #12]
 8014fb4:	071b      	lsls	r3, r3, #28
 8014fb6:	d501      	bpl.n	8014fbc <_vfiprintf_r+0x34>
 8014fb8:	692b      	ldr	r3, [r5, #16]
 8014fba:	b99b      	cbnz	r3, 8014fe4 <_vfiprintf_r+0x5c>
 8014fbc:	4629      	mov	r1, r5
 8014fbe:	4630      	mov	r0, r6
 8014fc0:	f000 f93a 	bl	8015238 <__swsetup_r>
 8014fc4:	b170      	cbz	r0, 8014fe4 <_vfiprintf_r+0x5c>
 8014fc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014fc8:	07dc      	lsls	r4, r3, #31
 8014fca:	d504      	bpl.n	8014fd6 <_vfiprintf_r+0x4e>
 8014fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8014fd0:	b01d      	add	sp, #116	; 0x74
 8014fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fd6:	89ab      	ldrh	r3, [r5, #12]
 8014fd8:	0598      	lsls	r0, r3, #22
 8014fda:	d4f7      	bmi.n	8014fcc <_vfiprintf_r+0x44>
 8014fdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014fde:	f7fc ff5a 	bl	8011e96 <__retarget_lock_release_recursive>
 8014fe2:	e7f3      	b.n	8014fcc <_vfiprintf_r+0x44>
 8014fe4:	2300      	movs	r3, #0
 8014fe6:	9309      	str	r3, [sp, #36]	; 0x24
 8014fe8:	2320      	movs	r3, #32
 8014fea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014fee:	f8cd 800c 	str.w	r8, [sp, #12]
 8014ff2:	2330      	movs	r3, #48	; 0x30
 8014ff4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80151a8 <_vfiprintf_r+0x220>
 8014ff8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014ffc:	f04f 0901 	mov.w	r9, #1
 8015000:	4623      	mov	r3, r4
 8015002:	469a      	mov	sl, r3
 8015004:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015008:	b10a      	cbz	r2, 801500e <_vfiprintf_r+0x86>
 801500a:	2a25      	cmp	r2, #37	; 0x25
 801500c:	d1f9      	bne.n	8015002 <_vfiprintf_r+0x7a>
 801500e:	ebba 0b04 	subs.w	fp, sl, r4
 8015012:	d00b      	beq.n	801502c <_vfiprintf_r+0xa4>
 8015014:	465b      	mov	r3, fp
 8015016:	4622      	mov	r2, r4
 8015018:	4629      	mov	r1, r5
 801501a:	4630      	mov	r0, r6
 801501c:	f7ff ffa2 	bl	8014f64 <__sfputs_r>
 8015020:	3001      	adds	r0, #1
 8015022:	f000 80a9 	beq.w	8015178 <_vfiprintf_r+0x1f0>
 8015026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015028:	445a      	add	r2, fp
 801502a:	9209      	str	r2, [sp, #36]	; 0x24
 801502c:	f89a 3000 	ldrb.w	r3, [sl]
 8015030:	2b00      	cmp	r3, #0
 8015032:	f000 80a1 	beq.w	8015178 <_vfiprintf_r+0x1f0>
 8015036:	2300      	movs	r3, #0
 8015038:	f04f 32ff 	mov.w	r2, #4294967295
 801503c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015040:	f10a 0a01 	add.w	sl, sl, #1
 8015044:	9304      	str	r3, [sp, #16]
 8015046:	9307      	str	r3, [sp, #28]
 8015048:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801504c:	931a      	str	r3, [sp, #104]	; 0x68
 801504e:	4654      	mov	r4, sl
 8015050:	2205      	movs	r2, #5
 8015052:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015056:	4854      	ldr	r0, [pc, #336]	; (80151a8 <_vfiprintf_r+0x220>)
 8015058:	f7eb f95a 	bl	8000310 <memchr>
 801505c:	9a04      	ldr	r2, [sp, #16]
 801505e:	b9d8      	cbnz	r0, 8015098 <_vfiprintf_r+0x110>
 8015060:	06d1      	lsls	r1, r2, #27
 8015062:	bf44      	itt	mi
 8015064:	2320      	movmi	r3, #32
 8015066:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801506a:	0713      	lsls	r3, r2, #28
 801506c:	bf44      	itt	mi
 801506e:	232b      	movmi	r3, #43	; 0x2b
 8015070:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015074:	f89a 3000 	ldrb.w	r3, [sl]
 8015078:	2b2a      	cmp	r3, #42	; 0x2a
 801507a:	d015      	beq.n	80150a8 <_vfiprintf_r+0x120>
 801507c:	9a07      	ldr	r2, [sp, #28]
 801507e:	4654      	mov	r4, sl
 8015080:	2000      	movs	r0, #0
 8015082:	f04f 0c0a 	mov.w	ip, #10
 8015086:	4621      	mov	r1, r4
 8015088:	f811 3b01 	ldrb.w	r3, [r1], #1
 801508c:	3b30      	subs	r3, #48	; 0x30
 801508e:	2b09      	cmp	r3, #9
 8015090:	d94d      	bls.n	801512e <_vfiprintf_r+0x1a6>
 8015092:	b1b0      	cbz	r0, 80150c2 <_vfiprintf_r+0x13a>
 8015094:	9207      	str	r2, [sp, #28]
 8015096:	e014      	b.n	80150c2 <_vfiprintf_r+0x13a>
 8015098:	eba0 0308 	sub.w	r3, r0, r8
 801509c:	fa09 f303 	lsl.w	r3, r9, r3
 80150a0:	4313      	orrs	r3, r2
 80150a2:	9304      	str	r3, [sp, #16]
 80150a4:	46a2      	mov	sl, r4
 80150a6:	e7d2      	b.n	801504e <_vfiprintf_r+0xc6>
 80150a8:	9b03      	ldr	r3, [sp, #12]
 80150aa:	1d19      	adds	r1, r3, #4
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	9103      	str	r1, [sp, #12]
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	bfbb      	ittet	lt
 80150b4:	425b      	neglt	r3, r3
 80150b6:	f042 0202 	orrlt.w	r2, r2, #2
 80150ba:	9307      	strge	r3, [sp, #28]
 80150bc:	9307      	strlt	r3, [sp, #28]
 80150be:	bfb8      	it	lt
 80150c0:	9204      	strlt	r2, [sp, #16]
 80150c2:	7823      	ldrb	r3, [r4, #0]
 80150c4:	2b2e      	cmp	r3, #46	; 0x2e
 80150c6:	d10c      	bne.n	80150e2 <_vfiprintf_r+0x15a>
 80150c8:	7863      	ldrb	r3, [r4, #1]
 80150ca:	2b2a      	cmp	r3, #42	; 0x2a
 80150cc:	d134      	bne.n	8015138 <_vfiprintf_r+0x1b0>
 80150ce:	9b03      	ldr	r3, [sp, #12]
 80150d0:	1d1a      	adds	r2, r3, #4
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	9203      	str	r2, [sp, #12]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	bfb8      	it	lt
 80150da:	f04f 33ff 	movlt.w	r3, #4294967295
 80150de:	3402      	adds	r4, #2
 80150e0:	9305      	str	r3, [sp, #20]
 80150e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80151b8 <_vfiprintf_r+0x230>
 80150e6:	7821      	ldrb	r1, [r4, #0]
 80150e8:	2203      	movs	r2, #3
 80150ea:	4650      	mov	r0, sl
 80150ec:	f7eb f910 	bl	8000310 <memchr>
 80150f0:	b138      	cbz	r0, 8015102 <_vfiprintf_r+0x17a>
 80150f2:	9b04      	ldr	r3, [sp, #16]
 80150f4:	eba0 000a 	sub.w	r0, r0, sl
 80150f8:	2240      	movs	r2, #64	; 0x40
 80150fa:	4082      	lsls	r2, r0
 80150fc:	4313      	orrs	r3, r2
 80150fe:	3401      	adds	r4, #1
 8015100:	9304      	str	r3, [sp, #16]
 8015102:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015106:	4829      	ldr	r0, [pc, #164]	; (80151ac <_vfiprintf_r+0x224>)
 8015108:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801510c:	2206      	movs	r2, #6
 801510e:	f7eb f8ff 	bl	8000310 <memchr>
 8015112:	2800      	cmp	r0, #0
 8015114:	d03f      	beq.n	8015196 <_vfiprintf_r+0x20e>
 8015116:	4b26      	ldr	r3, [pc, #152]	; (80151b0 <_vfiprintf_r+0x228>)
 8015118:	bb1b      	cbnz	r3, 8015162 <_vfiprintf_r+0x1da>
 801511a:	9b03      	ldr	r3, [sp, #12]
 801511c:	3307      	adds	r3, #7
 801511e:	f023 0307 	bic.w	r3, r3, #7
 8015122:	3308      	adds	r3, #8
 8015124:	9303      	str	r3, [sp, #12]
 8015126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015128:	443b      	add	r3, r7
 801512a:	9309      	str	r3, [sp, #36]	; 0x24
 801512c:	e768      	b.n	8015000 <_vfiprintf_r+0x78>
 801512e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015132:	460c      	mov	r4, r1
 8015134:	2001      	movs	r0, #1
 8015136:	e7a6      	b.n	8015086 <_vfiprintf_r+0xfe>
 8015138:	2300      	movs	r3, #0
 801513a:	3401      	adds	r4, #1
 801513c:	9305      	str	r3, [sp, #20]
 801513e:	4619      	mov	r1, r3
 8015140:	f04f 0c0a 	mov.w	ip, #10
 8015144:	4620      	mov	r0, r4
 8015146:	f810 2b01 	ldrb.w	r2, [r0], #1
 801514a:	3a30      	subs	r2, #48	; 0x30
 801514c:	2a09      	cmp	r2, #9
 801514e:	d903      	bls.n	8015158 <_vfiprintf_r+0x1d0>
 8015150:	2b00      	cmp	r3, #0
 8015152:	d0c6      	beq.n	80150e2 <_vfiprintf_r+0x15a>
 8015154:	9105      	str	r1, [sp, #20]
 8015156:	e7c4      	b.n	80150e2 <_vfiprintf_r+0x15a>
 8015158:	fb0c 2101 	mla	r1, ip, r1, r2
 801515c:	4604      	mov	r4, r0
 801515e:	2301      	movs	r3, #1
 8015160:	e7f0      	b.n	8015144 <_vfiprintf_r+0x1bc>
 8015162:	ab03      	add	r3, sp, #12
 8015164:	9300      	str	r3, [sp, #0]
 8015166:	462a      	mov	r2, r5
 8015168:	4b12      	ldr	r3, [pc, #72]	; (80151b4 <_vfiprintf_r+0x22c>)
 801516a:	a904      	add	r1, sp, #16
 801516c:	4630      	mov	r0, r6
 801516e:	f7fb ff53 	bl	8011018 <_printf_float>
 8015172:	4607      	mov	r7, r0
 8015174:	1c78      	adds	r0, r7, #1
 8015176:	d1d6      	bne.n	8015126 <_vfiprintf_r+0x19e>
 8015178:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801517a:	07d9      	lsls	r1, r3, #31
 801517c:	d405      	bmi.n	801518a <_vfiprintf_r+0x202>
 801517e:	89ab      	ldrh	r3, [r5, #12]
 8015180:	059a      	lsls	r2, r3, #22
 8015182:	d402      	bmi.n	801518a <_vfiprintf_r+0x202>
 8015184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015186:	f7fc fe86 	bl	8011e96 <__retarget_lock_release_recursive>
 801518a:	89ab      	ldrh	r3, [r5, #12]
 801518c:	065b      	lsls	r3, r3, #25
 801518e:	f53f af1d 	bmi.w	8014fcc <_vfiprintf_r+0x44>
 8015192:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015194:	e71c      	b.n	8014fd0 <_vfiprintf_r+0x48>
 8015196:	ab03      	add	r3, sp, #12
 8015198:	9300      	str	r3, [sp, #0]
 801519a:	462a      	mov	r2, r5
 801519c:	4b05      	ldr	r3, [pc, #20]	; (80151b4 <_vfiprintf_r+0x22c>)
 801519e:	a904      	add	r1, sp, #16
 80151a0:	4630      	mov	r0, r6
 80151a2:	f7fc f9c1 	bl	8011528 <_printf_i>
 80151a6:	e7e4      	b.n	8015172 <_vfiprintf_r+0x1ea>
 80151a8:	08015a89 	.word	0x08015a89
 80151ac:	08015a93 	.word	0x08015a93
 80151b0:	08011019 	.word	0x08011019
 80151b4:	08014f65 	.word	0x08014f65
 80151b8:	08015a8f 	.word	0x08015a8f

080151bc <__swbuf_r>:
 80151bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151be:	460e      	mov	r6, r1
 80151c0:	4614      	mov	r4, r2
 80151c2:	4605      	mov	r5, r0
 80151c4:	b118      	cbz	r0, 80151ce <__swbuf_r+0x12>
 80151c6:	6a03      	ldr	r3, [r0, #32]
 80151c8:	b90b      	cbnz	r3, 80151ce <__swbuf_r+0x12>
 80151ca:	f7fc fd4d 	bl	8011c68 <__sinit>
 80151ce:	69a3      	ldr	r3, [r4, #24]
 80151d0:	60a3      	str	r3, [r4, #8]
 80151d2:	89a3      	ldrh	r3, [r4, #12]
 80151d4:	071a      	lsls	r2, r3, #28
 80151d6:	d525      	bpl.n	8015224 <__swbuf_r+0x68>
 80151d8:	6923      	ldr	r3, [r4, #16]
 80151da:	b31b      	cbz	r3, 8015224 <__swbuf_r+0x68>
 80151dc:	6823      	ldr	r3, [r4, #0]
 80151de:	6922      	ldr	r2, [r4, #16]
 80151e0:	1a98      	subs	r0, r3, r2
 80151e2:	6963      	ldr	r3, [r4, #20]
 80151e4:	b2f6      	uxtb	r6, r6
 80151e6:	4283      	cmp	r3, r0
 80151e8:	4637      	mov	r7, r6
 80151ea:	dc04      	bgt.n	80151f6 <__swbuf_r+0x3a>
 80151ec:	4621      	mov	r1, r4
 80151ee:	4628      	mov	r0, r5
 80151f0:	f7ff fa38 	bl	8014664 <_fflush_r>
 80151f4:	b9e0      	cbnz	r0, 8015230 <__swbuf_r+0x74>
 80151f6:	68a3      	ldr	r3, [r4, #8]
 80151f8:	3b01      	subs	r3, #1
 80151fa:	60a3      	str	r3, [r4, #8]
 80151fc:	6823      	ldr	r3, [r4, #0]
 80151fe:	1c5a      	adds	r2, r3, #1
 8015200:	6022      	str	r2, [r4, #0]
 8015202:	701e      	strb	r6, [r3, #0]
 8015204:	6962      	ldr	r2, [r4, #20]
 8015206:	1c43      	adds	r3, r0, #1
 8015208:	429a      	cmp	r2, r3
 801520a:	d004      	beq.n	8015216 <__swbuf_r+0x5a>
 801520c:	89a3      	ldrh	r3, [r4, #12]
 801520e:	07db      	lsls	r3, r3, #31
 8015210:	d506      	bpl.n	8015220 <__swbuf_r+0x64>
 8015212:	2e0a      	cmp	r6, #10
 8015214:	d104      	bne.n	8015220 <__swbuf_r+0x64>
 8015216:	4621      	mov	r1, r4
 8015218:	4628      	mov	r0, r5
 801521a:	f7ff fa23 	bl	8014664 <_fflush_r>
 801521e:	b938      	cbnz	r0, 8015230 <__swbuf_r+0x74>
 8015220:	4638      	mov	r0, r7
 8015222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015224:	4621      	mov	r1, r4
 8015226:	4628      	mov	r0, r5
 8015228:	f000 f806 	bl	8015238 <__swsetup_r>
 801522c:	2800      	cmp	r0, #0
 801522e:	d0d5      	beq.n	80151dc <__swbuf_r+0x20>
 8015230:	f04f 37ff 	mov.w	r7, #4294967295
 8015234:	e7f4      	b.n	8015220 <__swbuf_r+0x64>
	...

08015238 <__swsetup_r>:
 8015238:	b538      	push	{r3, r4, r5, lr}
 801523a:	4b2a      	ldr	r3, [pc, #168]	; (80152e4 <__swsetup_r+0xac>)
 801523c:	4605      	mov	r5, r0
 801523e:	6818      	ldr	r0, [r3, #0]
 8015240:	460c      	mov	r4, r1
 8015242:	b118      	cbz	r0, 801524c <__swsetup_r+0x14>
 8015244:	6a03      	ldr	r3, [r0, #32]
 8015246:	b90b      	cbnz	r3, 801524c <__swsetup_r+0x14>
 8015248:	f7fc fd0e 	bl	8011c68 <__sinit>
 801524c:	89a3      	ldrh	r3, [r4, #12]
 801524e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015252:	0718      	lsls	r0, r3, #28
 8015254:	d422      	bmi.n	801529c <__swsetup_r+0x64>
 8015256:	06d9      	lsls	r1, r3, #27
 8015258:	d407      	bmi.n	801526a <__swsetup_r+0x32>
 801525a:	2309      	movs	r3, #9
 801525c:	602b      	str	r3, [r5, #0]
 801525e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015262:	81a3      	strh	r3, [r4, #12]
 8015264:	f04f 30ff 	mov.w	r0, #4294967295
 8015268:	e034      	b.n	80152d4 <__swsetup_r+0x9c>
 801526a:	0758      	lsls	r0, r3, #29
 801526c:	d512      	bpl.n	8015294 <__swsetup_r+0x5c>
 801526e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015270:	b141      	cbz	r1, 8015284 <__swsetup_r+0x4c>
 8015272:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015276:	4299      	cmp	r1, r3
 8015278:	d002      	beq.n	8015280 <__swsetup_r+0x48>
 801527a:	4628      	mov	r0, r5
 801527c:	f7fd fc14 	bl	8012aa8 <_free_r>
 8015280:	2300      	movs	r3, #0
 8015282:	6363      	str	r3, [r4, #52]	; 0x34
 8015284:	89a3      	ldrh	r3, [r4, #12]
 8015286:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801528a:	81a3      	strh	r3, [r4, #12]
 801528c:	2300      	movs	r3, #0
 801528e:	6063      	str	r3, [r4, #4]
 8015290:	6923      	ldr	r3, [r4, #16]
 8015292:	6023      	str	r3, [r4, #0]
 8015294:	89a3      	ldrh	r3, [r4, #12]
 8015296:	f043 0308 	orr.w	r3, r3, #8
 801529a:	81a3      	strh	r3, [r4, #12]
 801529c:	6923      	ldr	r3, [r4, #16]
 801529e:	b94b      	cbnz	r3, 80152b4 <__swsetup_r+0x7c>
 80152a0:	89a3      	ldrh	r3, [r4, #12]
 80152a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80152a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80152aa:	d003      	beq.n	80152b4 <__swsetup_r+0x7c>
 80152ac:	4621      	mov	r1, r4
 80152ae:	4628      	mov	r0, r5
 80152b0:	f000 f884 	bl	80153bc <__smakebuf_r>
 80152b4:	89a0      	ldrh	r0, [r4, #12]
 80152b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80152ba:	f010 0301 	ands.w	r3, r0, #1
 80152be:	d00a      	beq.n	80152d6 <__swsetup_r+0x9e>
 80152c0:	2300      	movs	r3, #0
 80152c2:	60a3      	str	r3, [r4, #8]
 80152c4:	6963      	ldr	r3, [r4, #20]
 80152c6:	425b      	negs	r3, r3
 80152c8:	61a3      	str	r3, [r4, #24]
 80152ca:	6923      	ldr	r3, [r4, #16]
 80152cc:	b943      	cbnz	r3, 80152e0 <__swsetup_r+0xa8>
 80152ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80152d2:	d1c4      	bne.n	801525e <__swsetup_r+0x26>
 80152d4:	bd38      	pop	{r3, r4, r5, pc}
 80152d6:	0781      	lsls	r1, r0, #30
 80152d8:	bf58      	it	pl
 80152da:	6963      	ldrpl	r3, [r4, #20]
 80152dc:	60a3      	str	r3, [r4, #8]
 80152de:	e7f4      	b.n	80152ca <__swsetup_r+0x92>
 80152e0:	2000      	movs	r0, #0
 80152e2:	e7f7      	b.n	80152d4 <__swsetup_r+0x9c>
 80152e4:	24000068 	.word	0x24000068

080152e8 <_raise_r>:
 80152e8:	291f      	cmp	r1, #31
 80152ea:	b538      	push	{r3, r4, r5, lr}
 80152ec:	4604      	mov	r4, r0
 80152ee:	460d      	mov	r5, r1
 80152f0:	d904      	bls.n	80152fc <_raise_r+0x14>
 80152f2:	2316      	movs	r3, #22
 80152f4:	6003      	str	r3, [r0, #0]
 80152f6:	f04f 30ff 	mov.w	r0, #4294967295
 80152fa:	bd38      	pop	{r3, r4, r5, pc}
 80152fc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80152fe:	b112      	cbz	r2, 8015306 <_raise_r+0x1e>
 8015300:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015304:	b94b      	cbnz	r3, 801531a <_raise_r+0x32>
 8015306:	4620      	mov	r0, r4
 8015308:	f000 f830 	bl	801536c <_getpid_r>
 801530c:	462a      	mov	r2, r5
 801530e:	4601      	mov	r1, r0
 8015310:	4620      	mov	r0, r4
 8015312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015316:	f000 b817 	b.w	8015348 <_kill_r>
 801531a:	2b01      	cmp	r3, #1
 801531c:	d00a      	beq.n	8015334 <_raise_r+0x4c>
 801531e:	1c59      	adds	r1, r3, #1
 8015320:	d103      	bne.n	801532a <_raise_r+0x42>
 8015322:	2316      	movs	r3, #22
 8015324:	6003      	str	r3, [r0, #0]
 8015326:	2001      	movs	r0, #1
 8015328:	e7e7      	b.n	80152fa <_raise_r+0x12>
 801532a:	2400      	movs	r4, #0
 801532c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015330:	4628      	mov	r0, r5
 8015332:	4798      	blx	r3
 8015334:	2000      	movs	r0, #0
 8015336:	e7e0      	b.n	80152fa <_raise_r+0x12>

08015338 <raise>:
 8015338:	4b02      	ldr	r3, [pc, #8]	; (8015344 <raise+0xc>)
 801533a:	4601      	mov	r1, r0
 801533c:	6818      	ldr	r0, [r3, #0]
 801533e:	f7ff bfd3 	b.w	80152e8 <_raise_r>
 8015342:	bf00      	nop
 8015344:	24000068 	.word	0x24000068

08015348 <_kill_r>:
 8015348:	b538      	push	{r3, r4, r5, lr}
 801534a:	4d07      	ldr	r5, [pc, #28]	; (8015368 <_kill_r+0x20>)
 801534c:	2300      	movs	r3, #0
 801534e:	4604      	mov	r4, r0
 8015350:	4608      	mov	r0, r1
 8015352:	4611      	mov	r1, r2
 8015354:	602b      	str	r3, [r5, #0]
 8015356:	f7ee f95d 	bl	8003614 <_kill>
 801535a:	1c43      	adds	r3, r0, #1
 801535c:	d102      	bne.n	8015364 <_kill_r+0x1c>
 801535e:	682b      	ldr	r3, [r5, #0]
 8015360:	b103      	cbz	r3, 8015364 <_kill_r+0x1c>
 8015362:	6023      	str	r3, [r4, #0]
 8015364:	bd38      	pop	{r3, r4, r5, pc}
 8015366:	bf00      	nop
 8015368:	24000f3c 	.word	0x24000f3c

0801536c <_getpid_r>:
 801536c:	f7ee b94a 	b.w	8003604 <_getpid>

08015370 <__swhatbuf_r>:
 8015370:	b570      	push	{r4, r5, r6, lr}
 8015372:	460c      	mov	r4, r1
 8015374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015378:	2900      	cmp	r1, #0
 801537a:	b096      	sub	sp, #88	; 0x58
 801537c:	4615      	mov	r5, r2
 801537e:	461e      	mov	r6, r3
 8015380:	da0d      	bge.n	801539e <__swhatbuf_r+0x2e>
 8015382:	89a3      	ldrh	r3, [r4, #12]
 8015384:	f013 0f80 	tst.w	r3, #128	; 0x80
 8015388:	f04f 0100 	mov.w	r1, #0
 801538c:	bf0c      	ite	eq
 801538e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8015392:	2340      	movne	r3, #64	; 0x40
 8015394:	2000      	movs	r0, #0
 8015396:	6031      	str	r1, [r6, #0]
 8015398:	602b      	str	r3, [r5, #0]
 801539a:	b016      	add	sp, #88	; 0x58
 801539c:	bd70      	pop	{r4, r5, r6, pc}
 801539e:	466a      	mov	r2, sp
 80153a0:	f000 f848 	bl	8015434 <_fstat_r>
 80153a4:	2800      	cmp	r0, #0
 80153a6:	dbec      	blt.n	8015382 <__swhatbuf_r+0x12>
 80153a8:	9901      	ldr	r1, [sp, #4]
 80153aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80153ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80153b2:	4259      	negs	r1, r3
 80153b4:	4159      	adcs	r1, r3
 80153b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80153ba:	e7eb      	b.n	8015394 <__swhatbuf_r+0x24>

080153bc <__smakebuf_r>:
 80153bc:	898b      	ldrh	r3, [r1, #12]
 80153be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80153c0:	079d      	lsls	r5, r3, #30
 80153c2:	4606      	mov	r6, r0
 80153c4:	460c      	mov	r4, r1
 80153c6:	d507      	bpl.n	80153d8 <__smakebuf_r+0x1c>
 80153c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80153cc:	6023      	str	r3, [r4, #0]
 80153ce:	6123      	str	r3, [r4, #16]
 80153d0:	2301      	movs	r3, #1
 80153d2:	6163      	str	r3, [r4, #20]
 80153d4:	b002      	add	sp, #8
 80153d6:	bd70      	pop	{r4, r5, r6, pc}
 80153d8:	ab01      	add	r3, sp, #4
 80153da:	466a      	mov	r2, sp
 80153dc:	f7ff ffc8 	bl	8015370 <__swhatbuf_r>
 80153e0:	9900      	ldr	r1, [sp, #0]
 80153e2:	4605      	mov	r5, r0
 80153e4:	4630      	mov	r0, r6
 80153e6:	f7fd fbd3 	bl	8012b90 <_malloc_r>
 80153ea:	b948      	cbnz	r0, 8015400 <__smakebuf_r+0x44>
 80153ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80153f0:	059a      	lsls	r2, r3, #22
 80153f2:	d4ef      	bmi.n	80153d4 <__smakebuf_r+0x18>
 80153f4:	f023 0303 	bic.w	r3, r3, #3
 80153f8:	f043 0302 	orr.w	r3, r3, #2
 80153fc:	81a3      	strh	r3, [r4, #12]
 80153fe:	e7e3      	b.n	80153c8 <__smakebuf_r+0xc>
 8015400:	89a3      	ldrh	r3, [r4, #12]
 8015402:	6020      	str	r0, [r4, #0]
 8015404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015408:	81a3      	strh	r3, [r4, #12]
 801540a:	9b00      	ldr	r3, [sp, #0]
 801540c:	6163      	str	r3, [r4, #20]
 801540e:	9b01      	ldr	r3, [sp, #4]
 8015410:	6120      	str	r0, [r4, #16]
 8015412:	b15b      	cbz	r3, 801542c <__smakebuf_r+0x70>
 8015414:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015418:	4630      	mov	r0, r6
 801541a:	f000 f81d 	bl	8015458 <_isatty_r>
 801541e:	b128      	cbz	r0, 801542c <__smakebuf_r+0x70>
 8015420:	89a3      	ldrh	r3, [r4, #12]
 8015422:	f023 0303 	bic.w	r3, r3, #3
 8015426:	f043 0301 	orr.w	r3, r3, #1
 801542a:	81a3      	strh	r3, [r4, #12]
 801542c:	89a3      	ldrh	r3, [r4, #12]
 801542e:	431d      	orrs	r5, r3
 8015430:	81a5      	strh	r5, [r4, #12]
 8015432:	e7cf      	b.n	80153d4 <__smakebuf_r+0x18>

08015434 <_fstat_r>:
 8015434:	b538      	push	{r3, r4, r5, lr}
 8015436:	4d07      	ldr	r5, [pc, #28]	; (8015454 <_fstat_r+0x20>)
 8015438:	2300      	movs	r3, #0
 801543a:	4604      	mov	r4, r0
 801543c:	4608      	mov	r0, r1
 801543e:	4611      	mov	r1, r2
 8015440:	602b      	str	r3, [r5, #0]
 8015442:	f7ee f946 	bl	80036d2 <_fstat>
 8015446:	1c43      	adds	r3, r0, #1
 8015448:	d102      	bne.n	8015450 <_fstat_r+0x1c>
 801544a:	682b      	ldr	r3, [r5, #0]
 801544c:	b103      	cbz	r3, 8015450 <_fstat_r+0x1c>
 801544e:	6023      	str	r3, [r4, #0]
 8015450:	bd38      	pop	{r3, r4, r5, pc}
 8015452:	bf00      	nop
 8015454:	24000f3c 	.word	0x24000f3c

08015458 <_isatty_r>:
 8015458:	b538      	push	{r3, r4, r5, lr}
 801545a:	4d06      	ldr	r5, [pc, #24]	; (8015474 <_isatty_r+0x1c>)
 801545c:	2300      	movs	r3, #0
 801545e:	4604      	mov	r4, r0
 8015460:	4608      	mov	r0, r1
 8015462:	602b      	str	r3, [r5, #0]
 8015464:	f7ee f945 	bl	80036f2 <_isatty>
 8015468:	1c43      	adds	r3, r0, #1
 801546a:	d102      	bne.n	8015472 <_isatty_r+0x1a>
 801546c:	682b      	ldr	r3, [r5, #0]
 801546e:	b103      	cbz	r3, 8015472 <_isatty_r+0x1a>
 8015470:	6023      	str	r3, [r4, #0]
 8015472:	bd38      	pop	{r3, r4, r5, pc}
 8015474:	24000f3c 	.word	0x24000f3c

08015478 <fmodf>:
 8015478:	b508      	push	{r3, lr}
 801547a:	ed2d 8b02 	vpush	{d8}
 801547e:	eef0 8a40 	vmov.f32	s17, s0
 8015482:	eeb0 8a60 	vmov.f32	s16, s1
 8015486:	f000 f817 	bl	80154b8 <__ieee754_fmodf>
 801548a:	eef4 8a48 	vcmp.f32	s17, s16
 801548e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015492:	d60c      	bvs.n	80154ae <fmodf+0x36>
 8015494:	eddf 8a07 	vldr	s17, [pc, #28]	; 80154b4 <fmodf+0x3c>
 8015498:	eeb4 8a68 	vcmp.f32	s16, s17
 801549c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154a0:	d105      	bne.n	80154ae <fmodf+0x36>
 80154a2:	f7fc fccd 	bl	8011e40 <__errno>
 80154a6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80154aa:	2321      	movs	r3, #33	; 0x21
 80154ac:	6003      	str	r3, [r0, #0]
 80154ae:	ecbd 8b02 	vpop	{d8}
 80154b2:	bd08      	pop	{r3, pc}
 80154b4:	00000000 	.word	0x00000000

080154b8 <__ieee754_fmodf>:
 80154b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80154ba:	ee10 4a90 	vmov	r4, s1
 80154be:	f034 4000 	bics.w	r0, r4, #2147483648	; 0x80000000
 80154c2:	d009      	beq.n	80154d8 <__ieee754_fmodf+0x20>
 80154c4:	ee10 3a10 	vmov	r3, s0
 80154c8:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 80154cc:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80154d0:	da02      	bge.n	80154d8 <__ieee754_fmodf+0x20>
 80154d2:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80154d6:	dd04      	ble.n	80154e2 <__ieee754_fmodf+0x2a>
 80154d8:	ee60 0a20 	vmul.f32	s1, s0, s1
 80154dc:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80154e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154e2:	4286      	cmp	r6, r0
 80154e4:	dbfc      	blt.n	80154e0 <__ieee754_fmodf+0x28>
 80154e6:	f003 4500 	and.w	r5, r3, #2147483648	; 0x80000000
 80154ea:	d105      	bne.n	80154f8 <__ieee754_fmodf+0x40>
 80154ec:	4b32      	ldr	r3, [pc, #200]	; (80155b8 <__ieee754_fmodf+0x100>)
 80154ee:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 80154f2:	ed93 0a00 	vldr	s0, [r3]
 80154f6:	e7f3      	b.n	80154e0 <__ieee754_fmodf+0x28>
 80154f8:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80154fc:	d140      	bne.n	8015580 <__ieee754_fmodf+0xc8>
 80154fe:	0232      	lsls	r2, r6, #8
 8015500:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8015504:	2a00      	cmp	r2, #0
 8015506:	dc38      	bgt.n	801557a <__ieee754_fmodf+0xc2>
 8015508:	f014 4fff 	tst.w	r4, #2139095040	; 0x7f800000
 801550c:	d13e      	bne.n	801558c <__ieee754_fmodf+0xd4>
 801550e:	0207      	lsls	r7, r0, #8
 8015510:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8015514:	2f00      	cmp	r7, #0
 8015516:	da36      	bge.n	8015586 <__ieee754_fmodf+0xce>
 8015518:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 801551c:	bfb9      	ittee	lt
 801551e:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8015522:	1a5b      	sublt	r3, r3, r1
 8015524:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 8015528:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 801552c:	bfb8      	it	lt
 801552e:	fa06 f303 	lsllt.w	r3, r6, r3
 8015532:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8015536:	bfb5      	itete	lt
 8015538:	f06f 047d 	mvnlt.w	r4, #125	; 0x7d
 801553c:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 8015540:	1aa4      	sublt	r4, r4, r2
 8015542:	f444 0000 	orrge.w	r0, r4, #8388608	; 0x800000
 8015546:	bfb8      	it	lt
 8015548:	40a0      	lsllt	r0, r4
 801554a:	1a89      	subs	r1, r1, r2
 801554c:	1a1c      	subs	r4, r3, r0
 801554e:	bb01      	cbnz	r1, 8015592 <__ieee754_fmodf+0xda>
 8015550:	ea13 0324 	ands.w	r3, r3, r4, asr #32
 8015554:	bf38      	it	cc
 8015556:	4623      	movcc	r3, r4
 8015558:	2b00      	cmp	r3, #0
 801555a:	d0c7      	beq.n	80154ec <__ieee754_fmodf+0x34>
 801555c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8015560:	db1f      	blt.n	80155a2 <__ieee754_fmodf+0xea>
 8015562:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8015566:	db1f      	blt.n	80155a8 <__ieee754_fmodf+0xf0>
 8015568:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 801556c:	327f      	adds	r2, #127	; 0x7f
 801556e:	432b      	orrs	r3, r5
 8015570:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8015574:	ee00 3a10 	vmov	s0, r3
 8015578:	e7b2      	b.n	80154e0 <__ieee754_fmodf+0x28>
 801557a:	3901      	subs	r1, #1
 801557c:	0052      	lsls	r2, r2, #1
 801557e:	e7c1      	b.n	8015504 <__ieee754_fmodf+0x4c>
 8015580:	15f1      	asrs	r1, r6, #23
 8015582:	397f      	subs	r1, #127	; 0x7f
 8015584:	e7c0      	b.n	8015508 <__ieee754_fmodf+0x50>
 8015586:	3a01      	subs	r2, #1
 8015588:	007f      	lsls	r7, r7, #1
 801558a:	e7c3      	b.n	8015514 <__ieee754_fmodf+0x5c>
 801558c:	15c2      	asrs	r2, r0, #23
 801558e:	3a7f      	subs	r2, #127	; 0x7f
 8015590:	e7c2      	b.n	8015518 <__ieee754_fmodf+0x60>
 8015592:	2c00      	cmp	r4, #0
 8015594:	da02      	bge.n	801559c <__ieee754_fmodf+0xe4>
 8015596:	005b      	lsls	r3, r3, #1
 8015598:	3901      	subs	r1, #1
 801559a:	e7d7      	b.n	801554c <__ieee754_fmodf+0x94>
 801559c:	d0a6      	beq.n	80154ec <__ieee754_fmodf+0x34>
 801559e:	0063      	lsls	r3, r4, #1
 80155a0:	e7fa      	b.n	8015598 <__ieee754_fmodf+0xe0>
 80155a2:	005b      	lsls	r3, r3, #1
 80155a4:	3a01      	subs	r2, #1
 80155a6:	e7d9      	b.n	801555c <__ieee754_fmodf+0xa4>
 80155a8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80155ac:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80155b0:	3282      	adds	r2, #130	; 0x82
 80155b2:	4113      	asrs	r3, r2
 80155b4:	432b      	orrs	r3, r5
 80155b6:	e7dd      	b.n	8015574 <__ieee754_fmodf+0xbc>
 80155b8:	08015b40 	.word	0x08015b40

080155bc <_init>:
 80155bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155be:	bf00      	nop
 80155c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80155c2:	bc08      	pop	{r3}
 80155c4:	469e      	mov	lr, r3
 80155c6:	4770      	bx	lr

080155c8 <_fini>:
 80155c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155ca:	bf00      	nop
 80155cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80155ce:	bc08      	pop	{r3}
 80155d0:	469e      	mov	lr, r3
 80155d2:	4770      	bx	lr
